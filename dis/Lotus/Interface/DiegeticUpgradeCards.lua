; This file has been disassembled using luadec 2.0.2 by sztupy (modified by Reversive)

; Name:            
; Defined at line: 0
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       2
; Max Stack Size:  122

  1 [-]: LOADKB    R1 0 0       ; R1 := false
  2 [-]: LOADNIL   R2 R2        ; R2 := nil
  3 [-]: GETGLOBAL R3 K0        ; R3 := 0x2d0fad09
  4 [-]: LOADK     R4 K1        ; R4 := "EE.Interface.Utilities"
  5 [-]: CALL      R3 2 2       ; R3 := R3(R4)
  6 [-]: GETGLOBAL R4 K0        ; R4 := 0x2d0fad09
  7 [-]: LOADK     R5 K2        ; R5 := "Lotus.Interface.UIUtilities"
  8 [-]: CALL      R4 2 2       ; R4 := R4(R5)
  9 [-]: GETGLOBAL R5 K0        ; R5 := 0x2d0fad09
 10 [-]: LOADK     R6 K3        ; R6 := "Lotus.Interface.LotusUtilities"
 11 [-]: CALL      R5 2 2       ; R5 := R5(R6)
 12 [-]: GETGLOBAL R6 K0        ; R6 := 0x2d0fad09
 13 [-]: LOADK     R7 K4        ; R7 := "Lotus.Interface.CardUtilitiesRedux"
 14 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 15 [-]: GETGLOBAL R7 K0        ; R7 := 0x2d0fad09
 16 [-]: LOADK     R8 K5        ; R8 := "Lotus.Interface.StoreItemUtilities"
 17 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 18 [-]: GETGLOBAL R8 K0        ; R8 := 0x2d0fad09
 19 [-]: LOADK     R9 K6        ; R9 := "Lotus.Interface.LoadoutUtilities"
 20 [-]: CALL      R8 2 2       ; R8 := R8(R9)
 21 [-]: GETGLOBAL R9 K0        ; R9 := 0x2d0fad09
 22 [-]: LOADK     R10 K7       ; R10 := "Lotus.Interface.UIStyleUtilities"
 23 [-]: CALL      R9 2 2       ; R9 := R9(R10)
 24 [-]: GETGLOBAL R10 K0       ; R10 := 0x2d0fad09
 25 [-]: LOADK     R11 K8       ; R11 := "Lotus.Scripts.Libs.RailjackUtilities"
 26 [-]: CALL      R10 2 2      ; R10 := R10(R11)
 27 [-]: GETGLOBAL R11 K9       ; R11 := 0xb009bbc6
 28 [-]: LOADK     R12 K10      ; R12 := "/Lotus/Types/Game/Store/ProductsManifest"
 29 [-]: CALL      R11 2 2      ; R11 := R11(R12)
 30 [-]: LOADNIL   R12 R12      ; R12 := nil
 31 [-]: SETGLOBAL R12 K11      ; mGameData := R12
 32 [-]: LOADKB    R12 0 0      ; R12 := false
 33 [-]: SETGLOBAL R12 K12      ; mWeGame := R12
 34 [-]: LOADNIL   R12 R12      ; R12 := nil
 35 [-]: SETGLOBAL R12 K13      ; mTimerMgr := R12
 36 [-]: LOADNIL   R12 R12      ; R12 := nil
 37 [-]: SETGLOBAL R12 K14      ; mInstalledGrid := R12
 38 [-]: LOADKB    R12 0 0      ; R12 := false
 39 [-]: SETGLOBAL R12 K15      ; mInputBlocked := R12
 40 [-]: CONST     R12 5        ; R12 := 5.000000
 41 [-]: SETGLOBAL R12 K16      ; columns := R12
 42 [-]: CONST     R12 2        ; R12 := 2.000000
 43 [-]: SETGLOBAL R12 K17      ; rows := R12
 44 [-]: LOADKB    R12 0 0      ; R12 := false
 45 [-]: SETGLOBAL R12 K18      ; mDoingSwapOnly := R12
 46 [-]: LOADNIL   R12 R12      ; R12 := nil
 47 [-]: SETGLOBAL R12 K19      ; mAnchorMgr := R12
 48 [-]: GETGLOBAL R12 K21      ; R12 := 0x0469f296
 49 [-]: LOADK     R13 K22      ; R13 := "ArchwingTeleportPos"
 50 [-]: CALL      R12 2 2      ; R12 := R12(R13)
 51 [-]: SETGLOBAL R12 K20      ; ARCHWING_WAYPOINT_TAG := R12
 52 [-]: CONST     R12 180      ; R12 := 180.000000
 53 [-]: SETGLOBAL R12 K23      ; ARCHWING_DEFAULT_ROTATION := R12
 54 [-]: LOADNIL   R12 R12      ; R12 := nil
 55 [-]: SETGLOBAL R12 K24      ; mMeleeCombosBtn := R12
 56 [-]: LOADK     R12 K26      ; R12 := "Arsenal"
 57 [-]: SETGLOBAL R12 K25      ; mArsenalConsoleTag := R12
 58 [-]: LOADKB    R12 0 0      ; R12 := false
 59 [-]: SETGLOBAL R12 K27      ; playBigHit := R12
 60 [-]: LOADNIL   R12 R14      ; R12 := R13 := R14 := nil
 61 [-]: SETGLOBAL R14 K28      ; mModsAdded := R14
 62 [-]: LOADNIL   R14 R14      ; R14 := nil
 63 [-]: SETGLOBAL R14 K29      ; mModsRemoved := R14
 64 [-]: LOADNIL   R14 R14      ; R14 := nil
 65 [-]: SETGLOBAL R14 K30      ; mCollectionGrid := R14
 66 [-]: LOADNIL   R14 R14      ; R14 := nil
 67 [-]: SETGLOBAL R14 K31      ; mMouseDrag := R14
 68 [-]: LOADNIL   R14 R14      ; R14 := nil
 69 [-]: SETGLOBAL R14 K32      ; mPlayerProfile := R14
 70 [-]: LOADNIL   R14 R14      ; R14 := nil
 71 [-]: SETGLOBAL R14 K33      ; mChosenForma := R14
 72 [-]: LOADNIL   R14 R14      ; R14 := nil
 73 [-]: SETGLOBAL R14 K34      ; mPendingUpgradeOperation := R14
 74 [-]: LOADNIL   R14 R14      ; R14 := nil
 75 [-]: SETGLOBAL R14 K35      ; mWarningFlash := R14
 76 [-]: LOADKB    R14 0 0      ; R14 := false
 77 [-]: SETGLOBAL R14 K36      ; mHidingRJMovie := R14
 78 [-]: LOADNIL   R14 R14      ; R14 := nil
 79 [-]: SETGLOBAL R14 K37      ; mPendingInstallElementId := R14
 80 [-]: LOADNIL   R14 R14      ; R14 := nil
 81 [-]: SETGLOBAL R14 K38      ; mPendingInstallUpgradeType := R14
 82 [-]: CONST     R14 8        ; R14 := 8.000000
 83 [-]: SETGLOBAL R14 K39      ; mCardSlots := R14
 84 [-]: NEWTABLE  R14 0 0      ; R14 := {}
 85 [-]: SETGLOBAL R14 K40      ; mArtifactSlots := R14
 86 [-]: CONST     R14 30       ; R14 := 30.000000
 87 [-]: SETGLOBAL R14 K41      ; mEnergyTotal := R14
 88 [-]: CONST     R14 0        ; R14 := 0.000000
 89 [-]: SETGLOBAL R14 K42      ; mEnergyUsed := R14
 90 [-]: CONST     R14 0        ; R14 := 0.000000
 91 [-]: SETGLOBAL R14 K43      ; mItemLevel := R14
 92 [-]: CONST     R14 30       ; R14 := 30.000000
 93 [-]: SETGLOBAL R14 K44      ; mMaxItemLevel := R14
 94 [-]: LOADKB    R14 0 0      ; R14 := false
 95 [-]: SETGLOBAL R14 K45      ; mItemExpires := R14
 96 [-]: CONST     R14 0        ; R14 := 0.000000
 97 [-]: SETGLOBAL R14 K46      ; mPolarizedCount := R14
 98 [-]: NEWTABLE  R14 0 0      ; R14 := {}
 99 [-]: SETGLOBAL R14 K47      ; mCards := R14
100 [-]: NEWTABLE  R14 0 0      ; R14 := {}
101 [-]: SETGLOBAL R14 K48      ; mIdToCard := R14
102 [-]: NEWTABLE  R14 0 0      ; R14 := {}
103 [-]: SETGLOBAL R14 K49      ; mTypeToCard := R14
104 [-]: LOADNIL   R14 R14      ; R14 := nil
105 [-]: SETGLOBAL R14 K50      ; mCardLoader := R14
106 [-]: LOADKB    R14 0 0      ; R14 := false
107 [-]: SETGLOBAL R14 K51      ; mShouldClose := R14
108 [-]: LOADKB    R14 0 0      ; R14 := false
109 [-]: SETGLOBAL R14 K52      ; mChanged := R14
110 [-]: LOADNIL   R14 R14      ; R14 := nil
111 [-]: SETGLOBAL R14 K53      ; mStats := R14
112 [-]: LOADNIL   R14 R14      ; R14 := nil
113 [-]: SETGLOBAL R14 K54      ; mOriginalInstalledInitialX := R14
114 [-]: LOADNIL   R14 R14      ; R14 := nil
115 [-]: SETGLOBAL R14 K55      ; mOriginalInstalledInitialY := R14
116 [-]: CONST     R14 0        ; R14 := 0.000000
117 [-]: SETGLOBAL R14 K56      ; mMiddleMenuY := R14
118 [-]: CONST     R14 0        ; R14 := 0.000000
119 [-]: SETGLOBAL R14 K57      ; mTopMenuYOffset := R14
120 [-]: LOADNIL   R14 R14      ; R14 := nil
121 [-]: SETGLOBAL R14 K58      ; mChildMovie := R14
122 [-]: LOADNIL   R14 R14      ; R14 := nil
123 [-]: SETGLOBAL R14 K59      ; mLastCollectionCardFocused := R14
124 [-]: LOADNIL   R14 R14      ; R14 := nil
125 [-]: SETGLOBAL R14 K60      ; mLastInstalledSlotFocused := R14
126 [-]: NEWTABLE  R14 0 3      ; R14 := {}
127 [-]: SETTABLE  R14 K62 K63  ; R14["SELECTING_SLOT"] := 1.000000
128 [-]: SETTABLE  R14 K64 K65  ; R14["SELECTING_CARD"] := 2.000000
129 [-]: SETTABLE  R14 K66 K67  ; R14["SELECTING_ARCANE"] := 3.000000
130 [-]: SETGLOBAL R14 K61      ; ScreenState := R14
131 [-]: LOADNIL   R14 R14      ; R14 := nil
132 [-]: SETGLOBAL R14 K68      ; mCurrentState := R14
133 [-]: LOADNIL   R14 R14      ; R14 := nil
134 [-]: SETGLOBAL R14 K69      ; mHandleCanBeClosedCallback := R14
135 [-]: CONST     R14 8        ; R14 := 8.000000
136 [-]: SETGLOBAL R14 K70      ; NUM_NORMAL_SLOTS := R14
137 [-]: GETGLOBAL R14 K70      ; R14 := NUM_NORMAL_SLOTS
138 [-]: ADD       R14 R14 K63  ; R14 := R14 + 1.000000
139 [-]: SETGLOBAL R14 K71      ; MELEE_STANCE_SLOT := R14
140 [-]: GETGLOBAL R14 K70      ; R14 := NUM_NORMAL_SLOTS
141 [-]: ADD       R14 R14 K63  ; R14 := R14 + 1.000000
142 [-]: SETGLOBAL R14 K72      ; AURA_SLOT_INDEX := R14
143 [-]: GETGLOBAL R14 K72      ; R14 := AURA_SLOT_INDEX
144 [-]: ADD       R14 R14 K63  ; R14 := R14 + 1.000000
145 [-]: SETGLOBAL R14 K73      ; UTILITY_SLOT_INDEX := R14
146 [-]: CONST     R14 4        ; R14 := 4.000000
147 [-]: SETGLOBAL R14 K74      ; IMMORTAL_SLOT_INDEX := R14
148 [-]: NEWTABLE  R14 0 6      ; R14 := {}
149 [-]: SETTABLE  R14 K76 K63  ; R14["BATTLE_DEF"] := 1.000000
150 [-]: SETTABLE  R14 K77 K65  ; R14["BATTLE_OFF"] := 2.000000
151 [-]: SETTABLE  R14 K78 K67  ; R14["BATTLE_SUPER"] := 3.000000
152 [-]: SETTABLE  R14 K79 K80  ; R14["TAC_DEF"] := 4.000000
153 [-]: SETTABLE  R14 K81 K82  ; R14["TAC_OFF"] := 5.000000
154 [-]: SETTABLE  R14 K83 K84  ; R14["TAC_SUPER"] := 6.000000
155 [-]: SETGLOBAL R14 K75      ; RAILJACK_SLOTS := R14
156 [-]: LOADNIL   R14 R14      ; R14 := nil
157 [-]: SETGLOBAL R14 K85      ; mIsDiegetic := R14
158 [-]: LOADNIL   R14 R14      ; R14 := nil
159 [-]: SETGLOBAL R14 K86      ; mDiegeticHelper := R14
160 [-]: LOADNIL   R14 R14      ; R14 := nil
161 [-]: SETGLOBAL R14 K87      ; mConfigMenu := R14
162 [-]: LOADK     R14 K89      ; R14 := ""
163 [-]: SETGLOBAL R14 K88      ; mArsenalDeviceTag := R14
164 [-]: LOADNIL   R14 R14      ; R14 := nil
165 [-]: SETGLOBAL R14 K90      ; mCameraSpot := R14
166 [-]: LOADNIL   R14 R14      ; R14 := nil
167 [-]: SETGLOBAL R14 K91      ; mOldCameraSpot := R14
168 [-]: LOADKB    R14 0 0      ; R14 := false
169 [-]: SETGLOBAL R14 K92      ; mIsHeavyWeapon := R14
170 [-]: LOADKB    R14 0 0      ; R14 := false
171 [-]: SETGLOBAL R14 K93      ; mExitingToModScreen := R14
172 [-]: NEWTABLE  R14 0 0      ; R14 := {}
173 [-]: SETGLOBAL R14 K94      ; mActiveFx := R14
174 [-]: NEWTABLE  R14 0 0      ; R14 := {}
175 [-]: SETGLOBAL R14 K95      ; mFillerCategories := R14
176 [-]: LOADNIL   R14 R14      ; R14 := nil
177 [-]: SETGLOBAL R14 K96      ; mSearchBox := R14
178 [-]: CONST     R14 0        ; R14 := 0.000000
179 [-]: SETGLOBAL R14 K97      ; mOmegaCount := R14
180 [-]: NEWTABLE  R14 0 2      ; R14 := {}
181 [-]: NEWTABLE  R15 0 0      ; R15 := {}
182 [-]: SETTABLE  R14 K99 R15  ; R14["mNormal"] := R15
183 [-]: NEWTABLE  R15 0 0      ; R15 := {}
184 [-]: SETTABLE  R14 K100 R15 ; R14["mPvp"] := R15
185 [-]: SETGLOBAL R14 K98      ; mAttachedUpgrades := R14
186 [-]: NEWTABLE  R14 0 0      ; R14 := {}
187 [-]: SETGLOBAL R14 K101     ; mSuitAbilities := R14
188 [-]: LOADNIL   R14 R14      ; R14 := nil
189 [-]: SETGLOBAL R14 K102     ; mAvionicCategories := R14
190 [-]: LOADNIL   R14 R14      ; R14 := nil
191 [-]: SETGLOBAL R14 K103     ; mRailjackMovie := R14
192 [-]: LOADKB    R14 1 0      ; R14 := true
193 [-]: SETGLOBAL R14 K104     ; mRailjackNavOnClose := R14
194 [-]: LOADKB    R14 0 0      ; R14 := false
195 [-]: SETGLOBAL R14 K105     ; mSquadTitleSet := R14
196 [-]: LOADKB    R14 1 0      ; R14 := true
197 [-]: SETGLOBAL R14 K106     ; mPreallocatingUpgrades := R14
198 [-]: LOADKB    R14 0 0      ; R14 := false
199 [-]: SETGLOBAL R14 K107     ; mShuttingDown := R14
200 [-]: LOADKB    R14 0 0      ; R14 := false
201 [-]: SETGLOBAL R14 K108     ; mSetPauseDisabled := R14
202 [-]: LOADKB    R14 0 0      ; R14 := false
203 [-]: SETGLOBAL R14 K109     ; mCachedSentinelMode := R14
204 [-]: LOADKB    R14 0 0      ; R14 := false
205 [-]: SETGLOBAL R14 K110     ; mCachedSpecialSuitMode := R14
206 [-]: LOADNIL   R14 R14      ; R14 := nil
207 [-]: SETGLOBAL R14 K111     ; mLvlUpgradeList := R14
208 [-]: NEWTABLE  R14 0 8      ; R14 := {}
209 [-]: SETTABLE  R14 K113 K114; R14["Slots"] := 0.000000
210 [-]: NEWTABLE  R15 0 0      ; R15 := {}
211 [-]: SETTABLE  R14 K115 R15 ; R14["Arcanes"] := R15
212 [-]: SETTABLE  R14 K116 K117; R14["HasArcaneHelmet"] := false
213 [-]: SETTABLE  R14 K118 K119; R14["FocusedSlot"] := nil
214 [-]: SETTABLE  R14 K120 K119; R14["SelectedSlot"] := nil
215 [-]: SETTABLE  R14 K121 K117; R14["HasGildArcaneSlot"] := false
216 [-]: SETTABLE  R14 K122 K117; R14["HasApertureArcaneSlot"] := false
217 [-]: SETTABLE  R14 K123 K114; R14["HiddenSlot"] := 0.000000
218 [-]: SETGLOBAL R14 K112     ; mArcaneInfo := R14
219 [-]: LOADKB    R14 0 0      ; R14 := false
220 [-]: SETGLOBAL R14 K124     ; mSavedDrawOnTopState := R14
221 [-]: LOADNIL   R14 R14      ; R14 := nil
222 [-]: SETGLOBAL R14 K125     ; mChosenFuseWeapon := R14
223 [-]: NEWTABLE  R14 0 0      ; R14 := {}
224 [-]: SETGLOBAL R14 K126     ; mColors := R14
225 [-]: CONST     R14 0        ; R14 := 0.000000
226 [-]: SETGLOBAL R14 K127     ; mUpdateStatFailType := R14
227 [-]: LOADNIL   R14 R24      ; R14 := R15 := R16 := R17 := R18 := R19 := R20 := R21 := R22 := R23 := R24 := nil
228 [-]: NEWTABLE  R25 0 0      ; R25 := {}
229 [-]: LOADNIL   R26 R27      ; R26 := R27 := nil
230 [-]: GETGLOBAL R28 K128     ; R28 := 0x7ed0a956
231 [-]: LOADK     R29 K129     ; R29 := "/Lotus/Types/Game/BaseCosmeticEnhancer"
232 [-]: CALL      R28 2 2      ; R28 := R28(R29)
233 [-]: CLOSURE   R29 0        ; R29 := closure(Function #1)
234 [-]: SETGLOBAL R29 K130     ; IsInputBlocked := R29
235 [-]: CLOSURE   R29 1        ; R29 := closure(Function #2)
236 [-]: SETGLOBAL R29 K131     ; GetCards := R29
237 [-]: CLOSURE   R29 2        ; R29 := closure(Function #3)
238 [-]: SETGLOBAL R29 K132     ; GetSelectedCards := R29
239 [-]: CLOSURE   R29 3        ; R29 := closure(Function #4)
240 [-]: SETGLOBAL R29 K133     ; GetSelectedElement := R29
241 [-]: CLOSURE   R29 4        ; R29 := closure(Function #5)
242 [-]: SETGLOBAL R29 K134     ; ShouldShowOmegaAttenStat := R29
243 [-]: CLOSURE   R29 5        ; R29 := closure(Function #6)
244 [-]: CLOSURE   R30 6        ; R30 := closure(Function #7)
245 [-]: CLOSURE   R31 7        ; R31 := closure(Function #8)
246 [-]: MOVE      R0 R5        ; R0 := R5
247 [-]: CLOSURE   R32 8        ; R32 := closure(Function #9)
248 [-]: MOVE      R0 R3        ; R0 := R3
249 [-]: MOVE      R0 R24       ; R0 := R24
250 [-]: MOVE      R0 R30       ; R0 := R30
251 [-]: MOVE      R0 R31       ; R0 := R31
252 [-]: MOVE      R0 R13       ; R0 := R13
253 [-]: MOVE      R0 R5        ; R0 := R5
254 [-]: SETGLOBAL R32 K135     ; Shutdown := R32
255 [-]: CLOSURE   R32 9        ; R32 := closure(Function #10)
256 [-]: MOVE      R0 R3        ; R0 := R3
257 [-]: MOVE      R0 R24       ; R0 := R24
258 [-]: CLOSURE   R33 10       ; R33 := closure(Function #11)
259 [-]: MOVE      R0 R32       ; R0 := R32
260 [-]: SETGLOBAL R33 K136     ; TransitionOut := R33
261 [-]: CLOSURE   R33 11       ; R33 := closure(Function #12)
262 [-]: MOVE      R0 R22       ; R0 := R22
263 [-]: MOVE      R0 R23       ; R0 := R23
264 [-]: MOVE      R0 R21       ; R0 := R21
265 [-]: MOVE      R0 R24       ; R0 := R24
266 [-]: MOVE      R0 R3        ; R0 := R3
267 [-]: MOVE      R0 R20       ; R0 := R20
268 [-]: MOVE      R0 R18       ; R0 := R18
269 [-]: CLOSURE   R34 12       ; R34 := closure(Function #13)
270 [-]: CLOSURE   R35 13       ; R35 := closure(Function #14)
271 [-]: MOVE      R0 R3        ; R0 := R3
272 [-]: MOVE      R0 R33       ; R0 := R33
273 [-]: CLOSURE   R36 14       ; R36 := closure(Function #15)
274 [-]: MOVE      R0 R3        ; R0 := R3
275 [-]: CLOSURE   R37 15       ; R37 := closure(Function #16)
276 [-]: SETGLOBAL R37 K137     ; Pressed := R37
277 [-]: CLOSURE   R37 16       ; R37 := closure(Function #17)
278 [-]: SETGLOBAL R37 K138     ; Selected := R37
279 [-]: CLOSURE   R37 17       ; R37 := closure(Function #18)
280 [-]: SETGLOBAL R37 K139     ; Focused := R37
281 [-]: CLOSURE   R37 18       ; R37 := closure(Function #19)
282 [-]: SETGLOBAL R37 K140     ; Unfocused := R37
283 [-]: CLOSURE   R37 19       ; R37 := closure(Function #20)
284 [-]: CLOSURE   R38 20       ; R38 := closure(Function #21)
285 [-]: MOVE      R0 R8        ; R0 := R8
286 [-]: MOVE      R0 R13       ; R0 := R13
287 [-]: CLOSURE   R39 21       ; R39 := closure(Function #22)
288 [-]: MOVE      R0 R38       ; R0 := R38
289 [-]: CLOSURE   R40 22       ; R40 := closure(Function #23)
290 [-]: CLOSURE   R41 23       ; R41 := closure(Function #24)
291 [-]: MOVE      R0 R8        ; R0 := R8
292 [-]: MOVE      R0 R13       ; R0 := R13
293 [-]: CLOSURE   R42 24       ; R42 := closure(Function #25)
294 [-]: MOVE      R0 R40       ; R0 := R40
295 [-]: MOVE      R0 R41       ; R0 := R41
296 [-]: CLOSURE   R24 25       ; R24 := closure(Function #26)
297 [-]: CLOSURE   R23 26       ; R23 := closure(Function #27)
298 [-]: MOVE      R0 R24       ; R0 := R24
299 [-]: CLOSURE   R43 27       ; R43 := closure(Function #28)
300 [-]: MOVE      R0 R41       ; R0 := R41
301 [-]: CLOSURE   R44 28       ; R44 := closure(Function #29)
302 [-]: MOVE      R0 R3        ; R0 := R3
303 [-]: MOVE      R0 R13       ; R0 := R13
304 [-]: CLOSURE   R45 29       ; R45 := closure(Function #30)
305 [-]: MOVE      R0 R13       ; R0 := R13
306 [-]: MOVE      R0 R44       ; R0 := R44
307 [-]: MOVE      R0 R0        ; R0 := R0
308 [-]: MOVE      R0 R23       ; R0 := R23
309 [-]: MOVE      R0 R6        ; R0 := R6
310 [-]: MOVE      R0 R3        ; R0 := R3
311 [-]: MOVE      R0 R24       ; R0 := R24
312 [-]: MOVE      R0 R39       ; R0 := R39
313 [-]: MOVE      R0 R8        ; R0 := R8
314 [-]: MOVE      R0 R14       ; R0 := R14
315 [-]: MOVE      R0 R34       ; R0 := R34
316 [-]: MOVE      R0 R43       ; R0 := R43
317 [-]: MOVE      R0 R37       ; R0 := R37
318 [-]: CLOSURE   R46 30       ; R46 := closure(Function #31)
319 [-]: MOVE      R0 R6        ; R0 := R6
320 [-]: CLOSURE   R47 31       ; R47 := closure(Function #32)
321 [-]: MOVE      R0 R3        ; R0 := R3
322 [-]: MOVE      R0 R6        ; R0 := R6
323 [-]: MOVE      R0 R11       ; R0 := R11
324 [-]: CLOSURE   R48 32       ; R48 := closure(Function #33)
325 [-]: MOVE      R0 R13       ; R0 := R13
326 [-]: MOVE      R0 R46       ; R0 := R46
327 [-]: MOVE      R0 R47       ; R0 := R47
328 [-]: MOVE      R0 R6        ; R0 := R6
329 [-]: CLOSURE   R49 33       ; R49 := closure(Function #34)
330 [-]: CLOSURE   R50 34       ; R50 := closure(Function #35)
331 [-]: CLOSURE   R51 35       ; R51 := closure(Function #36)
332 [-]: MOVE      R0 R13       ; R0 := R13
333 [-]: MOVE      R0 R49       ; R0 := R49
334 [-]: MOVE      R0 R50       ; R0 := R50
335 [-]: CLOSURE   R52 36       ; R52 := closure(Function #37)
336 [-]: MOVE      R0 R13       ; R0 := R13
337 [-]: MOVE      R0 R6        ; R0 := R6
338 [-]: MOVE      R0 R3        ; R0 := R3
339 [-]: MOVE      R0 R36       ; R0 := R36
340 [-]: CLOSURE   R53 37       ; R53 := closure(Function #38)
341 [-]: MOVE      R0 R13       ; R0 := R13
342 [-]: MOVE      R0 R5        ; R0 := R5
343 [-]: CLOSURE   R54 38       ; R54 := closure(Function #39)
344 [-]: MOVE      R0 R53       ; R0 := R53
345 [-]: SETGLOBAL R54 K141     ; ShowMeleeCombos := R54
346 [-]: CLOSURE   R54 39       ; R54 := closure(Function #40)
347 [-]: CLOSURE   R55 40       ; R55 := closure(Function #41)
348 [-]: MOVE      R0 R54       ; R0 := R54
349 [-]: CLOSURE   R56 41       ; R56 := closure(Function #42)
350 [-]: MOVE      R0 R13       ; R0 := R13
351 [-]: MOVE      R0 R55       ; R0 := R55
352 [-]: MOVE      R0 R3        ; R0 := R3
353 [-]: CLOSURE   R57 42       ; R57 := closure(Function #43)
354 [-]: MOVE      R0 R55       ; R0 := R55
355 [-]: MOVE      R0 R24       ; R0 := R24
356 [-]: CLOSURE   R58 43       ; R58 := closure(Function #44)
357 [-]: CLOSURE   R59 44       ; R59 := closure(Function #45)
358 [-]: MOVE      R0 R38       ; R0 := R38
359 [-]: CLOSURE   R60 45       ; R60 := closure(Function #46)
360 [-]: MOVE      R0 R55       ; R0 := R55
361 [-]: MOVE      R0 R24       ; R0 := R24
362 [-]: CLOSURE   R61 46       ; R61 := closure(Function #47)
363 [-]: CLOSURE   R62 47       ; R62 := closure(Function #48)
364 [-]: MOVE      R0 R3        ; R0 := R3
365 [-]: MOVE      R0 R41       ; R0 := R41
366 [-]: MOVE      R0 R13       ; R0 := R13
367 [-]: MOVE      R0 R0        ; R0 := R0
368 [-]: MOVE      R0 R61       ; R0 := R61
369 [-]: MOVE      R0 R24       ; R0 := R24
370 [-]: MOVE      R0 R10       ; R0 := R10
371 [-]: MOVE      R0 R56       ; R0 := R56
372 [-]: MOVE      R0 R60       ; R0 := R60
373 [-]: MOVE      R0 R58       ; R0 := R58
374 [-]: MOVE      R0 R6        ; R0 := R6
375 [-]: CLOSURE   R63 48       ; R63 := closure(Function #49)
376 [-]: CLOSURE   R64 49       ; R64 := closure(Function #50)
377 [-]: MOVE      R0 R6        ; R0 := R6
378 [-]: MOVE      R0 R13       ; R0 := R13
379 [-]: MOVE      R0 R34       ; R0 := R34
380 [-]: MOVE      R0 R5        ; R0 := R5
381 [-]: MOVE      R0 R3        ; R0 := R3
382 [-]: MOVE      R0 R45       ; R0 := R45
383 [-]: MOVE      R0 R41       ; R0 := R41
384 [-]: MOVE      R0 R46       ; R0 := R46
385 [-]: MOVE      R0 R51       ; R0 := R51
386 [-]: MOVE      R0 R24       ; R0 := R24
387 [-]: MOVE      R0 R52       ; R0 := R52
388 [-]: MOVE      R0 R2        ; R0 := R2
389 [-]: CLOSURE   R65 50       ; R65 := closure(Function #51)
390 [-]: MOVE      R0 R3        ; R0 := R3
391 [-]: CLOSURE   R66 51       ; R66 := closure(Function #52)
392 [-]: MOVE      R0 R3        ; R0 := R3
393 [-]: MOVE      R0 R64       ; R0 := R64
394 [-]: CLOSURE   R67 52       ; R67 := closure(Function #53)
395 [-]: MOVE      R0 R6        ; R0 := R6
396 [-]: MOVE      R0 R4        ; R0 := R4
397 [-]: CLOSURE   R68 53       ; R68 := closure(Function #54)
398 [-]: MOVE      R0 R55       ; R0 := R55
399 [-]: MOVE      R0 R8        ; R0 := R8
400 [-]: MOVE      R0 R24       ; R0 := R24
401 [-]: MOVE      R0 R23       ; R0 := R23
402 [-]: MOVE      R0 R33       ; R0 := R33
403 [-]: MOVE      R0 R3        ; R0 := R3
404 [-]: MOVE      R0 R6        ; R0 := R6
405 [-]: MOVE      R0 R67       ; R0 := R67
406 [-]: MOVE      R0 R66       ; R0 := R66
407 [-]: MOVE      R0 R12       ; R0 := R12
408 [-]: MOVE      R0 R13       ; R0 := R13
409 [-]: MOVE      R0 R14       ; R0 := R14
410 [-]: MOVE      R0 R65       ; R0 := R65
411 [-]: MOVE      R0 R39       ; R0 := R39
412 [-]: MOVE      R0 R43       ; R0 := R43
413 [-]: CLOSURE   R69 54       ; R69 := closure(Function #55)
414 [-]: MOVE      R0 R68       ; R0 := R68
415 [-]: MOVE      R0 R13       ; R0 := R13
416 [-]: MOVE      R0 R8        ; R0 := R8
417 [-]: MOVE      R0 R23       ; R0 := R23
418 [-]: MOVE      R0 R24       ; R0 := R24
419 [-]: MOVE      R0 R47       ; R0 := R47
420 [-]: MOVE      R0 R6        ; R0 := R6
421 [-]: MOVE      R0 R43       ; R0 := R43
422 [-]: MOVE      R0 R3        ; R0 := R3
423 [-]: CLOSURE   R70 55       ; R70 := closure(Function #56)
424 [-]: SETGLOBAL R70 K142     ; AvionicCatFocused := R70
425 [-]: CLOSURE   R70 56       ; R70 := closure(Function #57)
426 [-]: SETGLOBAL R70 K143     ; AvionicCatUnfocused := R70
427 [-]: CLOSURE   R70 57       ; R70 := closure(Function #58)
428 [-]: MOVE      R0 R3        ; R0 := R3
429 [-]: SETGLOBAL R70 K144     ; AvionicCatSelected := R70
430 [-]: CLOSURE   R70 58       ; R70 := closure(Function #59)
431 [-]: MOVE      R0 R3        ; R0 := R3
432 [-]: SETGLOBAL R70 K145     ; AvionicCatPressed := R70
433 [-]: CLOSURE   R70 59       ; R70 := closure(Function #60)
434 [-]: SETGLOBAL R70 K146     ; ModItemFocused := R70
435 [-]: CLOSURE   R70 60       ; R70 := closure(Function #61)
436 [-]: SETGLOBAL R70 K147     ; ModItemUnfocused := R70
437 [-]: CLOSURE   R70 61       ; R70 := closure(Function #62)
438 [-]: MOVE      R0 R3        ; R0 := R3
439 [-]: SETGLOBAL R70 K148     ; ModItemSelected := R70
440 [-]: CLOSURE   R70 62       ; R70 := closure(Function #63)
441 [-]: MOVE      R0 R3        ; R0 := R3
442 [-]: SETGLOBAL R70 K149     ; ModItemPressed := R70
443 [-]: CLOSURE   R16 63       ; R16 := closure(Function #64)
444 [-]: MOVE      R0 R3        ; R0 := R3
445 [-]: MOVE      R0 R43       ; R0 := R43
446 [-]: MOVE      R0 R39       ; R0 := R39
447 [-]: MOVE      R0 R24       ; R0 := R24
448 [-]: MOVE      R0 R8        ; R0 := R8
449 [-]: MOVE      R0 R13       ; R0 := R13
450 [-]: CLOSURE   R70 64       ; R70 := closure(Function #65)
451 [-]: MOVE      R0 R16       ; R0 := R16
452 [-]: CLOSURE   R71 65       ; R71 := closure(Function #66)
453 [-]: MOVE      R0 R3        ; R0 := R3
454 [-]: MOVE      R0 R6        ; R0 := R6
455 [-]: MOVE      R0 R67       ; R0 := R67
456 [-]: MOVE      R0 R12       ; R0 := R12
457 [-]: MOVE      R0 R66       ; R0 := R66
458 [-]: MOVE      R0 R65       ; R0 := R65
459 [-]: MOVE      R0 R24       ; R0 := R24
460 [-]: MOVE      R0 R39       ; R0 := R39
461 [-]: MOVE      R0 R55       ; R0 := R55
462 [-]: MOVE      R0 R48       ; R0 := R48
463 [-]: CLOSURE   R72 66       ; R72 := closure(Function #67)
464 [-]: CLOSURE   R73 67       ; R73 := closure(Function #68)
465 [-]: MOVE      R0 R13       ; R0 := R13
466 [-]: MOVE      R0 R72       ; R0 := R72
467 [-]: CLOSURE   R74 68       ; R74 := closure(Function #69)
468 [-]: MOVE      R0 R13       ; R0 := R13
469 [-]: MOVE      R0 R3        ; R0 := R3
470 [-]: CLOSURE   R75 69       ; R75 := closure(Function #70)
471 [-]: MOVE      R0 R74       ; R0 := R74
472 [-]: MOVE      R0 R69       ; R0 := R69
473 [-]: MOVE      R0 R71       ; R0 := R71
474 [-]: MOVE      R0 R35       ; R0 := R35
475 [-]: CLOSURE   R76 70       ; R76 := closure(Function #71)
476 [-]: MOVE      R0 R13       ; R0 := R13
477 [-]: MOVE      R0 R23       ; R0 := R23
478 [-]: MOVE      R0 R3        ; R0 := R3
479 [-]: MOVE      R0 R5        ; R0 := R5
480 [-]: MOVE      R0 R24       ; R0 := R24
481 [-]: CLOSURE   R77 71       ; R77 := closure(Function #72)
482 [-]: CLOSURE   R78 72       ; R78 := closure(Function #73)
483 [-]: MOVE      R0 R13       ; R0 := R13
484 [-]: MOVE      R0 R6        ; R0 := R6
485 [-]: MOVE      R0 R0        ; R0 := R0
486 [-]: MOVE      R0 R41       ; R0 := R41
487 [-]: MOVE      R0 R77       ; R0 := R77
488 [-]: MOVE      R0 R50       ; R0 := R50
489 [-]: MOVE      R0 R23       ; R0 := R23
490 [-]: MOVE      R0 R75       ; R0 := R75
491 [-]: MOVE      R0 R76       ; R0 := R76
492 [-]: MOVE      R0 R45       ; R0 := R45
493 [-]: MOVE      R0 R64       ; R0 := R64
494 [-]: CLOSURE   R79 73       ; R79 := closure(Function #74)
495 [-]: SETGLOBAL R79 K150     ; ResetRank := R79
496 [-]: CLOSURE   R79 74       ; R79 := closure(Function #75)
497 [-]: MOVE      R0 R32       ; R0 := R32
498 [-]: CLOSURE   R80 75       ; R80 := closure(Function #76)
499 [-]: MOVE      R0 R79       ; R0 := R79
500 [-]: SETGLOBAL R80 K151     ; CloseCommon := R80
501 [-]: CLOSURE   R80 76       ; R80 := closure(Function #77)
502 [-]: SETGLOBAL R80 K152     ; Close := R80
503 [-]: CLOSURE   R80 77       ; R80 := closure(Function #78)
504 [-]: MOVE      R0 R64       ; R0 := R64
505 [-]: CLOSURE   R81 78       ; R81 := closure(Function #79)
506 [-]: MOVE      R0 R80       ; R0 := R80
507 [-]: MOVE      R0 R62       ; R0 := R62
508 [-]: SETGLOBAL R81 K153     ; ConfirmRemoveAll := R81
509 [-]: CLOSURE   R19 79       ; R19 := closure(Function #80)
510 [-]: MOVE      R0 R80       ; R0 := R80
511 [-]: MOVE      R0 R62       ; R0 := R62
512 [-]: MOVE      R0 R3        ; R0 := R3
513 [-]: CLOSURE   R81 80       ; R81 := closure(Function #81)
514 [-]: MOVE      R0 R19       ; R0 := R19
515 [-]: SETGLOBAL R81 K154     ; RemoveAll := R81
516 [-]: CLOSURE   R81 81       ; R81 := closure(Function #82)
517 [-]: MOVE      R0 R64       ; R0 := R64
518 [-]: CLOSURE   R82 82       ; R82 := closure(Function #83)
519 [-]: MOVE      R0 R64       ; R0 := R64
520 [-]: CLOSURE   R83 83       ; R83 := closure(Function #84)
521 [-]: MOVE      R0 R39       ; R0 := R39
522 [-]: MOVE      R0 R24       ; R0 := R24
523 [-]: MOVE      R0 R43       ; R0 := R43
524 [-]: MOVE      R0 R8        ; R0 := R8
525 [-]: MOVE      R0 R13       ; R0 := R13
526 [-]: CLOSURE   R84 84       ; R84 := closure(Function #85)
527 [-]: CLOSURE   R85 85       ; R85 := closure(Function #86)
528 [-]: MOVE      R0 R3        ; R0 := R3
529 [-]: MOVE      R0 R84       ; R0 := R84
530 [-]: CLOSURE   R86 86       ; R86 := closure(Function #87)
531 [-]: MOVE      R0 R3        ; R0 := R3
532 [-]: CLOSURE   R87 87       ; R87 := closure(Function #88)
533 [-]: MOVE      R0 R85       ; R0 := R85
534 [-]: MOVE      R0 R86       ; R0 := R86
535 [-]: CLOSURE   R88 88       ; R88 := closure(Function #89)
536 [-]: MOVE      R0 R25       ; R0 := R25
537 [-]: CLOSURE   R89 89       ; R89 := closure(Function #90)
538 [-]: MOVE      R0 R19       ; R0 := R19
539 [-]: MOVE      R0 R6        ; R0 := R6
540 [-]: MOVE      R0 R24       ; R0 := R24
541 [-]: MOVE      R0 R25       ; R0 := R25
542 [-]: MOVE      R0 R87       ; R0 := R87
543 [-]: MOVE      R0 R88       ; R0 := R88
544 [-]: MOVE      R0 R81       ; R0 := R81
545 [-]: MOVE      R0 R43       ; R0 := R43
546 [-]: MOVE      R0 R82       ; R0 := R82
547 [-]: MOVE      R0 R64       ; R0 := R64
548 [-]: MOVE      R0 R83       ; R0 := R83
549 [-]: MOVE      R0 R62       ; R0 := R62
550 [-]: CLOSURE   R90 90       ; R90 := closure(Function #91)
551 [-]: MOVE      R0 R79       ; R0 := R79
552 [-]: SETGLOBAL R90 K155     ; ConfirmCancel := R90
553 [-]: CLOSURE   R90 91       ; R90 := closure(Function #92)
554 [-]: MOVE      R0 R79       ; R0 := R79
555 [-]: CLOSURE   R91 92       ; R91 := closure(Function #93)
556 [-]: MOVE      R0 R90       ; R0 := R90
557 [-]: SETGLOBAL R91 K156     ; Cancel := R91
558 [-]: CLOSURE   R91 93       ; R91 := closure(Function #94)
559 [-]: MOVE      R0 R13       ; R0 := R13
560 [-]: CLOSURE   R21 94       ; R21 := closure(Function #95)
561 [-]: MOVE      R0 R29       ; R0 := R29
562 [-]: MOVE      R0 R55       ; R0 := R55
563 [-]: MOVE      R0 R13       ; R0 := R13
564 [-]: MOVE      R0 R11       ; R0 := R11
565 [-]: MOVE      R0 R73       ; R0 := R73
566 [-]: MOVE      R0 R7        ; R0 := R7
567 [-]: MOVE      R0 R3        ; R0 := R3
568 [-]: MOVE      R0 R5        ; R0 := R5
569 [-]: MOVE      R0 R42       ; R0 := R42
570 [-]: MOVE      R0 R91       ; R0 := R91
571 [-]: CLOSURE   R92 95       ; R92 := closure(Function #96)
572 [-]: MOVE      R0 R3        ; R0 := R3
573 [-]: MOVE      R0 R5        ; R0 := R5
574 [-]: MOVE      R0 R32       ; R0 := R32
575 [-]: SETGLOBAL R92 K157     ; ShowCollection := R92
576 [-]: CLOSURE   R20 96       ; R20 := closure(Function #97)
577 [-]: MOVE      R0 R80       ; R0 := R80
578 [-]: CLOSURE   R92 97       ; R92 := closure(Function #98)
579 [-]: MOVE      R0 R20       ; R0 := R20
580 [-]: SETGLOBAL R92 K158     ; RemoveCurrentCard := R92
581 [-]: CLOSURE   R92 98       ; R92 := closure(Function #99)
582 [-]: MOVE      R0 R78       ; R0 := R78
583 [-]: MOVE      R0 R59       ; R0 := R59
584 [-]: MOVE      R0 R57       ; R0 := R57
585 [-]: MOVE      R0 R62       ; R0 := R62
586 [-]: MOVE      R0 R5        ; R0 := R5
587 [-]: CLOSURE   R93 99       ; R93 := closure(Function #100)
588 [-]: MOVE      R0 R92       ; R0 := R92
589 [-]: MOVE      R0 R78       ; R0 := R78
590 [-]: MOVE      R0 R79       ; R0 := R79
591 [-]: MOVE      R0 R6        ; R0 := R6
592 [-]: MOVE      R0 R26       ; R0 := R26
593 [-]: MOVE      R0 R1        ; R0 := R1
594 [-]: MOVE      R0 R17       ; R0 := R17
595 [-]: MOVE      R0 R45       ; R0 := R45
596 [-]: MOVE      R0 R62       ; R0 := R62
597 [-]: MOVE      R0 R24       ; R0 := R24
598 [-]: MOVE      R0 R2        ; R0 := R2
599 [-]: SETGLOBAL R93 K159     ; Update := R93
600 [-]: CLOSURE   R93 100      ; R93 := closure(Function #101)
601 [-]: MOVE      R0 R90       ; R0 := R90
602 [-]: SETGLOBAL R93 K160     ; onKeyUp_MENU_CANCEL := R93
603 [-]: CLOSURE   R93 101      ; R93 := closure(Function #102)
604 [-]: MOVE      R0 R17       ; R0 := R17
605 [-]: MOVE      R0 R15       ; R0 := R15
606 [-]: MOVE      R0 R45       ; R0 := R45
607 [-]: MOVE      R0 R62       ; R0 := R62
608 [-]: CLOSURE   R94 102      ; R94 := closure(Function #103)
609 [-]: MOVE      R0 R93       ; R0 := R93
610 [-]: MOVE      R0 R3        ; R0 := R3
611 [-]: MOVE      R0 R20       ; R0 := R20
612 [-]: SETGLOBAL R94 K161     ; onRawInputEvent := R94
613 [-]: CLOSURE   R94 103      ; R94 := closure(Function #104)
614 [-]: SETGLOBAL R94 K162     ; CategoryFocused := R94
615 [-]: CLOSURE   R94 104      ; R94 := closure(Function #105)
616 [-]: SETGLOBAL R94 K163     ; CategoryUnfocused := R94
617 [-]: CLOSURE   R94 105      ; R94 := closure(Function #106)
618 [-]: SETGLOBAL R94 K164     ; CategoryPressed := R94
619 [-]: CLOSURE   R94 106      ; R94 := closure(Function #107)
620 [-]: SETGLOBAL R94 K165     ; SortByFocused := R94
621 [-]: CLOSURE   R94 107      ; R94 := closure(Function #108)
622 [-]: SETGLOBAL R94 K166     ; SortByUnfocused := R94
623 [-]: CLOSURE   R94 108      ; R94 := closure(Function #109)
624 [-]: SETGLOBAL R94 K167     ; SortByPressed := R94
625 [-]: CLOSURE   R94 109      ; R94 := closure(Function #110)
626 [-]: SETGLOBAL R94 K168     ; ScrubStartDrag := R94
627 [-]: CLOSURE   R94 110      ; R94 := closure(Function #111)
628 [-]: SETGLOBAL R94 K169     ; ScrubStopDrag := R94
629 [-]: CLOSURE   R94 111      ; R94 := closure(Function #112)
630 [-]: SETGLOBAL R94 K170     ; ScrollBarClick := R94
631 [-]: CLOSURE   R94 112      ; R94 := closure(Function #113)
632 [-]: SETGLOBAL R94 K171     ; DropDownArrowPressed := R94
633 [-]: CLOSURE   R94 113      ; R94 := closure(Function #114)
634 [-]: SETGLOBAL R94 K172     ; DropDownArrowFocused := R94
635 [-]: CLOSURE   R94 114      ; R94 := closure(Function #115)
636 [-]: SETGLOBAL R94 K173     ; DropDownArrowUnfocused := R94
637 [-]: CLOSURE   R94 115      ; R94 := closure(Function #116)
638 [-]: MOVE      R0 R20       ; R0 := R20
639 [-]: MOVE      R0 R19       ; R0 := R19
640 [-]: SETGLOBAL R94 K174     ; onKeyDown_MENU_GENERIC2 := R94
641 [-]: CLOSURE   R94 116      ; R94 := closure(Function #117)
642 [-]: MOVE      R0 R3        ; R0 := R3
643 [-]: SETGLOBAL R94 K175     ; RollOver := R94
644 [-]: CLOSURE   R94 117      ; R94 := closure(Function #118)
645 [-]: MOVE      R0 R0        ; R0 := R0
646 [-]: MOVE      R0 R13       ; R0 := R13
647 [-]: MOVE      R0 R62       ; R0 := R62
648 [-]: MOVE      R0 R78       ; R0 := R78
649 [-]: MOVE      R0 R46       ; R0 := R46
650 [-]: MOVE      R0 R6        ; R0 := R6
651 [-]: MOVE      R0 R47       ; R0 := R47
652 [-]: MOVE      R0 R1        ; R0 := R1
653 [-]: CLOSURE   R95 118      ; R95 := closure(Function #119)
654 [-]: MOVE      R0 R0        ; R0 := R0
655 [-]: MOVE      R0 R13       ; R0 := R13
656 [-]: CLOSURE   R96 119      ; R96 := closure(Function #120)
657 [-]: MOVE      R0 R26       ; R0 := R26
658 [-]: SETGLOBAL R96 K176     ; onKeyDown_MENU_MOUSE_Z := R96
659 [-]: CLOSURE   R96 120      ; R96 := closure(Function #121)
660 [-]: MOVE      R0 R35       ; R0 := R35
661 [-]: CLOSURE   R97 121      ; R97 := closure(Function #122)
662 [-]: MOVE      R0 R96       ; R0 := R96
663 [-]: SETGLOBAL R97 K177     ; onKeyDown_MENU_Y := R97
664 [-]: CLOSURE   R97 122      ; R97 := closure(Function #123)
665 [-]: MOVE      R0 R96       ; R0 := R96
666 [-]: SETGLOBAL R97 K178     ; onKeyUp_MENU_Y := R97
667 [-]: CLOSURE   R97 123      ; R97 := closure(Function #124)
668 [-]: MOVE      R0 R96       ; R0 := R96
669 [-]: SETGLOBAL R97 K179     ; onKeyDown_MENU_UP := R97
670 [-]: CLOSURE   R97 124      ; R97 := closure(Function #125)
671 [-]: MOVE      R0 R96       ; R0 := R96
672 [-]: SETGLOBAL R97 K180     ; onKeyUp_MENU_UP := R97
673 [-]: CLOSURE   R97 125      ; R97 := closure(Function #126)
674 [-]: MOVE      R0 R96       ; R0 := R96
675 [-]: SETGLOBAL R97 K181     ; onKeyDown_MENU_DOWN := R97
676 [-]: CLOSURE   R97 126      ; R97 := closure(Function #127)
677 [-]: MOVE      R0 R96       ; R0 := R96
678 [-]: SETGLOBAL R97 K182     ; onKeyUp_MENU_DOWN := R97
679 [-]: CLOSURE   R97 127      ; R97 := closure(Function #128)
680 [-]: MOVE      R0 R36       ; R0 := R36
681 [-]: MOVE      R0 R95       ; R0 := R95
682 [-]: SETGLOBAL R97 K183     ; onKeyDown_MENU_LTRIGGER2 := R97
683 [-]: CLOSURE   R97 128      ; R97 := closure(Function #129)
684 [-]: MOVE      R0 R95       ; R0 := R95
685 [-]: MOVE      R0 R36       ; R0 := R36
686 [-]: SETGLOBAL R97 K184     ; onKeyDown_MENU_RTRIGGER2 := R97
687 [-]: CLOSURE   R97 129      ; R97 := closure(Function #130)
688 [-]: MOVE      R0 R18       ; R0 := R18
689 [-]: SETGLOBAL R97 K185     ; onKeyDown_MENU_RTRIGGER1 := R97
690 [-]: CLOSURE   R97 130      ; R97 := closure(Function #131)
691 [-]: SETGLOBAL R97 K186     ; OnUpdateSessionSettings := R97
692 [-]: CLOSURE   R97 131      ; R97 := closure(Function #132)
693 [-]: MOVE      R0 R5        ; R0 := R5
694 [-]: CLOSURE   R98 132      ; R98 := closure(Function #133)
695 [-]: MOVE      R0 R97       ; R0 := R97
696 [-]: SETGLOBAL R98 K187     ; OnSaveLoadOutComplete := R98
697 [-]: CLOSURE   R98 133      ; R98 := closure(Function #134)
698 [-]: MOVE      R0 R5        ; R0 := R5
699 [-]: MOVE      R0 R63       ; R0 := R63
700 [-]: SETGLOBAL R98 K188     ; ConfirmLeaveScreen := R98
701 [-]: CLOSURE   R98 134      ; R98 := closure(Function #135)
702 [-]: MOVE      R0 R3        ; R0 := R3
703 [-]: MOVE      R0 R63       ; R0 := R63
704 [-]: SETGLOBAL R98 K189     ; HandleCanBeClosed := R98
705 [-]: CLOSURE   R98 135      ; R98 := closure(Function #136)
706 [-]: MOVE      R0 R3        ; R0 := R3
707 [-]: SETGLOBAL R98 K190     ; SetTrigger := R98
708 [-]: CLOSURE   R18 136      ; R18 := closure(Function #137)
709 [-]: MOVE      R0 R29       ; R0 := R29
710 [-]: CLOSURE   R98 137      ; R98 := closure(Function #138)
711 [-]: MOVE      R0 R3        ; R0 := R3
712 [-]: CLOSURE   R99 138      ; R99 := closure(Function #139)
713 [-]: MOVE      R0 R98       ; R0 := R98
714 [-]: MOVE      R0 R8        ; R0 := R8
715 [-]: MOVE      R0 R13       ; R0 := R13
716 [-]: CLOSURE   R100 139     ; R100 := closure(Function #140)
717 [-]: MOVE      R0 R13       ; R0 := R13
718 [-]: MOVE      R0 R3        ; R0 := R3
719 [-]: MOVE      R0 R8        ; R0 := R8
720 [-]: MOVE      R0 R5        ; R0 := R5
721 [-]: MOVE      R0 R99       ; R0 := R99
722 [-]: CLOSURE   R101 140     ; R101 := closure(Function #141)
723 [-]: SETGLOBAL R101 K191    ; ConfigFocused := R101
724 [-]: CLOSURE   R101 141     ; R101 := closure(Function #142)
725 [-]: SETGLOBAL R101 K192    ; ConfigUnfocused := R101
726 [-]: CLOSURE   R101 142     ; R101 := closure(Function #143)
727 [-]: SETGLOBAL R101 K193    ; ConfigPressed := R101
728 [-]: CLOSURE   R101 143     ; R101 := closure(Function #144)
729 [-]: MOVE      R0 R3        ; R0 := R3
730 [-]: SETGLOBAL R101 K194    ; ConfigSelected := R101
731 [-]: CLOSURE   R101 144     ; R101 := closure(Function #145)
732 [-]: MOVE      R0 R13       ; R0 := R13
733 [-]: MOVE      R0 R8        ; R0 := R8
734 [-]: MOVE      R0 R0        ; R0 := R0
735 [-]: CLOSURE   R102 145     ; R102 := closure(Function #146)
736 [-]: MOVE      R0 R3        ; R0 := R3
737 [-]: MOVE      R0 R4        ; R0 := R4
738 [-]: MOVE      R0 R14       ; R0 := R14
739 [-]: MOVE      R0 R94       ; R0 := R94
740 [-]: MOVE      R0 R13       ; R0 := R13
741 [-]: MOVE      R0 R56       ; R0 := R56
742 [-]: MOVE      R0 R8        ; R0 := R8
743 [-]: MOVE      R0 R101      ; R0 := R101
744 [-]: CLOSURE   R103 146     ; R103 := closure(Function #147)
745 [-]: CLOSURE   R104 147     ; R104 := closure(Function #148)
746 [-]: MOVE      R0 R13       ; R0 := R13
747 [-]: MOVE      R0 R31       ; R0 := R31
748 [-]: MOVE      R0 R103      ; R0 := R103
749 [-]: MOVE      R0 R3        ; R0 := R3
750 [-]: CLOSURE   R22 148      ; R22 := closure(Function #149)
751 [-]: MOVE      R0 R23       ; R0 := R23
752 [-]: MOVE      R0 R24       ; R0 := R24
753 [-]: MOVE      R0 R4        ; R0 := R4
754 [-]: MOVE      R0 R6        ; R0 := R6
755 [-]: CLOSURE   R105 149     ; R105 := closure(Function #150)
756 [-]: MOVE      R0 R3        ; R0 := R3
757 [-]: CLOSURE   R106 150     ; R106 := closure(Function #151)
758 [-]: MOVE      R0 R13       ; R0 := R13
759 [-]: CLOSURE   R15 151      ; R15 := closure(Function #152)
760 [-]: MOVE      R0 R3        ; R0 := R3
761 [-]: MOVE      R0 R11       ; R0 := R11
762 [-]: MOVE      R0 R6        ; R0 := R6
763 [-]: MOVE      R0 R4        ; R0 := R4
764 [-]: MOVE      R0 R7        ; R0 := R7
765 [-]: MOVE      R0 R106      ; R0 := R106
766 [-]: CLOSURE   R17 152      ; R17 := closure(Function #153)
767 [-]: MOVE      R0 R13       ; R0 := R13
768 [-]: MOVE      R0 R0        ; R0 := R0
769 [-]: MOVE      R0 R3        ; R0 := R3
770 [-]: MOVE      R0 R15       ; R0 := R15
771 [-]: CLOSURE   R107 153     ; R107 := closure(Function #154)
772 [-]: MOVE      R0 R3        ; R0 := R3
773 [-]: MOVE      R0 R5        ; R0 := R5
774 [-]: CLOSURE   R108 154     ; R108 := closure(Function #155)
775 [-]: MOVE      R0 R56       ; R0 := R56
776 [-]: MOVE      R0 R13       ; R0 := R13
777 [-]: MOVE      R0 R41       ; R0 := R41
778 [-]: MOVE      R0 R78       ; R0 := R78
779 [-]: MOVE      R0 R62       ; R0 := R62
780 [-]: CLOSURE   R109 155     ; R109 := closure(Function #156)
781 [-]: MOVE      R0 R28       ; R0 := R28
782 [-]: MOVE      R0 R13       ; R0 := R13
783 [-]: CLOSURE   R110 156     ; R110 := closure(Function #157)
784 [-]: MOVE      R0 R3        ; R0 := R3
785 [-]: MOVE      R0 R6        ; R0 := R6
786 [-]: CLOSURE   R111 157     ; R111 := closure(Function #158)
787 [-]: MOVE      R0 R3        ; R0 := R3
788 [-]: CLOSURE   R112 158     ; R112 := closure(Function #159)
789 [-]: MOVE      R0 R103      ; R0 := R103
790 [-]: MOVE      R0 R3        ; R0 := R3
791 [-]: MOVE      R0 R4        ; R0 := R4
792 [-]: MOVE      R0 R9        ; R0 := R9
793 [-]: MOVE      R0 R24       ; R0 := R24
794 [-]: MOVE      R0 R5        ; R0 := R5
795 [-]: MOVE      R0 R30       ; R0 := R30
796 [-]: MOVE      R0 R111      ; R0 := R111
797 [-]: MOVE      R0 R13       ; R0 := R13
798 [-]: MOVE      R0 R0        ; R0 := R0
799 [-]: MOVE      R0 R109      ; R0 := R109
800 [-]: MOVE      R0 R38       ; R0 := R38
801 [-]: MOVE      R0 R41       ; R0 := R41
802 [-]: MOVE      R0 R44       ; R0 := R44
803 [-]: MOVE      R0 R76       ; R0 := R76
804 [-]: MOVE      R0 R102      ; R0 := R102
805 [-]: MOVE      R0 R105      ; R0 := R105
806 [-]: MOVE      R0 R17       ; R0 := R17
807 [-]: MOVE      R0 R110      ; R0 := R110
808 [-]: MOVE      R0 R23       ; R0 := R23
809 [-]: MOVE      R0 R26       ; R0 := R26
810 [-]: MOVE      R0 R70       ; R0 := R70
811 [-]: MOVE      R0 R104      ; R0 := R104
812 [-]: MOVE      R0 R107      ; R0 := R107
813 [-]: SETGLOBAL R112 K195    ; Initialize := R112
814 [-]: CLOSURE   R112 159     ; R112 := closure(Function #160)
815 [-]: MOVE      R0 R3        ; R0 := R3
816 [-]: MOVE      R0 R56       ; R0 := R56
817 [-]: MOVE      R0 R13       ; R0 := R13
818 [-]: MOVE      R0 R45       ; R0 := R45
819 [-]: MOVE      R0 R36       ; R0 := R36
820 [-]: MOVE      R0 R5        ; R0 := R5
821 [-]: MOVE      R0 R101      ; R0 := R101
822 [-]: MOVE      R0 R17       ; R0 := R17
823 [-]: MOVE      R0 R62       ; R0 := R62
824 [-]: MOVE      R0 R15       ; R0 := R15
825 [-]: SETGLOBAL R112 K196    ; OnUnlockFeatureWebResult := R112
826 [-]: CLOSURE   R112 160     ; R112 := closure(Function #161)
827 [-]: SETGLOBAL R112 K197    ; OnConfirmUnlockFeature := R112
828 [-]: CLOSURE   R112 161     ; R112 := closure(Function #162)
829 [-]: MOVE      R0 R3        ; R0 := R3
830 [-]: SETGLOBAL R112 K198    ; OnBuyFeatureItem := R112
831 [-]: CLOSURE   R14 162      ; R14 := closure(Function #163)
832 [-]: MOVE      R0 R55       ; R0 := R55
833 [-]: MOVE      R0 R13       ; R0 := R13
834 [-]: MOVE      R0 R8        ; R0 := R8
835 [-]: CLOSURE   R112 163     ; R112 := closure(Function #164)
836 [-]: MOVE      R0 R6        ; R0 := R6
837 [-]: SETGLOBAL R112 K199    ; ActivateOmegaConfirm := R112
838 [-]: CLOSURE   R112 164     ; R112 := closure(Function #165)
839 [-]: MOVE      R0 R5        ; R0 := R5
840 [-]: SETGLOBAL R112 K200    ; ActivatePendingRandomArtifact := R112
841 [-]: CLOSURE   R112 165     ; R112 := closure(Function #166)
842 [-]: SETGLOBAL R112 K201    ; _OnOmegaSellCompleted := R112
843 [-]: CLOSURE   R112 166     ; R112 := closure(Function #167)
844 [-]: SETGLOBAL R112 K202    ; OnBuySlot := R112
845 [-]: CLOSURE   R112 167     ; R112 := closure(Function #168)
846 [-]: MOVE      R0 R78       ; R0 := R78
847 [-]: MOVE      R0 R59       ; R0 := R59
848 [-]: MOVE      R0 R57       ; R0 := R57
849 [-]: MOVE      R0 R62       ; R0 := R62
850 [-]: MOVE      R0 R64       ; R0 := R64
851 [-]: MOVE      R0 R5        ; R0 := R5
852 [-]: MOVE      R0 R3        ; R0 := R3
853 [-]: SETGLOBAL R112 K203    ; OnActivateRandomArtifact := R112
854 [-]: CLOSURE   R112 168     ; R112 := closure(Function #169)
855 [-]: SETGLOBAL R112 K204    ; OnUploadChallengeProgress := R112
856 [-]: CLOSURE   R112 169     ; R112 := closure(Function #170)
857 [-]: MOVE      R0 R3        ; R0 := R3
858 [-]: MOVE      R0 R13       ; R0 := R13
859 [-]: MOVE      R0 R0        ; R0 := R0
860 [-]: MOVE      R0 R80       ; R0 := R80
861 [-]: MOVE      R0 R57       ; R0 := R57
862 [-]: MOVE      R0 R62       ; R0 := R62
863 [-]: MOVE      R0 R108      ; R0 := R108
864 [-]: SETGLOBAL R112 K205    ; OnPolarityChangesApplied := R112
865 [-]: CLOSURE   R112 170     ; R112 := closure(Function #171)
866 [-]: MOVE      R0 R3        ; R0 := R3
867 [-]: SETGLOBAL R112 K206    ; PolarizeSwapSelected := R112
868 [-]: CLOSURE   R112 171     ; R112 := closure(Function #172)
869 [-]: MOVE      R0 R8        ; R0 := R8
870 [-]: MOVE      R0 R13       ; R0 := R13
871 [-]: MOVE      R0 R44       ; R0 := R44
872 [-]: MOVE      R0 R0        ; R0 := R0
873 [-]: SETGLOBAL R112 K207    ; ConfirmPolarizeSwaps := R112
874 [-]: CLOSURE   R112 172     ; R112 := closure(Function #173)
875 [-]: MOVE      R0 R3        ; R0 := R3
876 [-]: MOVE      R0 R29       ; R0 := R29
877 [-]: CLOSURE   R113 173     ; R113 := closure(Function #174)
878 [-]: MOVE      R0 R36       ; R0 := R36
879 [-]: MOVE      R0 R8        ; R0 := R8
880 [-]: MOVE      R0 R13       ; R0 := R13
881 [-]: MOVE      R0 R44       ; R0 := R44
882 [-]: MOVE      R0 R0        ; R0 := R0
883 [-]: SETGLOBAL R113 K208    ; ConfirmPolarizeChanges := R113
884 [-]: CLOSURE   R113 174     ; R113 := closure(Function #175)
885 [-]: MOVE      R0 R13       ; R0 := R13
886 [-]: MOVE      R0 R3        ; R0 := R3
887 [-]: SETGLOBAL R113 K209    ; PolarizeSelected := R113
888 [-]: CLOSURE   R113 175     ; R113 := closure(Function #176)
889 [-]: MOVE      R0 R31       ; R0 := R31
890 [-]: CLOSURE   R114 176     ; R114 := closure(Function #177)
891 [-]: MOVE      R0 R114      ; R0 := R114
892 [-]: MOVE      R0 R113      ; R0 := R113
893 [-]: MOVE      R0 R42       ; R0 := R42
894 [-]: MOVE      R0 R13       ; R0 := R13
895 [-]: MOVE      R0 R11       ; R0 := R11
896 [-]: CLOSURE   R115 177     ; R115 := closure(Function #178)
897 [-]: MOVE      R0 R3        ; R0 := R3
898 [-]: MOVE      R0 R73       ; R0 := R73
899 [-]: MOVE      R0 R11       ; R0 := R11
900 [-]: MOVE      R0 R5        ; R0 := R5
901 [-]: MOVE      R0 R43       ; R0 := R43
902 [-]: MOVE      R0 R29       ; R0 := R29
903 [-]: CLOSURE   R116 178     ; R116 := closure(Function #179)
904 [-]: MOVE      R0 R115      ; R0 := R115
905 [-]: SETGLOBAL R116 K210    ; PolarizeItem := R116
906 [-]: CLOSURE   R116 179     ; R116 := closure(Function #180)
907 [-]: MOVE      R0 R56       ; R0 := R56
908 [-]: MOVE      R0 R13       ; R0 := R13
909 [-]: MOVE      R0 R115      ; R0 := R115
910 [-]: MOVE      R0 R3        ; R0 := R3
911 [-]: CLOSURE   R117 180     ; R117 := closure(Function #181)
912 [-]: MOVE      R0 R11       ; R0 := R11
913 [-]: MOVE      R0 R116      ; R0 := R116
914 [-]: SETGLOBAL R117 K211    ; ConfirmPolarizeItemChoice := R117
915 [-]: LOADNIL   R117 R117    ; R117 := nil
916 [-]: CLOSURE   R118 181     ; R118 := closure(Function #182)
917 [-]: MOVE      R0 R3        ; R0 := R3
918 [-]: MOVE      R0 R56       ; R0 := R56
919 [-]: MOVE      R0 R76       ; R0 := R76
920 [-]: SETGLOBAL R118 K212    ; OnFocusLensInstalled := R118
921 [-]: CLOSURE   R118 182     ; R118 := closure(Function #183)
922 [-]: MOVE      R0 R117      ; R0 := R117
923 [-]: MOVE      R0 R13       ; R0 := R13
924 [-]: SETGLOBAL R118 K213    ; FocusLensSelected := R118
925 [-]: CLOSURE   R118 183     ; R118 := closure(Function #184)
926 [-]: MOVE      R0 R118      ; R0 := R118
927 [-]: MOVE      R0 R113      ; R0 := R113
928 [-]: MOVE      R0 R117      ; R0 := R117
929 [-]: MOVE      R0 R13       ; R0 := R13
930 [-]: MOVE      R0 R11       ; R0 := R11
931 [-]: MOVE      R0 R3        ; R0 := R3
932 [-]: CLOSURE   R119 184     ; R119 := closure(Function #185)
933 [-]: MOVE      R0 R42       ; R0 := R42
934 [-]: MOVE      R0 R13       ; R0 := R13
935 [-]: MOVE      R0 R115      ; R0 := R115
936 [-]: MOVE      R0 R114      ; R0 := R114
937 [-]: CLOSURE   R120 185     ; R120 := closure(Function #186)
938 [-]: MOVE      R0 R27       ; R0 := R27
939 [-]: MOVE      R0 R3        ; R0 := R3
940 [-]: MOVE      R0 R56       ; R0 := R56
941 [-]: MOVE      R0 R62       ; R0 := R62
942 [-]: SETGLOBAL R120 K214    ; OnFuseWeapon := R120
943 [-]: CLOSURE   R120 186     ; R120 := closure(Function #187)
944 [-]: MOVE      R0 R13       ; R0 := R13
945 [-]: MOVE      R0 R27       ; R0 := R27
946 [-]: MOVE      R0 R3        ; R0 := R3
947 [-]: SETGLOBAL R120 K215    ; ConfirmFuseWeapon := R120
948 [-]: CLOSURE   R120 187     ; R120 := closure(Function #188)
949 [-]: SETGLOBAL R120 K216    ; FuseStatChosen := R120
950 [-]: CLOSURE   R120 188     ; R120 := closure(Function #189)
951 [-]: MOVE      R0 R4        ; R0 := R4
952 [-]: MOVE      R0 R13       ; R0 := R13
953 [-]: MOVE      R0 R5        ; R0 := R5
954 [-]: MOVE      R0 R3        ; R0 := R3
955 [-]: SETGLOBAL R120 K217    ; FuseKuvaWeapon := R120
956 [-]: CLOSURE   R120 189     ; R120 := closure(Function #190)
957 [-]: MOVE      R0 R113      ; R0 := R113
958 [-]: MOVE      R0 R13       ; R0 := R13
959 [-]: MOVE      R0 R91       ; R0 := R91
960 [-]: MOVE      R0 R11       ; R0 := R11
961 [-]: MOVE      R0 R7        ; R0 := R7
962 [-]: MOVE      R0 R4        ; R0 := R4
963 [-]: CLOSURE   R121 190     ; R121 := closure(Function #191)
964 [-]: MOVE      R0 R89       ; R0 := R89
965 [-]: MOVE      R0 R14       ; R0 := R14
966 [-]: MOVE      R0 R119      ; R0 := R119
967 [-]: MOVE      R0 R112      ; R0 := R112
968 [-]: MOVE      R0 R118      ; R0 := R118
969 [-]: MOVE      R0 R100      ; R0 := R100
970 [-]: MOVE      R0 R120      ; R0 := R120
971 [-]: SETGLOBAL R121 K218    ; ActionSelected := R121
972 [-]: CLOSURE   R121 191     ; R121 := closure(Function #192)
973 [-]: SETGLOBAL R121 K219    ; RenameIconFocused := R121
974 [-]: CLOSURE   R121 192     ; R121 := closure(Function #193)
975 [-]: SETGLOBAL R121 K220    ; RenameIconUnfocused := R121
976 [-]: CLOSURE   R121 193     ; R121 := closure(Function #194)
977 [-]: MOVE      R0 R100      ; R0 := R100
978 [-]: SETGLOBAL R121 K221    ; RenameIconPressed := R121
979 [-]: CLOSURE   R121 194     ; R121 := closure(Function #195)
980 [-]: SETGLOBAL R121 K222    ; LinkIconFocused := R121
981 [-]: CLOSURE   R121 195     ; R121 := closure(Function #196)
982 [-]: SETGLOBAL R121 K223    ; LinkIconUnfocused := R121
983 [-]: CLOSURE   R121 196     ; R121 := closure(Function #197)
984 [-]: MOVE      R0 R3        ; R0 := R3
985 [-]: SETGLOBAL R121 K224    ; LinkIconPressed := R121
986 [-]: CLOSURE   R121 197     ; R121 := closure(Function #198)
987 [-]: MOVE      R0 R26       ; R0 := R26
988 [-]: SETGLOBAL R121 K225    ; HintIconFocused := R121
989 [-]: CLOSURE   R121 198     ; R121 := closure(Function #199)
990 [-]: MOVE      R0 R26       ; R0 := R26
991 [-]: SETGLOBAL R121 K226    ; HintIconUnfocused := R121
992 [-]: CLOSURE   R121 199     ; R121 := closure(Function #200)
993 [-]: MOVE      R0 R3        ; R0 := R3
994 [-]: MOVE      R0 R15       ; R0 := R15
995 [-]: SETGLOBAL R121 K227    ; OnArcaneSlotFocused := R121
996 [-]: CLOSURE   R121 200     ; R121 := closure(Function #201)
997 [-]: MOVE      R0 R15       ; R0 := R15
998 [-]: SETGLOBAL R121 K228    ; OnArcaneSlotUnfocused := R121
999 [-]: CLOSURE   R121 201     ; R121 := closure(Function #202)
1000 [-]: MOVE      R0 R13       ; R0 := R13
1001 [-]: MOVE      R0 R14       ; R0 := R14
1002 [-]: MOVE      R0 R3        ; R0 := R3
1003 [-]: MOVE      R0 R106      ; R0 := R106
1004 [-]: MOVE      R0 R93       ; R0 := R93
1005 [-]: MOVE      R0 R0        ; R0 := R0
1006 [-]: SETGLOBAL R121 K229    ; OnArcaneSlotPressed := R121
1007 [-]: CLOSURE   R121 202     ; R121 := closure(Function #203)
1008 [-]: MOVE      R0 R4        ; R0 := R4
1009 [-]: SETGLOBAL R121 K230    ; AbilityRollOver := R121
1010 [-]: CLOSURE   R121 203     ; R121 := closure(Function #204)
1011 [-]: SETGLOBAL R121 K231    ; AbilityRollOut := R121
1012 [-]: CLOSURE   R121 204     ; R121 := closure(Function #205)
1013 [-]: MOVE      R0 R35       ; R0 := R35
1014 [-]: MOVE      R0 R96       ; R0 := R96
1015 [-]: MOVE      R0 R33       ; R0 := R33
1016 [-]: SETGLOBAL R121 K232    ; OnGamepadTransition := R121
1017 [-]: CLOSURE   R121 205     ; R121 := closure(Function #206)
1018 [-]: MOVE      R0 R76       ; R0 := R76
1019 [-]: MOVE      R0 R60       ; R0 := R60
1020 [-]: SETGLOBAL R121 K233    ; IconCacheFlushed := R121
1021 [-]: CLOSURE   R121 206     ; R121 := closure(Function #207)
1022 [-]: MOVE      R0 R13       ; R0 := R13
1023 [-]: MOVE      R0 R56       ; R0 := R56
1024 [-]: MOVE      R0 R94       ; R0 := R94
1025 [-]: SETGLOBAL R121 K234    ; OnUpgradesCopied := R121
1026 [-]: CLOSURE   R121 207     ; R121 := closure(Function #208)
1027 [-]: SETGLOBAL R121 K235    ; StatSelected := R121
1028 [-]: CLOSURE   R121 208     ; R121 := closure(Function #209)
1029 [-]: SETGLOBAL R121 K236    ; StatFocused := R121
1030 [-]: CLOSURE   R121 209     ; R121 := closure(Function #210)
1031 [-]: SETGLOBAL R121 K237    ; StatUnfocused := R121
1032 [-]: CLOSURE   R121 210     ; R121 := closure(Function #211)
1033 [-]: SETGLOBAL R121 K238    ; StatPressed := R121
1034 [-]: CLOSURE   R121 211     ; R121 := closure(Function #212)
1035 [-]: SETGLOBAL R121 K239    ; SupportsThemes := R121
1036 [-]: CLOSURE   R121 212     ; R121 := closure(Function #213)
1037 [-]: SETGLOBAL R121 K240    ; CategorizedGridForceUnthemedCategories := R121
1038 [-]: CLOSURE   R121 213     ; R121 := closure(Function #214)
1039 [-]: MOVE      R0 R111      ; R0 := R111
1040 [-]: SETGLOBAL R121 K241    ; onViewportSizeChanged := R121
1041 [-]: CLOSURE   R121 214     ; R121 := closure(Function #215)
1042 [-]: SETGLOBAL R121 K242    ; HideScreenForPlatPurchase := R121
1043 [-]: RETURN    R0 1         ; return 


; Function #1:
;
; Name:            
; Defined at line: 230
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := mInputBlocked
  2 [-]: RETURN    R0 2         ; return R0
  3 [-]: RETURN    R0 1         ; return 


; Function #2:
;
; Name:            
; Defined at line: 234
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := mCards
  2 [-]: RETURN    R0 2         ; return R0
  3 [-]: RETURN    R0 1         ; return 


; Function #3:
;
; Name:            
; Defined at line: 238
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: RETURN    R0 2         ; return R0
  2 [-]: RETURN    R0 1         ; return 


; Function #4:
;
; Name:            
; Defined at line: 242
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: RETURN    R0 2         ; return R0
  2 [-]: RETURN    R0 1         ; return 


; Function #5:
;
; Name:            
; Defined at line: 246
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := mOmegaCount
  2 [-]: LT        1 K1 R0      ; if 0.000000 < R0 then PC := 5
  3 [-]: JMP       5            ; PC := 5
  4 [-]: LOADKB    R0 0 1       ; R0 := false; PC := 5
  5 [-]: LOADKB    R0 1 0       ; R0 := true
  6 [-]: RETURN    R0 2         ; return R0
  7 [-]: RETURN    R0 1         ; return 


; Function #6:
;
; Name:            
; Defined at line: 250
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  2 [-]: GETGLOBAL R1 K1        ; R1 := mRailjackMovie
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: TEST      R0 1         ; if R0 then PC := 9
  5 [-]: JMP       9            ; PC := 9
  6 [-]: GETGLOBAL R0 K2        ; R0 := mHidingRJMovie
  7 [-]: TEST      R0 0         ; if not R0 then PC := 10
  8 [-]: JMP       10           ; PC := 10
  9 [-]: RETURN    R0 1         ; return 
 10 [-]: LOADKB    R0 1 0       ; R0 := true
 11 [-]: SETGLOBAL R0 K2        ; mHidingRJMovie := R0
 12 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
 13 [-]: GETGLOBAL R1 K1        ; R1 := mRailjackMovie
 14 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 15 [-]: TEST      R0 1         ; if R0 then PC := 26
 16 [-]: JMP       26           ; PC := 26
 17 [-]: GETGLOBAL R0 K3        ; R0 := _T
 18 [-]: GETTABLE  R0 R0 K4     ; R0 := R0[0xdf29a9d6]
 19 [-]: LOADK     R1 K5        ; R1 := ""
 20 [-]: LOADK     R2 K5        ; R2 := ""
 21 [-]: CALL      R0 3 1       ; R0(R1,R2)
 22 [-]: GETGLOBAL R0 K1        ; R0 := mRailjackMovie
 23 [-]: SELF      R0 R0 K6     ; R1 := R0; R0 := R0[0x368ad758]
 24 [-]: LOADKB    R2 0 0       ; R2 := false
 25 [-]: CALL      R0 3 1       ; R0(R1,R2)
 26 [-]: RETURN    R0 1         ; return 


; Function #7:
;
; Name:            
; Defined at line: 263
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  10

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0xc8802016
  2 [-]: GETGLOBAL R2 K1        ; R2 := 0xe6fac8a2
  3 [-]: CALL      R1 2 4       ; R1,R2,R3 := R1(R2)
  4 [-]: JMP       17           ; PC := 17
  5 [-]: GETGLOBAL R6 K2        ; R6 := 0x9ba7909f
  6 [-]: SELF      R6 R6 K3     ; R7 := R6; R6 := R6[0xbcfb64ab]
  7 [-]: MOVE      R8 R5        ; R8 := R5
  8 [-]: CALL      R6 3 2       ; R6 := R6(R7,R8)
  9 [-]: GETGLOBAL R7 K4        ; R7 := 0x7b998233
 10 [-]: MOVE      R8 R6        ; R8 := R6
 11 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 12 [-]: TEST      R7 1         ; if R7 then PC := 17
 13 [-]: JMP       17           ; PC := 17
 14 [-]: SELF      R7 R6 K5     ; R8 := R6; R7 := R6[0x368ad758]
 15 [-]: MOVE      R9 R0        ; R9 := R0
 16 [-]: CALL      R7 3 1       ; R7(R8,R9)
 17 [-]: TFORLOOP  R1 2         ; R4,R5 :=  R1(R2,R3); if R4 ~= nil then begin PC = 5; R3 := R4 end
 18 [-]: JMP       5            ; PC := 5
 19 [-]: RETURN    R0 1         ; return 


; Function #8:
;
; Name:            
; Defined at line: 272
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETUPVAL  R1 U0        ; R1 := U0
  2 [-]: GETTABLE  R1 R1 K0     ; R1 := R1[0x6ef45ebc]
  3 [-]: CALL      R1 1 2       ; R1 := R1()
  4 [-]: GETGLOBAL R2 K1        ; R2 := 0x7b998233
  5 [-]: MOVE      R3 R1        ; R3 := R1
  6 [-]: CALL      R2 2 2       ; R2 := R2(R3)
  7 [-]: TEST      R2 1         ; if R2 then PC := 12
  8 [-]: JMP       12           ; PC := 12
  9 [-]: SELF      R2 R1 K2     ; R3 := R1; R2 := R1[0x0b4bcfb6]
 10 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 11 [-]: MOVE      R0 R2        ; R0 := R2
 12 [-]: GETGLOBAL R2 K1        ; R2 := 0x7b998233
 13 [-]: MOVE      R3 R0        ; R3 := R0
 14 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 15 [-]: TEST      R2 0         ; if not R2 then PC := 35
 16 [-]: JMP       35           ; PC := 35
 17 [-]: GETGLOBAL R2 K1        ; R2 := 0x7b998233
 18 [-]: GETGLOBAL R3 K3        ; R3 := 0x89326c93
 19 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 20 [-]: TEST      R2 1         ; if R2 then PC := 35
 21 [-]: JMP       35           ; PC := 35
 22 [-]: GETGLOBAL R2 K1        ; R2 := 0x7b998233
 23 [-]: GETGLOBAL R3 K3        ; R3 := 0x89326c93
 24 [-]: SELF      R3 R3 K4     ; R4 := R3; R3 := R3[0x78298275]
 25 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 26 [-]: CALL      R2 0 2       ; R2 := R2(R3,...)
 27 [-]: TEST      R2 1         ; if R2 then PC := 35
 28 [-]: JMP       35           ; PC := 35
 29 [-]: GETGLOBAL R2 K3        ; R2 := 0x89326c93
 30 [-]: SELF      R2 R2 K4     ; R3 := R2; R2 := R2[0x78298275]
 31 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 32 [-]: SELF      R2 R2 K2     ; R3 := R2; R2 := R2[0x0b4bcfb6]
 33 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 34 [-]: MOVE      R0 R2        ; R0 := R2
 35 [-]: RETURN    R0 2         ; return R0
 36 [-]: RETURN    R0 1         ; return 


; Function #9:
;
; Name:            
; Defined at line: 285
; #Upvalues:       6
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  14

  1 [-]: GETGLOBAL R0 K0        ; R0 := mShuttingDown
  2 [-]: TEST      R0 0         ; if not R0 then PC := 5
  3 [-]: JMP       5            ; PC := 5
  4 [-]: RETURN    R0 1         ; return 
  5 [-]: LOADKB    R0 1 0       ; R0 := true
  6 [-]: SETGLOBAL R0 K0        ; mShuttingDown := R0
  7 [-]: GETGLOBAL R0 K1        ; R0 := mExitingToModScreen
  8 [-]: TEST      R0 1         ; if R0 then PC := 15
  9 [-]: JMP       15           ; PC := 15
 10 [-]: GETGLOBAL R0 K2        ; R0 := 0x7b998233
 11 [-]: GETGLOBAL R1 K3        ; R1 := mRailjackMovie
 12 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 13 [-]: TEST      R0 1         ; if R0 then PC := 46
 14 [-]: JMP       46           ; PC := 46
 15 [-]: GETGLOBAL R0 K2        ; R0 := 0x7b998233
 16 [-]: GETGLOBAL R1 K4        ; R1 := 0x83f4e77c
 17 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 18 [-]: TEST      R0 1         ; if R0 then PC := 46
 19 [-]: JMP       46           ; PC := 46
 20 [-]: GETGLOBAL R0 K2        ; R0 := 0x7b998233
 21 [-]: GETGLOBAL R1 K5        ; R1 := 0x89326c93
 22 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 23 [-]: TEST      R0 1         ; if R0 then PC := 46
 24 [-]: JMP       46           ; PC := 46
 25 [-]: GETGLOBAL R0 K5        ; R0 := 0x89326c93
 26 [-]: SELF      R0 R0 K6     ; R1 := R0; R0 := R0[0xfb64e76c]
 27 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 28 [-]: GETGLOBAL R1 K4        ; R1 := 0x83f4e77c
 29 [-]: SELF      R1 R1 K7     ; R2 := R1; R1 := R1[0xd3c6feca]
 30 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 31 [-]: GETGLOBAL R2 K2        ; R2 := 0x7b998233
 32 [-]: MOVE      R3 R1        ; R3 := R1
 33 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 34 [-]: TEST      R2 1         ; if R2 then PC := 46
 35 [-]: JMP       46           ; PC := 46
 36 [-]: GETGLOBAL R2 K2        ; R2 := 0x7b998233
 37 [-]: MOVE      R3 R0        ; R3 := R0
 38 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 39 [-]: TEST      R2 1         ; if R2 then PC := 46
 40 [-]: JMP       46           ; PC := 46
 41 [-]: SELF      R2 R1 K8     ; R3 := R1; R2 := R1[0x1be972b8]
 42 [-]: MOVE      R4 R0        ; R4 := R0
 43 [-]: GETGLOBAL R5 K9        ; R5 := 0xf3a45924
 44 [-]: LOADNIL   R6 R6        ; R6 := nil
 45 [-]: CALL      R2 5 1       ; R2(R3,R4,R5,R6)
 46 [-]: GETGLOBAL R2 K1        ; R2 := mExitingToModScreen
 47 [-]: TEST      R2 1         ; if R2 then PC := 51
 48 [-]: JMP       51           ; PC := 51
 49 [-]: GETGLOBAL R2 K10       ; R2 := _T
 50 [-]: SETTABLE  R2 K11 K12   ; R2["upgradeItem"] := nil
 51 [-]: GETGLOBAL R2 K10       ; R2 := _T
 52 [-]: SETTABLE  R2 K13 K12   ; R2["InfoPopup_Data"] := nil
 53 [-]: GETGLOBAL R2 K2        ; R2 := 0x7b998233
 54 [-]: GETGLOBAL R3 K5        ; R3 := 0x89326c93
 55 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 56 [-]: TEST      R2 1         ; if R2 then PC := 88
 57 [-]: JMP       88           ; PC := 88
 58 [-]: GETUPVAL  R2 U0        ; R2 := U0
 59 [-]: GETTABLE  R2 R2 K14    ; R2 := R2[0xa9882367]
 60 [-]: LOADK     R3 K15       ; R3 := "RampMover"
 61 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 62 [-]: GETGLOBAL R3 K2        ; R3 := 0x7b998233
 63 [-]: MOVE      R4 R2        ; R4 := R2
 64 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 65 [-]: TEST      R3 1         ; if R3 then PC := 70
 66 [-]: JMP       70           ; PC := 70
 67 [-]: SELF      R3 R2 K16    ; R4 := R2; R3 := R2[0x8eb2112d]
 68 [-]: LOADK     R5 K17       ; R5 := "StartForward"
 69 [-]: CALL      R3 3 1       ; R3(R4,R5)
 70 [-]: GETGLOBAL R3 K2        ; R3 := 0x7b998233
 71 [-]: GETGLOBAL R4 K18       ; R4 := 0xbe190284
 72 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 73 [-]: TEST      R3 1         ; if R3 then PC := 88
 74 [-]: JMP       88           ; PC := 88
 75 [-]: GETGLOBAL R3 K19       ; R3 := mSetPauseDisabled
 76 [-]: TEST      R3 0         ; if not R3 then PC := 88
 77 [-]: JMP       88           ; PC := 88
 78 [-]: GETGLOBAL R3 K1        ; R3 := mExitingToModScreen
 79 [-]: TEST      R3 0         ; if not R3 then PC := 84
 80 [-]: JMP       84           ; PC := 84
 81 [-]: GETGLOBAL R3 K10       ; R3 := _T
 82 [-]: SETTABLE  R3 K20 K21   ; R3["UpgradeScreenPauseDisabled"] := true
 83 [-]: JMP       88           ; PC := 88
 84 [-]: GETGLOBAL R3 K18       ; R3 := 0xbe190284
 85 [-]: SELF      R3 R3 K22    ; R4 := R3; R3 := R3[0xc02f2cb8]
 86 [-]: LOADKB    R5 0 0       ; R5 := false
 87 [-]: CALL      R3 3 1       ; R3(R4,R5)
 88 [-]: GETGLOBAL R3 K23       ; R3 := mShouldClose
 89 [-]: TEST      R3 0         ; if not R3 then PC := 130
 90 [-]: JMP       130          ; PC := 130
 91 [-]: GETGLOBAL R3 K24       ; R3 := mRailjackNavOnClose
 92 [-]: TEST      R3 0         ; if not R3 then PC := 130
 93 [-]: JMP       130          ; PC := 130
 94 [-]: GETGLOBAL R3 K2        ; R3 := 0x7b998233
 95 [-]: GETGLOBAL R4 K3        ; R4 := mRailjackMovie
 96 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 97 [-]: TEST      R3 1         ; if R3 then PC := 130
 98 [-]: JMP       130          ; PC := 130
 99 [-]: GETUPVAL  R3 U1        ; R3 := U1
100 [-]: CALL      R3 1 2       ; R3 := R3()
101 [-]: TEST      R3 0         ; if not R3 then PC := 118
102 [-]: JMP       118          ; PC := 118
103 [-]: GETGLOBAL R3 K1        ; R3 := mExitingToModScreen
104 [-]: TEST      R3 0         ; if not R3 then PC := 112
105 [-]: JMP       112          ; PC := 112
106 [-]: GETGLOBAL R3 K3        ; R3 := mRailjackMovie
107 [-]: SELF      R3 R3 K25    ; R4 := R3; R3 := R3[0xe4162eed]
108 [-]: LOADK     R5 K26       ; R5 := "GoBack"
109 [-]: LOADK     R6 K27       ; R6 := "a, true"
110 [-]: CALL      R3 4 1       ; R3(R4,R5,R6)
111 [-]: JMP       130          ; PC := 130
112 [-]: GETGLOBAL R3 K3        ; R3 := mRailjackMovie
113 [-]: SELF      R3 R3 K25    ; R4 := R3; R3 := R3[0xe4162eed]
114 [-]: LOADK     R5 K28       ; R5 := "ChildMovieClosed"
115 [-]: LOADK     R6 K29       ; R6 := "true"
116 [-]: CALL      R3 4 1       ; R3(R4,R5,R6)
117 [-]: JMP       130          ; PC := 130
118 [-]: GETGLOBAL R3 K30       ; R3 := 0xae91e43b
119 [-]: SELF      R3 R3 K31    ; R4 := R3; R3 := R3[0x33abee92]
120 [-]: CALL      R3 2 2       ; R3 := R3(R4)
121 [-]: GETGLOBAL R4 K2        ; R4 := 0x7b998233
122 [-]: MOVE      R5 R3        ; R5 := R3
123 [-]: CALL      R4 2 2       ; R4 := R4(R5)
124 [-]: TEST      R4 1         ; if R4 then PC := 130
125 [-]: JMP       130          ; PC := 130
126 [-]: SELF      R4 R3 K25    ; R5 := R3; R4 := R3[0xe4162eed]
127 [-]: LOADK     R6 K32       ; R6 := "UpgradeCardsClosed"
128 [-]: LOADK     R7 K33       ; R7 := ""
129 [-]: CALL      R4 4 1       ; R4(R5,R6,R7)
130 [-]: GETUPVAL  R4 U2        ; R4 := U2
131 [-]: LOADKB    R5 1 0       ; R5 := true
132 [-]: CALL      R4 2 1       ; R4(R5)
133 [-]: GETGLOBAL R4 K2        ; R4 := 0x7b998233
134 [-]: GETGLOBAL R5 K34       ; R5 := mCollectionGrid
135 [-]: CALL      R4 2 2       ; R4 := R4(R5)
136 [-]: TEST      R4 1         ; if R4 then PC := 159
137 [-]: JMP       159          ; PC := 159
138 [-]: GETGLOBAL R4 K34       ; R4 := mCollectionGrid
139 [-]: SELF      R4 R4 K35    ; R5 := R4; R4 := R4[0xc32ccf2e]
140 [-]: CALL      R4 2 2       ; R4 := R4(R5)
141 [-]: GETGLOBAL R5 K2        ; R5 := 0x7b998233
142 [-]: MOVE      R6 R4        ; R6 := R4
143 [-]: CALL      R5 2 2       ; R5 := R5(R6)
144 [-]: TEST      R5 1         ; if R5 then PC := 159
145 [-]: JMP       159          ; PC := 159
146 [-]: GETGLOBAL R5 K2        ; R5 := 0x7b998233
147 [-]: GETGLOBAL R6 K36       ; R6 := mGameData
148 [-]: CALL      R5 2 2       ; R5 := R5(R6)
149 [-]: TEST      R5 1         ; if R5 then PC := 159
150 [-]: JMP       159          ; PC := 159
151 [-]: GETGLOBAL R5 K30       ; R5 := 0xae91e43b
152 [-]: SELF      R5 R5 K37    ; R6 := R5; R5 := R5[0x492f9da2]
153 [-]: CALL      R5 2 2       ; R5 := R5(R6)
154 [-]: GETGLOBAL R6 K36       ; R6 := mGameData
155 [-]: SELF      R6 R6 K38    ; R7 := R6; R6 := R6[0x7855ea52]
156 [-]: MOVE      R8 R5        ; R8 := R5
157 [-]: MOVE      R9 R4        ; R9 := R4
158 [-]: CALL      R6 4 1       ; R6(R7,R8,R9)
159 [-]: GETGLOBAL R6 K2        ; R6 := 0x7b998233
160 [-]: GETGLOBAL R7 K39       ; R7 := mChildMovie
161 [-]: CALL      R6 2 2       ; R6 := R6(R7)
162 [-]: TEST      R6 1         ; if R6 then PC := 167
163 [-]: JMP       167          ; PC := 167
164 [-]: GETGLOBAL R6 K39       ; R6 := mChildMovie
165 [-]: SELF      R6 R6 K40    ; R7 := R6; R6 := R6[0x32302b4a]
166 [-]: CALL      R6 2 1       ; R6(R7)
167 [-]: GETGLOBAL R6 K2        ; R6 := 0x7b998233
168 [-]: GETGLOBAL R7 K41       ; R7 := mCameraSpot
169 [-]: CALL      R6 2 2       ; R6 := R6(R7)
170 [-]: TEST      R6 1         ; if R6 then PC := 205
171 [-]: JMP       205          ; PC := 205
172 [-]: GETGLOBAL R6 K41       ; R6 := mCameraSpot
173 [-]: SELF      R6 R6 K42    ; R7 := R6; R6 := R6[0xa2880940]
174 [-]: CALL      R6 2 1       ; R6(R7)
175 [-]: GETUPVAL  R6 U3        ; R6 := U3
176 [-]: CALL      R6 1 2       ; R6 := R6()
177 [-]: GETGLOBAL R7 K2        ; R7 := 0x7b998233
178 [-]: MOVE      R8 R6        ; R8 := R6
179 [-]: CALL      R7 2 2       ; R7 := R7(R8)
180 [-]: TEST      R7 1         ; if R7 then PC := 205
181 [-]: JMP       205          ; PC := 205
182 [-]: GETGLOBAL R7 K2        ; R7 := 0x7b998233
183 [-]: GETGLOBAL R8 K43       ; R8 := mOldCameraSpot
184 [-]: CALL      R7 2 2       ; R7 := R7(R8)
185 [-]: TEST      R7 1         ; if R7 then PC := 191
186 [-]: JMP       191          ; PC := 191
187 [-]: SELF      R7 R6 K44    ; R8 := R6; R7 := R6[0x14c7f7dd]
188 [-]: LOADNIL   R9 R9        ; R9 := nil
189 [-]: CONST     R10 0        ; R10 := 0.000000
190 [-]: CALL      R7 4 1       ; R7(R8,R9,R10)
191 [-]: GETGLOBAL R7 K23       ; R7 := mShouldClose
192 [-]: TEST      R7 0         ; if not R7 then PC := 205
193 [-]: JMP       205          ; PC := 205
194 [-]: SELF      R7 R6 K44    ; R8 := R6; R7 := R6[0x14c7f7dd]
195 [-]: GETGLOBAL R9 K43       ; R9 := mOldCameraSpot
196 [-]: GETUPVAL  R10 U0       ; R10 := U0
197 [-]: GETTABLE  R10 R10 K45  ; R10 := R10[0x06d055f9]
198 [-]: GETGLOBAL R11 K2       ; R11 := 0x7b998233
199 [-]: GETGLOBAL R12 K43      ; R12 := mOldCameraSpot
200 [-]: CALL      R11 2 2      ; R11 := R11(R12)
201 [-]: CONST     R12 0        ; R12 := 0.000000
202 [-]: CONST     R13 0        ; R13 := 0.250000
203 [-]: CALL      R10 4 0      ; R10,... := R10(R11,R12,R13)
204 [-]: CALL      R7 0 1       ; R7(R8,...)
205 [-]: GETGLOBAL R7 K23       ; R7 := mShouldClose
206 [-]: TEST      R7 1         ; if R7 then PC := 264
207 [-]: JMP       264          ; PC := 264
208 [-]: GETGLOBAL R7 K2        ; R7 := 0x7b998233
209 [-]: GETGLOBAL R8 K5        ; R8 := 0x89326c93
210 [-]: CALL      R7 2 2       ; R7 := R7(R8)
211 [-]: TEST      R7 1         ; if R7 then PC := 264
212 [-]: JMP       264          ; PC := 264
213 [-]: GETGLOBAL R7 K2        ; R7 := 0x7b998233
214 [-]: GETGLOBAL R8 K3        ; R8 := mRailjackMovie
215 [-]: CALL      R7 2 2       ; R7 := R7(R8)
216 [-]: TEST      R7 0         ; if not R7 then PC := 264
217 [-]: JMP       264          ; PC := 264
218 [-]: GETGLOBAL R7 K5        ; R7 := 0x89326c93
219 [-]: SELF      R7 R7 K46    ; R8 := R7; R7 := R7[0x59c96e77]
220 [-]: GETGLOBAL R9 K10       ; R9 := _T
221 [-]: GETTABLE  R9 R9 K47    ; R9 := R9["MenuSuitAvatar"]
222 [-]: CALL      R7 3 1       ; R7(R8,R9)
223 [-]: GETGLOBAL R7 K10       ; R7 := _T
224 [-]: SETTABLE  R7 K47 K12   ; R7["MenuSuitAvatar"] := nil
225 [-]: GETGLOBAL R7 K5        ; R7 := 0x89326c93
226 [-]: SELF      R7 R7 K6     ; R8 := R7; R7 := R7[0xfb64e76c]
227 [-]: CALL      R7 2 2       ; R7 := R7(R8)
228 [-]: GETGLOBAL R8 K2        ; R8 := 0x7b998233
229 [-]: MOVE      R9 R7        ; R9 := R7
230 [-]: CALL      R8 2 2       ; R8 := R8(R9)
231 [-]: TEST      R8 1         ; if R8 then PC := 243
232 [-]: JMP       243          ; PC := 243
233 [-]: GETGLOBAL R8 K10       ; R8 := _T
234 [-]: SELF      R9 R7 K48    ; R10 := R7; R9 := R7[0xa534c3ac]
235 [-]: CALL      R9 2 2       ; R9 := R9(R10)
236 [-]: SETTABLE  R8 K47 R9    ; R8["MenuSuitAvatar"] := R9
237 [-]: GETGLOBAL R8 K10       ; R8 := _T
238 [-]: GETTABLE  R8 R8 K47    ; R8 := R8["MenuSuitAvatar"]
239 [-]: SELF      R8 R8 K49    ; R9 := R8; R8 := R8[0x768274d6]
240 [-]: LOADKB    R10 1 0      ; R10 := true
241 [-]: LOADKB    R11 1 0      ; R11 := true
242 [-]: CALL      R8 4 1       ; R8(R9,R10,R11)
243 [-]: GETGLOBAL R8 K10       ; R8 := _T
244 [-]: GETTABLE  R8 R8 K50    ; R8 := R8[0x80172c74]
245 [-]: CALL      R8 1 1       ; R8()
246 [-]: GETGLOBAL R8 K10       ; R8 := _T
247 [-]: GETTABLE  R8 R8 K51    ; R8 := R8[0x021c8cce]
248 [-]: CALL      R8 1 1       ; R8()
249 [-]: GETGLOBAL R8 K10       ; R8 := _T
250 [-]: SETTABLE  R8 K52 K12   ; R8["mLoadoutInPosition"] := nil
251 [-]: GETGLOBAL R8 K10       ; R8 := _T
252 [-]: SETTABLE  R8 K53 K12   ; R8["loadoutInProgress"] := nil
253 [-]: GETGLOBAL R8 K2        ; R8 := 0x7b998233
254 [-]: GETGLOBAL R9 K10       ; R9 := _T
255 [-]: GETTABLE  R9 R9 K54    ; R9 := R9["mTrigger"]
256 [-]: CALL      R8 2 2       ; R8 := R8(R9)
257 [-]: TEST      R8 1         ; if R8 then PC := 264
258 [-]: JMP       264          ; PC := 264
259 [-]: GETGLOBAL R8 K10       ; R8 := _T
260 [-]: GETTABLE  R8 R8 K54    ; R8 := R8["mTrigger"]
261 [-]: SELF      R8 R8 K16    ; R9 := R8; R8 := R8[0x8eb2112d]
262 [-]: LOADK     R10 K55      ; R10 := "Close"
263 [-]: CALL      R8 3 1       ; R8(R9,R10)
264 [-]: GETGLOBAL R8 K2        ; R8 := 0x7b998233
265 [-]: GETGLOBAL R9 K36       ; R9 := mGameData
266 [-]: CALL      R8 2 2       ; R8 := R8(R9)
267 [-]: TEST      R8 1         ; if R8 then PC := 286
268 [-]: JMP       286          ; PC := 286
269 [-]: GETGLOBAL R8 K2        ; R8 := 0x7b998233
270 [-]: GETUPVAL  R9 U4        ; R9 := U4
271 [-]: CALL      R8 2 2       ; R8 := R8(R9)
272 [-]: TEST      R8 1         ; if R8 then PC := 286
273 [-]: JMP       286          ; PC := 286
274 [-]: GETGLOBAL R8 K2        ; R8 := 0x7b998233
275 [-]: GETUPVAL  R9 U4        ; R9 := U4
276 [-]: GETTABLE  R9 R9 K56    ; R9 := R9["info"]
277 [-]: CALL      R8 2 2       ; R8 := R8(R9)
278 [-]: TEST      R8 1         ; if R8 then PC := 286
279 [-]: JMP       286          ; PC := 286
280 [-]: GETGLOBAL R8 K36       ; R8 := mGameData
281 [-]: SELF      R8 R8 K57    ; R9 := R8; R8 := R8[0x2f77a632]
282 [-]: GETUPVAL  R10 U4       ; R10 := U4
283 [-]: GETTABLE  R10 R10 K56  ; R10 := R10["info"]
284 [-]: GETTABLE  R10 R10 K58  ; R10 := R10["mItemType"]
285 [-]: CALL      R8 3 1       ; R8(R9,R10)
286 [-]: GETGLOBAL R8 K10       ; R8 := _T
287 [-]: GETGLOBAL R9 K60       ; R9 := mCachedSentinelMode
288 [-]: SETTABLE  R8 K59 R9    ; R8[0x0032441c] := R9
289 [-]: GETGLOBAL R8 K60       ; R8 := mCachedSentinelMode
290 [-]: TEST      R8 0         ; if not R8 then PC := 302
291 [-]: JMP       302          ; PC := 302
292 [-]: GETGLOBAL R8 K10       ; R8 := _T
293 [-]: GETTABLE  R8 R8 K61    ; R8 := R8["suitTable"]
294 [-]: EQ        0 R8 K12     ; if R8 ~= nil then PC := 299
295 [-]: JMP       299          ; PC := 299
296 [-]: GETGLOBAL R8 K10       ; R8 := _T
297 [-]: NEWTABLE  R9 0 0       ; R9 := {}
298 [-]: SETTABLE  R8 K61 R9    ; R8[0x25312c9b] := R9
299 [-]: GETGLOBAL R8 K10       ; R8 := _T
300 [-]: GETTABLE  R8 R8 K61    ; R8 := R8["suitTable"]
301 [-]: SETTABLE  R8 K62 K63   ; R8["queuedTeleport"] := 2.000000
302 [-]: GETGLOBAL R8 K10       ; R8 := _T
303 [-]: SETTABLE  R8 K64 K12   ; R8["mCachedSpecialSuitMode"] := nil
304 [-]: GETGLOBAL R8 K10       ; R8 := _T
305 [-]: GETGLOBAL R9 K64       ; R9 := mCachedSpecialSuitMode
306 [-]: SETTABLE  R8 K65 R9    ; R8["mSpecialSuitMode"] := R9
307 [-]: GETGLOBAL R8 K10       ; R8 := _T
308 [-]: SETTABLE  R8 K66 K67   ; R8["ArsenalUpgradeOpen"] := false
309 [-]: GETUPVAL  R8 U5        ; R8 := U5
310 [-]: GETTABLE  R8 R8 K68    ; R8 := R8[0x9e3d3434]
311 [-]: LOADKB    R9 0 0       ; R9 := false
312 [-]: CALL      R8 2 1       ; R8(R9)
313 [-]: RETURN    R0 1         ; return 


; Function #10:
;
; Name:            
; Defined at line: 409
; #Upvalues:       2
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  9

  1 [-]: GETGLOBAL R0 K0        ; R0 := mInputBlocked
  2 [-]: TEST      R0 0         ; if not R0 then PC := 5
  3 [-]: JMP       5            ; PC := 5
  4 [-]: RETURN    R0 1         ; return 
  5 [-]: LOADKB    R0 1 0       ; R0 := true
  6 [-]: SETGLOBAL R0 K0        ; mInputBlocked := R0
  7 [-]: GETGLOBAL R0 K1        ; R0 := 0x7b998233
  8 [-]: GETGLOBAL R1 K2        ; R1 := mDiegeticHelper
  9 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 10 [-]: TEST      R0 1         ; if R0 then PC := 16
 11 [-]: JMP       16           ; PC := 16
 12 [-]: GETGLOBAL R0 K3        ; R0 := _T
 13 [-]: SETTABLE  R0 K4 K5     ; R0["DiegeticPosition"] := nil
 14 [-]: LOADNIL   R0 R0        ; R0 := nil
 15 [-]: SETGLOBAL R0 K2        ; mDiegeticHelper := R0
 16 [-]: GETGLOBAL R0 K1        ; R0 := 0x7b998233
 17 [-]: GETGLOBAL R1 K6        ; R1 := 0x69c55307
 18 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 19 [-]: TEST      R0 1         ; if R0 then PC := 44
 20 [-]: JMP       44           ; PC := 44
 21 [-]: GETGLOBAL R0 K3        ; R0 := _T
 22 [-]: GETTABLE  R0 R0 K7     ; R0 := R0["ArsenalState"]
 23 [-]: EQ        1 R0 K9      ; if R0 == 3.000000 then PC := 44
 24 [-]: JMP       44           ; PC := 44
 25 [-]: GETGLOBAL R0 K1        ; R0 := 0x7b998233
 26 [-]: GETGLOBAL R1 K3        ; R1 := _T
 27 [-]: GETTABLE  R1 R1 K10    ; R1 := R1["MenuSuitAvatar"]
 28 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 29 [-]: TEST      R0 1         ; if R0 then PC := 44
 30 [-]: JMP       44           ; PC := 44
 31 [-]: GETGLOBAL R0 K1        ; R0 := 0x7b998233
 32 [-]: GETGLOBAL R1 K11       ; R1 := mRailjackMovie
 33 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 34 [-]: TEST      R0 0         ; if not R0 then PC := 44
 35 [-]: JMP       44           ; PC := 44
 36 [-]: GETGLOBAL R0 K3        ; R0 := _T
 37 [-]: GETTABLE  R0 R0 K10    ; R0 := R0["MenuSuitAvatar"]
 38 [-]: SELF      R0 R0 K12    ; R1 := R0; R0 := R0[0x7027c544]
 39 [-]: LOADNIL   R2 R2        ; R2 := nil
 40 [-]: LOADKB    R3 0 0       ; R3 := false
 41 [-]: CONST     R4 2         ; R4 := 2.000000
 42 [-]: CONST     R5 2         ; R5 := 2.000000
 43 [-]: CALL      R0 6 1       ; R0(R1,R2,R3,R4,R5)
 44 [-]: GETUPVAL  R0 U0        ; R0 := U0
 45 [-]: GETTABLE  R0 R0 K14    ; R0 := R0[0x659d451f]
 46 [-]: GETGLOBAL R1 K15       ; R1 := 0x0032441c
 47 [-]: GETTABLE  R1 R1 K16    ; R1 := R1["UISound_WindowClose"]
 48 [-]: CALL      R0 2 1       ; R0(R1)
 49 [-]: GETGLOBAL R0 K17       ; R0 := 0x25312c9b
 50 [-]: GETGLOBAL R1 K18       ; R1 := 0xae91e43b
 51 [-]: LOADK     R2 K19       ; R2 := "_root"
 52 [-]: CONST     R3 1         ; R3 := 1.000000
 53 [-]: NEWTABLE  R4 1 0       ; R4 := {}
 54 [-]: CONST     R5 10        ; R5 := 10.000000
 55 [-]: SETLIST   R4 1 1       ; R4[(1-1)*FPF+i] := R(4+i), 1 <= i <= 1
 56 [-]: NEWTABLE  R5 1 0       ; R5 := {}
 57 [-]: CONST     R6 0         ; R6 := 0.000000
 58 [-]: SETLIST   R5 1 1       ; R5[(1-1)*FPF+i] := R(5+i), 1 <= i <= 1
 59 [-]: LOADK     R6 K21       ; R6 := 0.200000
 60 [-]: CONST     R7 0         ; R7 := 0.000000
 61 [-]: CLOSURE   R8 0         ; R8 := closure(Function #10.1)
 62 [-]: CALL      R0 9 1       ; R0(R1,R2,R3,R4,R5,R6,R7,R8)
 63 [-]: GETGLOBAL R0 K22       ; R0 := mRailjackNavOnClose
 64 [-]: TEST      R0 0         ; if not R0 then PC := 85
 65 [-]: JMP       85           ; PC := 85
 66 [-]: GETGLOBAL R0 K1        ; R0 := 0x7b998233
 67 [-]: GETGLOBAL R1 K11       ; R1 := mRailjackMovie
 68 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 69 [-]: TEST      R0 1         ; if R0 then PC := 85
 70 [-]: JMP       85           ; PC := 85
 71 [-]: GETUPVAL  R0 U1        ; R0 := U1
 72 [-]: CALL      R0 1 2       ; R0 := R0()
 73 [-]: TEST      R0 0         ; if not R0 then PC := 85
 74 [-]: JMP       85           ; PC := 85
 75 [-]: GETGLOBAL R0 K23       ; R0 := mExitingToModScreen
 76 [-]: TEST      R0 1         ; if R0 then PC := 85
 77 [-]: JMP       85           ; PC := 85
 78 [-]: LOADKB    R0 0 0       ; R0 := false
 79 [-]: SETGLOBAL R0 K22       ; mRailjackNavOnClose := R0
 80 [-]: GETGLOBAL R0 K11       ; R0 := mRailjackMovie
 81 [-]: SELF      R0 R0 K24    ; R1 := R0; R0 := R0[0xe4162eed]
 82 [-]: LOADK     R2 K25       ; R2 := "ChildMovieClosed"
 83 [-]: LOADK     R3 K26       ; R3 := "true"
 84 [-]: CALL      R0 4 1       ; R0(R1,R2,R3)
 85 [-]: RETURN    R0 1         ; return 


; Function #10.1:
;
; Name:            
; Defined at line: 427
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: LOADKB    R0 1 0       ; R0 := true
  2 [-]: SETGLOBAL R0 K0        ; mShouldClose := R0
  3 [-]: RETURN    R0 1         ; return 


; Function #11:
;
; Name:            
; Defined at line: 437
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETUPVAL  R0 U0        ; R0 := U0
  2 [-]: CALL      R0 1 1       ; R0()
  3 [-]: RETURN    R0 1         ; return 


; Function #12:
;
; Name:            
; Defined at line: 441
; #Upvalues:       7
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  12

  1 [-]: NEWTABLE  R1 0 0       ; R1 := {}
  2 [-]: GETGLOBAL R2 K0        ; R2 := 0x34291f5c
  3 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x1467d5f4]
  4 [-]: CALL      R2 1 2       ; R2 := R2()
  5 [-]: GETUPVAL  R3 U0        ; R3 := U0
  6 [-]: MOVE      R4 R1        ; R4 := R1
  7 [-]: CALL      R3 2 1       ; R3(R4)
  8 [-]: GETUPVAL  R3 U1        ; R3 := U1
  9 [-]: CALL      R3 1 2       ; R3 := R3()
 10 [-]: TEST      R3 1         ; if R3 then PC := 21
 11 [-]: JMP       21           ; PC := 21
 12 [-]: GETGLOBAL R3 K2        ; R3 := 0x33bdd652
 13 [-]: GETTABLE  R3 R3 K3     ; R3 := R3[0x23d5322f]
 14 [-]: MOVE      R4 R1        ; R4 := R1
 15 [-]: NEWTABLE  R5 0 3       ; R5 := {}
 16 [-]: SETTABLE  R5 K4 K5     ; R5["Label"] := "/Lotus/Language/Menu/ArtifactCards_ActionsTitle"
 17 [-]: GETUPVAL  R6 U2        ; R6 := U2
 18 [-]: SETTABLE  R5 K6 R6     ; R5["CallBack"] := R6
 19 [-]: SETTABLE  R5 K7 K8     ; R5["CallOut"] := "MENU_RTHUMB"
 20 [-]: CALL      R3 3 1       ; R3(R4,R5)
 21 [-]: GETGLOBAL R3 K9        ; R3 := 0x7b998233
 22 [-]: GETGLOBAL R4 K10       ; R4 := mRailjackMovie
 23 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 24 [-]: TEST      R3 1         ; if R3 then PC := 30
 25 [-]: JMP       30           ; PC := 30
 26 [-]: GETUPVAL  R3 U3        ; R3 := U3
 27 [-]: CALL      R3 1 2       ; R3 := R3()
 28 [-]: TEST      R3 0         ; if not R3 then PC := 57
 29 [-]: JMP       57           ; PC := 57
 30 [-]: GETGLOBAL R3 K11       ; R3 := _T
 31 [-]: GETTABLE  R3 R3 K12    ; R3 := R3["InSimulacrum"]
 32 [-]: TEST      R3 1         ; if R3 then PC := 57
 33 [-]: JMP       57           ; PC := 57
 34 [-]: GETGLOBAL R3 K9        ; R3 := 0x7b998233
 35 [-]: GETGLOBAL R4 K11       ; R4 := _T
 36 [-]: GETTABLE  R4 R4 K13    ; R4 := R4["MenuSuitAvatar"]
 37 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 38 [-]: TEST      R3 1         ; if R3 then PC := 57
 39 [-]: JMP       57           ; PC := 57
 40 [-]: GETGLOBAL R3 K11       ; R3 := _T
 41 [-]: GETTABLE  R3 R3 K13    ; R3 := R3["MenuSuitAvatar"]
 42 [-]: SELF      R3 R3 K14    ; R4 := R3; R3 := R3[0xde321e6f]
 43 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 44 [-]: SELF      R3 R3 K15    ; R4 := R3; R3 := R3[0x70f71af6]
 45 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 46 [-]: TEST      R3 1         ; if R3 then PC := 57
 47 [-]: JMP       57           ; PC := 57
 48 [-]: GETGLOBAL R3 K2        ; R3 := 0x33bdd652
 49 [-]: GETTABLE  R3 R3 K3     ; R3 := R3[0x23d5322f]
 50 [-]: MOVE      R4 R1        ; R4 := R1
 51 [-]: NEWTABLE  R5 0 3       ; R5 := {}
 52 [-]: SETTABLE  R5 K4 K16    ; R5["Label"] := "/Lotus/Language/Menu/ShowCollection"
 53 [-]: CLOSURE   R6 0         ; R6 := closure(Function #12.1)
 54 [-]: SETTABLE  R5 K6 R6     ; R5["CallBack"] := R6
 55 [-]: SETTABLE  R5 K7 K17    ; R5["CallOut"] := "MENU_GENERIC1"
 56 [-]: CALL      R3 3 1       ; R3(R4,R5)
 57 [-]: GETGLOBAL R3 K9        ; R3 := 0x7b998233
 58 [-]: GETGLOBAL R4 K18       ; R4 := mInstalledGrid
 59 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 60 [-]: TEST      R3 1         ; if R3 then PC := 109
 61 [-]: JMP       109          ; PC := 109
 62 [-]: TEST      R2 0         ; if not R2 then PC := 69
 63 [-]: JMP       69           ; PC := 69
 64 [-]: GETGLOBAL R3 K19       ; R3 := mCurrentState
 65 [-]: GETGLOBAL R4 K20       ; R4 := ScreenState
 66 [-]: GETTABLE  R4 R4 K21    ; R4 := R4["SELECTING_SLOT"]
 67 [-]: EQ        0 R3 R4      ; if R3 ~= R4 then PC := 109
 68 [-]: JMP       109          ; PC := 109
 69 [-]: GETUPVAL  R3 U4        ; R3 := U4
 70 [-]: GETTABLE  R3 R3 K22    ; R3 := R3[0x06d055f9]
 71 [-]: MOVE      R4 R0        ; R4 := R0
 72 [-]: LOADNIL   R5 R5        ; R5 := nil
 73 [-]: GETGLOBAL R6 K18       ; R6 := mInstalledGrid
 74 [-]: SELF      R6 R6 K23    ; R7 := R6; R6 := R6[0xed1ab921]
 75 [-]: CALL      R6 2 0       ; R6,... := R6(R7)
 76 [-]: CALL      R3 0 2       ; R3 := R3(R4,...)
 77 [-]: TEST      R2 0         ; if not R2 then PC := 88
 78 [-]: JMP       88           ; PC := 88
 79 [-]: GETGLOBAL R4 K9        ; R4 := 0x7b998233
 80 [-]: MOVE      R5 R3        ; R5 := R3
 81 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 82 [-]: TEST      R4 1         ; if R4 then PC := 89
 83 [-]: JMP       89           ; PC := 89
 84 [-]: GETTABLE  R4 R3 K24    ; R4 := R3["mCardIndex"]
 85 [-]: EQ        1 R4 K25     ; if R4 == -1.000000 then PC := 88
 86 [-]: JMP       88           ; PC := 88
 87 [-]: LOADKB    R4 0 1       ; R4 := false; PC := 88
 88 [-]: LOADKB    R4 1 0       ; R4 := true
 89 [-]: GETUPVAL  R5 U4        ; R5 := U4
 90 [-]: GETTABLE  R5 R5 K22    ; R5 := R5[0x06d055f9]
 91 [-]: MOVE      R6 R4        ; R6 := R4
 92 [-]: LOADK     R7 K26       ; R7 := "/Lotus/Language/Menu/Loadout_RemoveAll"
 93 [-]: LOADK     R8 K27       ; R8 := "/Lotus/Language/Menu/Loadout_Remove"
 94 [-]: CALL      R5 4 2       ; R5 := R5(R6,R7,R8)
 95 [-]: GETUPVAL  R6 U4        ; R6 := U4
 96 [-]: GETTABLE  R6 R6 K22    ; R6 := R6[0x06d055f9]
 97 [-]: MOVE      R7 R4        ; R7 := R4
 98 [-]: CLOSURE   R8 1         ; R8 := closure(Function #12.2)
 99 [-]: GETUPVAL  R9 U5        ; R9 := U5
100 [-]: CALL      R6 4 2       ; R6 := R6(R7,R8,R9)
101 [-]: GETGLOBAL R7 K2        ; R7 := 0x33bdd652
102 [-]: GETTABLE  R7 R7 K3     ; R7 := R7[0x23d5322f]
103 [-]: MOVE      R8 R1        ; R8 := R1
104 [-]: NEWTABLE  R9 0 3       ; R9 := {}
105 [-]: SETTABLE  R9 K4 R5     ; R9["Label"] := R5
106 [-]: SETTABLE  R9 K6 R6     ; R9["CallBack"] := R6
107 [-]: SETTABLE  R9 K7 K28    ; R9["CallOut"] := "MENU_GENERIC2"
108 [-]: CALL      R7 3 1       ; R7(R8,R9)
109 [-]: TEST      R2 1         ; if R2 then PC := 125
110 [-]: JMP       125          ; PC := 125
111 [-]: GETGLOBAL R7 K9        ; R7 := 0x7b998233
112 [-]: GETGLOBAL R8 K10       ; R8 := mRailjackMovie
113 [-]: CALL      R7 2 2       ; R7 := R7(R8)
114 [-]: TEST      R7 0         ; if not R7 then PC := 125
115 [-]: JMP       125          ; PC := 125
116 [-]: GETGLOBAL R7 K2        ; R7 := 0x33bdd652
117 [-]: GETTABLE  R7 R7 K3     ; R7 := R7[0x23d5322f]
118 [-]: MOVE      R8 R1        ; R8 := R1
119 [-]: NEWTABLE  R9 0 3       ; R9 := {}
120 [-]: SETTABLE  R9 K4 K29    ; R9["Label"] := "/Lotus/Language/Menu/General_Tutorial"
121 [-]: GETUPVAL  R10 U6       ; R10 := U6
122 [-]: SETTABLE  R9 K6 R10    ; R9["CallBack"] := R10
123 [-]: SETTABLE  R9 K7 K30    ; R9["CallOut"] := "MENU_RTRIGGER1"
124 [-]: CALL      R7 3 1       ; R7(R8,R9)
125 [-]: GETGLOBAL R7 K2        ; R7 := 0x33bdd652
126 [-]: GETTABLE  R7 R7 K3     ; R7 := R7[0x23d5322f]
127 [-]: MOVE      R8 R1        ; R8 := R1
128 [-]: NEWTABLE  R9 0 3       ; R9 := {}
129 [-]: SETTABLE  R9 K4 K31    ; R9["Label"] := "/Lotus/Language/Menu/Global_Back"
130 [-]: CLOSURE   R10 2        ; R10 := closure(Function #12.3)
131 [-]: SETTABLE  R9 K6 R10    ; R9["CallBack"] := R10
132 [-]: SETTABLE  R9 K7 K32    ; R9["CallOut"] := "MENU_CANCEL"
133 [-]: CALL      R7 3 1       ; R7(R8,R9)
134 [-]: GETGLOBAL R7 K9        ; R7 := 0x7b998233
135 [-]: GETGLOBAL R8 K11       ; R8 := _T
136 [-]: GETTABLE  R8 R8 K33    ; R8 := R8["SetButtons"]
137 [-]: CALL      R7 2 2       ; R7 := R7(R8)
138 [-]: TEST      R7 1         ; if R7 then PC := 148
139 [-]: JMP       148          ; PC := 148
140 [-]: GETGLOBAL R7 K11       ; R7 := _T
141 [-]: GETTABLE  R7 R7 K34    ; R7 := R7[0x1c5b546f]
142 [-]: GETGLOBAL R8 K35       ; R8 := 0xae91e43b
143 [-]: MOVE      R9 R1        ; R9 := R1
144 [-]: GETGLOBAL R10 K36      ; R10 := 0xcd0165a3
145 [-]: CONST     R11 1        ; R11 := 1.000000
146 [-]: CALL      R10 2 0      ; R10,... := R10(R11)
147 [-]: CALL      R7 0 1       ; R7(R8,...)
148 [-]: RETURN    R0 1         ; return 


; Function #12.1:
;
; Name:            
; Defined at line: 450
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0xae91e43b
  2 [-]: SELF      R0 R0 K1     ; R1 := R0; R0 := R0[0xe4162eed]
  3 [-]: LOADK     R2 K2        ; R2 := "ShowCollection"
  4 [-]: LOADK     R3 K3        ; R3 := ""
  5 [-]: CALL      R0 4 1       ; R0(R1,R2,R3)
  6 [-]: RETURN    R0 1         ; return 


; Function #12.2:
;
; Name:            
; Defined at line: 458
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0xae91e43b
  2 [-]: SELF      R0 R0 K1     ; R1 := R0; R0 := R0[0xe4162eed]
  3 [-]: LOADK     R2 K2        ; R2 := "RemoveAll"
  4 [-]: LOADK     R3 K3        ; R3 := ""
  5 [-]: CALL      R0 4 1       ; R0(R1,R2,R3)
  6 [-]: RETURN    R0 1         ; return 


; Function #12.3:
;
; Name:            
; Defined at line: 464
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0xae91e43b
  2 [-]: SELF      R0 R0 K1     ; R1 := R0; R0 := R0[0xe4162eed]
  3 [-]: LOADK     R2 K2        ; R2 := "Cancel"
  4 [-]: LOADK     R3 K3        ; R3 := ""
  5 [-]: CALL      R0 4 1       ; R0(R1,R2,R3)
  6 [-]: RETURN    R0 1         ; return 


; Function #13:
;
; Name:            
; Defined at line: 471
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETGLOBAL R1 K0        ; R1 := mWarningFlash
  2 [-]: TEST      R1 1         ; if R1 then PC := 6
  3 [-]: JMP       6            ; PC := 6
  4 [-]: NEWTABLE  R1 0 0       ; R1 := {}
  5 [-]: SETGLOBAL R1 K0        ; mWarningFlash := R1
  6 [-]: GETGLOBAL R1 K0        ; R1 := mWarningFlash
  7 [-]: SETTABLE  R1 K1 K1     ; R1[1.000000] := 1.000000
  8 [-]: GETGLOBAL R1 K2        ; R1 := 0x33bdd652
  9 [-]: GETTABLE  R1 R1 K3     ; R1 := R1[0x23d5322f]
 10 [-]: GETGLOBAL R2 K0        ; R2 := mWarningFlash
 11 [-]: MOVE      R3 R0        ; R3 := R0
 12 [-]: CALL      R1 3 1       ; R1(R2,R3)
 13 [-]: RETURN    R0 1         ; return 


; Function #14:
;
; Name:            
; Defined at line: 479
; #Upvalues:       2
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  11

  1 [-]: SETGLOBAL R0 K0        ; mCurrentState := R0
  2 [-]: GETUPVAL  R1 U0        ; R1 := U0
  3 [-]: GETTABLE  R1 R1 K1     ; R1 := R1[0x06d055f9]
  4 [-]: GETGLOBAL R2 K0        ; R2 := mCurrentState
  5 [-]: GETGLOBAL R3 K2        ; R3 := ScreenState
  6 [-]: GETTABLE  R3 R3 K3     ; R3 := R3["SELECTING_CARD"]
  7 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 10
  8 [-]: JMP       10           ; PC := 10
  9 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 10
 10 [-]: LOADKB    R2 1 0       ; R2 := true
 11 [-]: CONST     R3 100       ; R3 := 100.000000
 12 [-]: CONST     R4 40        ; R4 := 40.000000
 13 [-]: CALL      R1 4 2       ; R1 := R1(R2,R3,R4)
 14 [-]: GETUPVAL  R2 U0        ; R2 := U0
 15 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x06d055f9]
 16 [-]: GETGLOBAL R3 K0        ; R3 := mCurrentState
 17 [-]: GETGLOBAL R4 K2        ; R4 := ScreenState
 18 [-]: GETTABLE  R4 R4 K3     ; R4 := R4["SELECTING_CARD"]
 19 [-]: EQ        1 R3 R4      ; if R3 == R4 then PC := 22
 20 [-]: JMP       22           ; PC := 22
 21 [-]: LOADKB    R3 0 1       ; R3 := false; PC := 22
 22 [-]: LOADKB    R3 1 0       ; R3 := true
 23 [-]: CONST     R4 40        ; R4 := 40.000000
 24 [-]: CONST     R5 100       ; R5 := 100.000000
 25 [-]: CALL      R2 4 2       ; R2 := R2(R3,R4,R5)
 26 [-]: GETGLOBAL R3 K4        ; R3 := 0x7b998233
 27 [-]: GETGLOBAL R4 K5        ; R4 := mCollectionGrid
 28 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 29 [-]: TEST      R3 1         ; if R3 then PC := 49
 30 [-]: JMP       49           ; PC := 49
 31 [-]: GETGLOBAL R3 K6        ; R3 := 0xae91e43b
 32 [-]: SELF      R3 R3 K7     ; R4 := R3; R3 := R3[0x67bc869f]
 33 [-]: GETGLOBAL R5 K5        ; R5 := mCollectionGrid
 34 [-]: GETTABLE  R5 R5 K8     ; R5 := R5["mSortMenu"]
 35 [-]: GETTABLE  R5 R5 K9     ; R5 := R5["mContainerClipName"]
 36 [-]: CONST     R6 10        ; R6 := 10.000000
 37 [-]: GETUPVAL  R7 U0        ; R7 := U0
 38 [-]: GETTABLE  R7 R7 K1     ; R7 := R7[0x06d055f9]
 39 [-]: GETGLOBAL R8 K2        ; R8 := ScreenState
 40 [-]: GETTABLE  R8 R8 K3     ; R8 := R8["SELECTING_CARD"]
 41 [-]: EQ        1 R0 R8      ; if R0 == R8 then PC := 44
 42 [-]: JMP       44           ; PC := 44
 43 [-]: LOADKB    R8 0 1       ; R8 := false; PC := 44
 44 [-]: LOADKB    R8 1 0       ; R8 := true
 45 [-]: CONST     R9 100       ; R9 := 100.000000
 46 [-]: CONST     R10 30       ; R10 := 30.000000
 47 [-]: CALL      R7 4 0       ; R7,... := R7(R8,R9,R10)
 48 [-]: CALL      R3 0 1       ; R3(R4,...)
 49 [-]: GETGLOBAL R3 K6        ; R3 := 0xae91e43b
 50 [-]: SELF      R3 R3 K7     ; R4 := R3; R3 := R3[0x67bc869f]
 51 [-]: LOADK     R5 K10       ; R5 := "MiddleMenu.LeftBumper"
 52 [-]: CONST     R6 10        ; R6 := 10.000000
 53 [-]: MOVE      R7 R1        ; R7 := R1
 54 [-]: CALL      R3 5 1       ; R3(R4,R5,R6,R7)
 55 [-]: GETGLOBAL R3 K6        ; R3 := 0xae91e43b
 56 [-]: SELF      R3 R3 K7     ; R4 := R3; R3 := R3[0x67bc869f]
 57 [-]: LOADK     R5 K11       ; R5 := "MiddleMenu.RightBumper"
 58 [-]: CONST     R6 10        ; R6 := 10.000000
 59 [-]: MOVE      R7 R1        ; R7 := R1
 60 [-]: CALL      R3 5 1       ; R3(R4,R5,R6,R7)
 61 [-]: GETGLOBAL R3 K6        ; R3 := 0xae91e43b
 62 [-]: SELF      R3 R3 K7     ; R4 := R3; R3 := R3[0x67bc869f]
 63 [-]: LOADK     R5 K12       ; R5 := "TopMenu.ConfigLeft"
 64 [-]: CONST     R6 10        ; R6 := 10.000000
 65 [-]: MOVE      R7 R2        ; R7 := R2
 66 [-]: CALL      R3 5 1       ; R3(R4,R5,R6,R7)
 67 [-]: GETGLOBAL R3 K6        ; R3 := 0xae91e43b
 68 [-]: SELF      R3 R3 K7     ; R4 := R3; R3 := R3[0x67bc869f]
 69 [-]: LOADK     R5 K13       ; R5 := "TopMenu.ConfigRight"
 70 [-]: CONST     R6 10        ; R6 := 10.000000
 71 [-]: MOVE      R7 R2        ; R7 := R2
 72 [-]: CALL      R3 5 1       ; R3(R4,R5,R6,R7)
 73 [-]: GETUPVAL  R3 U1        ; R3 := U1
 74 [-]: CALL      R3 1 1       ; R3()
 75 [-]: RETURN    R0 1         ; return 


; Function #15:
;
; Name:            
; Defined at line: 497
; #Upvalues:       1
; #Parameters:     5
; Is_vararg:       0
; Max Stack Size:  14

  1 [-]: GETUPVAL  R5 U0        ; R5 := U0
  2 [-]: GETTABLE  R5 R5 K0     ; R5 := R5[0x310355a7]
  3 [-]: GETGLOBAL R6 K1        ; R6 := 0xae91e43b
  4 [-]: MOVE      R7 R0        ; R7 := R0
  5 [-]: MOVE      R8 R1        ; R8 := R1
  6 [-]: MOVE      R9 R2        ; R9 := R2
  7 [-]: MOVE      R10 R3       ; R10 := R3
  8 [-]: LOADNIL   R11 R12      ; R11 := R12 := nil
  9 [-]: MOVE      R13 R4       ; R13 := R4
 10 [-]: CALL      R5 9 2       ; R5 := R5(R6,R7,R8,R9,R10,R11,R12,R13)
 11 [-]: GETGLOBAL R6 K2        ; R6 := 0x33bdd652
 12 [-]: GETTABLE  R6 R6 K3     ; R6 := R6[0x23d5322f]
 13 [-]: GETGLOBAL R7 K4        ; R7 := mActiveFx
 14 [-]: MOVE      R8 R5        ; R8 := R5
 15 [-]: CALL      R6 3 1       ; R6(R7,R8)
 16 [-]: RETURN    R5 2         ; return R5
 17 [-]: RETURN    R0 1         ; return 


; Function #16:
;
; Name:            
; Defined at line: 503
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := mInstalledGrid
  2 [-]: SELF      R1 R1 K1     ; R2 := R1; R1 := R1[0xaf5319dc]
  3 [-]: GETGLOBAL R3 K2        ; R3 := 0x03f57322
  4 [-]: MOVE      R4 R0        ; R4 := R0
  5 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
  6 [-]: CALL      R1 0 1       ; R1(R2,...)
  7 [-]: RETURN    R0 1         ; return 


; Function #17:
;
; Name:            
; Defined at line: 507
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := mInstalledGrid
  2 [-]: SELF      R1 R1 K1     ; R2 := R1; R1 := R1[0x070daa5a]
  3 [-]: GETGLOBAL R3 K2        ; R3 := 0x03f57322
  4 [-]: MOVE      R4 R0        ; R4 := R0
  5 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
  6 [-]: CALL      R1 0 1       ; R1(R2,...)
  7 [-]: RETURN    R0 1         ; return 


; Function #18:
;
; Name:            
; Defined at line: 511
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := mInstalledGrid
  2 [-]: SELF      R1 R1 K1     ; R2 := R1; R1 := R1[0xdf42446e]
  3 [-]: GETGLOBAL R3 K2        ; R3 := 0x03f57322
  4 [-]: MOVE      R4 R0        ; R4 := R0
  5 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
  6 [-]: CALL      R1 0 1       ; R1(R2,...)
  7 [-]: RETURN    R0 1         ; return 


; Function #19:
;
; Name:            
; Defined at line: 515
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := mInstalledGrid
  2 [-]: SELF      R1 R1 K1     ; R2 := R1; R1 := R1[0xbce5a201]
  3 [-]: GETGLOBAL R3 K2        ; R3 := 0x03f57322
  4 [-]: MOVE      R4 R0        ; R4 := R0
  5 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
  6 [-]: CALL      R1 0 1       ; R1(R2,...)
  7 [-]: RETURN    R0 1         ; return 


; Function #20:
;
; Name:            
; Defined at line: 519
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mSyndicate"]
  2 [-]: GETGLOBAL R3 K1        ; R3 := EMPTY_SYMBOL
  3 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 9
  4 [-]: JMP       9            ; PC := 9
  5 [-]: GETTABLE  R2 R1 K0     ; R2 := R1["mSyndicate"]
  6 [-]: GETGLOBAL R3 K1        ; R3 := EMPTY_SYMBOL
  7 [-]: EQ        0 R2 R3      ; if R2 ~= R3 then PC := 11
  8 [-]: JMP       11           ; PC := 11
  9 [-]: LOADKB    R2 0 0       ; R2 := false
 10 [-]: RETURN    R2 2         ; return R2
 11 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mSyndicate"]
 12 [-]: GETTABLE  R3 R1 K0     ; R3 := R1["mSyndicate"]
 13 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 17
 14 [-]: JMP       17           ; PC := 17
 15 [-]: LOADKB    R2 1 0       ; R2 := true
 16 [-]: RETURN    R2 2         ; return R2
 17 [-]: RETURN    R0 1         ; return 


; Function #21:
;
; Name:            
; Defined at line: 529
; #Upvalues:       2
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: GETUPVAL  R0 U0        ; R0 := U0
  2 [-]: GETTABLE  R0 R0 K0     ; R0 := R0[0x28a3740b]
  3 [-]: GETGLOBAL R1 K1        ; R1 := _T
  4 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["upgradeItemSlot"]
  5 [-]: GETUPVAL  R2 U1        ; R2 := U1
  6 [-]: TAILCALL  R0 3 0       ; R0,... := R0(R1,R2)
  7 [-]: RETURN    R0 0         ; return R0,...
  8 [-]: RETURN    R0 1         ; return 


; Function #22:
;
; Name:            
; Defined at line: 533
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := _T
  2 [-]: GETTABLE  R0 R0 K1     ; R0 := R0["upgradeItemCategory"]
  3 [-]: EQ        1 R0 K3      ; if R0 == 3.000000 then PC := 9
  4 [-]: JMP       9            ; PC := 9
  5 [-]: GETUPVAL  R0 U0        ; R0 := U0
  6 [-]: CALL      R0 1 2       ; R0 := R0()
  7 [-]: JMP       10           ; PC := 10
  8 [-]: LOADKB    R0 0 1       ; R0 := false; PC := 9
  9 [-]: LOADKB    R0 1 0       ; R0 := true
 10 [-]: RETURN    R0 2         ; return R0
 11 [-]: RETURN    R0 1         ; return 


; Function #23:
;
; Name:            
; Defined at line: 537
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7ed0a956
  2 [-]: LOADK     R2 K1        ; R2 := "/Lotus/Powersuits/EntratiMech/BaseMechSuit"
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: SELF      R2 R0 K2     ; R3 := R0; R2 := R0[0xf2deaf69]
  5 [-]: GETGLOBAL R4 K3        ; R4 := gPowerSuitType
  6 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
  7 [-]: TEST      R2 0         ; if not R2 then PC := 36
  8 [-]: JMP       36           ; PC := 36
  9 [-]: SELF      R2 R0 K2     ; R3 := R0; R2 := R0[0xf2deaf69]
 10 [-]: GETGLOBAL R4 K4        ; R4 := gSentinelPowerSuitType
 11 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 12 [-]: TEST      R2 1         ; if R2 then PC := 34
 13 [-]: JMP       34           ; PC := 34
 14 [-]: SELF      R2 R0 K2     ; R3 := R0; R2 := R0[0xf2deaf69]
 15 [-]: GETGLOBAL R4 K5        ; R4 := gFlightJetPackItemType
 16 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 17 [-]: TEST      R2 1         ; if R2 then PC := 34
 18 [-]: JMP       34           ; PC := 34
 19 [-]: SELF      R2 R0 K2     ; R3 := R0; R2 := R0[0xf2deaf69]
 20 [-]: GETGLOBAL R4 K6        ; R4 := 0x37e92aac
 21 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 22 [-]: TEST      R2 1         ; if R2 then PC := 34
 23 [-]: JMP       34           ; PC := 34
 24 [-]: SELF      R2 R0 K2     ; R3 := R0; R2 := R0[0xf2deaf69]
 25 [-]: MOVE      R4 R1        ; R4 := R1
 26 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 27 [-]: TEST      R2 1         ; if R2 then PC := 34
 28 [-]: JMP       34           ; PC := 34
 29 [-]: SELF      R2 R0 K2     ; R3 := R0; R2 := R0[0xf2deaf69]
 30 [-]: GETGLOBAL R4 K7        ; R4 := gCrewShipHarnessType
 31 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 32 [-]: NOT       R2 R2        ; R2 :=  R2
 33 [-]: JMP       36           ; PC := 36
 34 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 35
 35 [-]: LOADKB    R2 1 0       ; R2 := true
 36 [-]: RETURN    R2 2         ; return R2
 37 [-]: RETURN    R0 1         ; return 


; Function #24:
;
; Name:            
; Defined at line: 549
; #Upvalues:       2
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: GETUPVAL  R0 U0        ; R0 := U0
  2 [-]: GETTABLE  R0 R0 K0     ; R0 := R0[0x1b42e1c8]
  3 [-]: GETGLOBAL R1 K1        ; R1 := _T
  4 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["upgradeItemSlot"]
  5 [-]: GETUPVAL  R2 U1        ; R2 := U1
  6 [-]: TAILCALL  R0 3 0       ; R0,... := R0(R1,R2)
  7 [-]: RETURN    R0 0         ; return R0,...
  8 [-]: RETURN    R0 1         ; return 


; Function #25:
;
; Name:            
; Defined at line: 553
; #Upvalues:       2
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  11

  1 [-]: GETTABLE  R2 R1 K0     ; R2 := R1["item"]
  2 [-]: LOADNIL   R3 R3        ; R3 := nil
  3 [-]: GETGLOBAL R4 K1        ; R4 := 0x7b998233
  4 [-]: MOVE      R5 R2        ; R5 := R2
  5 [-]: CALL      R4 2 2       ; R4 := R4(R5)
  6 [-]: TEST      R4 0         ; if not R4 then PC := 10
  7 [-]: JMP       10           ; PC := 10
  8 [-]: GETTABLE  R3 R2 K2     ; R3 := R2["mItemType"]
  9 [-]: JMP       13           ; PC := 13
 10 [-]: SELF      R4 R2 K3     ; R5 := R2; R4 := R2[0xcde10c4a]
 11 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 12 [-]: MOVE      R3 R4        ; R3 := R4
 13 [-]: GETUPVAL  R4 U0        ; R4 := U0
 14 [-]: MOVE      R5 R3        ; R5 := R3
 15 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 16 [-]: SELF      R5 R3 K4     ; R6 := R3; R5 := R3[0xf2deaf69]
 17 [-]: GETGLOBAL R7 K5        ; R7 := gCrewShipHarnessType
 18 [-]: CALL      R5 3 2       ; R5 := R5(R6,R7)
 19 [-]: SELF      R6 R3 K4     ; R7 := R3; R6 := R3[0xf2deaf69]
 20 [-]: GETGLOBAL R8 K6        ; R8 := gLotusMeleeWeaponType
 21 [-]: CALL      R6 3 2       ; R6 := R6(R7,R8)
 22 [-]: TEST      R6 0         ; if not R6 then PC := 28
 23 [-]: JMP       28           ; PC := 28
 24 [-]: SELF      R6 R3 K4     ; R7 := R3; R6 := R3[0xf2deaf69]
 25 [-]: GETGLOBAL R8 K7        ; R8 := 0x224fd10b
 26 [-]: CALL      R6 3 2       ; R6 := R6(R7,R8)
 27 [-]: NOT       R6 R6        ; R6 :=  R6
 28 [-]: EQ        0 R0 K8      ; if R0 ~= 1.000000 then PC := 33
 29 [-]: JMP       33           ; PC := 33
 30 [-]: LOADKB    R7 1 0       ; R7 := true
 31 [-]: RETURN    R7 2         ; return R7
 32 [-]: JMP       141          ; PC := 141
 33 [-]: EQ        0 R0 K9      ; if R0 ~= 2.000000 then PC := 55
 34 [-]: JMP       55           ; PC := 55
 35 [-]: TEST      R4 1         ; if R4 then PC := 39
 36 [-]: JMP       39           ; PC := 39
 37 [-]: TESTSET   R7 R5 0      ; if not R5 then PC := 53 else R7 := R5
 38 [-]: JMP       53           ; PC := 53
 39 [-]: GETGLOBAL R7 K1        ; R7 := 0x7b998233
 40 [-]: GETGLOBAL R8 K10       ; R8 := mArtifactSlots
 41 [-]: GETGLOBAL R9 K11       ; R9 := AURA_SLOT_INDEX
 42 [-]: GETTABLE  R8 R8 R9     ; R8 := R8[R9]
 43 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 44 [-]: TEST      R7 1         ; if R7 then PC := 51
 45 [-]: JMP       51           ; PC := 51
 46 [-]: GETGLOBAL R7 K10       ; R7 := mArtifactSlots
 47 [-]: GETGLOBAL R8 K11       ; R8 := AURA_SLOT_INDEX
 48 [-]: GETTABLE  R7 R7 R8     ; R7 := R7[R8]
 49 [-]: EQ        0 R7 K13     ; if R7 ~= 9.000000 then PC := 52
 50 [-]: JMP       52           ; PC := 52
 51 [-]: LOADKB    R7 0 1       ; R7 := false; PC := 52
 52 [-]: LOADKB    R7 1 0       ; R7 := true
 53 [-]: RETURN    R7 2         ; return R7
 54 [-]: JMP       141          ; PC := 141
 55 [-]: EQ        0 R0 K14     ; if R0 ~= 3.000000 then PC := 67
 56 [-]: JMP       67           ; PC := 67
 57 [-]: TEST      R4 1         ; if R4 then PC := 61
 58 [-]: JMP       61           ; PC := 61
 59 [-]: TESTSET   R7 R6 0      ; if not R6 then PC := 65 else R7 := R6
 60 [-]: JMP       65           ; PC := 65
 61 [-]: SELF      R7 R3 K4     ; R8 := R3; R7 := R3[0xf2deaf69]
 62 [-]: GETGLOBAL R9 K15       ; R9 := 0x9a0c46fc
 63 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
 64 [-]: NOT       R7 R7        ; R7 :=  R7
 65 [-]: RETURN    R7 2         ; return R7
 66 [-]: JMP       141          ; PC := 141
 67 [-]: EQ        0 R0 K16     ; if R0 ~= 4.000000 then PC := 79
 68 [-]: JMP       79           ; PC := 79
 69 [-]: GETGLOBAL R7 K17       ; R7 := 0x0db48b5b
 70 [-]: SELF      R7 R7 K18    ; R8 := R7; R7 := R7[0x28822185]
 71 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 72 [-]: TEST      R7 1         ; if R7 then PC := 77
 73 [-]: JMP       77           ; PC := 77
 74 [-]: GETGLOBAL R7 K17       ; R7 := 0x0db48b5b
 75 [-]: SELF      R7 R7 K19    ; R8 := R7; R7 := R7[0x49d9480e]
 76 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 77 [-]: RETURN    R7 2         ; return R7
 78 [-]: JMP       141          ; PC := 141
 79 [-]: EQ        0 R0 K20     ; if R0 ~= 5.000000 then PC := 99
 80 [-]: JMP       99           ; PC := 99
 81 [-]: TESTSET   R7 R4 0      ; if not R4 then PC := 97 else R7 := R4
 82 [-]: JMP       97           ; PC := 97
 83 [-]: GETGLOBAL R7 K1        ; R7 := 0x7b998233
 84 [-]: GETGLOBAL R8 K10       ; R8 := mArtifactSlots
 85 [-]: GETGLOBAL R9 K21       ; R9 := UTILITY_SLOT_INDEX
 86 [-]: GETTABLE  R8 R8 R9     ; R8 := R8[R9]
 87 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 88 [-]: TEST      R7 1         ; if R7 then PC := 95
 89 [-]: JMP       95           ; PC := 95
 90 [-]: GETGLOBAL R7 K10       ; R7 := mArtifactSlots
 91 [-]: GETGLOBAL R8 K21       ; R8 := UTILITY_SLOT_INDEX
 92 [-]: GETTABLE  R7 R7 R8     ; R7 := R7[R8]
 93 [-]: EQ        0 R7 K13     ; if R7 ~= 9.000000 then PC := 96
 94 [-]: JMP       96           ; PC := 96
 95 [-]: LOADKB    R7 0 1       ; R7 := false; PC := 96
 96 [-]: LOADKB    R7 1 0       ; R7 := true
 97 [-]: RETURN    R7 2         ; return R7
 98 [-]: JMP       141          ; PC := 141
 99 [-]: EQ        0 R0 K22     ; if R0 ~= 6.000000 then PC := 139
100 [-]: JMP       139          ; PC := 139
101 [-]: GETUPVAL  R7 U1        ; R7 := U1
102 [-]: CALL      R7 1 2       ; R7 := R7()
103 [-]: TEST      R7 0         ; if not R7 then PC := 118
104 [-]: JMP       118          ; PC := 118
105 [-]: GETGLOBAL R7 K1        ; R7 := 0x7b998233
106 [-]: MOVE      R8 R2        ; R8 := R2
107 [-]: CALL      R7 2 2       ; R7 := R7(R8)
108 [-]: TEST      R7 1         ; if R7 then PC := 117
109 [-]: JMP       117          ; PC := 117
110 [-]: SELF      R7 R2 K23    ; R8 := R2; R7 := R2[0x78c595ae]
111 [-]: GETGLOBAL R9 K24       ; R9 := 0x0469f296
112 [-]: LOADK     R10 K25      ; R10 := "POWER_WEAPON"
113 [-]: CALL      R9 2 0       ; R9,... := R9(R10)
114 [-]: CALL      R7 0 2       ; R7 := R7(R8,...)
115 [-]: NOT       R7 R7        ; R7 :=  R7
116 [-]: JMP       119          ; PC := 119
117 [-]: LOADKB    R7 0 1       ; R7 := false; PC := 118
118 [-]: LOADKB    R7 1 0       ; R7 := true
119 [-]: TESTSET   R8 R6 0      ; if not R6 then PC := 137 else R8 := R6
120 [-]: JMP       137          ; PC := 137
121 [-]: TESTSET   R8 R7 0      ; if not R7 then PC := 137 else R8 := R7
122 [-]: JMP       137          ; PC := 137
123 [-]: GETGLOBAL R8 K1        ; R8 := 0x7b998233
124 [-]: GETGLOBAL R9 K10       ; R9 := mArtifactSlots
125 [-]: GETGLOBAL R10 K26      ; R10 := MELEE_STANCE_SLOT
126 [-]: GETTABLE  R9 R9 R10    ; R9 := R9[R10]
127 [-]: CALL      R8 2 2       ; R8 := R8(R9)
128 [-]: TEST      R8 1         ; if R8 then PC := 135
129 [-]: JMP       135          ; PC := 135
130 [-]: GETGLOBAL R8 K10       ; R8 := mArtifactSlots
131 [-]: GETGLOBAL R9 K26       ; R9 := MELEE_STANCE_SLOT
132 [-]: GETTABLE  R8 R8 R9     ; R8 := R8[R9]
133 [-]: EQ        0 R8 K13     ; if R8 ~= 9.000000 then PC := 136
134 [-]: JMP       136          ; PC := 136
135 [-]: LOADKB    R8 0 1       ; R8 := false; PC := 136
136 [-]: LOADKB    R8 1 0       ; R8 := true
137 [-]: RETURN    R8 2         ; return R8
138 [-]: JMP       141          ; PC := 141
139 [-]: LOADKB    R8 0 0       ; R8 := false
140 [-]: RETURN    R8 2         ; return R8
141 [-]: RETURN    R0 1         ; return 


; Function #26:
;
; Name:            
; Defined at line: 596
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := _T
  2 [-]: GETTABLE  R0 R0 K1     ; R0 := R0["upgradeItemCategory"]
  3 [-]: EQ        1 R0 K3      ; if R0 == 49.000000 then PC := 6
  4 [-]: JMP       6            ; PC := 6
  5 [-]: LOADKB    R0 0 1       ; R0 := false; PC := 6
  6 [-]: LOADKB    R0 1 0       ; R0 := true
  7 [-]: RETURN    R0 2         ; return R0
  8 [-]: RETURN    R0 1         ; return 


; Function #27:
;
; Name:            
; Defined at line: 600
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := _T
  2 [-]: GETTABLE  R0 R0 K1     ; R0 := R0["upgradeItemLot"]
  3 [-]: EQ        0 R0 K3      ; if R0 ~= 7.000000 then PC := 9
  4 [-]: JMP       9            ; PC := 9
  5 [-]: GETUPVAL  R0 U0        ; R0 := U0
  6 [-]: CALL      R0 1 2       ; R0 := R0()
  7 [-]: NOT       R0 R0        ; R0 :=  R0
  8 [-]: JMP       11           ; PC := 11
  9 [-]: LOADKB    R0 0 1       ; R0 := false; PC := 10
 10 [-]: LOADKB    R0 1 0       ; R0 := true
 11 [-]: RETURN    R0 2         ; return R0
 12 [-]: RETURN    R0 1         ; return 


; Function #28:
;
; Name:            
; Defined at line: 604
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := _T
  2 [-]: GETTABLE  R0 R0 K1     ; R0 := R0["upgradeItemCategory"]
  3 [-]: EQ        1 R0 K3      ; if R0 == 5.000000 then PC := 9
  4 [-]: JMP       9            ; PC := 9
  5 [-]: GETUPVAL  R0 U0        ; R0 := U0
  6 [-]: CALL      R0 1 2       ; R0 := R0()
  7 [-]: JMP       10           ; PC := 10
  8 [-]: LOADKB    R0 0 1       ; R0 := false; PC := 9
  9 [-]: LOADKB    R0 1 0       ; R0 := true
 10 [-]: RETURN    R0 2         ; return R0
 11 [-]: RETURN    R0 1         ; return 


; Function #29:
;
; Name:            
; Defined at line: 608
; #Upvalues:       2
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  10

  1 [-]: GETUPVAL  R2 U0        ; R2 := U0
  2 [-]: GETTABLE  R2 R2 K0     ; R2 := R2[0x06d055f9]
  3 [-]: MOVE      R3 R1        ; R3 := R1
  4 [-]: GETGLOBAL R4 K1        ; R4 := mAttachedUpgrades
  5 [-]: GETTABLE  R4 R4 K2     ; R4 := R4["mPvp"]
  6 [-]: GETGLOBAL R5 K1        ; R5 := mAttachedUpgrades
  7 [-]: GETTABLE  R5 R5 K3     ; R5 := R5["mNormal"]
  8 [-]: CALL      R2 4 2       ; R2 := R2(R3,R4,R5)
  9 [-]: GETGLOBAL R3 K4        ; R3 := mGameData
 10 [-]: SELF      R3 R3 K5     ; R4 := R3; R3 := R3[0x25a6e75e]
 11 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 12 [-]: SELF      R3 R3 K6     ; R4 := R3; R3 := R3[0x2f30b8db]
 13 [-]: GETUPVAL  R5 U1        ; R5 := U1
 14 [-]: GETTABLE  R5 R5 K7     ; R5 := R5["info"]
 15 [-]: GETGLOBAL R6 K8        ; R6 := _T
 16 [-]: GETTABLE  R6 R6 K9     ; R6 := R6["upgradeItemLot"]
 17 [-]: GETGLOBAL R7 K8        ; R7 := _T
 18 [-]: GETTABLE  R7 R7 K10    ; R7 := R7["upgradeItemSlot"]
 19 [-]: MOVE      R8 R0        ; R8 := R0
 20 [-]: MOVE      R9 R1        ; R9 := R1
 21 [-]: CALL      R3 7 2       ; R3 := R3(R4,R5,R6,R7,R8,R9)
 22 [-]: SETTABLE  R2 R0 R3     ; R2[R0] := R3
 23 [-]: RETURN    R0 1         ; return 


; Function #30:
;
; Name:            
; Defined at line: 613
; #Upvalues:       13
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  103

  1 [-]: CONST     R1 0         ; R1 := 0.000000
  2 [-]: SETGLOBAL R1 K0        ; mUpdateStatFailType := R1
  3 [-]: GETUPVAL  R1 U0        ; R1 := U0
  4 [-]: GETTABLE  R1 R1 K1     ; R1 := R1["info"]
  5 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mItemId"]
  6 [-]: GETTABLE  R1 R1 K3     ; R1 := R1["mId"]
  7 [-]: GETGLOBAL R2 K4        ; R2 := mEnergyTotal
  8 [-]: CONST     R3 0         ; R3 := 0.000000
  9 [-]: SETGLOBAL R3 K5        ; mEnergyUsed := R3
 10 [-]: LOADKB    R3 1 0       ; R3 := true
 11 [-]: NEWTABLE  R4 0 0       ; R4 := {}
 12 [-]: GETUPVAL  R5 U1        ; R5 := U1
 13 [-]: GETUPVAL  R6 U2        ; R6 := U2
 14 [-]: GETGLOBAL R7 K6        ; R7 := _T
 15 [-]: GETTABLE  R7 R7 K7     ; R7 := R7["ArsenalState"]
 16 [-]: EQ        1 R7 K9      ; if R7 == 2.000000 then PC := 19
 17 [-]: JMP       19           ; PC := 19
 18 [-]: LOADKB    R7 0 1       ; R7 := false; PC := 19
 19 [-]: LOADKB    R7 1 0       ; R7 := true
 20 [-]: CALL      R5 3 1       ; R5(R6,R7)
 21 [-]: CONST     R5 1         ; R5 := 1.000000
 22 [-]: GETGLOBAL R6 K10       ; R6 := mCards
 23 [-]: LEN       R6 R6        ; R6 := # R6
 24 [-]: CONST     R7 1         ; R7 := 1.000000
 25 [-]: FORPREP   R5 37        ; R5 -= R7; PC := 37
 26 [-]: GETGLOBAL R9 K10       ; R9 := mCards
 27 [-]: GETTABLE  R9 R9 R8     ; R9 := R9[R8]
 28 [-]: GETTABLE  R10 R9 K11   ; R10 := R9["mInstalled"]
 29 [-]: GETTABLE  R10 R10 R1   ; R10 := R10[R1]
 30 [-]: EQ        1 R10 K12    ; if R10 == nil then PC := 37
 31 [-]: JMP       37           ; PC := 37
 32 [-]: GETGLOBAL R10 K13      ; R10 := 0x33bdd652
 33 [-]: GETTABLE  R10 R10 K14  ; R10 := R10[0x23d5322f]
 34 [-]: MOVE      R11 R4       ; R11 := R4
 35 [-]: MOVE      R12 R9       ; R12 := R9
 36 [-]: CALL      R10 3 1      ; R10(R11,R12)
 37 [-]: FORLOOP   R5 26        ; R5 += R7; if R5 <= R6 then begin PC := 26; R8 := R5 end
 38 [-]: GETGLOBAL R10 K13      ; R10 := 0x33bdd652
 39 [-]: GETTABLE  R10 R10 K15  ; R10 := R10[0xf21b1d8e]
 40 [-]: MOVE      R11 R4       ; R11 := R4
 41 [-]: CLOSURE   R12 0        ; R12 := closure(Function #30.1)
 42 [-]: MOVE      R0 R1        ; R0 := R1
 43 [-]: CALL      R10 3 1      ; R10(R11,R12)
 44 [-]: CLOSURE   R10 1        ; R10 := closure(Function #30.2)
 45 [-]: NEWTABLE  R11 0 0      ; R11 := {}
 46 [-]: GETUPVAL  R12 U3       ; R12 := U3
 47 [-]: CALL      R12 1 2      ; R12 := R12()
 48 [-]: TEST      R12 0        ; if not R12 then PC := 95
 49 [-]: JMP       95           ; PC := 95
 50 [-]: CONST     R12 1        ; R12 := 1.000000
 51 [-]: LEN       R13 R4       ; R13 := # R4
 52 [-]: CONST     R14 1        ; R14 := 1.000000
 53 [-]: FORPREP   R12 93       ; R12 -= R14; PC := 93
 54 [-]: GETTABLE  R16 R4 R15   ; R16 := R4[R15]
 55 [-]: GETTABLE  R17 R16 K11  ; R17 := R16["mInstalled"]
 56 [-]: GETTABLE  R17 R17 R1   ; R17 := R17[R1]
 57 [-]: GETGLOBAL R18 K16      ; R18 := IMMORTAL_SLOT_INDEX
 58 [-]: LT        0 R17 R18    ; if R17 >= R18 then PC := 65
 59 [-]: JMP       65           ; PC := 65
 60 [-]: GETUPVAL  R18 U4       ; R18 := U4
 61 [-]: GETTABLE  R18 R18 K17  ; R18 := R18[0x6b32352d]
 62 [-]: MOVE      R19 R16      ; R19 := R16
 63 [-]: CALL      R18 2 2      ; R18 := R18(R19)
 64 [-]: JMP       67           ; PC := 67
 65 [-]: LOADKB    R18 0 1      ; R18 := false; PC := 66
 66 [-]: LOADKB    R18 1 0      ; R18 := true
 67 [-]: GETGLOBAL R19 K16      ; R19 := IMMORTAL_SLOT_INDEX
 68 [-]: LE        0 R19 R17    ; if R19 > R17 then PC := 76
 69 [-]: JMP       76           ; PC := 76
 70 [-]: GETUPVAL  R19 U4       ; R19 := U4
 71 [-]: GETTABLE  R19 R19 K17  ; R19 := R19[0x6b32352d]
 72 [-]: MOVE      R20 R16      ; R20 := R16
 73 [-]: CALL      R19 2 2      ; R19 := R19(R20)
 74 [-]: NOT       R19 R19      ; R19 :=  R19
 75 [-]: JMP       78           ; PC := 78
 76 [-]: LOADKB    R19 0 1      ; R19 := false; PC := 77
 77 [-]: LOADKB    R19 1 0      ; R19 := true
 78 [-]: TEST      R18 1        ; if R18 then PC := 82
 79 [-]: JMP       82           ; PC := 82
 80 [-]: TEST      R19 0        ; if not R19 then PC := 93
 81 [-]: JMP       93           ; PC := 93
 82 [-]: GETUPVAL  R20 U5       ; R20 := U5
 83 [-]: GETTABLE  R20 R20 K18  ; R20 := R20[0xa53f5e12]
 84 [-]: GETUPVAL  R21 U5       ; R21 := U5
 85 [-]: GETTABLE  R21 R21 K19  ; R21 := R21[0x06d055f9]
 86 [-]: MOVE      R22 R19      ; R22 := R19
 87 [-]: LOADK     R23 K20      ; R23 := "/Lotus/Language/Menu/Loadout_ApplyModToImmortalSlot"
 88 [-]: LOADK     R24 K21      ; R24 := "/Lotus/Language/Menu/Loadout_ApplyImmortalWrongSlot"
 89 [-]: CALL      R21 4 0      ; R21,... := R21(R22,R23,R24)
 90 [-]: CALL      R20 0 1      ; R20(R21,...)
 91 [-]: LOADKB    R20 0 0      ; R20 := false
 92 [-]: RETURN    R20 2        ; return R20
 93 [-]: FORLOOP   R12 54       ; R12 += R14; if R12 <= R13 then begin PC := 54; R15 := R12 end
 94 [-]: JMP       333          ; PC := 333
 95 [-]: GETUPVAL  R20 U6       ; R20 := U6
 96 [-]: CALL      R20 1 2      ; R20 := R20()
 97 [-]: TEST      R20 0        ; if not R20 then PC := 170
 98 [-]: JMP       170          ; PC := 170
 99 [-]: CONST     R20 1        ; R20 := 1.000000
100 [-]: LEN       R21 R4       ; R21 := # R4
101 [-]: CONST     R22 1        ; R22 := 1.000000
102 [-]: FORPREP   R20 168      ; R20 -= R22; PC := 168
103 [-]: GETTABLE  R24 R4 R23   ; R24 := R4[R23]
104 [-]: GETTABLE  R25 R24 K11  ; R25 := R24["mInstalled"]
105 [-]: GETTABLE  R25 R25 R1   ; R25 := R25[R1]
106 [-]: NEWTABLE  R26 7 0      ; R26 := {}
107 [-]: NEWTABLE  R27 2 0      ; R27 := {}
108 [-]: GETGLOBAL R28 K22      ; R28 := RAILJACK_SLOTS
109 [-]: GETTABLE  R28 R28 K23  ; R28 := R28["BATTLE_DEF"]
110 [-]: GETUPVAL  R29 U4       ; R29 := U4
111 [-]: GETTABLE  R29 R29 K24  ; R29 := R29["railjackDefenseModType"]
112 [-]: SETLIST   R27 2 1      ; R27[(1-1)*FPF+i] := R(27+i), 1 <= i <= 2
113 [-]: NEWTABLE  R28 2 0      ; R28 := {}
114 [-]: GETGLOBAL R29 K22      ; R29 := RAILJACK_SLOTS
115 [-]: GETTABLE  R29 R29 K25  ; R29 := R29["BATTLE_OFF"]
116 [-]: GETUPVAL  R30 U4       ; R30 := U4
117 [-]: GETTABLE  R30 R30 K26  ; R30 := R30["railjackOffenseModType"]
118 [-]: SETLIST   R28 2 1      ; R28[(1-1)*FPF+i] := R(28+i), 1 <= i <= 2
119 [-]: NEWTABLE  R29 2 0      ; R29 := {}
120 [-]: GETGLOBAL R30 K22      ; R30 := RAILJACK_SLOTS
121 [-]: GETTABLE  R30 R30 K27  ; R30 := R30["BATTLE_SUPER"]
122 [-]: GETUPVAL  R31 U4       ; R31 := U4
123 [-]: GETTABLE  R31 R31 K28  ; R31 := R31["railjackSuperModType"]
124 [-]: SETLIST   R29 2 1      ; R29[(1-1)*FPF+i] := R(29+i), 1 <= i <= 2
125 [-]: NEWTABLE  R30 2 0      ; R30 := {}
126 [-]: GETGLOBAL R31 K22      ; R31 := RAILJACK_SLOTS
127 [-]: GETTABLE  R31 R31 K29  ; R31 := R31["TAC_DEF"]
128 [-]: GETUPVAL  R32 U4       ; R32 := U4
129 [-]: GETTABLE  R32 R32 K30  ; R32 := R32["railjackTacDefModType"]
130 [-]: SETLIST   R30 2 1      ; R30[(1-1)*FPF+i] := R(30+i), 1 <= i <= 2
131 [-]: NEWTABLE  R31 2 0      ; R31 := {}
132 [-]: GETGLOBAL R32 K22      ; R32 := RAILJACK_SLOTS
133 [-]: GETTABLE  R32 R32 K31  ; R32 := R32["TAC_OFF"]
134 [-]: GETUPVAL  R33 U4       ; R33 := U4
135 [-]: GETTABLE  R33 R33 K32  ; R33 := R33["railjackTacOffModType"]
136 [-]: SETLIST   R31 2 1      ; R31[(1-1)*FPF+i] := R(31+i), 1 <= i <= 2
137 [-]: NEWTABLE  R32 2 0      ; R32 := {}
138 [-]: GETGLOBAL R33 K22      ; R33 := RAILJACK_SLOTS
139 [-]: GETTABLE  R33 R33 K33  ; R33 := R33["TAC_SUPER"]
140 [-]: GETUPVAL  R34 U4       ; R34 := U4
141 [-]: GETTABLE  R34 R34 K34  ; R34 := R34["railjackTacSuperModType"]
142 [-]: SETLIST   R32 2 1      ; R32[(1-1)*FPF+i] := R(32+i), 1 <= i <= 2
143 [-]: NEWTABLE  R33 2 0      ; R33 := {}
144 [-]: GETGLOBAL R34 K35      ; R34 := AURA_SLOT_INDEX
145 [-]: GETUPVAL  R35 U4       ; R35 := U4
146 [-]: GETTABLE  R35 R35 K36  ; R35 := R35["railjackAuraType"]
147 [-]: SETLIST   R33 2 1      ; R33[(1-1)*FPF+i] := R(33+i), 1 <= i <= 2
148 [-]: SETLIST   R26 7 1      ; R26[(1-1)*FPF+i] := R(26+i), 1 <= i <= 7
149 [-]: CONST     R27 1        ; R27 := 1.000000
150 [-]: LEN       R28 R26      ; R28 := # R26
151 [-]: CONST     R29 1        ; R29 := 1.000000
152 [-]: FORPREP   R27 167      ; R27 -= R29; PC := 167
153 [-]: MOVE      R31 R10      ; R31 := R10
154 [-]: MOVE      R32 R25      ; R32 := R25
155 [-]: MOVE      R33 R24      ; R33 := R24
156 [-]: GETTABLE  R34 R26 R30  ; R34 := R26[R30]
157 [-]: GETTABLE  R34 R34 K37  ; R34 := R34[1.000000]
158 [-]: GETTABLE  R35 R26 R30  ; R35 := R26[R30]
159 [-]: GETTABLE  R35 R35 K9   ; R35 := R35[2.000000]
160 [-]: CALL      R31 5 2      ; R31 := R31(R32,R33,R34,R35)
161 [-]: TEST      R31 1        ; if R31 then PC := 167
162 [-]: JMP       167          ; PC := 167
163 [-]: CONST     R31 1        ; R31 := 1.000000
164 [-]: SETGLOBAL R31 K0       ; mUpdateStatFailType := R31
165 [-]: LOADKB    R31 0 0      ; R31 := false
166 [-]: RETURN    R31 2        ; return R31
167 [-]: FORLOOP   R27 153      ; R27 += R29; if R27 <= R28 then begin PC := 153; R30 := R27 end
168 [-]: FORLOOP   R20 103      ; R20 += R22; if R20 <= R21 then begin PC := 103; R23 := R20 end
169 [-]: JMP       333          ; PC := 333
170 [-]: GETUPVAL  R31 U7       ; R31 := U7
171 [-]: CALL      R31 1 2      ; R31 := R31()
172 [-]: TEST      R31 1        ; if R31 then PC := 182
173 [-]: JMP       182          ; PC := 182
174 [-]: GETGLOBAL R31 K6       ; R31 := _T
175 [-]: GETTABLE  R31 R31 K38  ; R31 := R31["upgradeItemCategory"]
176 [-]: EQ        1 R31 K37    ; if R31 == 1.000000 then PC := 182
177 [-]: JMP       182          ; PC := 182
178 [-]: GETGLOBAL R31 K6       ; R31 := _T
179 [-]: GETTABLE  R31 R31 K38  ; R31 := R31["upgradeItemCategory"]
180 [-]: EQ        0 R31 K40    ; if R31 ~= 0.000000 then PC := 287
181 [-]: JMP       287          ; PC := 287
182 [-]: CONST     R31 1        ; R31 := 1.000000
183 [-]: LEN       R32 R4       ; R32 := # R4
184 [-]: CONST     R33 1        ; R33 := 1.000000
185 [-]: FORPREP   R31 285      ; R31 -= R33; PC := 285
186 [-]: GETTABLE  R35 R4 R34   ; R35 := R4[R34]
187 [-]: GETTABLE  R36 R35 K11  ; R36 := R35["mInstalled"]
188 [-]: GETTABLE  R36 R36 R1   ; R36 := R36[R1]
189 [-]: GETUPVAL  R37 U7       ; R37 := U7
190 [-]: CALL      R37 1 2      ; R37 := R37()
191 [-]: TEST      R37 0        ; if not R37 then PC := 224
192 [-]: JMP       224          ; PC := 224
193 [-]: GETGLOBAL R37 K35      ; R37 := AURA_SLOT_INDEX
194 [-]: EQ        1 R36 R37    ; if R36 == R37 then PC := 199
195 [-]: JMP       199          ; PC := 199
196 [-]: GETTABLE  R37 R35 K41  ; R37 := R35["mType"]
197 [-]: EQ        1 R37 K42    ; if R37 == "AURA" then PC := 200
198 [-]: JMP       200          ; PC := 200
199 [-]: LOADKB    R37 0 1      ; R37 := false; PC := 200
200 [-]: LOADKB    R37 1 0      ; R37 := true
201 [-]: GETGLOBAL R38 K35      ; R38 := AURA_SLOT_INDEX
202 [-]: EQ        0 R36 R38    ; if R36 ~= R38 then PC := 207
203 [-]: JMP       207          ; PC := 207
204 [-]: GETTABLE  R38 R35 K41  ; R38 := R35["mType"]
205 [-]: EQ        0 R38 K42    ; if R38 ~= "AURA" then PC := 208
206 [-]: JMP       208          ; PC := 208
207 [-]: LOADKB    R38 0 1      ; R38 := false; PC := 208
208 [-]: LOADKB    R38 1 0      ; R38 := true
209 [-]: TEST      R38 1        ; if R38 then PC := 213
210 [-]: JMP       213          ; PC := 213
211 [-]: TEST      R37 0        ; if not R37 then PC := 224
212 [-]: JMP       224          ; PC := 224
213 [-]: GETUPVAL  R39 U5       ; R39 := U5
214 [-]: GETTABLE  R39 R39 K18  ; R39 := R39[0xa53f5e12]
215 [-]: GETUPVAL  R40 U5       ; R40 := U5
216 [-]: GETTABLE  R40 R40 K19  ; R40 := R40[0x06d055f9]
217 [-]: MOVE      R41 R38      ; R41 := R38
218 [-]: LOADK     R42 K43      ; R42 := "/Lotus/Language/Menu/Loadout_ApplyModToAuraSlot"
219 [-]: LOADK     R43 K44      ; R43 := "/Lotus/Language/Menu/Loadout_ApplyAuraWrongSlot"
220 [-]: CALL      R40 4 0      ; R40,... := R40(R41,R42,R43)
221 [-]: CALL      R39 0 1      ; R39(R40,...)
222 [-]: LOADKB    R39 0 0      ; R39 := false
223 [-]: RETURN    R39 2        ; return R39
224 [-]: GETUPVAL  R39 U8       ; R39 := U8
225 [-]: GETTABLE  R39 R39 K45  ; R39 := R39[0xba7a0a82]
226 [-]: GETUPVAL  R40 U0       ; R40 := U0
227 [-]: GETTABLE  R40 R40 K46  ; R40 := R40["type"]
228 [-]: MOVE      R41 R36      ; R41 := R36
229 [-]: CALL      R39 3 2      ; R39 := R39(R40,R41)
230 [-]: TEST      R39 0        ; if not R39 then PC := 256
231 [-]: JMP       256          ; PC := 256
232 [-]: GETGLOBAL R39 K47      ; R39 := mInstalledGrid
233 [-]: SELF      R39 R39 K48  ; R40 := R39; R39 := R39[0xca30dfb6]
234 [-]: MOVE      R41 R36      ; R41 := R36
235 [-]: CALL      R39 3 2      ; R39 := R39(R40,R41)
236 [-]: EQ        1 R39 K12    ; if R39 == nil then PC := 247
237 [-]: JMP       247          ; PC := 247
238 [-]: GETTABLE  R40 R39 K49  ; R40 := R39["Locked"]
239 [-]: TEST      R40 0        ; if not R40 then PC := 247
240 [-]: JMP       247          ; PC := 247
241 [-]: GETUPVAL  R40 U9       ; R40 := U9
242 [-]: CONST     R41 1        ; R41 := 1.000000
243 [-]: CALL      R40 2 1      ; R40(R41)
244 [-]: LOADKB    R40 0 0      ; R40 := false
245 [-]: RETURN    R40 2        ; return R40
246 [-]: JMP       256          ; PC := 256
247 [-]: GETTABLE  R40 R35 K50  ; R40 := R35["mIsUtility"]
248 [-]: TEST      R40 1        ; if R40 then PC := 256
249 [-]: JMP       256          ; PC := 256
250 [-]: GETUPVAL  R40 U5       ; R40 := U5
251 [-]: GETTABLE  R40 R40 K18  ; R40 := R40[0xa53f5e12]
252 [-]: LOADK     R41 K51      ; R41 := "/Lotus/Language/Menu/Loadout_ApplyModToUtilitySlot"
253 [-]: CALL      R40 2 1      ; R40(R41)
254 [-]: LOADKB    R40 0 0      ; R40 := false
255 [-]: RETURN    R40 2        ; return R40
256 [-]: GETTABLE  R40 R35 K52  ; R40 := R35["mUpgradeType"]
257 [-]: EQ        0 R40 K37    ; if R40 ~= 1.000000 then PC := 285
258 [-]: JMP       285          ; PC := 285
259 [-]: LEN       R40 R11      ; R40 := # R11
260 [-]: ADD       R40 R40 K37  ; R40 := R40 + 1.000000
261 [-]: SETTABLE  R11 R40 R34  ; R11[R40] := R34
262 [-]: LEN       R40 R11      ; R40 := # R11
263 [-]: LT        0 K54 R40    ; if 4.000000 >= R40 then PC := 285
264 [-]: JMP       285          ; PC := 285
265 [-]: TEST      R0 1         ; if R0 then PC := 283
266 [-]: JMP       283          ; PC := 283
267 [-]: CONST     R40 1        ; R40 := 1.000000
268 [-]: LEN       R41 R11      ; R41 := # R11
269 [-]: CONST     R42 1        ; R42 := 1.000000
270 [-]: FORPREP   R40 277      ; R40 -= R42; PC := 277
271 [-]: GETUPVAL  R44 U10      ; R44 := U10
272 [-]: GETTABLE  R45 R11 R43  ; R45 := R11[R43]
273 [-]: GETTABLE  R45 R4 R45   ; R45 := R4[R45]
274 [-]: GETTABLE  R45 R45 K55  ; R45 := R45["mElement"]
275 [-]: GETTABLE  R45 R45 K56  ; R45 := R45["mClipName"]
276 [-]: CALL      R44 2 1      ; R44(R45)
277 [-]: FORLOOP   R40 271      ; R40 += R42; if R40 <= R41 then begin PC := 271; R43 := R40 end
278 [-]: GETUPVAL  R44 U5       ; R44 := U5
279 [-]: GETTABLE  R44 R44 K57  ; R44 := R44[0x659d451f]
280 [-]: GETGLOBAL R45 K58      ; R45 := 0x0032441c
281 [-]: GETTABLE  R45 R45 K59  ; R45 := R45["UISound_Error"]
282 [-]: CALL      R44 2 1      ; R44(R45)
283 [-]: LOADKB    R44 0 0      ; R44 := false
284 [-]: RETURN    R44 2        ; return R44
285 [-]: FORLOOP   R31 186      ; R31 += R33; if R31 <= R32 then begin PC := 186; R34 := R31 end
286 [-]: JMP       333          ; PC := 333
287 [-]: GETUPVAL  R44 U11      ; R44 := U11
288 [-]: CALL      R44 1 2      ; R44 := R44()
289 [-]: TEST      R44 0        ; if not R44 then PC := 333
290 [-]: JMP       333          ; PC := 333
291 [-]: CONST     R44 1        ; R44 := 1.000000
292 [-]: LEN       R45 R4       ; R45 := # R4
293 [-]: CONST     R46 1        ; R46 := 1.000000
294 [-]: FORPREP   R44 332      ; R44 -= R46; PC := 332
295 [-]: GETTABLE  R48 R4 R47   ; R48 := R4[R47]
296 [-]: GETTABLE  R49 R48 K11  ; R49 := R48["mInstalled"]
297 [-]: GETTABLE  R49 R49 R1   ; R49 := R49[R1]
298 [-]: GETGLOBAL R50 K60      ; R50 := MELEE_STANCE_SLOT
299 [-]: EQ        0 R49 R50    ; if R49 ~= R50 then PC := 304
300 [-]: JMP       304          ; PC := 304
301 [-]: GETTABLE  R49 R48 K61  ; R49 := R48["mIsStance"]
302 [-]: TEST      R49 0        ; if not R49 then PC := 312
303 [-]: JMP       312          ; PC := 312
304 [-]: GETTABLE  R49 R48 K11  ; R49 := R48["mInstalled"]
305 [-]: GETTABLE  R49 R49 R1   ; R49 := R49[R1]
306 [-]: GETGLOBAL R50 K60      ; R50 := MELEE_STANCE_SLOT
307 [-]: EQ        1 R49 R50    ; if R49 == R50 then PC := 332
308 [-]: JMP       332          ; PC := 332
309 [-]: GETTABLE  R49 R48 K61  ; R49 := R48["mIsStance"]
310 [-]: TEST      R49 0        ; if not R49 then PC := 332
311 [-]: JMP       332          ; PC := 332
312 [-]: GETUPVAL  R49 U5       ; R49 := U5
313 [-]: GETTABLE  R49 R49 K18  ; R49 := R49[0xa53f5e12]
314 [-]: GETUPVAL  R50 U5       ; R50 := U5
315 [-]: GETTABLE  R50 R50 K19  ; R50 := R50[0x06d055f9]
316 [-]: GETTABLE  R51 R48 K11  ; R51 := R48["mInstalled"]
317 [-]: GETTABLE  R51 R51 R1   ; R51 := R51[R1]
318 [-]: GETGLOBAL R52 K60      ; R52 := MELEE_STANCE_SLOT
319 [-]: EQ        0 R51 R52    ; if R51 ~= R52 then PC := 324
320 [-]: JMP       324          ; PC := 324
321 [-]: GETTABLE  R51 R48 K61  ; R51 := R48["mIsStance"]
322 [-]: NOT       R51 R51      ; R51 :=  R51
323 [-]: JMP       326          ; PC := 326
324 [-]: LOADKB    R51 0 1      ; R51 := false; PC := 325
325 [-]: LOADKB    R51 1 0      ; R51 := true
326 [-]: LOADK     R52 K62      ; R52 := "/Lotus/Language/Menu/Loadout_ApplyModToStanceSlot"
327 [-]: LOADK     R53 K63      ; R53 := "/Lotus/Language/Menu/Loadout_ApplyStanceWrongSlot"
328 [-]: CALL      R50 4 0      ; R50,... := R50(R51,R52,R53)
329 [-]: CALL      R49 0 1      ; R49(R50,...)
330 [-]: LOADKB    R49 0 0      ; R49 := false
331 [-]: RETURN    R49 2        ; return R49
332 [-]: FORLOOP   R44 295      ; R44 += R46; if R44 <= R45 then begin PC := 295; R47 := R44 end
333 [-]: GETGLOBAL R49 K64      ; R49 := 0x7ed0a956
334 [-]: LOADK     R50 K65      ; R50 := "/Lotus/Types/Game/SentinelPrecept/MoaPetPrecept"
335 [-]: CALL      R49 2 2      ; R49 := R49(R50)
336 [-]: NEWTABLE  R50 7 0      ; R50 := {}
337 [-]: GETGLOBAL R51 K66      ; R51 := gLotusArtifactUpgradeType
338 [-]: MOVE      R52 R49      ; R52 := R49
339 [-]: GETGLOBAL R53 K64      ; R53 := 0x7ed0a956
340 [-]: LOADK     R54 K67      ; R54 := "/Lotus/Types/Game/LotusArtifactUpgrades/BaseArtifactUpgrade"
341 [-]: CALL      R53 2 2      ; R53 := R53(R54)
342 [-]: GETGLOBAL R54 K64      ; R54 := 0x7ed0a956
343 [-]: LOADK     R55 K68      ; R55 := "/Lotus/Types/Game/LotusArtifactUpgrades/BaseAbilityMod"
344 [-]: CALL      R54 2 2      ; R54 := R54(R55)
345 [-]: GETGLOBAL R55 K64      ; R55 := 0x7ed0a956
346 [-]: LOADK     R56 K69      ; R56 := "/Lotus/Upgrades/Mods/Melee/Channel/BaseChannelMod"
347 [-]: CALL      R55 2 2      ; R55 := R55(R56)
348 [-]: GETGLOBAL R56 K64      ; R56 := 0x7ed0a956
349 [-]: LOADK     R57 K70      ; R57 := "/Lotus/Types/Game/SentinelPrecept"
350 [-]: CALL      R56 2 2      ; R56 := R56(R57)
351 [-]: GETGLOBAL R57 K64      ; R57 := 0x7ed0a956
352 [-]: LOADK     R58 K71      ; R58 := "/Lotus/Upgrades/Mods/Immortal/ImmortalBaseMod"
353 [-]: CALL      R57 2 2      ; R57 := R57(R58)
354 [-]: GETGLOBAL R58 K64      ; R58 := 0x7ed0a956
355 [-]: LOADK     R59 K72      ; R59 := "/Lotus/Upgrades/Mods/DataSpike/BaseDataSpikeMod"
356 [-]: CALL      R58 2 0      ; R58,... := R58(R59)
357 [-]: SETLIST   R50 0 1      ; R50[(1-1)*FPF+i] := R(50+i), 1 <= i <= 0
358 [-]: CONST     R51 1        ; R51 := 1.000000
359 [-]: LEN       R52 R4       ; R52 := # R4
360 [-]: CONST     R53 1        ; R53 := 1.000000
361 [-]: FORPREP   R51 446      ; R51 -= R53; PC := 446
362 [-]: GETTABLE  R55 R4 R54   ; R55 := R4[R54]
363 [-]: ADD       R56 R54 K37  ; R56 := R54 + 1.000000
364 [-]: LEN       R57 R4       ; R57 := # R4
365 [-]: CONST     R58 1        ; R58 := 1.000000
366 [-]: FORPREP   R56 445      ; R56 -= R58; PC := 445
367 [-]: GETTABLE  R60 R4 R59   ; R60 := R4[R59]
368 [-]: GETTABLE  R61 R55 K73  ; R61 := R55["mUpgrade"]
369 [-]: GETTABLE  R61 R61 K74  ; R61 := R61["mItemType"]
370 [-]: SELF      R61 R61 K75  ; R62 := R61; R61 := R61[0x33abee92]
371 [-]: CALL      R61 2 2      ; R61 := R61(R62)
372 [-]: GETTABLE  R62 R60 K73  ; R62 := R60["mUpgrade"]
373 [-]: GETTABLE  R62 R62 K74  ; R62 := R62["mItemType"]
374 [-]: SELF      R62 R62 K75  ; R63 := R62; R62 := R62[0x33abee92]
375 [-]: CALL      R62 2 2      ; R62 := R62(R63)
376 [-]: LOADKB    R63 0 0      ; R63 := false
377 [-]: LOADKB    R64 0 0      ; R64 := false
378 [-]: CONST     R65 1        ; R65 := 1.000000
379 [-]: LEN       R66 R50      ; R66 := # R50
380 [-]: CONST     R67 1        ; R67 := 1.000000
381 [-]: FORPREP   R65 390      ; R65 -= R67; PC := 390
382 [-]: GETTABLE  R69 R50 R68  ; R69 := R50[R68]
383 [-]: EQ        0 R61 R69    ; if R61 ~= R69 then PC := 386
384 [-]: JMP       386          ; PC := 386
385 [-]: LOADKB    R63 1 0      ; R63 := true
386 [-]: GETTABLE  R69 R50 R68  ; R69 := R50[R68]
387 [-]: EQ        0 R62 R69    ; if R62 ~= R69 then PC := 390
388 [-]: JMP       390          ; PC := 390
389 [-]: LOADKB    R64 1 0      ; R64 := true
390 [-]: FORLOOP   R65 382      ; R65 += R67; if R65 <= R66 then begin PC := 382; R68 := R65 end
391 [-]: GETTABLE  R69 R55 K73  ; R69 := R55["mUpgrade"]
392 [-]: GETTABLE  R69 R69 K74  ; R69 := R69["mItemType"]
393 [-]: SELF      R69 R69 K76  ; R70 := R69; R69 := R69[0xf2deaf69]
394 [-]: GETTABLE  R71 R60 K73  ; R71 := R60["mUpgrade"]
395 [-]: GETTABLE  R71 R71 K74  ; R71 := R71["mItemType"]
396 [-]: CALL      R69 3 2      ; R69 := R69(R70,R71)
397 [-]: TEST      R69 1        ; if R69 then PC := 427
398 [-]: JMP       427          ; PC := 427
399 [-]: GETTABLE  R69 R60 K73  ; R69 := R60["mUpgrade"]
400 [-]: GETTABLE  R69 R69 K74  ; R69 := R69["mItemType"]
401 [-]: SELF      R69 R69 K76  ; R70 := R69; R69 := R69[0xf2deaf69]
402 [-]: GETTABLE  R71 R55 K73  ; R71 := R55["mUpgrade"]
403 [-]: GETTABLE  R71 R71 K74  ; R71 := R71["mItemType"]
404 [-]: CALL      R69 3 2      ; R69 := R69(R70,R71)
405 [-]: TEST      R69 1        ; if R69 then PC := 427
406 [-]: JMP       427          ; PC := 427
407 [-]: GETUPVAL  R69 U12      ; R69 := U12
408 [-]: MOVE      R70 R55      ; R70 := R55
409 [-]: MOVE      R71 R60      ; R71 := R60
410 [-]: CALL      R69 3 2      ; R69 := R69(R70,R71)
411 [-]: TEST      R69 1        ; if R69 then PC := 427
412 [-]: JMP       427          ; PC := 427
413 [-]: TEST      R63 1        ; if R63 then PC := 445
414 [-]: JMP       445          ; PC := 445
415 [-]: TEST      R64 1        ; if R64 then PC := 445
416 [-]: JMP       445          ; PC := 445
417 [-]: SELF      R69 R61 K76  ; R70 := R61; R69 := R61[0xf2deaf69]
418 [-]: MOVE      R71 R62      ; R71 := R62
419 [-]: CALL      R69 3 2      ; R69 := R69(R70,R71)
420 [-]: TEST      R69 1        ; if R69 then PC := 427
421 [-]: JMP       427          ; PC := 427
422 [-]: SELF      R69 R62 K76  ; R70 := R62; R69 := R62[0xf2deaf69]
423 [-]: MOVE      R71 R61      ; R71 := R61
424 [-]: CALL      R69 3 2      ; R69 := R69(R70,R71)
425 [-]: TEST      R69 0        ; if not R69 then PC := 445
426 [-]: JMP       445          ; PC := 445
427 [-]: TEST      R0 1         ; if R0 then PC := 443
428 [-]: JMP       443          ; PC := 443
429 [-]: GETTABLE  R69 R55 K55  ; R69 := R55["mElement"]
430 [-]: TEST      R69 0        ; if not R69 then PC := 436
431 [-]: JMP       436          ; PC := 436
432 [-]: GETUPVAL  R69 U10      ; R69 := U10
433 [-]: GETTABLE  R70 R55 K55  ; R70 := R55["mElement"]
434 [-]: GETTABLE  R70 R70 K56  ; R70 := R70["mClipName"]
435 [-]: CALL      R69 2 1      ; R69(R70)
436 [-]: GETTABLE  R69 R60 K55  ; R69 := R60["mElement"]
437 [-]: TEST      R69 0        ; if not R69 then PC := 443
438 [-]: JMP       443          ; PC := 443
439 [-]: GETUPVAL  R69 U10      ; R69 := U10
440 [-]: GETTABLE  R70 R60 K55  ; R70 := R60["mElement"]
441 [-]: GETTABLE  R70 R70 K56  ; R70 := R70["mClipName"]
442 [-]: CALL      R69 2 1      ; R69(R70)
443 [-]: LOADKB    R69 0 0      ; R69 := false
444 [-]: RETURN    R69 2        ; return R69
445 [-]: FORLOOP   R56 367      ; R56 += R58; if R56 <= R57 then begin PC := 367; R59 := R56 end
446 [-]: FORLOOP   R51 362      ; R51 += R53; if R51 <= R52 then begin PC := 362; R54 := R51 end
447 [-]: CONST     R69 0        ; R69 := 0.000000
448 [-]: NEWTABLE  R70 0 0      ; R70 := {}
449 [-]: CONST     R71 1        ; R71 := 1.000000
450 [-]: LEN       R72 R4       ; R72 := # R4
451 [-]: CONST     R73 1        ; R73 := 1.000000
452 [-]: FORPREP   R71 488      ; R71 -= R73; PC := 488
453 [-]: GETTABLE  R75 R4 R74   ; R75 := R4[R74]
454 [-]: GETTABLE  R76 R75 K73  ; R76 := R75["mUpgrade"]
455 [-]: GETTABLE  R76 R76 K74  ; R76 := R76["mItemType"]
456 [-]: SELF      R76 R76 K76  ; R77 := R76; R76 := R76[0xf2deaf69]
457 [-]: MOVE      R78 R49      ; R78 := R49
458 [-]: CALL      R76 3 2      ; R76 := R76(R77,R78)
459 [-]: TEST      R76 0        ; if not R76 then PC := 488
460 [-]: JMP       488          ; PC := 488
461 [-]: ADD       R69 R69 K37  ; R69 := R69 + 1.000000
462 [-]: GETGLOBAL R76 K13      ; R76 := 0x33bdd652
463 [-]: GETTABLE  R76 R76 K14  ; R76 := R76[0x23d5322f]
464 [-]: MOVE      R77 R70      ; R77 := R70
465 [-]: MOVE      R78 R75      ; R78 := R75
466 [-]: CALL      R76 3 1      ; R76(R77,R78)
467 [-]: GETGLOBAL R76 K8       ; R76 := 0x6c97a788
468 [-]: GETTABLE  R76 R76 K77  ; R76 := R76[0x419e8e53]
469 [-]: CALL      R76 1 2      ; R76 := R76()
470 [-]: LT        0 R76 R69    ; if R76 >= R69 then PC := 488
471 [-]: JMP       488          ; PC := 488
472 [-]: CONST     R76 1        ; R76 := 1.000000
473 [-]: LEN       R77 R70      ; R77 := # R70
474 [-]: CONST     R78 1        ; R78 := 1.000000
475 [-]: FORPREP   R76 485      ; R76 -= R78; PC := 485
476 [-]: GETTABLE  R80 R70 R79  ; R80 := R70[R79]
477 [-]: GETTABLE  R80 R80 K55  ; R80 := R80["mElement"]
478 [-]: TEST      R80 0        ; if not R80 then PC := 485
479 [-]: JMP       485          ; PC := 485
480 [-]: GETUPVAL  R80 U10      ; R80 := U10
481 [-]: GETTABLE  R81 R70 R79  ; R81 := R70[R79]
482 [-]: GETTABLE  R81 R81 K55  ; R81 := R81["mElement"]
483 [-]: GETTABLE  R81 R81 K56  ; R81 := R81["mClipName"]
484 [-]: CALL      R80 2 1      ; R80(R81)
485 [-]: FORLOOP   R76 476      ; R76 += R78; if R76 <= R77 then begin PC := 476; R79 := R76 end
486 [-]: LOADKB    R80 0 0      ; R80 := false
487 [-]: RETURN    R80 2        ; return R80
488 [-]: FORLOOP   R71 453      ; R71 += R73; if R71 <= R72 then begin PC := 453; R74 := R71 end
489 [-]: CONST     R80 0        ; R80 := 0.000000
490 [-]: CONST     R81 0        ; R81 := 0.000000
491 [-]: LOADKB    R82 0 0      ; R82 := false
492 [-]: CONST     R83 1        ; R83 := 1.000000
493 [-]: LEN       R84 R4       ; R84 := # R4
494 [-]: CONST     R85 1        ; R85 := 1.000000
495 [-]: FORPREP   R83 529      ; R83 -= R85; PC := 529
496 [-]: GETTABLE  R87 R4 R86   ; R87 := R4[R86]
497 [-]: GETUPVAL  R88 U4       ; R88 := U4
498 [-]: GETTABLE  R88 R88 K78  ; R88 := R88[0xae5b9893]
499 [-]: GETGLOBAL R89 K47      ; R89 := mInstalledGrid
500 [-]: SELF      R89 R89 K79  ; R90 := R89; R89 := R89[0xf73486b6]
501 [-]: GETTABLE  R91 R87 K11  ; R91 := R87["mInstalled"]
502 [-]: GETTABLE  R91 R91 R1   ; R91 := R91[R1]
503 [-]: CALL      R89 3 2      ; R89 := R89(R90,R91)
504 [-]: MOVE      R90 R87      ; R90 := R87
505 [-]: CALL      R88 3 2      ; R88 := R88(R89,R90)
506 [-]: LT        0 R88 K40    ; if R88 >= 0.000000 then PC := 510
507 [-]: JMP       510          ; PC := 510
508 [-]: UNM       R80 R88      ; R80 :=  R88
509 [-]: JMP       511          ; PC := 511
510 [-]: ADD       R81 R81 R88  ; R81 := R81 + R88
511 [-]: GETGLOBAL R89 K5       ; R89 := mEnergyUsed
512 [-]: ADD       R89 R89 R88  ; R89 := R89 + R88
513 [-]: SETGLOBAL R89 K5       ; mEnergyUsed := R89
514 [-]: SUB       R2 R2 R88    ; R2 := R2 - R88
515 [-]: LE        1 K40 R2     ; if 0.000000 <= R2 then PC := 518
516 [-]: JMP       518          ; PC := 518
517 [-]: LOADKB    R3 0 1       ; R3 := false; PC := 518
518 [-]: LOADKB    R3 1 0       ; R3 := true
519 [-]: GETUPVAL  R89 U11      ; R89 := U11
520 [-]: CALL      R89 1 2      ; R89 := R89()
521 [-]: TEST      R89 0        ; if not R89 then PC := 529
522 [-]: JMP       529          ; PC := 529
523 [-]: GETTABLE  R89 R87 K11  ; R89 := R87["mInstalled"]
524 [-]: GETTABLE  R89 R89 R1   ; R89 := R89[R1]
525 [-]: GETGLOBAL R90 K60      ; R90 := MELEE_STANCE_SLOT
526 [-]: EQ        0 R89 R90    ; if R89 ~= R90 then PC := 529
527 [-]: JMP       529          ; PC := 529
528 [-]: LOADKB    R82 1 0      ; R82 := true
529 [-]: FORLOOP   R83 496      ; R83 += R85; if R83 <= R84 then begin PC := 496; R86 := R83 end
530 [-]: GETGLOBAL R89 K80      ; R89 := mMeleeCombosBtn
531 [-]: SELF      R89 R89 K81  ; R90 := R89; R89 := R89[0x368ad758]
532 [-]: MOVE      R91 R82      ; R91 := R82
533 [-]: CALL      R89 3 1      ; R89(R90,R91)
534 [-]: CONST     R89 0        ; R89 := 0.000000
535 [-]: GETGLOBAL R90 K82      ; R90 := 0x60130201
536 [-]: CONST     R91 0        ; R91 := 0.000000
537 [-]: CONST     R92 0        ; R92 := 0.000000
538 [-]: CONST     R93 0        ; R93 := 0.000000
539 [-]: CALL      R90 4 2      ; R90 := R90(R91,R92,R93)
540 [-]: GETGLOBAL R91 K4       ; R91 := mEnergyTotal
541 [-]: LT        0 K40 R91    ; if 0.000000 >= R91 then PC := 589
542 [-]: JMP       589          ; PC := 589
543 [-]: GETGLOBAL R91 K83      ; R91 := 0x42dcc9f5
544 [-]: GETGLOBAL R92 K4       ; R92 := mEnergyTotal
545 [-]: ADD       R92 R92 R80  ; R92 := R92 + R80
546 [-]: DIV       R92 R81 R92  ; R92 := R81 / R92
547 [-]: SUB       R92 K37 R92  ; R92 := 1.000000 - R92
548 [-]: CONST     R93 0        ; R93 := 0.000000
549 [-]: CONST     R94 1        ; R94 := 1.000000
550 [-]: CALL      R91 4 2      ; R91 := R91(R92,R93,R94)
551 [-]: MOVE      R89 R91      ; R89 := R91
552 [-]: GETGLOBAL R91 K82      ; R91 := 0x60130201
553 [-]: CONST     R92 0        ; R92 := 0.000000
554 [-]: CONST     R93 128      ; R93 := 128.000000
555 [-]: CONST     R94 255      ; R94 := 255.000000
556 [-]: CALL      R91 4 2      ; R91 := R91(R92,R93,R94)
557 [-]: GETGLOBAL R92 K82      ; R92 := 0x60130201
558 [-]: CONST     R93 128      ; R93 := 128.000000
559 [-]: CONST     R94 128      ; R94 := 128.000000
560 [-]: CONST     R95 0        ; R95 := 0.000000
561 [-]: CALL      R92 4 2      ; R92 := R92(R93,R94,R95)
562 [-]: GETGLOBAL R93 K82      ; R93 := 0x60130201
563 [-]: CONST     R94 255      ; R94 := 255.000000
564 [-]: CONST     R95 0        ; R95 := 0.000000
565 [-]: CONST     R96 0        ; R96 := 0.000000
566 [-]: CALL      R93 4 2      ; R93 := R93(R94,R95,R96)
567 [-]: LT        0 R89 K84    ; if R89 >= 0.500000 then PC := 579
568 [-]: JMP       579          ; PC := 579
569 [-]: SELF      R94 R92 K85  ; R95 := R92; R94 := R92[0x9bafffe3]
570 [-]: MOVE      R96 R93      ; R96 := R93
571 [-]: GETGLOBAL R97 K86      ; R97 := 0x5bced4c4
572 [-]: GETTABLE  R97 R97 K87  ; R97 := R97[0xb62ecfe0]
573 [-]: MUL       R98 R89 K9   ; R98 := R89 * 2.000000
574 [-]: CALL      R97 2 2      ; R97 := R97(R98)
575 [-]: SUB       R97 K37 R97  ; R97 := 1.000000 - R97
576 [-]: CALL      R94 4 2      ; R94 := R94(R95,R96,R97)
577 [-]: MOVE      R90 R94      ; R90 := R94
578 [-]: JMP       589          ; PC := 589
579 [-]: SELF      R94 R91 K85  ; R95 := R91; R94 := R91[0x9bafffe3]
580 [-]: MOVE      R96 R92      ; R96 := R92
581 [-]: GETGLOBAL R97 K86      ; R97 := 0x5bced4c4
582 [-]: GETTABLE  R97 R97 K87  ; R97 := R97[0xb62ecfe0]
583 [-]: SUB       R98 R89 K84  ; R98 := R89 - 0.500000
584 [-]: MUL       R98 R98 K9   ; R98 := R98 * 2.000000
585 [-]: CALL      R97 2 2      ; R97 := R97(R98)
586 [-]: SUB       R97 K37 R97  ; R97 := 1.000000 - R97
587 [-]: CALL      R94 4 2      ; R94 := R94(R95,R96,R97)
588 [-]: MOVE      R90 R94      ; R90 := R94
589 [-]: CONST     R94 336      ; R94 := 336.000000
590 [-]: GETGLOBAL R95 K88      ; R95 := 0xae91e43b
591 [-]: SELF      R95 R95 K89  ; R96 := R95; R95 := R95[0x67bc869f]
592 [-]: LOADK     R97 K90      ; R97 := "Capacity.Fill"
593 [-]: CONST     R98 12       ; R98 := 12.000000
594 [-]: GETGLOBAL R99 K83      ; R99 := 0x42dcc9f5
595 [-]: MUL       R100 R89 R94 ; R100 := R89 * R94
596 [-]: LOADK     R101 K91     ; R101 := 0.001000
597 [-]: MOVE      R102 R94     ; R102 := R94
598 [-]: CALL      R99 4 0      ; R99,... := R99(R100,R101,R102)
599 [-]: CALL      R95 0 1      ; R95(R96,...)
600 [-]: GETGLOBAL R95 K88      ; R95 := 0xae91e43b
601 [-]: SELF      R95 R95 K92  ; R96 := R95; R95 := R95[0x20b98db3]
602 [-]: LOADK     R97 K93      ; R97 := "CapacityLabel.text"
603 [-]: LOADK     R98 K94      ; R98 := "/Lotus/Language/Menu/ModsCapacity"
604 [-]: CALL      R95 4 1      ; R95(R96,R97,R98)
605 [-]: GETGLOBAL R95 K88      ; R95 := 0xae91e43b
606 [-]: SELF      R95 R95 K95  ; R96 := R95; R95 := R95[0x5f56eeab]
607 [-]: LOADK     R97 K96      ; R97 := "CapacityNumber"
608 [-]: CONST     R98 29       ; R98 := 29.000000
609 [-]: GETGLOBAL R99 K4       ; R99 := mEnergyTotal
610 [-]: GETGLOBAL R100 K5      ; R100 := mEnergyUsed
611 [-]: SUB       R99 R99 R100 ; R99 := R99 - R100
612 [-]: LOADK     R100 K97     ; R100 := "/"
613 [-]: GETGLOBAL R101 K4      ; R101 := mEnergyTotal
614 [-]: ADD       R101 R101 R80; R101 := R101 + R80
615 [-]: CONCAT    R99 R99 R101 ; R99 := R99 .. R100 .. R101
616 [-]: CALL      R95 5 1      ; R95(R96,R97,R98,R99)
617 [-]: GETGLOBAL R95 K88      ; R95 := 0xae91e43b
618 [-]: SELF      R95 R95 K89  ; R96 := R95; R95 := R95[0x67bc869f]
619 [-]: LOADK     R97 K98      ; R97 := "CapacityLabel"
620 [-]: CONST     R98 36       ; R98 := 36.000000
621 [-]: GETGLOBAL R99 K99      ; R99 := mColors
622 [-]: GETTABLE  R99 R99 K100 ; R99 := R99["Content"]
623 [-]: CALL      R95 5 1      ; R95(R96,R97,R98,R99)
624 [-]: GETGLOBAL R95 K88      ; R95 := 0xae91e43b
625 [-]: SELF      R95 R95 K89  ; R96 := R95; R95 := R95[0x67bc869f]
626 [-]: LOADK     R97 K96      ; R97 := "CapacityNumber"
627 [-]: CONST     R98 36       ; R98 := 36.000000
628 [-]: GETGLOBAL R99 K99      ; R99 := mColors
629 [-]: GETTABLE  R99 R99 K100 ; R99 := R99["Content"]
630 [-]: CALL      R95 5 1      ; R95(R96,R97,R98,R99)
631 [-]: TEST      R3 1         ; if R3 then PC := 644
632 [-]: JMP       644          ; PC := 644
633 [-]: TEST      R0 1         ; if R0 then PC := 644
634 [-]: JMP       644          ; PC := 644
635 [-]: GETUPVAL  R95 U10      ; R95 := U10
636 [-]: LOADK     R96 K101     ; R96 := "Capacity"
637 [-]: CALL      R95 2 1      ; R95(R96)
638 [-]: GETUPVAL  R95 U10      ; R95 := U10
639 [-]: LOADK     R96 K98      ; R96 := "CapacityLabel"
640 [-]: CALL      R95 2 1      ; R95(R96)
641 [-]: GETUPVAL  R95 U10      ; R95 := U10
642 [-]: LOADK     R96 K96      ; R96 := "CapacityNumber"
643 [-]: CALL      R95 2 1      ; R95(R96)
644 [-]: RETURN    R3 2         ; return R3
645 [-]: RETURN    R0 1         ; return 


; Function #30.1:
;
; Name:            
; Defined at line: 629
; #Upvalues:       1
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mInstalled"]
  2 [-]: GETUPVAL  R3 U0        ; R3 := U0
  3 [-]: GETTABLE  R2 R2 R3     ; R2 := R2[R3]
  4 [-]: GETTABLE  R3 R1 K0     ; R3 := R1["mInstalled"]
  5 [-]: GETUPVAL  R4 U0        ; R4 := U0
  6 [-]: GETTABLE  R3 R3 R4     ; R3 := R3[R4]
  7 [-]: LT        1 R3 R2      ; if R3 < R2 then PC := 10
  8 [-]: JMP       10           ; PC := 10
  9 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 10
 10 [-]: LOADKB    R2 1 0       ; R2 := true
 11 [-]: RETURN    R2 2         ; return R2
 12 [-]: RETURN    R0 1         ; return 


; Function #30.2:
;
; Name:            
; Defined at line: 634
; #Upvalues:       0
; #Parameters:     4
; Is_vararg:       0
; Max Stack Size:  8

  1 [-]: EQ        1 R1 K0      ; if R1 == nil then PC := 8
  2 [-]: JMP       8            ; PC := 8
  3 [-]: GETTABLE  R4 R1 K1     ; R4 := R1["mArtifactUpgrade"]
  4 [-]: SELF      R4 R4 K2     ; R5 := R4; R4 := R4[0xf2deaf69]
  5 [-]: MOVE      R6 R3        ; R6 := R3
  6 [-]: CALL      R4 3 2       ; R4 := R4(R5,R6)
  7 [-]: JMP       10           ; PC := 10
  8 [-]: LOADKB    R4 0 1       ; R4 := false; PC := 9
  9 [-]: LOADKB    R4 1 0       ; R4 := true
 10 [-]: LOADKB    R5 0 0       ; R5 := false
 11 [-]: GETGLOBAL R6 K3        ; R6 := 0x0b96777e
 12 [-]: MOVE      R7 R2        ; R7 := R2
 13 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 14 [-]: EQ        0 R6 K4      ; if R6 ~= "table" then PC := 25
 15 [-]: JMP       25           ; PC := 25
 16 [-]: GETTABLE  R6 R2 K5     ; R6 := R2[1.000000]
 17 [-]: LE        0 R6 R0      ; if R6 > R0 then PC := 22
 18 [-]: JMP       22           ; PC := 22
 19 [-]: GETTABLE  R6 R2 K6     ; R6 := R2[2.000000]
 20 [-]: LE        1 R0 R6      ; if R0 <= R6 then PC := 23
 21 [-]: JMP       23           ; PC := 23
 22 [-]: LOADKB    R5 0 1       ; R5 := false; PC := 23
 23 [-]: LOADKB    R5 1 0       ; R5 := true
 24 [-]: JMP       29           ; PC := 29
 25 [-]: EQ        1 R0 R2      ; if R0 == R2 then PC := 28
 26 [-]: JMP       28           ; PC := 28
 27 [-]: LOADKB    R5 0 1       ; R5 := false; PC := 28
 28 [-]: LOADKB    R5 1 0       ; R5 := true
 29 [-]: TEST      R5 0         ; if not R5 then PC := 33
 30 [-]: JMP       33           ; PC := 33
 31 [-]: TEST      R4 0         ; if not R4 then PC := 37
 32 [-]: JMP       37           ; PC := 37
 33 [-]: TEST      R5 1         ; if R5 then PC := 39
 34 [-]: JMP       39           ; PC := 39
 35 [-]: TEST      R4 0         ; if not R4 then PC := 39
 36 [-]: JMP       39           ; PC := 39
 37 [-]: LOADKB    R6 0 0       ; R6 := false
 38 [-]: RETURN    R6 2         ; return R6
 39 [-]: LOADKB    R6 1 0       ; R6 := true
 40 [-]: RETURN    R6 2         ; return R6
 41 [-]: RETURN    R0 1         ; return 


; Function #31:
;
; Name:            
; Defined at line: 855
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  6

  1 [-]: NEWTABLE  R1 0 0       ; R1 := {}
  2 [-]: GETGLOBAL R2 K0        ; R2 := 0x33bdd652
  3 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x23d5322f]
  4 [-]: MOVE      R3 R1        ; R3 := R1
  5 [-]: GETUPVAL  R4 U0        ; R4 := U0
  6 [-]: GETTABLE  R4 R4 K2     ; R4 := R4["CategoryId_ALL"]
  7 [-]: CALL      R2 3 1       ; R2(R3,R4)
  8 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["mItemCompatibility"]
  9 [-]: SELF      R2 R2 K4     ; R3 := R2; R2 := R2[0xf2deaf69]
 10 [-]: GETUPVAL  R4 U0        ; R4 := U0
 11 [-]: GETTABLE  R4 R4 K5     ; R4 := R4["crewHarnessForFiltering"]
 12 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 13 [-]: TEST      R2 0         ; if not R2 then PC := 113
 14 [-]: JMP       113          ; PC := 113
 15 [-]: GETTABLE  R2 R0 K6     ; R2 := R0["mType"]
 16 [-]: EQ        0 R2 K7      ; if R2 ~= "AURA" then PC := 24
 17 [-]: JMP       24           ; PC := 24
 18 [-]: GETGLOBAL R2 K0        ; R2 := 0x33bdd652
 19 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x23d5322f]
 20 [-]: MOVE      R3 R1        ; R3 := R1
 21 [-]: GETUPVAL  R4 U0        ; R4 := U0
 22 [-]: GETTABLE  R4 R4 K8     ; R4 := R4["CategoryId_AURA"]
 23 [-]: CALL      R2 3 1       ; R2(R3,R4)
 24 [-]: GETTABLE  R2 R0 K9     ; R2 := R0["mArtifactUpgrade"]
 25 [-]: SELF      R2 R2 K4     ; R3 := R2; R2 := R2[0xf2deaf69]
 26 [-]: GETUPVAL  R4 U0        ; R4 := U0
 27 [-]: GETTABLE  R4 R4 K10    ; R4 := R4["railjackDefenseModType"]
 28 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 29 [-]: TEST      R2 0         ; if not R2 then PC := 39
 30 [-]: JMP       39           ; PC := 39
 31 [-]: GETGLOBAL R2 K0        ; R2 := 0x33bdd652
 32 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x23d5322f]
 33 [-]: MOVE      R3 R1        ; R3 := R1
 34 [-]: GETGLOBAL R4 K11       ; R4 := RAILJACK_SLOTS
 35 [-]: GETTABLE  R4 R4 K12    ; R4 := R4["BATTLE_DEF"]
 36 [-]: ADD       R4 K13 R4    ; R4 := 200.000000 + R4
 37 [-]: CALL      R2 3 1       ; R2(R3,R4)
 38 [-]: JMP       113          ; PC := 113
 39 [-]: GETTABLE  R2 R0 K9     ; R2 := R0["mArtifactUpgrade"]
 40 [-]: SELF      R2 R2 K4     ; R3 := R2; R2 := R2[0xf2deaf69]
 41 [-]: GETUPVAL  R4 U0        ; R4 := U0
 42 [-]: GETTABLE  R4 R4 K14    ; R4 := R4["railjackOffenseModType"]
 43 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 44 [-]: TEST      R2 0         ; if not R2 then PC := 54
 45 [-]: JMP       54           ; PC := 54
 46 [-]: GETGLOBAL R2 K0        ; R2 := 0x33bdd652
 47 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x23d5322f]
 48 [-]: MOVE      R3 R1        ; R3 := R1
 49 [-]: GETGLOBAL R4 K11       ; R4 := RAILJACK_SLOTS
 50 [-]: GETTABLE  R4 R4 K15    ; R4 := R4["BATTLE_OFF"]
 51 [-]: ADD       R4 K13 R4    ; R4 := 200.000000 + R4
 52 [-]: CALL      R2 3 1       ; R2(R3,R4)
 53 [-]: JMP       113          ; PC := 113
 54 [-]: GETTABLE  R2 R0 K9     ; R2 := R0["mArtifactUpgrade"]
 55 [-]: SELF      R2 R2 K4     ; R3 := R2; R2 := R2[0xf2deaf69]
 56 [-]: GETUPVAL  R4 U0        ; R4 := U0
 57 [-]: GETTABLE  R4 R4 K16    ; R4 := R4["railjackSuperModType"]
 58 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 59 [-]: TEST      R2 0         ; if not R2 then PC := 69
 60 [-]: JMP       69           ; PC := 69
 61 [-]: GETGLOBAL R2 K0        ; R2 := 0x33bdd652
 62 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x23d5322f]
 63 [-]: MOVE      R3 R1        ; R3 := R1
 64 [-]: GETGLOBAL R4 K11       ; R4 := RAILJACK_SLOTS
 65 [-]: GETTABLE  R4 R4 K17    ; R4 := R4["BATTLE_SUPER"]
 66 [-]: ADD       R4 K13 R4    ; R4 := 200.000000 + R4
 67 [-]: CALL      R2 3 1       ; R2(R3,R4)
 68 [-]: JMP       113          ; PC := 113
 69 [-]: GETTABLE  R2 R0 K9     ; R2 := R0["mArtifactUpgrade"]
 70 [-]: SELF      R2 R2 K4     ; R3 := R2; R2 := R2[0xf2deaf69]
 71 [-]: GETUPVAL  R4 U0        ; R4 := U0
 72 [-]: GETTABLE  R4 R4 K18    ; R4 := R4["railjackTacDefModType"]
 73 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 74 [-]: TEST      R2 0         ; if not R2 then PC := 84
 75 [-]: JMP       84           ; PC := 84
 76 [-]: GETGLOBAL R2 K0        ; R2 := 0x33bdd652
 77 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x23d5322f]
 78 [-]: MOVE      R3 R1        ; R3 := R1
 79 [-]: GETGLOBAL R4 K11       ; R4 := RAILJACK_SLOTS
 80 [-]: GETTABLE  R4 R4 K19    ; R4 := R4["TAC_DEF"]
 81 [-]: ADD       R4 K13 R4    ; R4 := 200.000000 + R4
 82 [-]: CALL      R2 3 1       ; R2(R3,R4)
 83 [-]: JMP       113          ; PC := 113
 84 [-]: GETTABLE  R2 R0 K9     ; R2 := R0["mArtifactUpgrade"]
 85 [-]: SELF      R2 R2 K4     ; R3 := R2; R2 := R2[0xf2deaf69]
 86 [-]: GETUPVAL  R4 U0        ; R4 := U0
 87 [-]: GETTABLE  R4 R4 K20    ; R4 := R4["railjackTacOffModType"]
 88 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 89 [-]: TEST      R2 0         ; if not R2 then PC := 99
 90 [-]: JMP       99           ; PC := 99
 91 [-]: GETGLOBAL R2 K0        ; R2 := 0x33bdd652
 92 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x23d5322f]
 93 [-]: MOVE      R3 R1        ; R3 := R1
 94 [-]: GETGLOBAL R4 K11       ; R4 := RAILJACK_SLOTS
 95 [-]: GETTABLE  R4 R4 K21    ; R4 := R4["TAC_OFF"]
 96 [-]: ADD       R4 K13 R4    ; R4 := 200.000000 + R4
 97 [-]: CALL      R2 3 1       ; R2(R3,R4)
 98 [-]: JMP       113          ; PC := 113
 99 [-]: GETTABLE  R2 R0 K9     ; R2 := R0["mArtifactUpgrade"]
100 [-]: SELF      R2 R2 K4     ; R3 := R2; R2 := R2[0xf2deaf69]
101 [-]: GETUPVAL  R4 U0        ; R4 := U0
102 [-]: GETTABLE  R4 R4 K22    ; R4 := R4["railjackTacSuperModType"]
103 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
104 [-]: TEST      R2 0         ; if not R2 then PC := 113
105 [-]: JMP       113          ; PC := 113
106 [-]: GETGLOBAL R2 K0        ; R2 := 0x33bdd652
107 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x23d5322f]
108 [-]: MOVE      R3 R1        ; R3 := R1
109 [-]: GETGLOBAL R4 K11       ; R4 := RAILJACK_SLOTS
110 [-]: GETTABLE  R4 R4 K23    ; R4 := R4["TAC_SUPER"]
111 [-]: ADD       R4 K13 R4    ; R4 := 200.000000 + R4
112 [-]: CALL      R2 3 1       ; R2(R3,R4)
113 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["mItemCompatibility"]
114 [-]: SELF      R2 R2 K4     ; R3 := R2; R2 := R2[0xf2deaf69]
115 [-]: GETUPVAL  R4 U0        ; R4 := U0
116 [-]: GETTABLE  R4 R4 K24    ; R4 := R4["warframeForFiltering"]
117 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
118 [-]: TEST      R2 0         ; if not R2 then PC := 141
119 [-]: JMP       141          ; PC := 141
120 [-]: GETTABLE  R2 R0 K6     ; R2 := R0["mType"]
121 [-]: EQ        0 R2 K7      ; if R2 ~= "AURA" then PC := 130
122 [-]: JMP       130          ; PC := 130
123 [-]: GETGLOBAL R2 K0        ; R2 := 0x33bdd652
124 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x23d5322f]
125 [-]: MOVE      R3 R1        ; R3 := R1
126 [-]: GETUPVAL  R4 U0        ; R4 := U0
127 [-]: GETTABLE  R4 R4 K8     ; R4 := R4["CategoryId_AURA"]
128 [-]: CALL      R2 3 1       ; R2(R3,R4)
129 [-]: JMP       141          ; PC := 141
130 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["mItemCompatibility"]
131 [-]: GETUPVAL  R3 U0        ; R3 := U0
132 [-]: GETTABLE  R3 R3 K24    ; R3 := R3["warframeForFiltering"]
133 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 141
134 [-]: JMP       141          ; PC := 141
135 [-]: GETGLOBAL R2 K0        ; R2 := 0x33bdd652
136 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x23d5322f]
137 [-]: MOVE      R3 R1        ; R3 := R1
138 [-]: GETUPVAL  R4 U0        ; R4 := U0
139 [-]: GETTABLE  R4 R4 K25    ; R4 := R4["CategoryId_AUGMENT"]
140 [-]: CALL      R2 3 1       ; R2(R3,R4)
141 [-]: GETTABLE  R2 R0 K26    ; R2 := R0["mIsUtility"]
142 [-]: TEST      R2 0         ; if not R2 then PC := 150
143 [-]: JMP       150          ; PC := 150
144 [-]: GETGLOBAL R2 K0        ; R2 := 0x33bdd652
145 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x23d5322f]
146 [-]: MOVE      R3 R1        ; R3 := R1
147 [-]: GETUPVAL  R4 U0        ; R4 := U0
148 [-]: GETTABLE  R4 R4 K27    ; R4 := R4["CategoryId_UTILITY"]
149 [-]: CALL      R2 3 1       ; R2(R3,R4)
150 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["mItemCompatibility"]
151 [-]: SELF      R2 R2 K4     ; R3 := R2; R2 := R2[0xf2deaf69]
152 [-]: GETUPVAL  R4 U0        ; R4 := U0
153 [-]: GETTABLE  R4 R4 K28    ; R4 := R4["archwingSuitForFiltering"]
154 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
155 [-]: TEST      R2 0         ; if not R2 then PC := 168
156 [-]: JMP       168          ; PC := 168
157 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["mItemCompatibility"]
158 [-]: GETUPVAL  R3 U0        ; R3 := U0
159 [-]: GETTABLE  R3 R3 K28    ; R3 := R3["archwingSuitForFiltering"]
160 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 168
161 [-]: JMP       168          ; PC := 168
162 [-]: GETGLOBAL R2 K0        ; R2 := 0x33bdd652
163 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x23d5322f]
164 [-]: MOVE      R3 R1        ; R3 := R1
165 [-]: GETUPVAL  R4 U0        ; R4 := U0
166 [-]: GETTABLE  R4 R4 K25    ; R4 := R4["CategoryId_AUGMENT"]
167 [-]: CALL      R2 3 1       ; R2(R3,R4)
168 [-]: GETTABLE  R2 R0 K29    ; R2 := R0["mIsStance"]
169 [-]: TEST      R2 0         ; if not R2 then PC := 177
170 [-]: JMP       177          ; PC := 177
171 [-]: GETGLOBAL R2 K0        ; R2 := 0x33bdd652
172 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x23d5322f]
173 [-]: MOVE      R3 R1        ; R3 := R1
174 [-]: GETUPVAL  R4 U0        ; R4 := U0
175 [-]: GETTABLE  R4 R4 K30    ; R4 := R4["CategoryId_STANCE"]
176 [-]: CALL      R2 3 1       ; R2(R3,R4)
177 [-]: GETUPVAL  R2 U0        ; R2 := U0
178 [-]: GETTABLE  R2 R2 K31    ; R2 := R2[0x04213f13]
179 [-]: MOVE      R3 R0        ; R3 := R0
180 [-]: LOADKB    R4 1 0       ; R4 := true
181 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
182 [-]: TEST      R2 0         ; if not R2 then PC := 190
183 [-]: JMP       190          ; PC := 190
184 [-]: GETGLOBAL R3 K0        ; R3 := 0x33bdd652
185 [-]: GETTABLE  R3 R3 K1     ; R3 := R3[0x23d5322f]
186 [-]: MOVE      R4 R1        ; R4 := R1
187 [-]: GETUPVAL  R5 U0        ; R5 := U0
188 [-]: GETTABLE  R5 R5 K32    ; R5 := R5["CategoryId_OMEGA"]
189 [-]: CALL      R3 3 1       ; R3(R4,R5)
190 [-]: GETUPVAL  R3 U0        ; R3 := U0
191 [-]: GETTABLE  R3 R3 K33    ; R3 := R3[0x6b32352d]
192 [-]: MOVE      R4 R0        ; R4 := R0
193 [-]: CALL      R3 2 2       ; R3 := R3(R4)
194 [-]: TEST      R3 0         ; if not R3 then PC := 202
195 [-]: JMP       202          ; PC := 202
196 [-]: GETGLOBAL R3 K0        ; R3 := 0x33bdd652
197 [-]: GETTABLE  R3 R3 K1     ; R3 := R3[0x23d5322f]
198 [-]: MOVE      R4 R1        ; R4 := R1
199 [-]: GETUPVAL  R5 U0        ; R5 := U0
200 [-]: GETTABLE  R5 R5 K34    ; R5 := R5["CategoryId_IMMORTAL"]
201 [-]: CALL      R3 3 1       ; R3(R4,R5)
202 [-]: TEST      R2 0         ; if not R2 then PC := 207
203 [-]: JMP       207          ; PC := 207
204 [-]: GETTABLE  R3 R0 K35    ; R3 := R0["mIdentified"]
205 [-]: TEST      R3 0         ; if not R3 then PC := 213
206 [-]: JMP       213          ; PC := 213
207 [-]: GETGLOBAL R3 K0        ; R3 := 0x33bdd652
208 [-]: GETTABLE  R3 R3 K1     ; R3 := R3[0x23d5322f]
209 [-]: MOVE      R4 R1        ; R4 := R1
210 [-]: GETTABLE  R5 R0 K36    ; R5 := R0["mPolarity"]
211 [-]: ADD       R5 K37 R5    ; R5 := 100.000000 + R5
212 [-]: CALL      R3 3 1       ; R3(R4,R5)
213 [-]: RETURN    R1 2         ; return R1
214 [-]: RETURN    R0 1         ; return 


; Function #32:
;
; Name:            
; Defined at line: 915
; #Upvalues:       3
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  19

  1 [-]: GETGLOBAL R2 K0        ; R2 := _T
  2 [-]: GETTABLE  R2 R2 K1     ; R2 := R2["ArsenalState"]
  3 [-]: EQ        1 R2 K3      ; if R2 == 2.000000 then PC := 6
  4 [-]: JMP       6            ; PC := 6
  5 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 6
  6 [-]: LOADKB    R2 1 0       ; R2 := true
  7 [-]: LOADKB    R3 0 0       ; R3 := false
  8 [-]: RETURN    R3 2         ; return R3
  9 [-]: TEST      R2 0         ; if not R2 then PC := 13
 10 [-]: JMP       13           ; PC := 13
 11 [-]: LOADKB    R3 0 0       ; R3 := false
 12 [-]: RETURN    R3 2         ; return R3
 13 [-]: LOADNIL   R3 R4        ; R3 := R4 := nil
 14 [-]: GETUPVAL  R5 U0        ; R5 := U0
 15 [-]: GETTABLE  R5 R5 K4     ; R5 := R5[0x06d055f9]
 16 [-]: GETGLOBAL R6 K0        ; R6 := _T
 17 [-]: GETTABLE  R6 R6 K5     ; R6 := R6["upgradeItemLot"]
 18 [-]: EQ        1 R6 K6      ; if R6 == 0.000000 then PC := 21
 19 [-]: JMP       21           ; PC := 21
 20 [-]: LOADKB    R6 0 1       ; R6 := false; PC := 21
 21 [-]: LOADKB    R6 1 0       ; R6 := true
 22 [-]: CONST     R7 1         ; R7 := 1.000000
 23 [-]: CONST     R8 0         ; R8 := 0.000000
 24 [-]: CALL      R5 4 2       ; R5 := R5(R6,R7,R8)
 25 [-]: LOADNIL   R6 R6        ; R6 := nil
 26 [-]: GETGLOBAL R7 K7        ; R7 := 0x7b998233
 27 [-]: GETGLOBAL R8 K8        ; R8 := mGameData
 28 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 29 [-]: TEST      R7 1         ; if R7 then PC := 118
 30 [-]: JMP       118          ; PC := 118
 31 [-]: GETGLOBAL R7 K8        ; R7 := mGameData
 32 [-]: SELF      R7 R7 K9     ; R8 := R7; R7 := R7[0x25a6e75e]
 33 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 34 [-]: MOVE      R4 R7        ; R4 := R7
 35 [-]: EQ        1 R4 K10     ; if R4 == nil then PC := 118
 36 [-]: JMP       118          ; PC := 118
 37 [-]: EQ        0 R5 K11     ; if R5 ~= 1.000000 then PC := 61
 38 [-]: JMP       61           ; PC := 61
 39 [-]: GETTABLE  R7 R1 R5     ; R7 := R1[R5]
 40 [-]: SELF      R7 R7 K12    ; R8 := R7; R7 := R7[0x2abbe722]
 41 [-]: CONST     R9 0         ; R9 := 0.000000
 42 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
 43 [-]: SELF      R8 R4 K13    ; R9 := R4; R8 := R4[0xc70965fe]
 44 [-]: MOVE      R10 R5       ; R10 := R5
 45 [-]: CONST     R11 0        ; R11 := 0.000000
 46 [-]: GETTABLE  R12 R7 K14   ; R12 := R7["mItemId"]
 47 [-]: GETTABLE  R12 R12 K15  ; R12 := R12["mId"]
 48 [-]: CALL      R8 5 2       ; R8 := R8(R9,R10,R11,R12)
 49 [-]: GETGLOBAL R9 K7        ; R9 := 0x7b998233
 50 [-]: GETTABLE  R10 R8 K16   ; R10 := R8["mItemType"]
 51 [-]: CALL      R9 2 2       ; R9 := R9(R10)
 52 [-]: TEST      R9 1         ; if R9 then PC := 60
 53 [-]: JMP       60           ; PC := 60
 54 [-]: GETTABLE  R9 R8 K16    ; R9 := R8["mItemType"]
 55 [-]: SELF      R9 R9 K17    ; R10 := R9; R9 := R9[0xf2deaf69]
 56 [-]: GETGLOBAL R11 K18      ; R11 := gPetPowerSuitType
 57 [-]: CALL      R9 3 2       ; R9 := R9(R10,R11)
 58 [-]: TEST      R9 0         ; if not R9 then PC := 61
 59 [-]: JMP       61           ; PC := 61
 60 [-]: RETURN    R0 1         ; return 
 61 [-]: LOADNIL   R9 R9        ; R9 := nil
 62 [-]: EQ        0 R5 K6      ; if R5 ~= 0.000000 then PC := 97
 63 [-]: JMP       97           ; PC := 97
 64 [-]: GETTABLE  R10 R1 K11   ; R10 := R1[1.000000]
 65 [-]: SELF      R10 R10 K12  ; R11 := R10; R10 := R10[0x2abbe722]
 66 [-]: CONST     R12 2        ; R12 := 2.000000
 67 [-]: CALL      R10 3 2      ; R10 := R10(R11,R12)
 68 [-]: SELF      R11 R4 K13   ; R12 := R4; R11 := R4[0xc70965fe]
 69 [-]: CONST     R13 1        ; R13 := 1.000000
 70 [-]: CONST     R14 2        ; R14 := 2.000000
 71 [-]: GETTABLE  R15 R10 K14  ; R15 := R10["mItemId"]
 72 [-]: GETTABLE  R15 R15 K15  ; R15 := R15["mId"]
 73 [-]: CALL      R11 5 2      ; R11 := R11(R12,R13,R14,R15)
 74 [-]: GETGLOBAL R12 K7       ; R12 := 0x7b998233
 75 [-]: GETTABLE  R13 R11 K16  ; R13 := R11["mItemType"]
 76 [-]: CALL      R12 2 2      ; R12 := R12(R13)
 77 [-]: TEST      R12 1        ; if R12 then PC := 98
 78 [-]: JMP       98           ; PC := 98
 79 [-]: GETTABLE  R12 R11 K16  ; R12 := R11["mItemType"]
 80 [-]: SELF      R12 R12 K17  ; R13 := R12; R12 := R12[0xf2deaf69]
 81 [-]: GETGLOBAL R14 K19      ; R14 := gLotusPistolType
 82 [-]: CALL      R12 3 2      ; R12 := R12(R13,R14)
 83 [-]: TEST      R12 0        ; if not R12 then PC := 87
 84 [-]: JMP       87           ; PC := 87
 85 [-]: CONST     R9 1         ; R9 := 1.000000
 86 [-]: JMP       98           ; PC := 98
 87 [-]: GETTABLE  R12 R11 K16  ; R12 := R11["mItemType"]
 88 [-]: SELF      R12 R12 K17  ; R13 := R12; R12 := R12[0xf2deaf69]
 89 [-]: GETGLOBAL R14 K20      ; R14 := gLotusMeleeWeaponType
 90 [-]: CALL      R12 3 2      ; R12 := R12(R13,R14)
 91 [-]: TEST      R12 0        ; if not R12 then PC := 95
 92 [-]: JMP       95           ; PC := 95
 93 [-]: CONST     R9 3         ; R9 := 3.000000
 94 [-]: JMP       98           ; PC := 98
 95 [-]: CONST     R9 2         ; R9 := 2.000000
 96 [-]: JMP       98           ; PC := 98
 97 [-]: CONST     R9 2         ; R9 := 2.000000
 98 [-]: EQ        1 R9 K10     ; if R9 == nil then PC := 118
 99 [-]: JMP       118          ; PC := 118
100 [-]: GETTABLE  R12 R1 R5    ; R12 := R1[R5]
101 [-]: SELF      R12 R12 K12  ; R13 := R12; R12 := R12[0x2abbe722]
102 [-]: MOVE      R14 R9       ; R14 := R9
103 [-]: CALL      R12 3 2      ; R12 := R12(R13,R14)
104 [-]: SELF      R13 R4 K13   ; R14 := R4; R13 := R4[0xc70965fe]
105 [-]: MOVE      R15 R5       ; R15 := R5
106 [-]: MOVE      R16 R9       ; R16 := R9
107 [-]: GETTABLE  R17 R12 K14  ; R17 := R12["mItemId"]
108 [-]: GETTABLE  R17 R17 K15  ; R17 := R17["mId"]
109 [-]: CALL      R13 5 2      ; R13 := R13(R14,R15,R16,R17)
110 [-]: MOVE      R3 R13       ; R3 := R13
111 [-]: GETTABLE  R6 R12 K21   ; R6 := R12["mModSlot"]
112 [-]: GETGLOBAL R13 K7       ; R13 := 0x7b998233
113 [-]: GETTABLE  R14 R3 K16   ; R14 := R3["mItemType"]
114 [-]: CALL      R13 2 2      ; R13 := R13(R14)
115 [-]: TEST      R13 0        ; if not R13 then PC := 118
116 [-]: JMP       118          ; PC := 118
117 [-]: LOADNIL   R3 R3        ; R3 := nil
118 [-]: EQ        1 R3 K10     ; if R3 == nil then PC := 129
119 [-]: JMP       129          ; PC := 129
120 [-]: GETTABLE  R13 R0 K22   ; R13 := R0["mUpgrade"]
121 [-]: GETTABLE  R13 R13 K23  ; R13 := R13["mInstance"]
122 [-]: SELF      R13 R13 K24  ; R14 := R13; R13 := R13[0x21a928c0]
123 [-]: GETTABLE  R15 R0 K22   ; R15 := R0["mUpgrade"]
124 [-]: GETTABLE  R15 R15 K25  ; R15 := R15["mUpgradeFingerprint"]
125 [-]: GETTABLE  R16 R3 K16   ; R16 := R3["mItemType"]
126 [-]: CALL      R13 4 2      ; R13 := R13(R14,R15,R16)
127 [-]: TEST      R13 1        ; if R13 then PC := 131
128 [-]: JMP       131          ; PC := 131
129 [-]: LOADKB    R13 0 0      ; R13 := false
130 [-]: RETURN    R13 2        ; return R13
131 [-]: EQ        1 R0 K10     ; if R0 == nil then PC := 172
132 [-]: JMP       172          ; PC := 172
133 [-]: GETTABLE  R13 R0 K22   ; R13 := R0["mUpgrade"]
134 [-]: GETTABLE  R13 R13 K14  ; R13 := R13["mItemId"]
135 [-]: GETTABLE  R13 R13 K15  ; R13 := R13["mId"]
136 [-]: EQ        0 R13 K26    ; if R13 ~= "" then PC := 142
137 [-]: JMP       142          ; PC := 142
138 [-]: GETTABLE  R13 R0 K22   ; R13 := R0["mUpgrade"]
139 [-]: GETTABLE  R13 R13 K27  ; R13 := R13["mItemCount"]
140 [-]: EQ        0 R13 K11    ; if R13 ~= 1.000000 then PC := 172
141 [-]: JMP       172          ; PC := 172
142 [-]: GETUPVAL  R13 U1       ; R13 := U1
143 [-]: GETTABLE  R13 R13 K28  ; R13 := R13[0x6e84aadc]
144 [-]: MOVE      R14 R4       ; R14 := R4
145 [-]: MOVE      R15 R3       ; R15 := R3
146 [-]: MOVE      R16 R0       ; R16 := R0
147 [-]: MOVE      R17 R6       ; R17 := R6
148 [-]: CALL      R13 5 1      ; R13(R14,R15,R16,R17)
149 [-]: GETTABLE  R13 R0 K29   ; R13 := R0["mInstalled"]
150 [-]: GETTABLE  R14 R3 K14   ; R14 := R3["mItemId"]
151 [-]: GETTABLE  R14 R14 K15  ; R14 := R14["mId"]
152 [-]: GETTABLE  R13 R13 R14  ; R13 := R13[R14]
153 [-]: EQ        1 R13 K10    ; if R13 == nil then PC := 172
154 [-]: JMP       172          ; PC := 172
155 [-]: GETUPVAL  R13 U2       ; R13 := U2
156 [-]: SELF      R13 R13 K30  ; R14 := R13; R13 := R13[0x5458ba4c]
157 [-]: GETTABLE  R15 R3 K16   ; R15 := R3["mItemType"]
158 [-]: CALL      R13 3 2      ; R13 := R13(R14,R15)
159 [-]: GETGLOBAL R14 K31      ; R14 := 0xae91e43b
160 [-]: SELF      R14 R14 K32  ; R15 := R14; R14 := R14[0x42b04007]
161 [-]: GETGLOBAL R16 K33      ; R16 := 0x64fb1586
162 [-]: SELF      R17 R13 K34  ; R18 := R13; R17 := R13[0xd3a9d01f]
163 [-]: CALL      R17 2 0      ; R17,... := R17(R18)
164 [-]: CALL      R16 0 2      ; R16 := R16(R17,...)
165 [-]: LOADKB    R17 0 0      ; R17 := false
166 [-]: CALL      R14 4 2      ; R14 := R14(R15,R16,R17)
167 [-]: LOADKB    R15 1 0      ; R15 := true
168 [-]: MOVE      R16 R5       ; R16 := R5
169 [-]: MOVE      R17 R13      ; R17 := R13
170 [-]: MOVE      R18 R14      ; R18 := R14
171 [-]: RETURN    R15 5        ; return R15,R16,R17,R18
172 [-]: LOADKB    R15 0 0      ; R15 := false
173 [-]: RETURN    R15 2        ; return R15
174 [-]: RETURN    R0 1         ; return 


; Function #33:
;
; Name:            
; Defined at line: 989
; #Upvalues:       4
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  50

  1 [-]: GETGLOBAL R0 K0        ; R0 := mCollectionGrid
  2 [-]: SELF      R0 R0 K1     ; R1 := R0; R0 := R0[0x7c09c373]
  3 [-]: CALL      R0 2 1       ; R0(R1)
  4 [-]: GETUPVAL  R0 U0        ; R0 := U0
  5 [-]: GETTABLE  R0 R0 K2     ; R0 := R0["info"]
  6 [-]: GETTABLE  R0 R0 K3     ; R0 := R0["mItemId"]
  7 [-]: GETTABLE  R0 R0 K4     ; R0 := R0["mId"]
  8 [-]: GETGLOBAL R1 K5        ; R1 := 0xae91e43b
  9 [-]: SELF      R1 R1 K6     ; R2 := R1; R1 := R1[0x42b04007]
 10 [-]: LOADK     R3 K7        ; R3 := "<MOD_SELECTOR>"
 11 [-]: LOADKB    R4 1 0       ; R4 := true
 12 [-]: CALL      R1 4 2       ; R1 := R1(R2,R3,R4)
 13 [-]: NEWTABLE  R2 0 0       ; R2 := {}
 14 [-]: GETGLOBAL R3 K8        ; R3 := mCards
 15 [-]: LEN       R3 R3        ; R3 := # R3
 16 [-]: CONST     R4 0         ; R4 := 0.000000
 17 [-]: LOADNIL   R5 R5        ; R5 := nil
 18 [-]: CONST     R6 0         ; R6 := 0.000000
 19 [-]: GETGLOBAL R7 K9        ; R7 := mGameData
 20 [-]: SELF      R7 R7 K10    ; R8 := R7; R7 := R7[0x25a6e75e]
 21 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 22 [-]: NEWTABLE  R8 0 0       ; R8 := {}
 23 [-]: CONST     R9 0         ; R9 := 0.000000
 24 [-]: CONST     R10 9        ; R10 := 9.000000
 25 [-]: CONST     R11 1        ; R11 := 1.000000
 26 [-]: FORPREP   R9 34        ; R9 -= R11; PC := 34
 27 [-]: SELF      R13 R7 K12   ; R14 := R7; R13 := R7[0x566259e1]
 28 [-]: MOVE      R15 R12      ; R15 := R12
 29 [-]: SELF      R16 R7 K13   ; R17 := R7; R16 := R7[0x4e457768]
 30 [-]: MOVE      R18 R12      ; R18 := R12
 31 [-]: CALL      R16 3 0      ; R16,... := R16(R17,R18)
 32 [-]: CALL      R13 0 2      ; R13 := R13(R14,...)
 33 [-]: SETTABLE  R8 R12 R13   ; R8[R12] := R13
 34 [-]: FORLOOP   R9 27        ; R9 += R11; if R9 <= R10 then begin PC := 27; R12 := R9 end
 35 [-]: CONST     R13 1        ; R13 := 1.000000
 36 [-]: MOVE      R14 R3       ; R14 := R3
 37 [-]: CONST     R15 1        ; R15 := 1.000000
 38 [-]: FORPREP   R13 140      ; R13 -= R15; PC := 140
 39 [-]: GETGLOBAL R17 K14      ; R17 := 0xce225efa
 40 [-]: CONST     R18 0        ; R18 := 0.000000
 41 [-]: CALL      R17 2 1      ; R17(R18)
 42 [-]: GETGLOBAL R17 K8       ; R17 := mCards
 43 [-]: GETTABLE  R17 R17 R16  ; R17 := R17[R16]
 44 [-]: GETTABLE  R18 R17 K15  ; R18 := R17["mInstalled"]
 45 [-]: GETTABLE  R18 R18 R0   ; R18 := R18[R0]
 46 [-]: EQ        0 R18 K16    ; if R18 ~= nil then PC := 132
 47 [-]: JMP       132          ; PC := 132
 48 [-]: LOADNIL   R5 R5        ; R5 := nil
 49 [-]: CONST     R18 1        ; R18 := 1.000000
 50 [-]: MOVE      R19 R4       ; R19 := R4
 51 [-]: CONST     R20 1        ; R20 := 1.000000
 52 [-]: FORPREP   R18 75       ; R18 -= R20; PC := 75
 53 [-]: GETTABLE  R22 R17 K17  ; R22 := R17["mUpgrade"]
 54 [-]: GETTABLE  R22 R22 K18  ; R22 := R22["mItemType"]
 55 [-]: GETGLOBAL R23 K8       ; R23 := mCards
 56 [-]: GETTABLE  R24 R2 R21   ; R24 := R2[R21]
 57 [-]: GETTABLE  R24 R24 K19  ; R24 := R24["mCardIndex"]
 58 [-]: GETTABLE  R23 R23 R24  ; R23 := R23[R24]
 59 [-]: GETTABLE  R23 R23 K17  ; R23 := R23["mUpgrade"]
 60 [-]: GETTABLE  R23 R23 K18  ; R23 := R23["mItemType"]
 61 [-]: EQ        0 R22 R23    ; if R22 ~= R23 then PC := 75
 62 [-]: JMP       75           ; PC := 75
 63 [-]: GETTABLE  R22 R17 K20  ; R22 := R17["mLevel"]
 64 [-]: EQ        0 R22 K21    ; if R22 ~= 0.000000 then PC := 75
 65 [-]: JMP       75           ; PC := 75
 66 [-]: GETTABLE  R22 R17 K20  ; R22 := R17["mLevel"]
 67 [-]: GETGLOBAL R23 K8       ; R23 := mCards
 68 [-]: GETTABLE  R24 R2 R21   ; R24 := R2[R21]
 69 [-]: GETTABLE  R24 R24 K19  ; R24 := R24["mCardIndex"]
 70 [-]: GETTABLE  R23 R23 R24  ; R23 := R23[R24]
 71 [-]: GETTABLE  R23 R23 K20  ; R23 := R23["mLevel"]
 72 [-]: EQ        0 R22 R23    ; if R22 ~= R23 then PC := 75
 73 [-]: JMP       75           ; PC := 75
 74 [-]: JMP       76           ; PC := 76
 75 [-]: FORLOOP   R18 53       ; R18 += R20; if R18 <= R19 then begin PC := 53; R21 := R18 end
 76 [-]: EQ        0 R5 K16     ; if R5 ~= nil then PC := 128
 77 [-]: JMP       128          ; PC := 128
 78 [-]: ADD       R4 R4 K22    ; R4 := R4 + 1.000000
 79 [-]: GETUPVAL  R22 U1       ; R22 := U1
 80 [-]: MOVE      R23 R17      ; R23 := R17
 81 [-]: CALL      R22 2 2      ; R22 := R22(R23)
 82 [-]: GETUPVAL  R23 U2       ; R23 := U2
 83 [-]: MOVE      R24 R17      ; R24 := R17
 84 [-]: MOVE      R25 R8       ; R25 := R8
 85 [-]: CALL      R23 3 5      ; R23,R24,R25,R26 := R23(R24,R25)
 86 [-]: NEWTABLE  R27 0 10     ; R27 := {}
 87 [-]: SETTABLE  R27 K19 R16  ; R27["mCardIndex"] := R16
 88 [-]: SETTABLE  R27 K23 K22  ; R27["Count"] := 1.000000
 89 [-]: SETTABLE  R27 K24 R22  ; R27["Categories"] := R22
 90 [-]: SETTABLE  R27 K25 R1   ; R27["mSelectionText"] := R1
 91 [-]: GETTABLE  R28 R17 K26  ; R28 := R17["mName"]
 92 [-]: SETTABLE  R27 K26 R28  ; R27["mName"] := R28
 93 [-]: SETTABLE  R27 K15 R23  ; R27["mInstalled"] := R23
 94 [-]: SETTABLE  R27 K27 R24  ; R27["mInstalledLoadOutType"] := R24
 95 [-]: SETTABLE  R27 K28 R25  ; R27["mInstalledType"] := R25
 96 [-]: SETTABLE  R27 K29 R26  ; R27["mInstalledName"] := R26
 97 [-]: GETTABLE  R28 R17 K30  ; R28 := R17["mModSet"]
 98 [-]: SETTABLE  R27 K30 R28  ; R27["mModSet"] := R28
 99 [-]: GETUPVAL  R28 U3       ; R28 := U3
100 [-]: GETTABLE  R28 R28 K32  ; R28 := R28[0x1ac299fb]
101 [-]: MOVE      R29 R17      ; R29 := R17
102 [-]: CALL      R28 2 2      ; R28 := R28(R29)
103 [-]: SETTABLE  R27 K31 R28  ; R27["SearchCache"] := R28
104 [-]: SETTABLE  R17 K33 R27  ; R17["mElement"] := R27
105 [-]: GETGLOBAL R28 K34      ; R28 := 0x33bdd652
106 [-]: GETTABLE  R28 R28 K35  ; R28 := R28[0x23d5322f]
107 [-]: MOVE      R29 R2       ; R29 := R2
108 [-]: MOVE      R30 R27      ; R30 := R27
109 [-]: CALL      R28 3 1      ; R28(R29,R30)
110 [-]: GETGLOBAL R28 K0       ; R28 := mCollectionGrid
111 [-]: SELF      R28 R28 K36  ; R29 := R28; R28 := R28[0xbad4316f]
112 [-]: MOVE      R30 R27      ; R30 := R27
113 [-]: LOADKB    R31 1 0      ; R31 := true
114 [-]: CALL      R28 4 1      ; R28(R29,R30,R31)
115 [-]: GETUPVAL  R28 U3       ; R28 := U3
116 [-]: GETTABLE  R28 R28 K37  ; R28 := R28[0x04213f13]
117 [-]: MOVE      R29 R17      ; R29 := R17
118 [-]: LOADKB    R30 1 0      ; R30 := true
119 [-]: CALL      R28 3 2      ; R28 := R28(R29,R30)
120 [-]: TEST      R28 0        ; if not R28 then PC := 140
121 [-]: JMP       140          ; PC := 140
122 [-]: GETGLOBAL R28 K38      ; R28 := mOmegaCount
123 [-]: GETTABLE  R29 R17 K17  ; R29 := R17["mUpgrade"]
124 [-]: GETTABLE  R29 R29 K39  ; R29 := R29["mItemCount"]
125 [-]: ADD       R28 R28 R29  ; R28 := R28 + R29
126 [-]: SETGLOBAL R28 K38      ; mOmegaCount := R28
127 [-]: JMP       140          ; PC := 140
128 [-]: GETTABLE  R28 R5 K23   ; R28 := R5["Count"]
129 [-]: ADD       R28 R28 K22  ; R28 := R28 + 1.000000
130 [-]: SETTABLE  R5 K23 R28   ; R5["Count"] := R28
131 [-]: JMP       140          ; PC := 140
132 [-]: ADD       R6 R6 K22    ; R6 := R6 + 1.000000
133 [-]: GETUPVAL  R28 U1       ; R28 := U1
134 [-]: MOVE      R29 R17      ; R29 := R17
135 [-]: CALL      R28 2 2      ; R28 := R28(R29)
136 [-]: GETGLOBAL R29 K0       ; R29 := mCollectionGrid
137 [-]: SELF      R29 R29 K40  ; R30 := R29; R29 := R29[0xa2d9aa79]
138 [-]: MOVE      R31 R28      ; R31 := R28
139 [-]: CALL      R29 3 1      ; R29(R30,R31)
140 [-]: FORLOOP   R13 39       ; R13 += R15; if R13 <= R14 then begin PC := 39; R16 := R13 end
141 [-]: GETGLOBAL R29 K0       ; R29 := mCollectionGrid
142 [-]: GETTABLE  R29 R29 K41  ; R29 := R29["mUnfilteredElements"]
143 [-]: LEN       R29 R29      ; R29 := # R29
144 [-]: GETGLOBAL R30 K42      ; R30 := 0x5bced4c4
145 [-]: GETTABLE  R30 R30 K43  ; R30 := R30[0xb62ecfe0]
146 [-]: GETGLOBAL R31 K0       ; R31 := mCollectionGrid
147 [-]: GETTABLE  R31 R31 K44  ; R31 := R31["mColumns"]
148 [-]: GETGLOBAL R32 K0       ; R32 := mCollectionGrid
149 [-]: GETTABLE  R32 R32 K45  ; R32 := R32["mRows"]
150 [-]: MUL       R31 R31 R32  ; R31 := R31 * R32
151 [-]: SUB       R31 R31 R29  ; R31 := R31 - R29
152 [-]: MOVE      R32 R6       ; R32 := R6
153 [-]: CALL      R30 3 2      ; R30 := R30(R31,R32)
154 [-]: GETGLOBAL R31 K42      ; R31 := 0x5bced4c4
155 [-]: GETTABLE  R31 R31 K46  ; R31 := R31[0x99675e23]
156 [-]: ADD       R32 R29 R30  ; R32 := R29 + R30
157 [-]: GETGLOBAL R33 K0       ; R33 := mCollectionGrid
158 [-]: GETTABLE  R33 R33 K44  ; R33 := R33["mColumns"]
159 [-]: DIV       R32 R32 R33  ; R32 := R32 / R33
160 [-]: CALL      R31 2 2      ; R31 := R31(R32)
161 [-]: GETGLOBAL R32 K0       ; R32 := mCollectionGrid
162 [-]: GETTABLE  R32 R32 K44  ; R32 := R32["mColumns"]
163 [-]: MUL       R32 R31 R32  ; R32 := R31 * R32
164 [-]: SUB       R30 R32 R29  ; R30 := R32 - R29
165 [-]: CONST     R32 1        ; R32 := 1.000000
166 [-]: MOVE      R33 R30      ; R33 := R30
167 [-]: CONST     R34 1        ; R34 := 1.000000
168 [-]: FORPREP   R32 179      ; R32 -= R34; PC := 179
169 [-]: GETGLOBAL R36 K0       ; R36 := mCollectionGrid
170 [-]: SELF      R36 R36 K36  ; R37 := R36; R36 := R36[0xbad4316f]
171 [-]: NEWTABLE  R38 0 4      ; R38 := {}
172 [-]: SETTABLE  R38 K31 K47  ; R38["SearchCache"] := ""
173 [-]: SETTABLE  R38 K19 K48  ; R38["mCardIndex"] := -1.000000
174 [-]: GETGLOBAL R39 K49      ; R39 := mFillerCategories
175 [-]: SETTABLE  R38 K24 R39  ; R38["Categories"] := R39
176 [-]: SETTABLE  R38 K25 R1   ; R38["mSelectionText"] := R1
177 [-]: LOADKB    R39 1 0      ; R39 := true
178 [-]: CALL      R36 4 1      ; R36(R37,R38,R39)
179 [-]: FORLOOP   R32 169      ; R32 += R34; if R32 <= R33 then begin PC := 169; R35 := R32 end
180 [-]: CONST     R36 1        ; R36 := 1.000000
181 [-]: GETGLOBAL R37 K49      ; R37 := mFillerCategories
182 [-]: LEN       R37 R37      ; R37 := # R37
183 [-]: CONST     R38 1        ; R38 := 1.000000
184 [-]: FORPREP   R36 202      ; R36 -= R38; PC := 202
185 [-]: GETGLOBAL R40 K49      ; R40 := mFillerCategories
186 [-]: GETTABLE  R40 R40 R39  ; R40 := R40[R39]
187 [-]: GETGLOBAL R41 K0       ; R41 := mCollectionGrid
188 [-]: GETTABLE  R41 R41 K50  ; R41 := R41["mCategoriesCount"]
189 [-]: GETTABLE  R41 R41 R40  ; R41 := R41[R40]
190 [-]: EQ        1 R41 K16    ; if R41 == nil then PC := 199
191 [-]: JMP       199          ; PC := 199
192 [-]: LT        0 R30 R41    ; if R30 >= R41 then PC := 199
193 [-]: JMP       199          ; PC := 199
194 [-]: GETGLOBAL R42 K0       ; R42 := mCollectionGrid
195 [-]: GETTABLE  R42 R42 K50  ; R42 := R42["mCategoriesCount"]
196 [-]: SUB       R43 R41 R30  ; R43 := R41 - R30
197 [-]: SETTABLE  R42 R40 R43  ; R42[R40] := R43
198 [-]: JMP       202          ; PC := 202
199 [-]: GETGLOBAL R42 K0       ; R42 := mCollectionGrid
200 [-]: GETTABLE  R42 R42 K50  ; R42 := R42["mCategoriesCount"]
201 [-]: SETTABLE  R42 R40 K21  ; R42[R40] := 0.000000
202 [-]: FORLOOP   R36 185      ; R36 += R38; if R36 <= R37 then begin PC := 185; R39 := R36 end
203 [-]: GETGLOBAL R42 K38      ; R42 := mOmegaCount
204 [-]: LT        0 K21 R42    ; if 0.000000 >= R42 then PC := 233
205 [-]: JMP       233          ; PC := 233
206 [-]: LOADKB    R42 0 0      ; R42 := false
207 [-]: GETGLOBAL R43 K0       ; R43 := mCollectionGrid
208 [-]: GETTABLE  R43 R43 K51  ; R43 := R43["mCategoryMenu"]
209 [-]: SELF      R43 R43 K52  ; R44 := R43; R43 := R43[0xea061e98]
210 [-]: CLOSURE   R45 0        ; R45 := closure(Function #33.1)
211 [-]: GETUPVAL  R0 U3        ; R0 := U3
212 [-]: MOVE      R0 R42       ; R0 := R42
213 [-]: CALL      R43 3 1      ; R43(R44,R45)
214 [-]: TEST      R42 1        ; if R42 then PC := 232
215 [-]: JMP       232          ; PC := 232
216 [-]: GETGLOBAL R43 K0       ; R43 := mCollectionGrid
217 [-]: SELF      R43 R43 K53  ; R44 := R43; R43 := R43[0x06d36229]
218 [-]: NEWTABLE  R45 0 3      ; R45 := {}
219 [-]: GETUPVAL  R46 U3       ; R46 := U3
220 [-]: GETTABLE  R46 R46 K55  ; R46 := R46["CategoryId_OMEGA"]
221 [-]: SETTABLE  R45 K54 R46  ; R45["Category"] := R46
222 [-]: GETGLOBAL R46 K5       ; R46 := 0xae91e43b
223 [-]: SELF      R46 R46 K6   ; R47 := R46; R46 := R46[0x42b04007]
224 [-]: LOADK     R48 K57      ; R48 := "/Lotus/Language/Menu/ArtifactCards_CategoryOmega"
225 [-]: LOADKB    R49 0 0      ; R49 := false
226 [-]: CALL      R46 4 2      ; R46 := R46(R47,R48,R49)
227 [-]: SETTABLE  R45 K56 R46  ; R45["Name"] := R46
228 [-]: GETGLOBAL R46 K59      ; R46 := 0x0032441c
229 [-]: GETTABLE  R46 R46 K60  ; R46 := R46["UICategoryIcon_OmegaOn"]
230 [-]: SETTABLE  R45 K58 R46  ; R45["Icon"] := R46
231 [-]: CALL      R43 3 1      ; R43(R44,R45)
232 [-]: CLOSE     R42          ; SAVE R42,...
233 [-]: GETGLOBAL R42 K0       ; R42 := mCollectionGrid
234 [-]: GETTABLE  R42 R42 K61  ; R42 := R42["mHasDoneFirstRedraw"]
235 [-]: TEST      R42 1        ; if R42 then PC := 242
236 [-]: JMP       242          ; PC := 242
237 [-]: GETGLOBAL R42 K0       ; R42 := mCollectionGrid
238 [-]: SELF      R42 R42 K62  ; R43 := R42; R42 := R42[0xabe497fe]
239 [-]: GETUPVAL  R44 U3       ; R44 := U3
240 [-]: GETTABLE  R44 R44 K63  ; R44 := R44["CategoryId_ALL"]
241 [-]: CALL      R42 3 1      ; R42(R43,R44)
242 [-]: GETGLOBAL R42 K64      ; R42 := mSearchBox
243 [-]: SELF      R42 R42 K65  ; R43 := R42; R42 := R42[0x9b71e815]
244 [-]: LOADK     R44 K47      ; R44 := ""
245 [-]: CALL      R42 3 1      ; R42(R43,R44)
246 [-]: GETGLOBAL R42 K0       ; R42 := mCollectionGrid
247 [-]: SELF      R42 R42 K66  ; R43 := R42; R42 := R42[0x71e9ac81]
248 [-]: CALL      R42 2 1      ; R42(R43)
249 [-]: RETURN    R0 1         ; return 


; Function #33.1:
;
; Name:            
; Defined at line: 1074
; #Upvalues:       2
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: GETTABLE  R1 R0 K0     ; R1 := R0["Category"]
  2 [-]: GETUPVAL  R2 U0        ; R2 := U0
  3 [-]: GETTABLE  R2 R2 K1     ; R2 := R2["CategoryId_OMEGA"]
  4 [-]: EQ        0 R1 R2      ; if R1 ~= R2 then PC := 8
  5 [-]: JMP       8            ; PC := 8
  6 [-]: LOADKB    R1 1 0       ; R1 := true
  7 [-]: SETUPVAL  R1 U1        ; U82 := R1
  8 [-]: RETURN    R0 1         ; return 


; Function #34:
;
; Name:            
; Defined at line: 1092
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R2 K0        ; R2 := mModsAdded
  2 [-]: GETTABLE  R3 R0 K1     ; R3 := R0["mItemId"]
  3 [-]: GETTABLE  R3 R3 K2     ; R3 := R3["mId"]
  4 [-]: NEWTABLE  R4 0 2       ; R4 := {}
  5 [-]: SETTABLE  R4 K3 R0     ; R4["upgrade"] := R0
  6 [-]: SETTABLE  R4 K4 R1     ; R4["slot"] := R1
  7 [-]: SETTABLE  R2 R3 R4     ; R2[R3] := R4
  8 [-]: RETURN    R0 1         ; return 


; Function #35:
;
; Name:            
; Defined at line: 1096
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mModsAdded
  3 [-]: GETTABLE  R3 R0 K2     ; R3 := R0["mItemId"]
  4 [-]: GETTABLE  R3 R3 K3     ; R3 := R3["mId"]
  5 [-]: GETTABLE  R2 R2 R3     ; R2 := R2[R3]
  6 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  7 [-]: TEST      R1 1         ; if R1 then PC := 14
  8 [-]: JMP       14           ; PC := 14
  9 [-]: GETGLOBAL R1 K1        ; R1 := mModsAdded
 10 [-]: GETTABLE  R2 R0 K2     ; R2 := R0["mItemId"]
 11 [-]: GETTABLE  R2 R2 K3     ; R2 := R2["mId"]
 12 [-]: SETTABLE  R1 R2 K4     ; R1[R2] := nil
 13 [-]: JMP       18           ; PC := 18
 14 [-]: GETGLOBAL R1 K5        ; R1 := mModsRemoved
 15 [-]: GETTABLE  R2 R0 K2     ; R2 := R0["mItemId"]
 16 [-]: GETTABLE  R2 R2 K3     ; R2 := R2["mId"]
 17 [-]: SETTABLE  R1 R2 R0     ; R1[R2] := R0
 18 [-]: RETURN    R0 1         ; return 


; Function #36:
;
; Name:            
; Defined at line: 1105
; #Upvalues:       3
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETUPVAL  R1 U0        ; R1 := U0
  2 [-]: GETTABLE  R1 R1 K0     ; R1 := R1["info"]
  3 [-]: GETTABLE  R1 R1 K1     ; R1 := R1["mItemId"]
  4 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mId"]
  5 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["mPriorInstalled"]
  6 [-]: GETTABLE  R3 R0 K4     ; R3 := R0["mInstalled"]
  7 [-]: GETTABLE  R3 R3 R1     ; R3 := R3[R1]
  8 [-]: EQ        0 R2 R3      ; if R2 ~= R3 then PC := 11
  9 [-]: JMP       11           ; PC := 11
 10 [-]: RETURN    R0 1         ; return 
 11 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["mPriorInstalled"]
 12 [-]: EQ        0 R2 K5      ; if R2 ~= -1.000000 then PC := 19
 13 [-]: JMP       19           ; PC := 19
 14 [-]: GETUPVAL  R2 U1        ; R2 := U1
 15 [-]: GETTABLE  R3 R0 K6     ; R3 := R0["mUpgrade"]
 16 [-]: GETTABLE  R4 R0 K4     ; R4 := R0["mInstalled"]
 17 [-]: CALL      R2 3 1       ; R2(R3,R4)
 18 [-]: JMP       34           ; PC := 34
 19 [-]: GETTABLE  R2 R0 K4     ; R2 := R0["mInstalled"]
 20 [-]: EQ        0 R2 K5      ; if R2 ~= -1.000000 then PC := 27
 21 [-]: JMP       27           ; PC := 27
 22 [-]: GETUPVAL  R2 U2        ; R2 := U2
 23 [-]: GETTABLE  R3 R0 K6     ; R3 := R0["mUpgrade"]
 24 [-]: GETTABLE  R4 R0 K4     ; R4 := R0["mInstalled"]
 25 [-]: CALL      R2 3 1       ; R2(R3,R4)
 26 [-]: JMP       34           ; PC := 34
 27 [-]: GETUPVAL  R2 U2        ; R2 := U2
 28 [-]: GETTABLE  R3 R0 K6     ; R3 := R0["mUpgrade"]
 29 [-]: CALL      R2 2 1       ; R2(R3)
 30 [-]: GETUPVAL  R2 U1        ; R2 := U1
 31 [-]: GETTABLE  R3 R0 K6     ; R3 := R0["mUpgrade"]
 32 [-]: GETTABLE  R4 R0 K4     ; R4 := R0["mInstalled"]
 33 [-]: CALL      R2 3 1       ; R2(R3,R4)
 34 [-]: RETURN    R0 1         ; return 


; Function #37:
;
; Name:            
; Defined at line: 1122
; #Upvalues:       4
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  16

  1 [-]: GETUPVAL  R1 U0        ; R1 := U0
  2 [-]: GETTABLE  R1 R1 K0     ; R1 := R1["info"]
  3 [-]: GETTABLE  R1 R1 K1     ; R1 := R1["mItemId"]
  4 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mId"]
  5 [-]: TEST      R0 0         ; if not R0 then PC := 162
  6 [-]: JMP       162          ; PC := 162
  7 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["mCardIndex"]
  8 [-]: LT        0 K4 R2      ; if 0.000000 >= R2 then PC := 162
  9 [-]: JMP       162          ; PC := 162
 10 [-]: GETGLOBAL R2 K5        ; R2 := mCards
 11 [-]: GETTABLE  R3 R0 K3     ; R3 := R0["mCardIndex"]
 12 [-]: GETTABLE  R2 R2 R3     ; R2 := R2[R3]
 13 [-]: GETTABLE  R3 R2 K6     ; R3 := R2["mInstalled"]
 14 [-]: GETTABLE  R3 R3 R1     ; R3 := R3[R1]
 15 [-]: EQ        1 R3 K7      ; if R3 == nil then PC := 146
 16 [-]: JMP       146          ; PC := 146
 17 [-]: GETUPVAL  R3 U1        ; R3 := U1
 18 [-]: GETTABLE  R3 R3 K8     ; R3 := R3[0xd1cd6ce0]
 19 [-]: MOVE      R4 R2        ; R4 := R2
 20 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 21 [-]: GETUPVAL  R4 U2        ; R4 := U2
 22 [-]: GETTABLE  R4 R4 K9     ; R4 := R4[0x4bc83635]
 23 [-]: MOVE      R5 R3        ; R5 := R3
 24 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 25 [-]: LOADNIL   R5 R5        ; R5 := nil
 26 [-]: GETGLOBAL R6 K10       ; R6 := 0x7b998233
 27 [-]: GETTABLE  R7 R2 K11    ; R7 := R2["mModSet"]
 28 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 29 [-]: TEST      R6 1         ; if R6 then PC := 57
 30 [-]: JMP       57           ; PC := 57
 31 [-]: GETGLOBAL R6 K10       ; R6 := 0x7b998233
 32 [-]: GETTABLE  R7 R2 K11    ; R7 := R2["mModSet"]
 33 [-]: SELF      R7 R7 K12    ; R8 := R7; R7 := R7[0xd0130c60]
 34 [-]: CALL      R7 2 0       ; R7,... := R7(R8)
 35 [-]: CALL      R6 0 2       ; R6 := R6(R7,...)
 36 [-]: TEST      R6 1         ; if R6 then PC := 57
 37 [-]: JMP       57           ; PC := 57
 38 [-]: GETUPVAL  R6 U3        ; R6 := U3
 39 [-]: GETTABLE  R7 R2 K13    ; R7 := R2["mElement"]
 40 [-]: GETTABLE  R7 R7 K14    ; R7 := R7["mClipName"]
 41 [-]: GETTABLE  R8 R2 K11    ; R8 := R2["mModSet"]
 42 [-]: SELF      R8 R8 K12    ; R9 := R8; R8 := R8[0xd0130c60]
 43 [-]: CALL      R8 2 2       ; R8 := R8(R9)
 44 [-]: GETGLOBAL R9 K15       ; R9 := 0x5bced4c4
 45 [-]: GETTABLE  R9 R9 K16    ; R9 := R9[0x3630e649]
 46 [-]: CONST     R10 -20      ; R10 := -20.000000
 47 [-]: CONST     R11 20       ; R11 := 20.000000
 48 [-]: CALL      R9 3 2       ; R9 := R9(R10,R11)
 49 [-]: GETGLOBAL R10 K15      ; R10 := 0x5bced4c4
 50 [-]: GETTABLE  R10 R10 K16  ; R10 := R10[0x3630e649]
 51 [-]: CONST     R11 -20      ; R11 := -20.000000
 52 [-]: CONST     R12 20       ; R12 := 20.000000
 53 [-]: CALL      R10 3 0      ; R10,... := R10(R11,R12)
 54 [-]: CALL      R6 0 2       ; R6 := R6(R7,...)
 55 [-]: MOVE      R5 R6        ; R5 := R6
 56 [-]: JMP       109          ; PC := 109
 57 [-]: GETGLOBAL R6 K10       ; R6 := 0x7b998233
 58 [-]: GETTABLE  R7 R2 K17    ; R7 := R2["mUpgradeItemType"]
 59 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 60 [-]: TEST      R6 1         ; if R6 then PC := 88
 61 [-]: JMP       88           ; PC := 88
 62 [-]: GETGLOBAL R6 K18       ; R6 := 0xb009bbc6
 63 [-]: GETTABLE  R7 R2 K17    ; R7 := R2["mUpgradeItemType"]
 64 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 65 [-]: SELF      R7 R6 K12    ; R8 := R6; R7 := R6[0xd0130c60]
 66 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 67 [-]: GETGLOBAL R8 K10       ; R8 := 0x7b998233
 68 [-]: MOVE      R9 R7        ; R9 := R7
 69 [-]: CALL      R8 2 2       ; R8 := R8(R9)
 70 [-]: TEST      R8 1         ; if R8 then PC := 88
 71 [-]: JMP       88           ; PC := 88
 72 [-]: GETUPVAL  R8 U3        ; R8 := U3
 73 [-]: GETTABLE  R9 R2 K13    ; R9 := R2["mElement"]
 74 [-]: GETTABLE  R9 R9 K14    ; R9 := R9["mClipName"]
 75 [-]: MOVE      R10 R7       ; R10 := R7
 76 [-]: GETGLOBAL R11 K15      ; R11 := 0x5bced4c4
 77 [-]: GETTABLE  R11 R11 K16  ; R11 := R11[0x3630e649]
 78 [-]: CONST     R12 -20      ; R12 := -20.000000
 79 [-]: CONST     R13 20       ; R13 := 20.000000
 80 [-]: CALL      R11 3 2      ; R11 := R11(R12,R13)
 81 [-]: GETGLOBAL R12 K15      ; R12 := 0x5bced4c4
 82 [-]: GETTABLE  R12 R12 K16  ; R12 := R12[0x3630e649]
 83 [-]: CONST     R13 -20      ; R13 := -20.000000
 84 [-]: CONST     R14 20       ; R14 := 20.000000
 85 [-]: CALL      R12 3 0      ; R12,... := R12(R13,R14)
 86 [-]: CALL      R8 0 2       ; R8 := R8(R9,...)
 87 [-]: MOVE      R5 R8        ; R5 := R8
 88 [-]: GETGLOBAL R8 K10       ; R8 := 0x7b998233
 89 [-]: MOVE      R9 R5        ; R9 := R5
 90 [-]: CALL      R8 2 2       ; R8 := R8(R9)
 91 [-]: TEST      R8 0         ; if not R8 then PC := 109
 92 [-]: JMP       109          ; PC := 109
 93 [-]: GETUPVAL  R8 U3        ; R8 := U3
 94 [-]: GETTABLE  R9 R2 K13    ; R9 := R2["mElement"]
 95 [-]: GETTABLE  R9 R9 K14    ; R9 := R9["mClipName"]
 96 [-]: GETGLOBAL R10 K19      ; R10 := 0x2dbeb270
 97 [-]: GETGLOBAL R11 K15      ; R11 := 0x5bced4c4
 98 [-]: GETTABLE  R11 R11 K16  ; R11 := R11[0x3630e649]
 99 [-]: CONST     R12 -20      ; R12 := -20.000000
100 [-]: CONST     R13 20       ; R13 := 20.000000
101 [-]: CALL      R11 3 2      ; R11 := R11(R12,R13)
102 [-]: GETGLOBAL R12 K15      ; R12 := 0x5bced4c4
103 [-]: GETTABLE  R12 R12 K16  ; R12 := R12[0x3630e649]
104 [-]: CONST     R13 -20      ; R13 := -20.000000
105 [-]: CONST     R14 20       ; R14 := 20.000000
106 [-]: CALL      R12 3 0      ; R12,... := R12(R13,R14)
107 [-]: CALL      R8 0 2       ; R8 := R8(R9,...)
108 [-]: MOVE      R5 R8        ; R5 := R8
109 [-]: GETGLOBAL R8 K10       ; R8 := 0x7b998233
110 [-]: MOVE      R9 R5        ; R9 := R5
111 [-]: CALL      R8 2 2       ; R8 := R8(R9)
112 [-]: TEST      R8 1         ; if R8 then PC := 130
113 [-]: JMP       130          ; PC := 130
114 [-]: GETTABLE  R5 R5 K20    ; R5 := R5["mInstance"]
115 [-]: SELF      R8 R5 K21    ; R9 := R5; R8 := R5[0x8feccd8b]
116 [-]: MOVE      R10 R4       ; R10 := R4
117 [-]: MOVE      R11 R4       ; R11 := R4
118 [-]: CALL      R8 4 1       ; R8(R9,R10,R11)
119 [-]: SELF      R8 R5 K22    ; R9 := R5; R8 := R5[0xc9f6a7d7]
120 [-]: GETGLOBAL R10 K23      ; R10 := gLensFlareType
121 [-]: CALL      R8 3 2       ; R8 := R8(R9,R10)
122 [-]: GETGLOBAL R9 K10       ; R9 := 0x7b998233
123 [-]: MOVE      R10 R8       ; R10 := R8
124 [-]: CALL      R9 2 2       ; R9 := R9(R10)
125 [-]: TEST      R9 1         ; if R9 then PC := 130
126 [-]: JMP       130          ; PC := 130
127 [-]: SELF      R9 R8 K24    ; R10 := R8; R9 := R8[0xc2b4e597]
128 [-]: MOVE      R11 R4       ; R11 := R4
129 [-]: CALL      R9 3 1       ; R9(R10,R11)
130 [-]: GETTABLE  R9 R2 K25    ; R9 := R2["mPolarity"]
131 [-]: GETTABLE  R10 R2 K13   ; R10 := R2["mElement"]
132 [-]: GETTABLE  R10 R10 K25  ; R10 := R10["mPolarity"]
133 [-]: EQ        0 R9 R10     ; if R9 ~= R10 then PC := 161
134 [-]: JMP       161          ; PC := 161
135 [-]: GETTABLE  R9 R2 K25    ; R9 := R2["mPolarity"]
136 [-]: EQ        1 R9 K4      ; if R9 == 0.000000 then PC := 161
137 [-]: JMP       161          ; PC := 161
138 [-]: GETGLOBAL R9 K27       ; R9 := mTimerMgr
139 [-]: SELF      R9 R9 K28    ; R10 := R9; R9 := R9[0xbd2e96ea]
140 [-]: LOADK     R11 K29      ; R11 := 0.450000
141 [-]: CLOSURE   R12 0        ; R12 := closure(Function #37.1)
142 [-]: MOVE      R0 R2        ; R0 := R2
143 [-]: GETUPVAL  R0 U3        ; R0 := U3
144 [-]: CALL      R9 4 1       ; R9(R10,R11,R12)
145 [-]: JMP       161          ; PC := 161
146 [-]: GETUPVAL  R9 U3        ; R9 := U3
147 [-]: GETTABLE  R10 R2 K13   ; R10 := R2["mElement"]
148 [-]: GETTABLE  R10 R10 K14  ; R10 := R10["mClipName"]
149 [-]: GETGLOBAL R11 K30      ; R11 := 0x81fc1e06
150 [-]: GETGLOBAL R12 K15      ; R12 := 0x5bced4c4
151 [-]: GETTABLE  R12 R12 K16  ; R12 := R12[0x3630e649]
152 [-]: CONST     R13 -20      ; R13 := -20.000000
153 [-]: CONST     R14 20       ; R14 := 20.000000
154 [-]: CALL      R12 3 2      ; R12 := R12(R13,R14)
155 [-]: GETGLOBAL R13 K15      ; R13 := 0x5bced4c4
156 [-]: GETTABLE  R13 R13 K16  ; R13 := R13[0x3630e649]
157 [-]: CONST     R14 -20      ; R14 := -20.000000
158 [-]: CONST     R15 20       ; R15 := 20.000000
159 [-]: CALL      R13 3 0      ; R13,... := R13(R14,R15)
160 [-]: CALL      R9 0 1       ; R9(R10,...)
161 [-]: CLOSE     R2           ; SAVE R2,...
162 [-]: RETURN    R0 1         ; return 


; Function #37.1:
;
; Name:            
; Defined at line: 1155
; #Upvalues:       2
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  2 [-]: GETUPVAL  R1 U0        ; R1 := U0
  3 [-]: GETTABLE  R1 R1 K1     ; R1 := R1["mElement"]
  4 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mClipName"]
  5 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  6 [-]: TEST      R0 1         ; if R0 then PC := 18
  7 [-]: JMP       18           ; PC := 18
  8 [-]: GETUPVAL  R0 U1        ; R0 := U1
  9 [-]: GETUPVAL  R1 U0        ; R1 := U0
 10 [-]: GETTABLE  R1 R1 K1     ; R1 := R1["mElement"]
 11 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mClipName"]
 12 [-]: LOADK     R2 K3        ; R2 := ".Card.TopInfo.PolarityBacker"
 13 [-]: CONCAT    R1 R1 R2     ; R1 := R1 .. R2
 14 [-]: GETGLOBAL R2 K4        ; R2 := 0xfce74610
 15 [-]: CONST     R3 20        ; R3 := 20.000000
 16 [-]: CONST     R4 0         ; R4 := 0.000000
 17 [-]: CALL      R0 5 1       ; R0(R1,R2,R3,R4)
 18 [-]: RETURN    R0 1         ; return 


; Function #38:
;
; Name:            
; Defined at line: 1167
; #Upvalues:       2
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  9

  1 [-]: GETUPVAL  R0 U0        ; R0 := U0
  2 [-]: GETTABLE  R0 R0 K0     ; R0 := R0["info"]
  3 [-]: GETTABLE  R0 R0 K1     ; R0 := R0["mItemId"]
  4 [-]: GETTABLE  R0 R0 K2     ; R0 := R0["mId"]
  5 [-]: CONST     R1 1         ; R1 := 1.000000
  6 [-]: GETGLOBAL R2 K3        ; R2 := mCards
  7 [-]: LEN       R2 R2        ; R2 := # R2
  8 [-]: CONST     R3 1         ; R3 := 1.000000
  9 [-]: FORPREP   R1 23        ; R1 -= R3; PC := 23
 10 [-]: GETGLOBAL R5 K3        ; R5 := mCards
 11 [-]: GETTABLE  R5 R5 R4     ; R5 := R5[R4]
 12 [-]: GETTABLE  R6 R5 K4     ; R6 := R5["mInstalled"]
 13 [-]: GETTABLE  R6 R6 R0     ; R6 := R6[R0]
 14 [-]: GETGLOBAL R7 K5        ; R7 := MELEE_STANCE_SLOT
 15 [-]: EQ        0 R6 R7      ; if R6 ~= R7 then PC := 23
 16 [-]: JMP       23           ; PC := 23
 17 [-]: GETUPVAL  R6 U1        ; R6 := U1
 18 [-]: GETTABLE  R6 R6 K7     ; R6 := R6[0x8a954418]
 19 [-]: GETGLOBAL R7 K8        ; R7 := 0xae91e43b
 20 [-]: GETTABLE  R8 R5 K9     ; R8 := R5["mUpgrade"]
 21 [-]: CALL      R6 3 2       ; R6 := R6(R7,R8)
 22 [-]: SETGLOBAL R6 K6        ; mChildMovie := R6
 23 [-]: FORLOOP   R1 10        ; R1 += R3; if R1 <= R2 then begin PC := 10; R4 := R1 end
 24 [-]: RETURN    R0 1         ; return 


; Function #39:
;
; Name:            
; Defined at line: 1177
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETUPVAL  R0 U0        ; R0 := U0
  2 [-]: CALL      R0 1 1       ; R0()
  3 [-]: RETURN    R0 1         ; return 


; Function #40:
;
; Name:            
; Defined at line: 1181
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: EQ        0 R0 K1      ; if R0 ~= 0.000000 then PC := 11
  2 [-]: JMP       11           ; PC := 11
  3 [-]: EQ        0 R1 K2      ; if R1 ~= 7.000000 then PC := 8
  4 [-]: JMP       8            ; PC := 8
  5 [-]: CONST     R2 11        ; R2 := 11.000000
  6 [-]: RETURN    R2 2         ; return R2
  7 [-]: JMP       42           ; PC := 42
  8 [-]: LOADNIL   R2 R2        ; R2 := nil
  9 [-]: RETURN    R2 2         ; return R2
 10 [-]: JMP       42           ; PC := 42
 11 [-]: EQ        0 R0 K4      ; if R0 ~= 2.000000 then PC := 21
 12 [-]: JMP       21           ; PC := 21
 13 [-]: EQ        0 R1 K2      ; if R1 ~= 7.000000 then PC := 18
 14 [-]: JMP       18           ; PC := 18
 15 [-]: CONST     R2 12        ; R2 := 12.000000
 16 [-]: RETURN    R2 2         ; return R2
 17 [-]: JMP       42           ; PC := 42
 18 [-]: CONST     R2 1         ; R2 := 1.000000
 19 [-]: RETURN    R2 2         ; return R2
 20 [-]: JMP       42           ; PC := 42
 21 [-]: EQ        0 R0 K5      ; if R0 ~= 1.000000 then PC := 26
 22 [-]: JMP       26           ; PC := 26
 23 [-]: CONST     R2 0         ; R2 := 0.000000
 24 [-]: RETURN    R2 2         ; return R2
 25 [-]: JMP       42           ; PC := 42
 26 [-]: EQ        0 R0 K6      ; if R0 ~= 3.000000 then PC := 31
 27 [-]: JMP       31           ; PC := 31
 28 [-]: CONST     R2 5         ; R2 := 5.000000
 29 [-]: RETURN    R2 2         ; return R2
 30 [-]: JMP       42           ; PC := 42
 31 [-]: EQ        1 R0 K7      ; if R0 == 5.000000 then PC := 35
 32 [-]: JMP       35           ; PC := 35
 33 [-]: EQ        0 R0 K8      ; if R0 ~= 6.000000 then PC := 38
 34 [-]: JMP       38           ; PC := 38
 35 [-]: CONST     R2 7         ; R2 := 7.000000
 36 [-]: RETURN    R2 2         ; return R2
 37 [-]: JMP       42           ; PC := 42
 38 [-]: EQ        0 R0 K9      ; if R0 ~= 4.000000 then PC := 42
 39 [-]: JMP       42           ; PC := 42
 40 [-]: CONST     R2 10        ; R2 := 10.000000
 41 [-]: RETURN    R2 2         ; return R2
 42 [-]: LOADNIL   R2 R2        ; R2 := nil
 43 [-]: RETURN    R2 2         ; return R2
 44 [-]: RETURN    R0 1         ; return 


; Function #41:
;
; Name:            
; Defined at line: 1206
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  9

  1 [-]: GETGLOBAL R2 K0        ; R2 := _T
  2 [-]: GETTABLE  R2 R2 K1     ; R2 := R2["upgradeItemLot"]
  3 [-]: GETGLOBAL R3 K0        ; R3 := _T
  4 [-]: GETTABLE  R3 R3 K2     ; R3 := R3["upgradeItemSlot"]
  5 [-]: EQ        1 R2 K3      ; if R2 == nil then PC := 211
  6 [-]: JMP       211          ; PC := 211
  7 [-]: EQ        1 R3 K3      ; if R3 == nil then PC := 211
  8 [-]: JMP       211          ; PC := 211
  9 [-]: EQ        0 R2 K5      ; if R2 ~= 1.000000 then PC := 31
 10 [-]: JMP       31           ; PC := 31
 11 [-]: EQ        0 R3 K6      ; if R3 ~= 0.000000 then PC := 31
 12 [-]: JMP       31           ; PC := 31
 13 [-]: GETGLOBAL R4 K0        ; R4 := _T
 14 [-]: GETTABLE  R4 R4 K7     ; R4 := R4["MenuSuitAvatar"]
 15 [-]: SELF      R4 R4 K8     ; R5 := R4; R4 := R4[0xde321e6f]
 16 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 17 [-]: SELF      R4 R4 K9     ; R5 := R4; R4 := R4[0x2676deee]
 18 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 19 [-]: MOVE      R0 R4        ; R0 := R4
 20 [-]: GETGLOBAL R4 K10       ; R4 := 0x7b998233
 21 [-]: MOVE      R5 R0        ; R5 := R0
 22 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 23 [-]: TEST      R4 1         ; if R4 then PC := 211
 24 [-]: JMP       211          ; PC := 211
 25 [-]: SELF      R4 R0 K8     ; R5 := R0; R4 := R0[0xde321e6f]
 26 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 27 [-]: SELF      R4 R4 K11    ; R5 := R4; R4 := R4[0xf7d48ee0]
 28 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 29 [-]: MOVE      R1 R4        ; R1 := R4
 30 [-]: JMP       211          ; PC := 211
 31 [-]: EQ        0 R2 K12     ; if R2 ~= 2.000000 then PC := 48
 32 [-]: JMP       48           ; PC := 48
 33 [-]: EQ        0 R3 K6      ; if R3 ~= 0.000000 then PC := 48
 34 [-]: JMP       48           ; PC := 48
 35 [-]: GETGLOBAL R4 K0        ; R4 := _T
 36 [-]: GETTABLE  R0 R4 K7     ; R0 := R4["MenuSuitAvatar"]
 37 [-]: GETGLOBAL R4 K10       ; R4 := 0x7b998233
 38 [-]: MOVE      R5 R0        ; R5 := R0
 39 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 40 [-]: TEST      R4 1         ; if R4 then PC := 211
 41 [-]: JMP       211          ; PC := 211
 42 [-]: SELF      R4 R0 K8     ; R5 := R0; R4 := R0[0xde321e6f]
 43 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 44 [-]: SELF      R4 R4 K13    ; R5 := R4; R4 := R4[0x2303a280]
 45 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 46 [-]: MOVE      R1 R4        ; R1 := R4
 47 [-]: JMP       211          ; PC := 211
 48 [-]: EQ        0 R2 K14     ; if R2 ~= 6.000000 then PC := 65
 49 [-]: JMP       65           ; PC := 65
 50 [-]: EQ        0 R3 K6      ; if R3 ~= 0.000000 then PC := 65
 51 [-]: JMP       65           ; PC := 65
 52 [-]: GETGLOBAL R4 K0        ; R4 := _T
 53 [-]: GETTABLE  R0 R4 K15    ; R0 := R4["KDriveAvatar"]
 54 [-]: GETGLOBAL R4 K10       ; R4 := 0x7b998233
 55 [-]: MOVE      R5 R0        ; R5 := R0
 56 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 57 [-]: TEST      R4 1         ; if R4 then PC := 211
 58 [-]: JMP       211          ; PC := 211
 59 [-]: SELF      R4 R0 K8     ; R5 := R0; R4 := R0[0xde321e6f]
 60 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 61 [-]: SELF      R4 R4 K11    ; R5 := R4; R4 := R4[0xf7d48ee0]
 62 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 63 [-]: MOVE      R1 R4        ; R1 := R4
 64 [-]: JMP       211          ; PC := 211
 65 [-]: EQ        0 R3 K6      ; if R3 ~= 0.000000 then PC := 87
 66 [-]: JMP       87           ; PC := 87
 67 [-]: EQ        1 R2 K16     ; if R2 == 7.000000 then PC := 87
 68 [-]: JMP       87           ; PC := 87
 69 [-]: EQ        0 R2 K17     ; if R2 ~= 8.000000 then PC := 74
 70 [-]: JMP       74           ; PC := 74
 71 [-]: GETGLOBAL R4 K0        ; R4 := _T
 72 [-]: GETTABLE  R0 R4 K18    ; R0 := R4["MechAvatar"]
 73 [-]: JMP       76           ; PC := 76
 74 [-]: GETGLOBAL R4 K0        ; R4 := _T
 75 [-]: GETTABLE  R0 R4 K7     ; R0 := R4["MenuSuitAvatar"]
 76 [-]: GETGLOBAL R4 K10       ; R4 := 0x7b998233
 77 [-]: MOVE      R5 R0        ; R5 := R0
 78 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 79 [-]: TEST      R4 1         ; if R4 then PC := 211
 80 [-]: JMP       211          ; PC := 211
 81 [-]: SELF      R4 R0 K8     ; R5 := R0; R4 := R0[0xde321e6f]
 82 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 83 [-]: SELF      R4 R4 K11    ; R5 := R4; R4 := R4[0xf7d48ee0]
 84 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 85 [-]: MOVE      R1 R4        ; R1 := R4
 86 [-]: JMP       211          ; PC := 211
 87 [-]: EQ        0 R2 K16     ; if R2 ~= 7.000000 then PC := 105
 88 [-]: JMP       105          ; PC := 105
 89 [-]: EQ        0 R3 K12     ; if R3 ~= 2.000000 then PC := 105
 90 [-]: JMP       105          ; PC := 105
 91 [-]: GETGLOBAL R4 K0        ; R4 := _T
 92 [-]: GETTABLE  R0 R4 K7     ; R0 := R4["MenuSuitAvatar"]
 93 [-]: GETGLOBAL R4 K10       ; R4 := 0x7b998233
 94 [-]: MOVE      R5 R0        ; R5 := R0
 95 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 96 [-]: TEST      R4 1         ; if R4 then PC := 211
 97 [-]: JMP       211          ; PC := 211
 98 [-]: SELF      R4 R0 K8     ; R5 := R0; R4 := R0[0xde321e6f]
 99 [-]: CALL      R4 2 2       ; R4 := R4(R5)
100 [-]: SELF      R4 R4 K19    ; R5 := R4; R4 := R4[0xe85a2361]
101 [-]: CONST     R6 12        ; R6 := 12.000000
102 [-]: CALL      R4 3 2       ; R4 := R4(R5,R6)
103 [-]: MOVE      R1 R4        ; R1 := R4
104 [-]: JMP       211          ; PC := 211
105 [-]: EQ        0 R2 K5      ; if R2 ~= 1.000000 then PC := 128
106 [-]: JMP       128          ; PC := 128
107 [-]: EQ        0 R3 K12     ; if R3 ~= 2.000000 then PC := 128
108 [-]: JMP       128          ; PC := 128
109 [-]: GETGLOBAL R4 K0        ; R4 := _T
110 [-]: GETTABLE  R4 R4 K7     ; R4 := R4["MenuSuitAvatar"]
111 [-]: SELF      R4 R4 K8     ; R5 := R4; R4 := R4[0xde321e6f]
112 [-]: CALL      R4 2 2       ; R4 := R4(R5)
113 [-]: SELF      R4 R4 K9     ; R5 := R4; R4 := R4[0x2676deee]
114 [-]: CALL      R4 2 2       ; R4 := R4(R5)
115 [-]: MOVE      R0 R4        ; R0 := R4
116 [-]: GETGLOBAL R4 K10       ; R4 := 0x7b998233
117 [-]: MOVE      R5 R0        ; R5 := R0
118 [-]: CALL      R4 2 2       ; R4 := R4(R5)
119 [-]: TEST      R4 1         ; if R4 then PC := 211
120 [-]: JMP       211          ; PC := 211
121 [-]: SELF      R4 R0 K8     ; R5 := R0; R4 := R0[0xde321e6f]
122 [-]: CALL      R4 2 2       ; R4 := R4(R5)
123 [-]: SELF      R4 R4 K19    ; R5 := R4; R4 := R4[0xe85a2361]
124 [-]: CONST     R6 1         ; R6 := 1.000000
125 [-]: CALL      R4 3 2       ; R4 := R4(R5,R6)
126 [-]: MOVE      R1 R4        ; R1 := R4
127 [-]: JMP       211          ; PC := 211
128 [-]: GETGLOBAL R4 K21       ; R4 := mCachedSpecialSuitMode
129 [-]: TEST      R4 0         ; if not R4 then PC := 172
130 [-]: JMP       172          ; PC := 172
131 [-]: GETGLOBAL R4 K0        ; R4 := _T
132 [-]: GETTABLE  R0 R4 K22    ; R0 := R4["SpecialSuitAvatar"]
133 [-]: GETGLOBAL R4 K10       ; R4 := 0x7b998233
134 [-]: MOVE      R5 R0        ; R5 := R0
135 [-]: CALL      R4 2 2       ; R4 := R4(R5)
136 [-]: TEST      R4 1         ; if R4 then PC := 211
137 [-]: JMP       211          ; PC := 211
138 [-]: EQ        0 R3 K23     ; if R3 ~= 5.000000 then PC := 146
139 [-]: JMP       146          ; PC := 146
140 [-]: SELF      R4 R0 K8     ; R5 := R0; R4 := R0[0xde321e6f]
141 [-]: CALL      R4 2 2       ; R4 := R4(R5)
142 [-]: SELF      R4 R4 K11    ; R5 := R4; R4 := R4[0xf7d48ee0]
143 [-]: CALL      R4 2 2       ; R4 := R4(R5)
144 [-]: MOVE      R1 R4        ; R1 := R4
145 [-]: JMP       211          ; PC := 211
146 [-]: GETUPVAL  R4 U0        ; R4 := U0
147 [-]: MOVE      R5 R3        ; R5 := R3
148 [-]: MOVE      R6 R2        ; R6 := R2
149 [-]: CALL      R4 3 2       ; R4 := R4(R5,R6)
150 [-]: TEST      R4 0         ; if not R4 then PC := 211
151 [-]: JMP       211          ; PC := 211
152 [-]: SELF      R5 R0 K8     ; R6 := R0; R5 := R0[0xde321e6f]
153 [-]: CALL      R5 2 2       ; R5 := R5(R6)
154 [-]: SELF      R5 R5 K19    ; R6 := R5; R5 := R5[0xe85a2361]
155 [-]: MOVE      R7 R4        ; R7 := R4
156 [-]: CALL      R5 3 2       ; R5 := R5(R6,R7)
157 [-]: MOVE      R1 R5        ; R1 := R5
158 [-]: GETGLOBAL R5 K10       ; R5 := 0x7b998233
159 [-]: MOVE      R6 R1        ; R6 := R1
160 [-]: CALL      R5 2 2       ; R5 := R5(R6)
161 [-]: TEST      R5 0         ; if not R5 then PC := 211
162 [-]: JMP       211          ; PC := 211
163 [-]: EQ        0 R4 K23     ; if R4 ~= 5.000000 then PC := 211
164 [-]: JMP       211          ; PC := 211
165 [-]: SELF      R5 R0 K8     ; R6 := R0; R5 := R0[0xde321e6f]
166 [-]: CALL      R5 2 2       ; R5 := R5(R6)
167 [-]: SELF      R5 R5 K19    ; R6 := R5; R5 := R5[0xe85a2361]
168 [-]: CONST     R7 7         ; R7 := 7.000000
169 [-]: CALL      R5 3 2       ; R5 := R5(R6,R7)
170 [-]: MOVE      R1 R5        ; R1 := R5
171 [-]: JMP       211          ; PC := 211
172 [-]: GETUPVAL  R5 U0        ; R5 := U0
173 [-]: MOVE      R6 R3        ; R6 := R3
174 [-]: MOVE      R7 R2        ; R7 := R2
175 [-]: CALL      R5 3 2       ; R5 := R5(R6,R7)
176 [-]: TEST      R5 1         ; if R5 then PC := 180
177 [-]: JMP       180          ; PC := 180
178 [-]: LOADNIL   R6 R6        ; R6 := nil
179 [-]: RETURN    R6 2         ; return R6
180 [-]: EQ        0 R2 K17     ; if R2 ~= 8.000000 then PC := 185
181 [-]: JMP       185          ; PC := 185
182 [-]: GETGLOBAL R6 K0        ; R6 := _T
183 [-]: GETTABLE  R0 R6 K18    ; R0 := R6["MechAvatar"]
184 [-]: JMP       187          ; PC := 187
185 [-]: GETGLOBAL R6 K0        ; R6 := _T
186 [-]: GETTABLE  R0 R6 K7     ; R0 := R6["MenuSuitAvatar"]
187 [-]: GETGLOBAL R6 K10       ; R6 := 0x7b998233
188 [-]: MOVE      R7 R0        ; R7 := R0
189 [-]: CALL      R6 2 2       ; R6 := R6(R7)
190 [-]: TEST      R6 1         ; if R6 then PC := 211
191 [-]: JMP       211          ; PC := 211
192 [-]: SELF      R6 R0 K8     ; R7 := R0; R6 := R0[0xde321e6f]
193 [-]: CALL      R6 2 2       ; R6 := R6(R7)
194 [-]: SELF      R6 R6 K19    ; R7 := R6; R6 := R6[0xe85a2361]
195 [-]: MOVE      R8 R5        ; R8 := R5
196 [-]: CALL      R6 3 2       ; R6 := R6(R7,R8)
197 [-]: MOVE      R1 R6        ; R1 := R6
198 [-]: GETGLOBAL R6 K10       ; R6 := 0x7b998233
199 [-]: MOVE      R7 R1        ; R7 := R1
200 [-]: CALL      R6 2 2       ; R6 := R6(R7)
201 [-]: TEST      R6 0         ; if not R6 then PC := 211
202 [-]: JMP       211          ; PC := 211
203 [-]: EQ        0 R5 K23     ; if R5 ~= 5.000000 then PC := 211
204 [-]: JMP       211          ; PC := 211
205 [-]: SELF      R6 R0 K8     ; R7 := R0; R6 := R0[0xde321e6f]
206 [-]: CALL      R6 2 2       ; R6 := R6(R7)
207 [-]: SELF      R6 R6 K19    ; R7 := R6; R6 := R6[0xe85a2361]
208 [-]: CONST     R8 7         ; R8 := 7.000000
209 [-]: CALL      R6 3 2       ; R6 := R6(R7,R8)
210 [-]: MOVE      R1 R6        ; R1 := R6
211 [-]: RETURN    R1 2         ; return R1
212 [-]: RETURN    R0 1         ; return 


; Function #42:
;
; Name:            
; Defined at line: 1284
; #Upvalues:       3
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  7

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  2 [-]: GETGLOBAL R1 K1        ; R1 := mGameData
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: TEST      R0 0         ; if not R0 then PC := 7
  5 [-]: JMP       7            ; PC := 7
  6 [-]: RETURN    R0 1         ; return 
  7 [-]: GETGLOBAL R0 K1        ; R0 := mGameData
  8 [-]: SELF      R0 R0 K2     ; R1 := R0; R0 := R0[0x25a6e75e]
  9 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 10 [-]: GETUPVAL  R1 U0        ; R1 := U0
 11 [-]: GETUPVAL  R2 U1        ; R2 := U1
 12 [-]: CALL      R2 1 2       ; R2 := R2()
 13 [-]: SETTABLE  R1 K3 R2     ; R1["item"] := R2
 14 [-]: GETUPVAL  R1 U2        ; R1 := U2
 15 [-]: GETTABLE  R1 R1 K4     ; R1 := R1[0x06d055f9]
 16 [-]: GETGLOBAL R2 K5        ; R2 := _T
 17 [-]: GETTABLE  R2 R2 K6     ; R2 := R2["upgradeItemLot"]
 18 [-]: EQ        1 R2 K8      ; if R2 == 3.000000 then PC := 21
 19 [-]: JMP       21           ; PC := 21
 20 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 21
 21 [-]: LOADKB    R2 1 0       ; R2 := true
 22 [-]: CONST     R3 0         ; R3 := 0.000000
 23 [-]: GETGLOBAL R4 K5        ; R4 := _T
 24 [-]: GETTABLE  R4 R4 K6     ; R4 := R4["upgradeItemLot"]
 25 [-]: CALL      R1 4 2       ; R1 := R1(R2,R3,R4)
 26 [-]: SELF      R2 R0 K9     ; R3 := R0; R2 := R0[0xc70965fe]
 27 [-]: MOVE      R4 R1        ; R4 := R1
 28 [-]: GETGLOBAL R5 K5        ; R5 := _T
 29 [-]: GETTABLE  R5 R5 K10    ; R5 := R5["upgradeItemSlot"]
 30 [-]: GETGLOBAL R6 K5        ; R6 := _T
 31 [-]: GETTABLE  R6 R6 K11    ; R6 := R6["upgradeItemUID"]
 32 [-]: CALL      R2 5 2       ; R2 := R2(R3,R4,R5,R6)
 33 [-]: GETGLOBAL R3 K0        ; R3 := 0x7b998233
 34 [-]: GETTABLE  R4 R2 K12    ; R4 := R2["mItemType"]
 35 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 36 [-]: TEST      R3 1         ; if R3 then PC := 40
 37 [-]: JMP       40           ; PC := 40
 38 [-]: GETUPVAL  R3 U0        ; R3 := U0
 39 [-]: SETTABLE  R3 K13 R2    ; R3["info"] := R2
 40 [-]: GETUPVAL  R3 U0        ; R3 := U0
 41 [-]: GETTABLE  R4 R2 K15    ; R4 := R2["mXP"]
 42 [-]: SETTABLE  R3 K14 R4    ; R3["xp"] := R4
 43 [-]: RETURN    R0 1         ; return 


; Function #43:
;
; Name:            
; Defined at line: 1302
; #Upvalues:       2
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  13

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7ed0a956
  2 [-]: LOADK     R2 K1        ; R2 := "/Lotus/Types/Game/PowerSuits/PlayerPowerSuit"
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: GETGLOBAL R2 K0        ; R2 := 0x7ed0a956
  5 [-]: LOADK     R3 K2        ; R3 := "/Lotus/Weapons/Tenno/LotusLongGun"
  6 [-]: CALL      R2 2 2       ; R2 := R2(R3)
  7 [-]: GETGLOBAL R3 K0        ; R3 := 0x7ed0a956
  8 [-]: LOADK     R4 K3        ; R4 := "/Lotus/Weapons/Tenno/Archwing/Primary/ArchGun"
  9 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 10 [-]: GETGLOBAL R4 K0        ; R4 := 0x7ed0a956
 11 [-]: LOADK     R5 K4        ; R5 := "/Lotus/Types/Vehicles/Hoverboard/HoverboardSuit"
 12 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 13 [-]: GETUPVAL  R5 U0        ; R5 := U0
 14 [-]: CALL      R5 1 2       ; R5 := R5()
 15 [-]: LOADNIL   R6 R6        ; R6 := nil
 16 [-]: GETGLOBAL R7 K5        ; R7 := 0x7b998233
 17 [-]: MOVE      R8 R5        ; R8 := R5
 18 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 19 [-]: TEST      R7 1         ; if R7 then PC := 146
 20 [-]: JMP       146          ; PC := 146
 21 [-]: GETUPVAL  R7 U1        ; R7 := U1
 22 [-]: CALL      R7 1 2       ; R7 := R7()
 23 [-]: TEST      R7 0         ; if not R7 then PC := 50
 24 [-]: JMP       50           ; PC := 50
 25 [-]: GETGLOBAL R7 K6        ; R7 := _T
 26 [-]: GETTABLE  R6 R7 K7     ; R6 := R7["RailjackAvatar"]
 27 [-]: GETGLOBAL R7 K5        ; R7 := 0x7b998233
 28 [-]: MOVE      R8 R6        ; R8 := R6
 29 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 30 [-]: TEST      R7 1         ; if R7 then PC := 37
 31 [-]: JMP       37           ; PC := 37
 32 [-]: SELF      R7 R6 K8     ; R8 := R6; R7 := R6[0xde321e6f]
 33 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 34 [-]: SELF      R7 R7 K9     ; R8 := R7; R7 := R7[0xf7d48ee0]
 35 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 36 [-]: MOVE      R5 R7        ; R5 := R7
 37 [-]: GETGLOBAL R7 K5        ; R7 := 0x7b998233
 38 [-]: MOVE      R8 R5        ; R8 := R5
 39 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 40 [-]: TEST      R7 1         ; if R7 then PC := 134
 41 [-]: JMP       134          ; PC := 134
 42 [-]: SELF      R7 R5 K10    ; R8 := R5; R7 := R5[0xf2deaf69]
 43 [-]: GETGLOBAL R9 K11       ; R9 := gCrewShipType
 44 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
 45 [-]: TEST      R7 0         ; if not R7 then PC := 134
 46 [-]: JMP       134          ; PC := 134
 47 [-]: SELF      R7 R5 K12    ; R8 := R5; R7 := R5[0x160c3857]
 48 [-]: CALL      R7 2 1       ; R7(R8)
 49 [-]: JMP       134          ; PC := 134
 50 [-]: SELF      R7 R5 K10    ; R8 := R5; R7 := R5[0xf2deaf69]
 51 [-]: MOVE      R9 R1        ; R9 := R1
 52 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
 53 [-]: TEST      R7 1         ; if R7 then PC := 65
 54 [-]: JMP       65           ; PC := 65
 55 [-]: SELF      R7 R5 K10    ; R8 := R5; R7 := R5[0xf2deaf69]
 56 [-]: GETGLOBAL R9 K13       ; R9 := gFlightJetPackItemType
 57 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
 58 [-]: TEST      R7 1         ; if R7 then PC := 65
 59 [-]: JMP       65           ; PC := 65
 60 [-]: SELF      R7 R5 K10    ; R8 := R5; R7 := R5[0xf2deaf69]
 61 [-]: MOVE      R9 R4        ; R9 := R4
 62 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
 63 [-]: TEST      R7 0         ; if not R7 then PC := 73
 64 [-]: JMP       73           ; PC := 73
 65 [-]: GETGLOBAL R7 K6        ; R7 := _T
 66 [-]: GETTABLE  R6 R7 K14    ; R6 := R7["MenuSuitAvatar"]
 67 [-]: GETGLOBAL R7 K15       ; R7 := mCachedSpecialSuitMode
 68 [-]: TEST      R7 0         ; if not R7 then PC := 134
 69 [-]: JMP       134          ; PC := 134
 70 [-]: GETGLOBAL R7 K6        ; R7 := _T
 71 [-]: GETTABLE  R6 R7 K16    ; R6 := R7["SpecialSuitAvatar"]
 72 [-]: JMP       134          ; PC := 134
 73 [-]: GETGLOBAL R7 K6        ; R7 := _T
 74 [-]: GETTABLE  R7 R7 K17    ; R7 := R7["upgradeItemLot"]
 75 [-]: EQ        0 R7 K19     ; if R7 ~= 8.000000 then PC := 80
 76 [-]: JMP       80           ; PC := 80
 77 [-]: GETGLOBAL R7 K6        ; R7 := _T
 78 [-]: GETTABLE  R6 R7 K20    ; R6 := R7["MechAvatar"]
 79 [-]: JMP       134          ; PC := 134
 80 [-]: SELF      R7 R5 K10    ; R8 := R5; R7 := R5[0xf2deaf69]
 81 [-]: GETGLOBAL R9 K21       ; R9 := gSentinelPowerSuitType
 82 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
 83 [-]: TEST      R7 1         ; if R7 then PC := 93
 84 [-]: JMP       93           ; PC := 93
 85 [-]: GETGLOBAL R7 K6        ; R7 := _T
 86 [-]: GETTABLE  R7 R7 K17    ; R7 := R7["upgradeItemLot"]
 87 [-]: EQ        0 R7 K22     ; if R7 ~= 1.000000 then PC := 107
 88 [-]: JMP       107          ; PC := 107
 89 [-]: GETGLOBAL R7 K6        ; R7 := _T
 90 [-]: GETTABLE  R7 R7 K23    ; R7 := R7["upgradeItemSlot"]
 91 [-]: EQ        0 R7 K24     ; if R7 ~= 2.000000 then PC := 107
 92 [-]: JMP       107          ; PC := 107
 93 [-]: GETGLOBAL R7 K15       ; R7 := mCachedSpecialSuitMode
 94 [-]: TEST      R7 0         ; if not R7 then PC := 99
 95 [-]: JMP       99           ; PC := 99
 96 [-]: GETGLOBAL R7 K6        ; R7 := _T
 97 [-]: GETTABLE  R6 R7 K16    ; R6 := R7["SpecialSuitAvatar"]
 98 [-]: JMP       134          ; PC := 134
 99 [-]: GETGLOBAL R7 K6        ; R7 := _T
100 [-]: GETTABLE  R7 R7 K14    ; R7 := R7["MenuSuitAvatar"]
101 [-]: SELF      R7 R7 K8     ; R8 := R7; R7 := R7[0xde321e6f]
102 [-]: CALL      R7 2 2       ; R7 := R7(R8)
103 [-]: SELF      R7 R7 K25    ; R8 := R7; R7 := R7[0x2676deee]
104 [-]: CALL      R7 2 2       ; R7 := R7(R8)
105 [-]: MOVE      R6 R7        ; R6 := R7
106 [-]: JMP       134          ; PC := 134
107 [-]: SELF      R7 R5 K10    ; R8 := R5; R7 := R5[0xf2deaf69]
108 [-]: MOVE      R9 R2        ; R9 := R2
109 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
110 [-]: TEST      R7 1         ; if R7 then PC := 127
111 [-]: JMP       127          ; PC := 127
112 [-]: SELF      R7 R5 K10    ; R8 := R5; R7 := R5[0xf2deaf69]
113 [-]: GETGLOBAL R9 K26       ; R9 := gLotusPistolType
114 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
115 [-]: TEST      R7 1         ; if R7 then PC := 127
116 [-]: JMP       127          ; PC := 127
117 [-]: SELF      R7 R5 K10    ; R8 := R5; R7 := R5[0xf2deaf69]
118 [-]: MOVE      R9 R3        ; R9 := R3
119 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
120 [-]: TEST      R7 1         ; if R7 then PC := 127
121 [-]: JMP       127          ; PC := 127
122 [-]: SELF      R7 R5 K10    ; R8 := R5; R7 := R5[0xf2deaf69]
123 [-]: GETGLOBAL R9 K27       ; R9 := gLotusMeleeWeaponType
124 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
125 [-]: TEST      R7 0         ; if not R7 then PC := 134
126 [-]: JMP       134          ; PC := 134
127 [-]: GETGLOBAL R7 K6        ; R7 := _T
128 [-]: GETTABLE  R6 R7 K14    ; R6 := R7["MenuSuitAvatar"]
129 [-]: GETGLOBAL R7 K15       ; R7 := mCachedSpecialSuitMode
130 [-]: TEST      R7 0         ; if not R7 then PC := 134
131 [-]: JMP       134          ; PC := 134
132 [-]: GETGLOBAL R7 K6        ; R7 := _T
133 [-]: GETTABLE  R6 R7 K16    ; R6 := R7["SpecialSuitAvatar"]
134 [-]: GETGLOBAL R7 K5        ; R7 := 0x7b998233
135 [-]: MOVE      R8 R6        ; R8 := R6
136 [-]: CALL      R7 2 2       ; R7 := R7(R8)
137 [-]: TEST      R7 1         ; if R7 then PC := 146
138 [-]: JMP       146          ; PC := 146
139 [-]: GETGLOBAL R7 K28       ; R7 := mStats
140 [-]: SELF      R7 R7 K29    ; R8 := R7; R7 := R7[0xf87811f6]
141 [-]: MOVE      R9 R5        ; R9 := R5
142 [-]: MOVE      R10 R6       ; R10 := R6
143 [-]: LOADNIL   R11 R11      ; R11 := nil
144 [-]: GETGLOBAL R12 K30      ; R12 := mIsHeavyWeapon
145 [-]: CALL      R7 6 1       ; R7(R8,R9,R10,R11,R12)
146 [-]: RETURN    R0 1         ; return 


; Function #44:
;
; Name:            
; Defined at line: 1346
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  22

  1 [-]: GETGLOBAL R0 K0        ; R0 := _T
  2 [-]: GETTABLE  R0 R0 K1     ; R0 := R0["MenuSuitAvatar"]
  3 [-]: GETGLOBAL R1 K0        ; R1 := _T
  4 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["upgradeItemLot"]
  5 [-]: EQ        0 R1 K4      ; if R1 ~= 8.000000 then PC := 10
  6 [-]: JMP       10           ; PC := 10
  7 [-]: GETGLOBAL R2 K0        ; R2 := _T
  8 [-]: GETTABLE  R0 R2 K5     ; R0 := R2["MechAvatar"]
  9 [-]: JMP       15           ; PC := 15
 10 [-]: GETGLOBAL R2 K6        ; R2 := mCachedSpecialSuitMode
 11 [-]: TEST      R2 0         ; if not R2 then PC := 15
 12 [-]: JMP       15           ; PC := 15
 13 [-]: GETGLOBAL R2 K0        ; R2 := _T
 14 [-]: GETTABLE  R0 R2 K7     ; R0 := R2["SpecialSuitAvatar"]
 15 [-]: GETGLOBAL R2 K8        ; R2 := 0x7b998233
 16 [-]: MOVE      R3 R0        ; R3 := R0
 17 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 18 [-]: TEST      R2 0         ; if not R2 then PC := 24
 19 [-]: JMP       24           ; PC := 24
 20 [-]: GETGLOBAL R2 K9        ; R2 := 0x3d106989
 21 [-]: LOADK     R3 K10       ; R3 := "Failed to initialize ability list: null avatar"
 22 [-]: CALL      R2 2 1       ; R2(R3)
 23 [-]: RETURN    R0 1         ; return 
 24 [-]: LOADNIL   R2 R2        ; R2 := nil
 25 [-]: EQ        0 R1 K11     ; if R1 ~= 2.000000 then PC := 33
 26 [-]: JMP       33           ; PC := 33
 27 [-]: SELF      R3 R0 K12    ; R4 := R0; R3 := R0[0xde321e6f]
 28 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 29 [-]: SELF      R3 R3 K13    ; R4 := R3; R3 := R3[0x2303a280]
 30 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 31 [-]: MOVE      R2 R3        ; R2 := R3
 32 [-]: JMP       38           ; PC := 38
 33 [-]: SELF      R3 R0 K12    ; R4 := R0; R3 := R0[0xde321e6f]
 34 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 35 [-]: SELF      R3 R3 K14    ; R4 := R3; R3 := R3[0xf7d48ee0]
 36 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 37 [-]: MOVE      R2 R3        ; R2 := R3
 38 [-]: GETGLOBAL R3 K8        ; R3 := 0x7b998233
 39 [-]: MOVE      R4 R2        ; R4 := R2
 40 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 41 [-]: TEST      R3 0         ; if not R3 then PC := 47
 42 [-]: JMP       47           ; PC := 47
 43 [-]: GETGLOBAL R3 K9        ; R3 := 0x3d106989
 44 [-]: LOADK     R4 K15       ; R4 := "Failed to initialize ability list: no powersuit"
 45 [-]: CALL      R3 2 1       ; R3(R4)
 46 [-]: RETURN    R0 1         ; return 
 47 [-]: LOADNIL   R3 R3        ; R3 := nil
 48 [-]: GETGLOBAL R4 K8        ; R4 := 0x7b998233
 49 [-]: GETGLOBAL R5 K16       ; R5 := mPlayerProfile
 50 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 51 [-]: TEST      R4 1         ; if R4 then PC := 59
 52 [-]: JMP       59           ; PC := 59
 53 [-]: GETGLOBAL R4 K16       ; R4 := mPlayerProfile
 54 [-]: SELF      R4 R4 K17    ; R5 := R4; R4 := R4[0x40e9c32b]
 55 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 56 [-]: SELF      R5 R4 K18    ; R6 := R4; R5 := R4[0xa39afcfe]
 57 [-]: CALL      R5 2 2       ; R5 := R5(R6)
 58 [-]: MOVE      R3 R5        ; R3 := R5
 59 [-]: GETGLOBAL R5 K19       ; R5 := 0x2d0fad09
 60 [-]: LOADK     R6 K20       ; R6 := "Lotus.Powersuits.PowersuitAbilities.PVPLib"
 61 [-]: CALL      R5 2 2       ; R5 := R5(R6)
 62 [-]: GETTABLE  R6 R5 K21    ; R6 := R5[0x32316a21]
 63 [-]: CALL      R6 1 2       ; R6 := R6()
 64 [-]: CONST     R7 1         ; R7 := 1.000000
 65 [-]: CONST     R8 4         ; R8 := 4.000000
 66 [-]: CONST     R9 1         ; R9 := 1.000000
 67 [-]: FORPREP   R7 178       ; R7 -= R9; PC := 178
 68 [-]: SELF      R11 R2 K22   ; R12 := R2; R11 := R2[0xdaddfb73]
 69 [-]: SUB       R13 R10 K23  ; R13 := R10 - 1.000000
 70 [-]: CALL      R11 3 2      ; R11 := R11(R12,R13)
 71 [-]: TEST      R6 0         ; if not R6 then PC := 78
 72 [-]: JMP       78           ; PC := 78
 73 [-]: SELF      R12 R2 K24   ; R13 := R2; R12 := R2[0x2be50908]
 74 [-]: SUB       R14 R10 K23  ; R14 := R10 - 1.000000
 75 [-]: CALL      R12 3 2      ; R12 := R12(R13,R14)
 76 [-]: TEST      R12 0        ; if not R12 then PC := 170
 77 [-]: JMP       170          ; PC := 170
 78 [-]: GETGLOBAL R12 K8       ; R12 := 0x7b998233
 79 [-]: MOVE      R13 R11      ; R13 := R11
 80 [-]: CALL      R12 2 2      ; R12 := R12(R13)
 81 [-]: TEST      R12 1        ; if R12 then PC := 170
 82 [-]: JMP       170          ; PC := 170
 83 [-]: SELF      R12 R2 K25   ; R13 := R2; R12 := R2[0xca9ea368]
 84 [-]: CALL      R12 2 2      ; R12 := R12(R13)
 85 [-]: SELF      R13 R2 K26   ; R14 := R2; R13 := R2[0x312c3091]
 86 [-]: SUB       R15 R10 K23  ; R15 := R10 - 1.000000
 87 [-]: CALL      R13 3 2      ; R13 := R13(R14,R15)
 88 [-]: NEWTABLE  R14 0 12     ; R14 := {}
 89 [-]: SETTABLE  R14 K27 K28  ; R14["IsAbility"] := true
 90 [-]: SETTABLE  R14 K29 K28  ; R14["CustomEntry"] := true
 91 [-]: SUB       R15 R10 K23  ; R15 := R10 - 1.000000
 92 [-]: SETTABLE  R14 K30 R15  ; R14["AbilityIndex"] := R15
 93 [-]: SETTABLE  R14 K31 R11  ; R14["Resource"] := R11
 94 [-]: SETTABLE  R14 K32 R2   ; R14["Suit"] := R2
 95 [-]: GETGLOBAL R15 K0       ; R15 := _T
 96 [-]: GETTABLE  R15 R15 K1   ; R15 := R15["MenuSuitAvatar"]
 97 [-]: SETTABLE  R14 K33 R15  ; R14["SourceAvatar"] := R15
 98 [-]: EQ        1 R1 K11     ; if R1 == 2.000000 then PC := 101
 99 [-]: JMP       101          ; PC := 101
100 [-]: LOADKB    R15 0 1      ; R15 := false; PC := 101
101 [-]: LOADKB    R15 1 0      ; R15 := true
102 [-]: SETTABLE  R14 K34 R15  ; R14["SourceAvatarAlternateSuit"] := R15
103 [-]: GETGLOBAL R15 K36      ; R15 := 0x7f5022cf
104 [-]: GETTABLE  R15 R15 K37  ; R15 := R15[0x3f3e4d12]
105 [-]: GETGLOBAL R16 K38      ; R16 := 0xae91e43b
106 [-]: SELF      R16 R16 K39  ; R17 := R16; R16 := R16[0x42b04007]
107 [-]: SELF      R18 R11 K40  ; R19 := R11; R18 := R11[0xd3a9d01f]
108 [-]: CALL      R18 2 2      ; R18 := R18(R19)
109 [-]: SELF      R18 R18 K41  ; R19 := R18; R18 := R18[0x6d604ba7]
110 [-]: CALL      R18 2 2      ; R18 := R18(R19)
111 [-]: LOADKB    R19 0 0      ; R19 := false
112 [-]: CALL      R16 4 0      ; R16,... := R16(R17,R18,R19)
113 [-]: CALL      R15 0 2      ; R15 := R15(R16,...)
114 [-]: SETTABLE  R14 K35 R15  ; R14["Name"] := R15
115 [-]: SELF      R15 R2 K43   ; R16 := R2; R15 := R2[0xa776e126]
116 [-]: SUB       R17 R10 K23  ; R17 := R10 - 1.000000
117 [-]: CALL      R15 3 2      ; R15 := R15(R16,R17)
118 [-]: SUB       R15 R15 K23  ; R15 := R15 - 1.000000
119 [-]: SETTABLE  R14 K42 R15  ; R14["Level"] := R15
120 [-]: LT        1 R12 R13    ; if R12 < R13 then PC := 123
121 [-]: JMP       123          ; PC := 123
122 [-]: LOADKB    R15 0 1      ; R15 := false; PC := 123
123 [-]: LOADKB    R15 1 0      ; R15 := true
124 [-]: SETTABLE  R14 K44 R15  ; R14["Locked"] := R15
125 [-]: SELF      R15 R11 K46  ; R16 := R11; R15 := R11[0x056dcf06]
126 [-]: CALL      R15 2 2      ; R15 := R15(R16)
127 [-]: SETTABLE  R14 K45 R15  ; R14["Icon"] := R15
128 [-]: SETTABLE  R14 K47 R3   ; R14["ModdedStats"] := R3
129 [-]: GETGLOBAL R15 K38      ; R15 := 0xae91e43b
130 [-]: SELF      R15 R15 K48  ; R16 := R15; R15 := R15[0x67bc869f]
131 [-]: LOADK     R17 K49      ; R17 := "AbilityList.Ability"
132 [-]: MOVE      R18 R10      ; R18 := R10
133 [-]: LOADK     R19 K50      ; R19 := ".Icon"
134 [-]: CONCAT    R17 R17 R19  ; R17 := R17 .. R18 .. R19
135 [-]: CONST     R18 9        ; R18 := 9.000000
136 [-]: GETGLOBAL R19 K51      ; R19 := mColors
137 [-]: GETTABLE  R19 R19 K52  ; R19 := R19["FloatingContent"]
138 [-]: CALL      R15 5 1      ; R15(R16,R17,R18,R19)
139 [-]: GETGLOBAL R15 K38      ; R15 := 0xae91e43b
140 [-]: SELF      R15 R15 K53  ; R16 := R15; R15 := R15[0x1cb415c1]
141 [-]: LOADK     R17 K49      ; R17 := "AbilityList.Ability"
142 [-]: MOVE      R18 R10      ; R18 := R10
143 [-]: LOADK     R19 K50      ; R19 := ".Icon"
144 [-]: CONCAT    R17 R17 R19  ; R17 := R17 .. R18 .. R19
145 [-]: GETTABLE  R18 R14 K45  ; R18 := R14["Icon"]
146 [-]: CALL      R15 4 1      ; R15(R16,R17,R18)
147 [-]: GETGLOBAL R15 K38      ; R15 := 0xae91e43b
148 [-]: SELF      R15 R15 K48  ; R16 := R15; R15 := R15[0x67bc869f]
149 [-]: LOADK     R17 K49      ; R17 := "AbilityList.Ability"
150 [-]: MOVE      R18 R10      ; R18 := R10
151 [-]: LOADK     R19 K54      ; R19 := ".Btn"
152 [-]: CONCAT    R17 R17 R19  ; R17 := R17 .. R18 .. R19
153 [-]: CONST     R18 85       ; R18 := 85.000000
154 [-]: MOVE      R19 R10      ; R19 := R10
155 [-]: CALL      R15 5 1      ; R15(R16,R17,R18,R19)
156 [-]: GETGLOBAL R15 K38      ; R15 := 0xae91e43b
157 [-]: SELF      R15 R15 K55  ; R16 := R15; R15 := R15[0x1e5b5cfe]
158 [-]: LOADK     R17 K49      ; R17 := "AbilityList.Ability"
159 [-]: MOVE      R18 R10      ; R18 := R10
160 [-]: LOADK     R19 K54      ; R19 := ".Btn"
161 [-]: CONCAT    R17 R17 R19  ; R17 := R17 .. R18 .. R19
162 [-]: LOADK     R18 K56      ; R18 := "AbilityRollOver"
163 [-]: LOADK     R19 K57      ; R19 := "AbilityRollOut"
164 [-]: LOADK     R20 K58      ; R20 := ""
165 [-]: LOADK     R21 K58      ; R21 := ""
166 [-]: CALL      R15 7 1      ; R15(R16,R17,R18,R19,R20,R21)
167 [-]: GETGLOBAL R15 K59      ; R15 := mSuitAbilities
168 [-]: SETTABLE  R15 R10 R14  ; R15[R10] := R14
169 [-]: JMP       178          ; PC := 178
170 [-]: GETGLOBAL R15 K38      ; R15 := 0xae91e43b
171 [-]: SELF      R15 R15 K60  ; R16 := R15; R15 := R15[0xaade900e]
172 [-]: LOADK     R17 K49      ; R17 := "AbilityList.Ability"
173 [-]: MOVE      R18 R10      ; R18 := R10
174 [-]: CONCAT    R17 R17 R18  ; R17 := R17 .. R18
175 [-]: CONST     R18 11       ; R18 := 11.000000
176 [-]: LOADKB    R19 0 0      ; R19 := false
177 [-]: CALL      R15 5 1      ; R15(R16,R17,R18,R19)
178 [-]: FORLOOP   R7 68        ; R7 += R9; if R7 <= R8 then begin PC := 68; R10 := R7 end
179 [-]: RETURN    R0 1         ; return 


; Function #45:
;
; Name:            
; Defined at line: 1410
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  11

  1 [-]: GETGLOBAL R0 K0        ; R0 := _T
  2 [-]: GETTABLE  R0 R0 K1     ; R0 := R0["upgradeItemLot"]
  3 [-]: GETGLOBAL R1 K0        ; R1 := _T
  4 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["upgradeItemSlot"]
  5 [-]: EQ        1 R0 K4      ; if R0 == 0.000000 then PC := 11
  6 [-]: JMP       11           ; PC := 11
  7 [-]: EQ        1 R0 K5      ; if R0 == 3.000000 then PC := 11
  8 [-]: JMP       11           ; PC := 11
  9 [-]: EQ        0 R0 K6      ; if R0 ~= 2.000000 then PC := 16
 10 [-]: JMP       16           ; PC := 16
 11 [-]: EQ        1 R1 K4      ; if R1 == 0.000000 then PC := 17
 12 [-]: JMP       17           ; PC := 17
 13 [-]: GETUPVAL  R2 U0        ; R2 := U0
 14 [-]: CALL      R2 1 2       ; R2 := R2()
 15 [-]: JMP       18           ; PC := 18
 16 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 17
 17 [-]: LOADKB    R2 1 0       ; R2 := true
 18 [-]: GETGLOBAL R3 K7        ; R3 := 0xae91e43b
 19 [-]: SELF      R3 R3 K8     ; R4 := R3; R3 := R3[0xaade900e]
 20 [-]: LOADK     R5 K9        ; R5 := "TopMenu.Bg.AbilitiesBg"
 21 [-]: CONST     R6 11        ; R6 := 11.000000
 22 [-]: MOVE      R7 R2        ; R7 := R2
 23 [-]: CALL      R3 5 1       ; R3(R4,R5,R6,R7)
 24 [-]: GETGLOBAL R3 K7        ; R3 := 0xae91e43b
 25 [-]: SELF      R3 R3 K8     ; R4 := R3; R3 := R3[0xaade900e]
 26 [-]: LOADK     R5 K10       ; R5 := "AbilityList"
 27 [-]: CONST     R6 11        ; R6 := 11.000000
 28 [-]: MOVE      R7 R2        ; R7 := R2
 29 [-]: CALL      R3 5 1       ; R3(R4,R5,R6,R7)
 30 [-]: GETGLOBAL R3 K11       ; R3 := mTopMenuYOffset
 31 [-]: SUB       R3 K12 R3    ; R3 := 469.000000 - R3
 32 [-]: TEST      R2 0         ; if not R2 then PC := 48
 33 [-]: JMP       48           ; PC := 48
 34 [-]: GETGLOBAL R4 K7        ; R4 := 0xae91e43b
 35 [-]: SELF      R4 R4 K13    ; R5 := R4; R4 := R4[0x91a24e4b]
 36 [-]: LOADK     R6 K14       ; R6 := "TopMenu.Bg"
 37 [-]: CONST     R7 6         ; R7 := 6.000000
 38 [-]: CALL      R4 4 2       ; R4 := R4(R5,R6,R7)
 39 [-]: DIV       R4 R4 K15    ; R4 := R4 / 100.000000
 40 [-]: GETGLOBAL R5 K7        ; R5 := 0xae91e43b
 41 [-]: SELF      R5 R5 K13    ; R6 := R5; R5 := R5[0x91a24e4b]
 42 [-]: LOADK     R7 K9        ; R7 := "TopMenu.Bg.AbilitiesBg"
 43 [-]: CONST     R8 13        ; R8 := 13.000000
 44 [-]: CALL      R5 4 2       ; R5 := R5(R6,R7,R8)
 45 [-]: MUL       R5 R5 R4     ; R5 := R5 * R4
 46 [-]: ADD       R6 R5 K16    ; R6 := R5 + 12.000000
 47 [-]: SUB       R3 R3 R6     ; R3 := R3 - R6
 48 [-]: GETGLOBAL R6 K17       ; R6 := 0x2d0fad09
 49 [-]: LOADK     R7 K18       ; R7 := "Lotus.Interface.Components.ThemedStats"
 50 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 51 [-]: GETTABLE  R7 R6 K20    ; R7 := R6[0xae6791ba]
 52 [-]: GETGLOBAL R8 K7        ; R8 := 0xae91e43b
 53 [-]: LOADK     R9 K21       ; R9 := "Stats"
 54 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
 55 [-]: SETGLOBAL R7 K19       ; mStats := R7
 56 [-]: GETGLOBAL R7 K19       ; R7 := mStats
 57 [-]: GETGLOBAL R8 K11       ; R8 := mTopMenuYOffset
 58 [-]: ADD       R8 K23 R8    ; R8 := 159.000000 + R8
 59 [-]: SETTABLE  R7 K22 R8    ; R7["mYOffset"] := R8
 60 [-]: GETGLOBAL R7 K19       ; R7 := mStats
 61 [-]: SETTABLE  R7 K24 K25   ; R7["mActiveX"] := 99.000000
 62 [-]: GETGLOBAL R7 K19       ; R7 := mStats
 63 [-]: SETTABLE  R7 K26 K27   ; R7["mLockHeightToMax"] := true
 64 [-]: GETGLOBAL R7 K19       ; R7 := mStats
 65 [-]: SETTABLE  R7 K28 K27   ; R7["mGrowDownward"] := true
 66 [-]: GETGLOBAL R7 K19       ; R7 := mStats
 67 [-]: SETTABLE  R7 K29 K27   ; R7["mCanFocusStats"] := true
 68 [-]: GETGLOBAL R7 K19       ; R7 := mStats
 69 [-]: SELF      R7 R7 K30    ; R8 := R7; R7 := R7[0x3bc79f4f]
 70 [-]: LOADK     R9 K31       ; R9 := "StatsScrollBar"
 71 [-]: MOVE      R10 R3       ; R10 := R3
 72 [-]: CALL      R7 4 1       ; R7(R8,R9,R10)
 73 [-]: GETGLOBAL R7 K19       ; R7 := mStats
 74 [-]: SELF      R7 R7 K32    ; R8 := R7; R7 := R7[0x8d77b2b2]
 75 [-]: CONST     R9 337       ; R9 := 337.000000
 76 [-]: CALL      R7 3 1       ; R7(R8,R9)
 77 [-]: RETURN    R0 1         ; return 


; Function #46:
;
; Name:            
; Defined at line: 1434
; #Upvalues:       2
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETUPVAL  R0 U0        ; R0 := U0
  2 [-]: CALL      R0 1 2       ; R0 := R0()
  3 [-]: GETUPVAL  R1 U1        ; R1 := U1
  4 [-]: CALL      R1 1 2       ; R1 := R1()
  5 [-]: TEST      R1 0         ; if not R1 then PC := 8
  6 [-]: JMP       8            ; PC := 8
  7 [-]: LOADNIL   R0 R0        ; R0 := nil
  8 [-]: GETGLOBAL R1 K0        ; R1 := mStats
  9 [-]: SELF      R1 R1 K1     ; R2 := R1; R1 := R1[0xc20aa945]
 10 [-]: MOVE      R3 R0        ; R3 := R0
 11 [-]: GETGLOBAL R4 K2        ; R4 := mIsHeavyWeapon
 12 [-]: CALL      R1 4 1       ; R1(R2,R3,R4)
 13 [-]: RETURN    R0 1         ; return 


; Function #47:
;
; Name:            
; Defined at line: 1444
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  14

  1 [-]: SELF      R1 R0 K0     ; R2 := R0; R1 := R0[0xc1a84a4b]
  2 [-]: CONST     R3 6         ; R3 := 6.000000
  3 [-]: CONST     R4 0         ; R4 := 0.000000
  4 [-]: CALL      R1 4 2       ; R1 := R1(R2,R3,R4)
  5 [-]: GETGLOBAL R2 K2        ; R2 := 0x7b998233
  6 [-]: GETGLOBAL R3 K3        ; R3 := _T
  7 [-]: GETTABLE  R3 R3 K4     ; R3 := R3["KDriveAvatar"]
  8 [-]: CALL      R2 2 2       ; R2 := R2(R3)
  9 [-]: TEST      R2 1         ; if R2 then PC := 49
 10 [-]: JMP       49           ; PC := 49
 11 [-]: GETGLOBAL R2 K3        ; R2 := _T
 12 [-]: GETTABLE  R2 R2 K4     ; R2 := R2["KDriveAvatar"]
 13 [-]: SELF      R2 R2 K5     ; R3 := R2; R2 := R2[0xde321e6f]
 14 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 15 [-]: SELF      R3 R2 K6     ; R4 := R2; R3 := R2[0x374b084a]
 16 [-]: CALL      R3 2 1       ; R3(R4)
 17 [-]: SELF      R3 R2 K7     ; R4 := R2; R3 := R2[0xf7d48ee0]
 18 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 19 [-]: GETGLOBAL R4 K2        ; R4 := 0x7b998233
 20 [-]: MOVE      R5 R3        ; R5 := R3
 21 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 22 [-]: TEST      R4 1         ; if R4 then PC := 49
 23 [-]: JMP       49           ; PC := 49
 24 [-]: GETTABLE  R4 R1 K8     ; R4 := R1["mAttachedUpgrades"]
 25 [-]: GETGLOBAL R5 K9        ; R5 := 0xc8802016
 26 [-]: MOVE      R6 R4        ; R6 := R4
 27 [-]: CALL      R5 2 4       ; R5,R6,R7 := R5(R6)
 28 [-]: JMP       47           ; PC := 47
 29 [-]: GETGLOBAL R10 K2       ; R10 := 0x7b998233
 30 [-]: GETTABLE  R11 R9 K10   ; R11 := R9["mItemType"]
 31 [-]: CALL      R10 2 2      ; R10 := R10(R11)
 32 [-]: TEST      R10 1        ; if R10 then PC := 47
 33 [-]: JMP       47           ; PC := 47
 34 [-]: GETGLOBAL R10 K11      ; R10 := 0x89326c93
 35 [-]: SELF      R10 R10 K12  ; R11 := R10; R10 := R10[0x765dad71]
 36 [-]: GETGLOBAL R12 K13      ; R12 := 0x88efc25e
 37 [-]: GETTABLE  R13 R9 K10   ; R13 := R9["mItemType"]
 38 [-]: CALL      R12 2 2      ; R12 := R12(R13)
 39 [-]: MOVE      R13 R3       ; R13 := R3
 40 [-]: CALL      R10 4 2      ; R10 := R10(R11,R12,R13)
 41 [-]: SELF      R11 R10 K14  ; R12 := R10; R11 := R10[0x6868f7f8]
 42 [-]: GETTABLE  R13 R9 K15   ; R13 := R9["mUpgradeFingerprint"]
 43 [-]: CALL      R11 3 1      ; R11(R12,R13)
 44 [-]: SELF      R11 R3 K16   ; R12 := R3; R11 := R3[0x5e6704ff]
 45 [-]: MOVE      R13 R10      ; R13 := R10
 46 [-]: CALL      R11 3 1      ; R11(R12,R13)
 47 [-]: TFORLOOP  R5 2         ; R8,R9 :=  R5(R6,R7); if R8 ~= nil then begin PC = 29; R7 := R8 end
 48 [-]: JMP       29           ; PC := 29
 49 [-]: RETURN    R0 1         ; return 


; Function #48:
;
; Name:            
; Defined at line: 1463
; #Upvalues:       11
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  49

  1 [-]: CONST     R2 0         ; R2 := 0.000000
  2 [-]: NEWTABLE  R3 0 0       ; R3 := {}
  3 [-]: GETGLOBAL R4 K0        ; R4 := mGameData
  4 [-]: SELF      R4 R4 K1     ; R5 := R4; R4 := R4[0x25a6e75e]
  5 [-]: CALL      R4 2 2       ; R4 := R4(R5)
  6 [-]: GETUPVAL  R5 U0        ; R5 := U0
  7 [-]: GETTABLE  R5 R5 K2     ; R5 := R5[0x06d055f9]
  8 [-]: GETGLOBAL R6 K3        ; R6 := _T
  9 [-]: GETTABLE  R6 R6 K4     ; R6 := R6["mMechaSuitMode"]
 10 [-]: TEST      R6 0         ; if not R6 then PC := 17
 11 [-]: JMP       17           ; PC := 17
 12 [-]: GETGLOBAL R6 K5        ; R6 := 0x7b998233
 13 [-]: GETGLOBAL R7 K3        ; R7 := _T
 14 [-]: GETTABLE  R7 R7 K6     ; R7 := R7["MechAvatar"]
 15 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 16 [-]: NOT       R6 R6        ; R6 :=  R6
 17 [-]: GETGLOBAL R7 K3        ; R7 := _T
 18 [-]: GETTABLE  R7 R7 K6     ; R7 := R7["MechAvatar"]
 19 [-]: GETGLOBAL R8 K3        ; R8 := _T
 20 [-]: GETTABLE  R8 R8 K7     ; R8 := R8["MenuSuitAvatar"]
 21 [-]: CALL      R5 4 2       ; R5 := R5(R6,R7,R8)
 22 [-]: GETGLOBAL R6 K5        ; R6 := 0x7b998233
 23 [-]: MOVE      R7 R5        ; R7 := R5
 24 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 25 [-]: TEST      R6 0         ; if not R6 then PC := 31
 26 [-]: JMP       31           ; PC := 31
 27 [-]: GETGLOBAL R6 K8        ; R6 := 0x3d106989
 28 [-]: LOADK     R7 K9        ; R7 := "_UpdateStatComparison: avatar is nil"
 29 [-]: CALL      R6 2 1       ; R6(R7)
 30 [-]: RETURN    R0 1         ; return 
 31 [-]: GETGLOBAL R6 K10       ; R6 := mInstalledGrid
 32 [-]: SELF      R6 R6 K11    ; R7 := R6; R6 := R6[0xea061e98]
 33 [-]: CLOSURE   R8 0         ; R8 := closure(Function #48.1)
 34 [-]: MOVE      R0 R2        ; R0 := R2
 35 [-]: MOVE      R0 R3        ; R0 := R3
 36 [-]: CALL      R6 3 1       ; R6(R7,R8)
 37 [-]: CONST     R6 1         ; R6 := 1.000000
 38 [-]: GETGLOBAL R7 K12       ; R7 := mArcaneInfo
 39 [-]: GETTABLE  R7 R7 K13    ; R7 := R7["Slots"]
 40 [-]: CONST     R8 1         ; R8 := 1.000000
 41 [-]: FORPREP   R6 64        ; R6 -= R8; PC := 64
 42 [-]: GETGLOBAL R10 K14      ; R10 := 0x6c97a788
 43 [-]: GETTABLE  R10 R10 K15  ; R10 := R10[0xd3f3ad63]
 44 [-]: CALL      R10 1 2      ; R10 := R10()
 45 [-]: GETGLOBAL R11 K5       ; R11 := 0x7b998233
 46 [-]: GETGLOBAL R12 K12      ; R12 := mArcaneInfo
 47 [-]: GETTABLE  R12 R12 K16  ; R12 := R12["Arcanes"]
 48 [-]: GETTABLE  R12 R12 R9   ; R12 := R12[R9]
 49 [-]: CALL      R11 2 2      ; R11 := R11(R12)
 50 [-]: TEST      R11 1        ; if R11 then PC := 59
 51 [-]: JMP       59           ; PC := 59
 52 [-]: GETGLOBAL R11 K12      ; R11 := mArcaneInfo
 53 [-]: GETTABLE  R11 R11 K16  ; R11 := R11["Arcanes"]
 54 [-]: GETTABLE  R11 R11 R9   ; R11 := R11[R9]
 55 [-]: GETTABLE  R12 R11 K18  ; R12 := R11["mItemId"]
 56 [-]: SETTABLE  R10 K17 R12  ; R10["mId"] := R12
 57 [-]: GETTABLE  R12 R11 K20  ; R12 := R11["mItemType"]
 58 [-]: SETTABLE  R10 K19 R12  ; R10["mType"] := R12
 59 [-]: GETGLOBAL R12 K21      ; R12 := 0x33bdd652
 60 [-]: GETTABLE  R12 R12 K22  ; R12 := R12[0x23d5322f]
 61 [-]: MOVE      R13 R3       ; R13 := R3
 62 [-]: MOVE      R14 R10      ; R14 := R10
 63 [-]: CALL      R12 3 1      ; R12(R13,R14)
 64 [-]: FORLOOP   R6 42        ; R6 += R8; if R6 <= R7 then begin PC := 42; R9 := R6 end
 65 [-]: GETGLOBAL R12 K3       ; R12 := _T
 66 [-]: GETTABLE  R12 R12 K23  ; R12 := R12["ArsenalState"]
 67 [-]: EQ        1 R12 K24    ; if R12 == 2.000000 then PC := 70
 68 [-]: JMP       70           ; PC := 70
 69 [-]: LOADKB    R12 0 1      ; R12 := false; PC := 70
 70 [-]: LOADKB    R12 1 0      ; R12 := true
 71 [-]: LOADNIL   R13 R13      ; R13 := nil
 72 [-]: GETUPVAL  R14 U1       ; R14 := U1
 73 [-]: CALL      R14 1 2      ; R14 := R14()
 74 [-]: TEST      R14 0        ; if not R14 then PC := 93
 75 [-]: JMP       93           ; PC := 93
 76 [-]: LEN       R14 R3       ; R14 := # R3
 77 [-]: GETGLOBAL R15 K25      ; R15 := MELEE_STANCE_SLOT
 78 [-]: LE        0 R15 R14    ; if R15 > R14 then PC := 93
 79 [-]: JMP       93           ; PC := 93
 80 [-]: GETUPVAL  R14 U2       ; R14 := U2
 81 [-]: GETTABLE  R14 R14 K26  ; R14 := R14["item"]
 82 [-]: SELF      R14 R14 K27  ; R15 := R14; R14 := R14[0x78c595ae]
 83 [-]: GETGLOBAL R16 K28      ; R16 := 0x0469f296
 84 [-]: LOADK     R17 K29      ; R17 := "POWER_WEAPON"
 85 [-]: CALL      R16 2 0      ; R16,... := R16(R17)
 86 [-]: CALL      R14 0 2      ; R14 := R14(R15,...)
 87 [-]: TEST      R14 0        ; if not R14 then PC := 93
 88 [-]: JMP       93           ; PC := 93
 89 [-]: GETGLOBAL R14 K25      ; R14 := MELEE_STANCE_SLOT
 90 [-]: GETTABLE  R13 R3 R14   ; R13 := R3[R14]
 91 [-]: GETGLOBAL R14 K25      ; R14 := MELEE_STANCE_SLOT
 92 [-]: SETTABLE  R3 R14 K30   ; R3[R14] := nil
 93 [-]: GETUPVAL  R14 U3       ; R14 := U3
 94 [-]: EQ        1 R14 K30    ; if R14 == nil then PC := 161
 95 [-]: JMP       161          ; PC := 161
 96 [-]: TEST      R1 1         ; if R1 then PC := 107
 97 [-]: JMP       107          ; PC := 107
 98 [-]: SELF      R14 R4 K31   ; R15 := R4; R14 := R4[0x835d4c57]
 99 [-]: GETUPVAL  R16 U2       ; R16 := U2
100 [-]: GETTABLE  R16 R16 K32  ; R16 := R16["info"]
101 [-]: GETTABLE  R16 R16 K18  ; R16 := R16["mItemId"]
102 [-]: GETTABLE  R16 R16 K17  ; R16 := R16["mId"]
103 [-]: GETUPVAL  R17 U3       ; R17 := U3
104 [-]: MOVE      R18 R12      ; R18 := R12
105 [-]: MOVE      R19 R3       ; R19 := R3
106 [-]: CALL      R14 6 1      ; R14(R15,R16,R17,R18,R19)
107 [-]: GETGLOBAL R14 K5       ; R14 := 0x7b998233
108 [-]: GETGLOBAL R15 K3       ; R15 := _T
109 [-]: GETTABLE  R15 R15 K33  ; R15 := R15["loadoutInProgress"]
110 [-]: CALL      R14 2 2      ; R14 := R14(R15)
111 [-]: TEST      R14 0        ; if not R14 then PC := 130
112 [-]: JMP       130          ; PC := 130
113 [-]: GETGLOBAL R14 K3       ; R14 := _T
114 [-]: NEWTABLE  R15 0 0      ; R15 := {}
115 [-]: SETTABLE  R14 K33 R15  ; R14["loadoutInProgress"] := R15
116 [-]: CONST     R14 0        ; R14 := 0.000000
117 [-]: CONST     R15 9        ; R15 := 9.000000
118 [-]: CONST     R16 1        ; R16 := 1.000000
119 [-]: FORPREP   R14 129      ; R14 -= R16; PC := 129
120 [-]: GETGLOBAL R18 K3       ; R18 := _T
121 [-]: GETTABLE  R18 R18 K33  ; R18 := R18["loadoutInProgress"]
122 [-]: SELF      R19 R4 K34   ; R20 := R4; R19 := R4[0x566259e1]
123 [-]: MOVE      R21 R17      ; R21 := R17
124 [-]: SELF      R22 R4 K35   ; R23 := R4; R22 := R4[0x4e457768]
125 [-]: MOVE      R24 R17      ; R24 := R17
126 [-]: CALL      R22 3 0      ; R22,... := R22(R23,R24)
127 [-]: CALL      R19 0 2      ; R19 := R19(R20,...)
128 [-]: SETTABLE  R18 R17 R19  ; R18[R17] := R19
129 [-]: FORLOOP   R14 120      ; R14 += R16; if R14 <= R15 then begin PC := 120; R17 := R14 end
130 [-]: GETGLOBAL R18 K3       ; R18 := _T
131 [-]: GETTABLE  R18 R18 K33  ; R18 := R18["loadoutInProgress"]
132 [-]: GETGLOBAL R19 K3       ; R19 := _T
133 [-]: GETTABLE  R19 R19 K36  ; R19 := R19["upgradeItemLot"]
134 [-]: GETTABLE  R18 R18 R19  ; R18 := R18[R19]
135 [-]: SELF      R18 R18 K37  ; R19 := R18; R18 := R18[0x2abbe722]
136 [-]: GETGLOBAL R20 K3       ; R20 := _T
137 [-]: GETTABLE  R20 R20 K38  ; R20 := R20["upgradeItemSlot"]
138 [-]: CALL      R18 3 2      ; R18 := R18(R19,R20)
139 [-]: GETUPVAL  R19 U3       ; R19 := U3
140 [-]: SETTABLE  R18 K39 R19  ; R18["mModSlot"] := R19
141 [-]: GETGLOBAL R19 K3       ; R19 := _T
142 [-]: GETTABLE  R19 R19 K33  ; R19 := R19["loadoutInProgress"]
143 [-]: GETGLOBAL R20 K3       ; R20 := _T
144 [-]: GETTABLE  R20 R20 K36  ; R20 := R20["upgradeItemLot"]
145 [-]: GETTABLE  R19 R19 R20  ; R19 := R19[R20]
146 [-]: SELF      R19 R19 K40  ; R20 := R19; R19 := R19[0xffca321e]
147 [-]: GETGLOBAL R21 K3       ; R21 := _T
148 [-]: GETTABLE  R21 R21 K38  ; R21 := R21["upgradeItemSlot"]
149 [-]: MOVE      R22 R18      ; R22 := R18
150 [-]: CALL      R19 4 1      ; R19(R20,R21,R22)
151 [-]: SELF      R19 R4 K41   ; R20 := R4; R19 := R4[0x6beb8ae1]
152 [-]: GETGLOBAL R21 K3       ; R21 := _T
153 [-]: GETTABLE  R21 R21 K36  ; R21 := R21["upgradeItemLot"]
154 [-]: GETGLOBAL R22 K3       ; R22 := _T
155 [-]: GETTABLE  R22 R22 K33  ; R22 := R22["loadoutInProgress"]
156 [-]: GETGLOBAL R23 K3       ; R23 := _T
157 [-]: GETTABLE  R23 R23 K36  ; R23 := R23["upgradeItemLot"]
158 [-]: GETTABLE  R22 R22 R23  ; R22 := R22[R23]
159 [-]: CALL      R19 4 1      ; R19(R20,R21,R22)
160 [-]: JMP       178          ; PC := 178
161 [-]: TEST      R1 1         ; if R1 then PC := 178
162 [-]: JMP       178          ; PC := 178
163 [-]: SELF      R19 R4 K31   ; R20 := R4; R19 := R4[0x835d4c57]
164 [-]: GETUPVAL  R21 U2       ; R21 := U2
165 [-]: GETTABLE  R21 R21 K32  ; R21 := R21["info"]
166 [-]: GETTABLE  R21 R21 K18  ; R21 := R21["mItemId"]
167 [-]: GETTABLE  R21 R21 K17  ; R21 := R21["mId"]
168 [-]: CONST     R22 0        ; R22 := 0.000000
169 [-]: MOVE      R23 R12      ; R23 := R12
170 [-]: MOVE      R24 R3       ; R24 := R3
171 [-]: CALL      R19 6 1      ; R19(R20,R21,R22,R23,R24)
172 [-]: GETUPVAL  R19 U2       ; R19 := U2
173 [-]: GETTABLE  R19 R19 K32  ; R19 := R19["info"]
174 [-]: SELF      R19 R19 K31  ; R20 := R19; R19 := R19[0x835d4c57]
175 [-]: MOVE      R21 R3       ; R21 := R3
176 [-]: CONST     R22 0        ; R22 := 0.000000
177 [-]: CALL      R19 4 1      ; R19(R20,R21,R22)
178 [-]: EQ        1 R13 K30    ; if R13 == nil then PC := 182
179 [-]: JMP       182          ; PC := 182
180 [-]: GETGLOBAL R19 K25      ; R19 := MELEE_STANCE_SLOT
181 [-]: SETTABLE  R3 R19 R13   ; R3[R19] := R13
182 [-]: LT        0 K42 R2     ; if 0.000000 >= R2 then PC := 201
183 [-]: JMP       201          ; PC := 201
184 [-]: GETGLOBAL R19 K43      ; R19 := 0x89326c93
185 [-]: SELF      R19 R19 K44  ; R20 := R19; R19 := R19[0xded7d5cd]
186 [-]: CALL      R19 2 2      ; R19 := R19(R20)
187 [-]: GETTABLE  R19 R19 K45  ; R19 := R19[1.000000]
188 [-]: GETGLOBAL R20 K5       ; R20 := 0x7b998233
189 [-]: MOVE      R21 R19      ; R21 := R19
190 [-]: CALL      R20 2 2      ; R20 := R20(R21)
191 [-]: TEST      R20 1        ; if R20 then PC := 201
192 [-]: JMP       201          ; PC := 201
193 [-]: GETGLOBAL R20 K46      ; R20 := 0xba7dfcd2
194 [-]: SELF      R20 R20 K47  ; R21 := R20; R20 := R20[0xdece6848]
195 [-]: MOVE      R22 R19      ; R22 := R19
196 [-]: GETGLOBAL R23 K28      ; R23 := 0x0469f296
197 [-]: LOADK     R24 K48      ; R24 := "ITEM_UPGRADE_COUNT"
198 [-]: CALL      R23 2 2      ; R23 := R23(R24)
199 [-]: MOVE      R24 R2       ; R24 := R2
200 [-]: CALL      R20 5 1      ; R20(R21,R22,R23,R24)
201 [-]: GETUPVAL  R20 U0       ; R20 := U0
202 [-]: GETTABLE  R20 R20 K2   ; R20 := R20[0x06d055f9]
203 [-]: MOVE      R21 R12      ; R21 := R12
204 [-]: CONST     R22 3        ; R22 := 3.000000
205 [-]: GETUPVAL  R23 U0       ; R23 := U0
206 [-]: GETTABLE  R23 R23 K2   ; R23 := R23[0x06d055f9]
207 [-]: GETGLOBAL R24 K3       ; R24 := _T
208 [-]: GETTABLE  R24 R24 K4   ; R24 := R24["mMechaSuitMode"]
209 [-]: CONST     R25 8        ; R25 := 8.000000
210 [-]: CONST     R26 0        ; R26 := 0.000000
211 [-]: CALL      R23 4 0      ; R23,... := R23(R24,R25,R26)
212 [-]: CALL      R20 0 2      ; R20 := R20(R21,...)
213 [-]: GETGLOBAL R21 K0       ; R21 := mGameData
214 [-]: SELF      R21 R21 K49  ; R22 := R21; R21 := R21[0x400b84a1]
215 [-]: GETGLOBAL R23 K3       ; R23 := _T
216 [-]: GETTABLE  R23 R23 K36  ; R23 := R23["upgradeItemLot"]
217 [-]: GETGLOBAL R24 K3       ; R24 := _T
218 [-]: GETTABLE  R24 R24 K33  ; R24 := R24["loadoutInProgress"]
219 [-]: GETGLOBAL R25 K3       ; R25 := _T
220 [-]: GETTABLE  R25 R25 K36  ; R25 := R25["upgradeItemLot"]
221 [-]: GETTABLE  R24 R24 R25  ; R24 := R24[R25]
222 [-]: CALL      R21 4 1      ; R21(R22,R23,R24)
223 [-]: SELF      R21 R5 K50   ; R22 := R5; R21 := R5[0xde321e6f]
224 [-]: CALL      R21 2 2      ; R21 := R21(R22)
225 [-]: SELF      R22 R21 K51  ; R23 := R21; R22 := R21[0x374b084a]
226 [-]: CALL      R22 2 1      ; R22(R23)
227 [-]: SELF      R22 R21 K52  ; R23 := R21; R22 := R21[0xb4af1972]
228 [-]: LOADKB    R24 1 0      ; R24 := true
229 [-]: CALL      R22 3 1      ; R22(R23,R24)
230 [-]: GETGLOBAL R22 K0       ; R22 := mGameData
231 [-]: SELF      R22 R22 K53  ; R23 := R22; R22 := R22[0x62c81b76]
232 [-]: CALL      R22 2 2      ; R22 := R22(R23)
233 [-]: SELF      R23 R21 K54  ; R24 := R21; R23 := R21[0x1d2dfe4a]
234 [-]: MOVE      R25 R22      ; R25 := R22
235 [-]: MOVE      R26 R20      ; R26 := R20
236 [-]: CALL      R23 4 1      ; R23(R24,R25,R26)
237 [-]: GETUPVAL  R23 U4       ; R23 := U4
238 [-]: MOVE      R24 R22      ; R24 := R22
239 [-]: CALL      R23 2 1      ; R23(R24)
240 [-]: GETUPVAL  R23 U5       ; R23 := U5
241 [-]: CALL      R23 1 2      ; R23 := R23()
242 [-]: TEST      R23 0        ; if not R23 then PC := 304
243 [-]: JMP       304          ; PC := 304
244 [-]: GETGLOBAL R23 K3       ; R23 := _T
245 [-]: GETTABLE  R23 R23 K55  ; R23 := R23["RailjackAvatar"]
246 [-]: GETGLOBAL R24 K5       ; R24 := 0x7b998233
247 [-]: MOVE      R25 R23      ; R25 := R23
248 [-]: CALL      R24 2 2      ; R24 := R24(R25)
249 [-]: TEST      R24 1        ; if R24 then PC := 304
250 [-]: JMP       304          ; PC := 304
251 [-]: SELF      R24 R23 K50  ; R25 := R23; R24 := R23[0xde321e6f]
252 [-]: CALL      R24 2 2      ; R24 := R24(R25)
253 [-]: SELF      R24 R24 K56  ; R25 := R24; R24 := R24[0xf7d48ee0]
254 [-]: CALL      R24 2 2      ; R24 := R24(R25)
255 [-]: GETGLOBAL R25 K57      ; R25 := 0x25d99d89
256 [-]: SELF      R25 R25 K58  ; R26 := R25; R25 := R25[0xdfa0cbbf]
257 [-]: CALL      R25 2 1      ; R25(R26)
258 [-]: GETGLOBAL R25 K57      ; R25 := 0x25d99d89
259 [-]: SELF      R25 R25 K53  ; R26 := R25; R25 := R25[0x62c81b76]
260 [-]: CALL      R25 2 2      ; R25 := R25(R26)
261 [-]: GETTABLE  R25 R25 K59  ; R25 := R25["mCrewShipLoadOut"]
262 [-]: GETGLOBAL R26 K5       ; R26 := 0x7b998233
263 [-]: MOVE      R27 R24      ; R27 := R24
264 [-]: CALL      R26 2 2      ; R26 := R26(R27)
265 [-]: TEST      R26 1        ; if R26 then PC := 304
266 [-]: JMP       304          ; PC := 304
267 [-]: GETGLOBAL R26 K5       ; R26 := 0x7b998233
268 [-]: MOVE      R27 R25      ; R27 := R25
269 [-]: CALL      R26 2 2      ; R26 := R26(R27)
270 [-]: TEST      R26 1        ; if R26 then PC := 304
271 [-]: JMP       304          ; PC := 304
272 [-]: SELF      R26 R24 K53  ; R27 := R24; R26 := R24[0x62c81b76]
273 [-]: CALL      R26 2 2      ; R26 := R26(R27)
274 [-]: SELF      R27 R24 K60  ; R28 := R24; R27 := R24[0x68d708a7]
275 [-]: CALL      R27 2 2      ; R27 := R27(R28)
276 [-]: CONST     R28 0        ; R28 := 0.000000
277 [-]: CONST     R29 4        ; R29 := 4.000000
278 [-]: CONST     R30 1        ; R30 := 1.000000
279 [-]: FORPREP   R28 293      ; R28 -= R30; PC := 293
280 [-]: CONST     R32 0        ; R32 := 0.000000
281 [-]: CONST     R33 3        ; R33 := 3.000000
282 [-]: CONST     R34 1        ; R34 := 1.000000
283 [-]: FORPREP   R32 292      ; R32 -= R34; PC := 292
284 [-]: SELF      R36 R25 K61  ; R37 := R25; R36 := R25[0xc933a7b6]
285 [-]: MOVE      R38 R31      ; R38 := R31
286 [-]: MOVE      R39 R35      ; R39 := R35
287 [-]: SELF      R40 R26 K62  ; R41 := R26; R40 := R26[0x73a8846a]
288 [-]: MOVE      R42 R31      ; R42 := R31
289 [-]: MOVE      R43 R35      ; R43 := R35
290 [-]: CALL      R40 4 0      ; R40,... := R40(R41,R42,R43)
291 [-]: CALL      R36 0 1      ; R36(R37,...)
292 [-]: FORLOOP   R32 284      ; R32 += R34; if R32 <= R33 then begin PC := 284; R35 := R32 end
293 [-]: FORLOOP   R28 280      ; R28 += R30; if R28 <= R29 then begin PC := 280; R31 := R28 end
294 [-]: GETUPVAL  R36 U6       ; R36 := U6
295 [-]: GETTABLE  R36 R36 K63  ; R36 := R36[0x7bc6247f]
296 [-]: MOVE      R37 R24      ; R37 := R24
297 [-]: MOVE      R38 R25      ; R38 := R25
298 [-]: LOADKB    R39 1 0      ; R39 := true
299 [-]: CALL      R36 4 1      ; R36(R37,R38,R39)
300 [-]: SELF      R36 R24 K64  ; R37 := R24; R36 := R24[0xaa041663]
301 [-]: MOVE      R38 R27      ; R38 := R27
302 [-]: LOADKB    R39 1 0      ; R39 := true
303 [-]: CALL      R36 4 1      ; R36(R37,R38,R39)
304 [-]: GETGLOBAL R36 K65      ; R36 := mCachedSpecialSuitMode
305 [-]: TEST      R36 0        ; if not R36 then PC := 325
306 [-]: JMP       325          ; PC := 325
307 [-]: GETGLOBAL R36 K5       ; R36 := 0x7b998233
308 [-]: GETGLOBAL R37 K3       ; R37 := _T
309 [-]: GETTABLE  R37 R37 K66  ; R37 := R37["SpecialSuitAvatar"]
310 [-]: CALL      R36 2 2      ; R36 := R36(R37)
311 [-]: TEST      R36 1        ; if R36 then PC := 325
312 [-]: JMP       325          ; PC := 325
313 [-]: GETGLOBAL R36 K3       ; R36 := _T
314 [-]: GETTABLE  R36 R36 K66  ; R36 := R36["SpecialSuitAvatar"]
315 [-]: SELF      R36 R36 K50  ; R37 := R36; R36 := R36[0xde321e6f]
316 [-]: CALL      R36 2 2      ; R36 := R36(R37)
317 [-]: SELF      R36 R36 K67  ; R37 := R36; R36 := R36[0x9c596606]
318 [-]: MOVE      R38 R22      ; R38 := R22
319 [-]: MOVE      R39 R20      ; R39 := R20
320 [-]: GETGLOBAL R40 K3       ; R40 := _T
321 [-]: GETTABLE  R40 R40 K38  ; R40 := R40["upgradeItemSlot"]
322 [-]: LOADKB    R41 1 0      ; R41 := true
323 [-]: CALL      R36 6 1      ; R36(R37,R38,R39,R40,R41)
324 [-]: JMP       374          ; PC := 374
325 [-]: SELF      R36 R21 K56  ; R37 := R21; R36 := R21[0xf7d48ee0]
326 [-]: CALL      R36 2 2      ; R36 := R36(R37)
327 [-]: GETGLOBAL R37 K5       ; R37 := 0x7b998233
328 [-]: MOVE      R38 R36      ; R38 := R36
329 [-]: CALL      R37 2 2      ; R37 := R37(R38)
330 [-]: TEST      R37 1        ; if R37 then PC := 374
331 [-]: JMP       374          ; PC := 374
332 [-]: CONST     R37 5        ; R37 := 5.000000
333 [-]: CONST     R38 6        ; R38 := 6.000000
334 [-]: CONST     R39 1        ; R39 := 1.000000
335 [-]: FORPREP   R37 373      ; R37 -= R39; PC := 373
336 [-]: SELF      R41 R36 K68  ; R42 := R36; R41 := R36[0x4a5d8c86]
337 [-]: MOVE      R43 R40      ; R43 := R40
338 [-]: CALL      R41 3 2      ; R41 := R41(R42,R43)
339 [-]: GETTABLE  R41 R41 K20  ; R41 := R41["mItemType"]
340 [-]: GETGLOBAL R42 K5       ; R42 := 0x7b998233
341 [-]: MOVE      R43 R41      ; R43 := R41
342 [-]: CALL      R42 2 2      ; R42 := R42(R43)
343 [-]: TEST      R42 1        ; if R42 then PC := 373
344 [-]: JMP       373          ; PC := 373
345 [-]: SELF      R42 R41 K69  ; R43 := R41; R42 := R41[0xf2deaf69]
346 [-]: GETGLOBAL R44 K70      ; R44 := gPowerSuitType
347 [-]: CALL      R42 3 2      ; R42 := R42(R43,R44)
348 [-]: TEST      R42 1        ; if R42 then PC := 373
349 [-]: JMP       373          ; PC := 373
350 [-]: GETUPVAL  R42 U2       ; R42 := U2
351 [-]: GETTABLE  R42 R42 K71  ; R42 := R42["type"]
352 [-]: EQ        0 R41 R42    ; if R41 ~= R42 then PC := 373
353 [-]: JMP       373          ; PC := 373
354 [-]: SELF      R42 R41 K69  ; R43 := R41; R42 := R41[0xf2deaf69]
355 [-]: GETGLOBAL R44 K72      ; R44 := 0x60c82540
356 [-]: CALL      R42 3 2      ; R42 := R42(R43,R44)
357 [-]: TEST      R42 0        ; if not R42 then PC := 367
358 [-]: JMP       367          ; PC := 367
359 [-]: SELF      R42 R21 K73  ; R43 := R21; R42 := R21[0xefb10287]
360 [-]: GETGLOBAL R44 K43      ; R44 := 0x89326c93
361 [-]: MOVE      R45 R22      ; R45 := R22
362 [-]: MOVE      R46 R20      ; R46 := R20
363 [-]: MOVE      R47 R40      ; R47 := R40
364 [-]: LOADKB    R48 1 0      ; R48 := true
365 [-]: CALL      R42 7 1      ; R42(R43,R44,R45,R46,R47,R48)
366 [-]: JMP       373          ; PC := 373
367 [-]: SELF      R42 R21 K67  ; R43 := R21; R42 := R21[0x9c596606]
368 [-]: MOVE      R44 R22      ; R44 := R22
369 [-]: MOVE      R45 R20      ; R45 := R20
370 [-]: MOVE      R46 R40      ; R46 := R40
371 [-]: LOADKB    R47 1 0      ; R47 := true
372 [-]: CALL      R42 6 1      ; R42(R43,R44,R45,R46,R47)
373 [-]: FORLOOP   R37 336      ; R37 += R39; if R37 <= R38 then begin PC := 336; R40 := R37 end
374 [-]: GETGLOBAL R42 K3       ; R42 := _T
375 [-]: GETTABLE  R42 R42 K4   ; R42 := R42["mMechaSuitMode"]
376 [-]: TEST      R42 0        ; if not R42 then PC := 384
377 [-]: JMP       384          ; PC := 384
378 [-]: SELF      R42 R5 K74   ; R43 := R5; R42 := R5[0x511d26b8]
379 [-]: GETGLOBAL R44 K75      ; R44 := 0x88efc25e
380 [-]: GETGLOBAL R45 K76      ; R45 := 0x3369a6b1
381 [-]: CALL      R44 2 2      ; R44 := R44(R45)
382 [-]: LOADKB    R45 0 0      ; R45 := false
383 [-]: CALL      R42 4 1      ; R42(R43,R44,R45)
384 [-]: GETGLOBAL R42 K3       ; R42 := _T
385 [-]: GETTABLE  R42 R42 K23  ; R42 := R42["ArsenalState"]
386 [-]: EQ        0 R42 K77    ; if R42 ~= 3.000000 then PC := 396
387 [-]: JMP       396          ; PC := 396
388 [-]: SELF      R42 R21 K78  ; R43 := R21; R42 := R21[0xc533c156]
389 [-]: CONST     R44 0        ; R44 := 0.000000
390 [-]: CALL      R42 3 2      ; R42 := R42(R43,R44)
391 [-]: SELF      R43 R21 K80  ; R44 := R21; R43 := R21[0xc69087f6]
392 [-]: MOVE      R45 R42      ; R45 := R42
393 [-]: CONST     R46 0        ; R46 := 0.000000
394 [-]: CONST     R47 2        ; R47 := 2.000000
395 [-]: CALL      R43 5 1      ; R43(R44,R45,R46,R47)
396 [-]: GETUPVAL  R43 U5       ; R43 := U5
397 [-]: CALL      R43 1 2      ; R43 := R43()
398 [-]: TEST      R43 1        ; if R43 then PC := 440
399 [-]: JMP       440          ; PC := 440
400 [-]: GETGLOBAL R43 K3       ; R43 := _T
401 [-]: GETGLOBAL R44 K3       ; R44 := _T
402 [-]: GETTABLE  R44 R44 K7   ; R44 := R44["MenuSuitAvatar"]
403 [-]: SELF      R44 R44 K50  ; R45 := R44; R44 := R44[0xde321e6f]
404 [-]: CALL      R44 2 2      ; R44 := R44(R45)
405 [-]: SELF      R44 R44 K82  ; R45 := R44; R44 := R44[0x2676deee]
406 [-]: CALL      R44 2 2      ; R44 := R44(R45)
407 [-]: SETTABLE  R43 K81 R44  ; R43["MenuSentinel"] := R44
408 [-]: GETGLOBAL R43 K5       ; R43 := 0x7b998233
409 [-]: GETGLOBAL R44 K3       ; R44 := _T
410 [-]: GETTABLE  R44 R44 K81  ; R44 := R44["MenuSentinel"]
411 [-]: CALL      R43 2 2      ; R43 := R43(R44)
412 [-]: TEST      R43 1        ; if R43 then PC := 440
413 [-]: JMP       440          ; PC := 440
414 [-]: GETGLOBAL R43 K3       ; R43 := _T
415 [-]: GETTABLE  R43 R43 K81  ; R43 := R43["MenuSentinel"]
416 [-]: SELF      R43 R43 K83  ; R44 := R43; R43 := R43[0x1ac1655c]
417 [-]: CALL      R43 2 2      ; R43 := R43(R44)
418 [-]: SELF      R43 R43 K84  ; R44 := R43; R43 := R43[0x35577788]
419 [-]: LOADKB    R45 0 0      ; R45 := false
420 [-]: CALL      R43 3 1      ; R43(R44,R45)
421 [-]: GETGLOBAL R43 K3       ; R43 := _T
422 [-]: GETTABLE  R43 R43 K81  ; R43 := R43["MenuSentinel"]
423 [-]: SELF      R43 R43 K85  ; R44 := R43; R43 := R43[0x23d6100a]
424 [-]: LOADKB    R45 0 0      ; R45 := false
425 [-]: CALL      R43 3 1      ; R43(R44,R45)
426 [-]: GETGLOBAL R43 K3       ; R43 := _T
427 [-]: GETTABLE  R43 R43 K81  ; R43 := R43["MenuSentinel"]
428 [-]: SELF      R43 R43 K50  ; R44 := R43; R43 := R43[0xde321e6f]
429 [-]: CALL      R43 2 2      ; R43 := R43(R44)
430 [-]: SELF      R43 R43 K56  ; R44 := R43; R43 := R43[0xf7d48ee0]
431 [-]: CALL      R43 2 2      ; R43 := R43(R44)
432 [-]: GETGLOBAL R44 K5       ; R44 := 0x7b998233
433 [-]: MOVE      R45 R43      ; R45 := R43
434 [-]: CALL      R44 2 2      ; R44 := R44(R45)
435 [-]: TEST      R44 1        ; if R44 then PC := 440
436 [-]: JMP       440          ; PC := 440
437 [-]: SELF      R44 R43 K86  ; R45 := R43; R44 := R43[0x1bf26251]
438 [-]: LOADKB    R46 0 0      ; R46 := false
439 [-]: CALL      R44 3 1      ; R44(R45,R46)
440 [-]: GETUPVAL  R44 U7       ; R44 := U7
441 [-]: CALL      R44 1 1      ; R44()
442 [-]: GETUPVAL  R44 U8       ; R44 := U8
443 [-]: CALL      R44 1 1      ; R44()
444 [-]: GETUPVAL  R44 U9       ; R44 := U9
445 [-]: CALL      R44 1 1      ; R44()
446 [-]: GETGLOBAL R44 K3       ; R44 := _T
447 [-]: SETTABLE  R44 K87 K88  ; R44["LoadoutSaveRequired"] := true
448 [-]: TEST      R0 0         ; if not R0 then PC := 460
449 [-]: JMP       460          ; PC := 460
450 [-]: GETGLOBAL R44 K10      ; R44 := mInstalledGrid
451 [-]: SELF      R44 R44 K11  ; R45 := R44; R44 := R44[0xea061e98]
452 [-]: CLOSURE   R46 1        ; R46 := closure(Function #48.2)
453 [-]: GETUPVAL  R0 U10       ; R0 := U10
454 [-]: CALL      R44 3 1      ; R44(R45,R46)
455 [-]: GETGLOBAL R44 K89      ; R44 := mCollectionGrid
456 [-]: SELF      R44 R44 K11  ; R45 := R44; R44 := R44[0xea061e98]
457 [-]: CLOSURE   R46 2        ; R46 := closure(Function #48.3)
458 [-]: GETUPVAL  R0 U10       ; R0 := U10
459 [-]: CALL      R44 3 1      ; R44(R45,R46)
460 [-]: RETURN    R0 1         ; return 


; Function #48.1:
;
; Name:            
; Defined at line: 1473
; #Upvalues:       2
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x6c97a788
  2 [-]: GETTABLE  R1 R1 K1     ; R1 := R1[0xd3f3ad63]
  3 [-]: CALL      R1 1 2       ; R1 := R1()
  4 [-]: GETTABLE  R2 R0 K2     ; R2 := R0["mCardIndex"]
  5 [-]: EQ        1 R2 K3      ; if R2 == nil then PC := 26
  6 [-]: JMP       26           ; PC := 26
  7 [-]: GETTABLE  R2 R0 K2     ; R2 := R0["mCardIndex"]
  8 [-]: LT        0 K4 R2      ; if 0.000000 >= R2 then PC := 26
  9 [-]: JMP       26           ; PC := 26
 10 [-]: GETGLOBAL R2 K5        ; R2 := mCards
 11 [-]: GETTABLE  R3 R0 K2     ; R3 := R0["mCardIndex"]
 12 [-]: GETTABLE  R2 R2 R3     ; R2 := R2[R3]
 13 [-]: GETTABLE  R2 R2 K6     ; R2 := R2["mUpgrade"]
 14 [-]: GETTABLE  R3 R2 K7     ; R3 := R2["mItemId"]
 15 [-]: GETTABLE  R3 R3 K8     ; R3 := R3["mId"]
 16 [-]: EQ        1 R3 K9      ; if R3 == "" then PC := 21
 17 [-]: JMP       21           ; PC := 21
 18 [-]: GETTABLE  R3 R2 K7     ; R3 := R2["mItemId"]
 19 [-]: SETTABLE  R1 K8 R3     ; R1["mId"] := R3
 20 [-]: JMP       23           ; PC := 23
 21 [-]: GETTABLE  R3 R2 K11    ; R3 := R2["mItemType"]
 22 [-]: SETTABLE  R1 K10 R3    ; R1["mType"] := R3
 23 [-]: GETUPVAL  R3 U0        ; R3 := U0
 24 [-]: ADD       R3 R3 K12    ; R3 := R3 + 1.000000
 25 [-]: SETUPVAL  R3 U0        ; U82 := R0
 26 [-]: GETUPVAL  R3 U1        ; R3 := U1
 27 [-]: GETTABLE  R4 R0 K13    ; R4 := R0["Id"]
 28 [-]: SETTABLE  R3 R4 R1     ; R3[R4] := R1
 29 [-]: RETURN    R0 1         ; return 


; Function #48.2:
;
; Name:            
; Defined at line: 1622
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETTABLE  R2 R0 K1     ; R2 := R0["mModSet"]
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 24
  5 [-]: JMP       24           ; PC := 24
  6 [-]: GETTABLE  R1 R0 K2     ; R1 := R0["mCardIndex"]
  7 [-]: LT        0 K3 R1      ; if 0.000000 >= R1 then PC := 24
  8 [-]: JMP       24           ; PC := 24
  9 [-]: GETTABLE  R1 R0 K2     ; R1 := R0["mCardIndex"]
 10 [-]: GETGLOBAL R2 K4        ; R2 := mCards
 11 [-]: LEN       R2 R2        ; R2 := # R2
 12 [-]: LE        0 R1 R2      ; if R1 > R2 then PC := 24
 13 [-]: JMP       24           ; PC := 24
 14 [-]: GETUPVAL  R1 U0        ; R1 := U0
 15 [-]: GETTABLE  R1 R1 K5     ; R1 := R1[0xfff1a297]
 16 [-]: GETGLOBAL R2 K4        ; R2 := mCards
 17 [-]: GETTABLE  R3 R0 K2     ; R3 := R0["mCardIndex"]
 18 [-]: GETTABLE  R2 R2 R3     ; R2 := R2[R3]
 19 [-]: CALL      R1 2 1       ; R1(R2)
 20 [-]: GETGLOBAL R1 K6        ; R1 := mInstalledGrid
 21 [-]: GETTABLE  R1 R1 K7     ; R1 := R1[0xb15e6aca]
 22 [-]: MOVE      R2 R0        ; R2 := R0
 23 [-]: CALL      R1 2 1       ; R1(R2)
 24 [-]: RETURN    R0 1         ; return 


; Function #48.3:
;
; Name:            
; Defined at line: 1629
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETTABLE  R2 R0 K1     ; R2 := R0["mModSet"]
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 24
  5 [-]: JMP       24           ; PC := 24
  6 [-]: GETTABLE  R1 R0 K2     ; R1 := R0["mCardIndex"]
  7 [-]: LT        0 K3 R1      ; if 0.000000 >= R1 then PC := 24
  8 [-]: JMP       24           ; PC := 24
  9 [-]: GETTABLE  R1 R0 K2     ; R1 := R0["mCardIndex"]
 10 [-]: GETGLOBAL R2 K4        ; R2 := mCards
 11 [-]: LEN       R2 R2        ; R2 := # R2
 12 [-]: LE        0 R1 R2      ; if R1 > R2 then PC := 24
 13 [-]: JMP       24           ; PC := 24
 14 [-]: GETUPVAL  R1 U0        ; R1 := U0
 15 [-]: GETTABLE  R1 R1 K5     ; R1 := R1[0xfff1a297]
 16 [-]: GETGLOBAL R2 K4        ; R2 := mCards
 17 [-]: GETTABLE  R3 R0 K2     ; R3 := R0["mCardIndex"]
 18 [-]: GETTABLE  R2 R2 R3     ; R2 := R2[R3]
 19 [-]: CALL      R1 2 1       ; R1(R2)
 20 [-]: GETGLOBAL R1 K6        ; R1 := mCollectionGrid
 21 [-]: GETTABLE  R1 R1 K7     ; R1 := R1[0xb15e6aca]
 22 [-]: MOVE      R2 R0        ; R2 := R0
 23 [-]: CALL      R1 2 1       ; R1(R2)
 24 [-]: RETURN    R0 1         ; return 


; Function #49:
;
; Name:            
; Defined at line: 1638
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  13

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := _T
  3 [-]: GETTABLE  R2 R2 K2     ; R2 := R2["loadoutInProgress"]
  4 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  5 [-]: TEST      R1 0         ; if not R1 then PC := 29
  6 [-]: JMP       29           ; PC := 29
  7 [-]: GETGLOBAL R1 K3        ; R1 := mPlayerProfile
  8 [-]: SELF      R1 R1 K4     ; R2 := R1; R1 := R1[0x80563238]
  9 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 10 [-]: SELF      R1 R1 K5     ; R2 := R1; R1 := R1[0x25a6e75e]
 11 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 12 [-]: GETGLOBAL R2 K1        ; R2 := _T
 13 [-]: NEWTABLE  R3 0 0       ; R3 := {}
 14 [-]: SETTABLE  R2 K2 R3     ; R2["loadoutInProgress"] := R3
 15 [-]: CONST     R2 0         ; R2 := 0.000000
 16 [-]: CONST     R3 9         ; R3 := 9.000000
 17 [-]: CONST     R4 1         ; R4 := 1.000000
 18 [-]: FORPREP   R2 28        ; R2 -= R4; PC := 28
 19 [-]: GETGLOBAL R6 K1        ; R6 := _T
 20 [-]: GETTABLE  R6 R6 K2     ; R6 := R6["loadoutInProgress"]
 21 [-]: SELF      R7 R1 K7     ; R8 := R1; R7 := R1[0x566259e1]
 22 [-]: MOVE      R9 R5        ; R9 := R5
 23 [-]: SELF      R10 R1 K8    ; R11 := R1; R10 := R1[0x4e457768]
 24 [-]: MOVE      R12 R5       ; R12 := R5
 25 [-]: CALL      R10 3 0      ; R10,... := R10(R11,R12)
 26 [-]: CALL      R7 0 2       ; R7 := R7(R8,...)
 27 [-]: SETTABLE  R6 R5 R7     ; R6[R5] := R7
 28 [-]: FORLOOP   R2 19        ; R2 += R4; if R2 <= R3 then begin PC := 19; R5 := R2 end
 29 [-]: GETGLOBAL R6 K9        ; R6 := mGameData
 30 [-]: SELF      R6 R6 K5     ; R7 := R6; R6 := R6[0x25a6e75e]
 31 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 32 [-]: SELF      R6 R6 K10    ; R7 := R6; R6 := R6[0x6beb8ae1]
 33 [-]: GETGLOBAL R8 K1        ; R8 := _T
 34 [-]: GETTABLE  R8 R8 K11    ; R8 := R8["upgradeItemLot"]
 35 [-]: GETGLOBAL R9 K1        ; R9 := _T
 36 [-]: GETTABLE  R9 R9 K2     ; R9 := R9["loadoutInProgress"]
 37 [-]: GETGLOBAL R10 K1       ; R10 := _T
 38 [-]: GETTABLE  R10 R10 K11  ; R10 := R10["upgradeItemLot"]
 39 [-]: GETTABLE  R9 R9 R10    ; R9 := R9[R10]
 40 [-]: CALL      R6 4 1       ; R6(R7,R8,R9)
 41 [-]: EQ        0 R0 K12     ; if R0 ~= nil then PC := 48
 42 [-]: JMP       48           ; PC := 48
 43 [-]: GETGLOBAL R6 K9        ; R6 := mGameData
 44 [-]: SELF      R6 R6 K13    ; R7 := R6; R6 := R6[0xb6e2ab0d]
 45 [-]: LOADK     R8 K14       ; R8 := "OnSaveLoadOutComplete"
 46 [-]: CALL      R6 3 1       ; R6(R7,R8)
 47 [-]: JMP       52           ; PC := 52
 48 [-]: GETGLOBAL R6 K9        ; R6 := mGameData
 49 [-]: SELF      R6 R6 K13    ; R7 := R6; R6 := R6[0xb6e2ab0d]
 50 [-]: MOVE      R8 R0        ; R8 := R0
 51 [-]: CALL      R6 3 1       ; R6(R7,R8)
 52 [-]: GETGLOBAL R6 K1        ; R6 := _T
 53 [-]: SETTABLE  R6 K2 K12    ; R6["loadoutInProgress"] := nil
 54 [-]: GETGLOBAL R6 K1        ; R6 := _T
 55 [-]: GETTABLE  R6 R6 K15    ; R6 := R6["InSimulacrum"]
 56 [-]: TEST      R6 1         ; if R6 then PC := 60
 57 [-]: JMP       60           ; PC := 60
 58 [-]: GETGLOBAL R6 K1        ; R6 := _T
 59 [-]: SETTABLE  R6 K16 K12   ; R6["LoadoutSaveRequired"] := nil
 60 [-]: RETURN    R0 1         ; return 


; Function #50:
;
; Name:            
; Defined at line: 1658
; #Upvalues:       12
; #Parameters:     6
; Is_vararg:       0
; Max Stack Size:  42

  1 [-]: TEST      R1 0         ; if not R1 then PC := 8
  2 [-]: JMP       8            ; PC := 8
  3 [-]: GETGLOBAL R6 K0        ; R6 := 0x7b998233
  4 [-]: GETGLOBAL R7 K1        ; R7 := mGameData
  5 [-]: CALL      R6 2 2       ; R6 := R6(R7)
  6 [-]: TEST      R6 0         ; if not R6 then PC := 10
  7 [-]: JMP       10           ; PC := 10
  8 [-]: LOADKB    R6 0 0       ; R6 := false
  9 [-]: RETURN    R6 2         ; return R6
 10 [-]: GETTABLE  R6 R2 K2     ; R6 := R2["mCardLocked"]
 11 [-]: TEST      R6 1         ; if R6 then PC := 17
 12 [-]: JMP       17           ; PC := 17
 13 [-]: GETTABLE  R6 R1 K3     ; R6 := R1["element"]
 14 [-]: GETTABLE  R6 R6 K2     ; R6 := R6["mCardLocked"]
 15 [-]: TEST      R6 0         ; if not R6 then PC := 19
 16 [-]: JMP       19           ; PC := 19
 17 [-]: LOADKB    R6 0 0       ; R6 := false
 18 [-]: RETURN    R6 2         ; return R6
 19 [-]: GETGLOBAL R6 K4        ; R6 := mInstalledGrid
 20 [-]: EQ        0 R0 R6      ; if R0 ~= R6 then PC := 164
 21 [-]: JMP       164          ; PC := 164
 22 [-]: GETUPVAL  R6 U0        ; R6 := U0
 23 [-]: GETTABLE  R6 R6 K5     ; R6 := R6[0x04213f13]
 24 [-]: GETGLOBAL R7 K6        ; R7 := mCards
 25 [-]: GETTABLE  R8 R1 K3     ; R8 := R1["element"]
 26 [-]: GETTABLE  R8 R8 K7     ; R8 := R8["mCardIndex"]
 27 [-]: GETTABLE  R7 R7 R8     ; R7 := R7[R8]
 28 [-]: LOADKB    R8 1 0       ; R8 := true
 29 [-]: CALL      R6 3 2       ; R6 := R6(R7,R8)
 30 [-]: TEST      R6 0         ; if not R6 then PC := 164
 31 [-]: JMP       164          ; PC := 164
 32 [-]: GETUPVAL  R6 U0        ; R6 := U0
 33 [-]: GETTABLE  R6 R6 K5     ; R6 := R6[0x04213f13]
 34 [-]: GETGLOBAL R7 K6        ; R7 := mCards
 35 [-]: GETTABLE  R8 R1 K3     ; R8 := R1["element"]
 36 [-]: GETTABLE  R8 R8 K7     ; R8 := R8["mCardIndex"]
 37 [-]: GETTABLE  R7 R7 R8     ; R7 := R7[R8]
 38 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 39 [-]: TEST      R6 1         ; if R6 then PC := 164
 40 [-]: JMP       164          ; PC := 164
 41 [-]: GETUPVAL  R6 U1        ; R6 := U1
 42 [-]: GETTABLE  R6 R6 K8     ; R6 := R6["info"]
 43 [-]: GETTABLE  R6 R6 K9     ; R6 := R6["mItemId"]
 44 [-]: GETTABLE  R6 R6 K10    ; R6 := R6["mId"]
 45 [-]: LOADKB    R7 0 0       ; R7 := false
 46 [-]: CONST     R8 1         ; R8 := 1.000000
 47 [-]: GETGLOBAL R9 K6        ; R9 := mCards
 48 [-]: LEN       R9 R9        ; R9 := # R9
 49 [-]: CONST     R10 1        ; R10 := 1.000000
 50 [-]: FORPREP   R8 86        ; R8 -= R10; PC := 86
 51 [-]: GETGLOBAL R12 K6       ; R12 := mCards
 52 [-]: GETTABLE  R12 R12 R11  ; R12 := R12[R11]
 53 [-]: GETTABLE  R13 R12 K11  ; R13 := R12["mInstalled"]
 54 [-]: GETTABLE  R13 R13 R6   ; R13 := R13[R6]
 55 [-]: EQ        1 R13 K12    ; if R13 == nil then PC := 86
 56 [-]: JMP       86           ; PC := 86
 57 [-]: GETUPVAL  R13 U0       ; R13 := U0
 58 [-]: GETTABLE  R13 R13 K5   ; R13 := R13[0x04213f13]
 59 [-]: MOVE      R14 R12      ; R14 := R12
 60 [-]: CALL      R13 2 2      ; R13 := R13(R14)
 61 [-]: TEST      R13 0        ; if not R13 then PC := 86
 62 [-]: JMP       86           ; PC := 86
 63 [-]: GETTABLE  R13 R12 K13  ; R13 := R12["mElement"]
 64 [-]: GETTABLE  R13 R13 K14  ; R13 := R13["mClipName"]
 65 [-]: GETTABLE  R14 R2 K14   ; R14 := R2["mClipName"]
 66 [-]: EQ        1 R13 R14    ; if R13 == R14 then PC := 86
 67 [-]: JMP       86           ; PC := 86
 68 [-]: LOADKB    R7 1 0       ; R7 := true
 69 [-]: GETTABLE  R13 R12 K13  ; R13 := R12["mElement"]
 70 [-]: TEST      R13 0        ; if not R13 then PC := 76
 71 [-]: JMP       76           ; PC := 76
 72 [-]: GETUPVAL  R13 U2       ; R13 := U2
 73 [-]: GETTABLE  R14 R12 K13  ; R14 := R12["mElement"]
 74 [-]: GETTABLE  R14 R14 K14  ; R14 := R14["mClipName"]
 75 [-]: CALL      R13 2 1      ; R13(R14)
 76 [-]: GETTABLE  R13 R1 K15   ; R13 := R1["item"]
 77 [-]: GETTABLE  R13 R13 K13  ; R13 := R13["mElement"]
 78 [-]: TEST      R13 0        ; if not R13 then PC := 87
 79 [-]: JMP       87           ; PC := 87
 80 [-]: GETUPVAL  R13 U2       ; R13 := U2
 81 [-]: GETTABLE  R14 R1 K15   ; R14 := R1["item"]
 82 [-]: GETTABLE  R14 R14 K13  ; R14 := R14["mElement"]
 83 [-]: GETTABLE  R14 R14 K14  ; R14 := R14["mClipName"]
 84 [-]: CALL      R13 2 1      ; R13(R14)
 85 [-]: JMP       87           ; PC := 87
 86 [-]: FORLOOP   R8 51        ; R8 += R10; if R8 <= R9 then begin PC := 51; R11 := R8 end
 87 [-]: TEST      R7 1         ; if R7 then PC := 162
 88 [-]: JMP       162          ; PC := 162
 89 [-]: GETGLOBAL R13 K0       ; R13 := 0x7b998233
 90 [-]: GETTABLE  R14 R1 K15   ; R14 := R1["item"]
 91 [-]: GETTABLE  R14 R14 K16  ; R14 := R14["mUpgradeItemType"]
 92 [-]: CALL      R13 2 2      ; R13 := R13(R14)
 93 [-]: TEST      R13 1        ; if R13 then PC := 162
 94 [-]: JMP       162          ; PC := 162
 95 [-]: GETGLOBAL R13 K17      ; R13 := 0x34291f5c
 96 [-]: GETTABLE  R13 R13 K18  ; R13 := R13[0xe27b35bb]
 97 [-]: CALL      R13 1 2      ; R13 := R13()
 98 [-]: SETTABLE  R13 K19 K20  ; R13["dialogType"] := 1.000000
 99 [-]: GETGLOBAL R14 K21      ; R14 := 0x5bced4c4
100 [-]: GETTABLE  R14 R14 K22  ; R14 := R14[0xb62ecfe0]
101 [-]: CONST     R15 0        ; R15 := 0.000000
102 [-]: GETUPVAL  R16 U3       ; R16 := U3
103 [-]: GETTABLE  R16 R16 K23  ; R16 := R16[0x04b72e2b]
104 [-]: CALL      R16 1 2      ; R16 := R16()
105 [-]: GETUPVAL  R17 U3       ; R17 := U3
106 [-]: GETTABLE  R17 R17 K24  ; R17 := R17[0xbe87a400]
107 [-]: CALL      R17 1 2      ; R17 := R17()
108 [-]: LEN       R17 R17      ; R17 := # R17
109 [-]: SUB       R16 R16 R17  ; R16 := R16 - R17
110 [-]: CALL      R14 3 2      ; R14 := R14(R15,R16)
111 [-]: LOADK     R15 K25      ; R15 := "<font color=\""
112 [-]: GETUPVAL  R16 U4       ; R16 := U4
113 [-]: GETTABLE  R16 R16 K26  ; R16 := R16[0x9f57dd7d]
114 [-]: GETGLOBAL R17 K27      ; R17 := mColors
115 [-]: GETTABLE  R17 R17 K28  ; R17 := R17["FloatingContentHighlight"]
116 [-]: CALL      R16 2 2      ; R16 := R16(R17)
117 [-]: LOADK     R17 K29      ; R17 := "\">"
118 [-]: MOVE      R18 R14      ; R18 := R14
119 [-]: LOADK     R19 K30      ; R19 := "</font>"
120 [-]: CONCAT    R15 R15 R19  ; R15 := R15 .. R16 .. R17 .. R18 .. R19
121 [-]: LOADK     R16 K31      ; R16 := "<p>"
122 [-]: GETGLOBAL R17 K32      ; R17 := 0xae91e43b
123 [-]: SELF      R17 R17 K33  ; R18 := R17; R17 := R17[0x42b04007]
124 [-]: LOADK     R19 K34      ; R19 := "/Lotus/Language/SystemMessages/OmegaActivateDesc"
125 [-]: LOADKB    R20 0 0      ; R20 := false
126 [-]: NEWTABLE  R21 0 2      ; R21 := {}
127 [-]: SETTABLE  R21 K35 R15  ; R21["COUNT"] := R15
128 [-]: GETTABLE  R22 R1 K15   ; R22 := R1["item"]
129 [-]: GETTABLE  R22 R22 K37  ; R22 := R22["mName"]
130 [-]: SETTABLE  R21 K36 R22  ; R21["ITEM"] := R22
131 [-]: CALL      R17 5 2      ; R17 := R17(R18,R19,R20,R21)
132 [-]: LOADK     R18 K38      ; R18 := "</p>"
133 [-]: CONCAT    R16 R16 R18  ; R16 := R16 .. R17 .. R18
134 [-]: SETTABLE  R13 K39 R16  ; R13["locString"] := R16
135 [-]: SETTABLE  R13 K40 K41  ; R13["firstString"] := "/Lotus/Language/Menu/ItemSelection_Equip"
136 [-]: SETTABLE  R13 K42 K43  ; R13["secondString"] := "/Lotus/Language/Menu/NavBar_Cancel"
137 [-]: SELF      R17 R13 K44  ; R18 := R13; R17 := R13[0xe6ccc5b9]
138 [-]: LOADK     R19 K45      ; R19 := "ActivateOmegaConfirm"
139 [-]: CALL      R17 3 1      ; R17(R18,R19)
140 [-]: GETTABLE  R17 R2 K47   ; R17 := R2["Id"]
141 [-]: SETGLOBAL R17 K46      ; mPendingInstallElementId := R17
142 [-]: GETTABLE  R17 R1 K15   ; R17 := R1["item"]
143 [-]: GETTABLE  R17 R17 K16  ; R17 := R17["mUpgradeItemType"]
144 [-]: SETGLOBAL R17 K48      ; mPendingInstallUpgradeType := R17
145 [-]: GETUPVAL  R17 U4       ; R17 := U4
146 [-]: GETTABLE  R17 R17 K49  ; R17 := R17[0xe99b84e7]
147 [-]: MOVE      R18 R13      ; R18 := R13
148 [-]: CALL      R17 2 2      ; R17 := R17(R18)
149 [-]: GETGLOBAL R18 K0       ; R18 := 0x7b998233
150 [-]: GETGLOBAL R19 K50      ; R19 := 0x1f7fe60a
151 [-]: CALL      R18 2 2      ; R18 := R18(R19)
152 [-]: TEST      R18 1        ; if R18 then PC := 162
153 [-]: JMP       162          ; PC := 162
154 [-]: SELF      R18 R17 K51  ; R19 := R17; R18 := R17[0xe4162eed]
155 [-]: LOADK     R20 K52      ; R20 := "SetImage"
156 [-]: GETGLOBAL R21 K50      ; R21 := 0x1f7fe60a
157 [-]: SELF      R21 R21 K53  ; R22 := R21; R21 := R21[0xed4e0128]
158 [-]: CALL      R21 2 2      ; R21 := R21(R22)
159 [-]: LOADK     R22 K54      ; R22 := ",768,384,nil,center,nil,-50"
160 [-]: CONCAT    R21 R21 R22  ; R21 := R21 .. R22
161 [-]: CALL      R18 4 1      ; R18(R19,R20,R21)
162 [-]: LOADKB    R18 0 0      ; R18 := false
163 [-]: RETURN    R18 2        ; return R18
164 [-]: GETGLOBAL R18 K1       ; R18 := mGameData
165 [-]: SELF      R18 R18 K55  ; R19 := R18; R18 := R18[0xefee6c91]
166 [-]: CALL      R18 2 2      ; R18 := R18(R19)
167 [-]: GETGLOBAL R19 K4       ; R19 := mInstalledGrid
168 [-]: EQ        0 R0 R19     ; if R0 ~= R19 then PC := 205
169 [-]: JMP       205          ; PC := 205
170 [-]: GETTABLE  R19 R1 K3    ; R19 := R1["element"]
171 [-]: GETTABLE  R19 R19 K7   ; R19 := R19["mCardIndex"]
172 [-]: EQ        1 R19 K56    ; if R19 == -1.000000 then PC := 205
173 [-]: JMP       205          ; PC := 205
174 [-]: GETGLOBAL R19 K6       ; R19 := mCards
175 [-]: GETTABLE  R20 R1 K3    ; R20 := R1["element"]
176 [-]: GETTABLE  R20 R20 K7   ; R20 := R20["mCardIndex"]
177 [-]: GETTABLE  R19 R19 R20  ; R19 := R19[R20]
178 [-]: GETTABLE  R19 R19 K57  ; R19 := R19["mLevelReq"]
179 [-]: LT        0 R18 R19    ; if R18 >= R19 then PC := 205
180 [-]: JMP       205          ; PC := 205
181 [-]: GETGLOBAL R19 K32      ; R19 := 0xae91e43b
182 [-]: SELF      R19 R19 K33  ; R20 := R19; R19 := R19[0x42b04007]
183 [-]: LOADK     R21 K58      ; R21 := "/Lotus/Language/Menu/Omega_MasteryLimitError"
184 [-]: LOADKB    R22 0 0      ; R22 := false
185 [-]: NEWTABLE  R23 0 2      ; R23 := {}
186 [-]: GETGLOBAL R24 K6       ; R24 := mCards
187 [-]: GETTABLE  R25 R1 K3    ; R25 := R1["element"]
188 [-]: GETTABLE  R25 R25 K7   ; R25 := R25["mCardIndex"]
189 [-]: GETTABLE  R24 R24 R25  ; R24 := R24[R25]
190 [-]: GETTABLE  R24 R24 K37  ; R24 := R24["mName"]
191 [-]: SETTABLE  R23 K59 R24  ; R23["MOD"] := R24
192 [-]: GETGLOBAL R24 K6       ; R24 := mCards
193 [-]: GETTABLE  R25 R1 K3    ; R25 := R1["element"]
194 [-]: GETTABLE  R25 R25 K7   ; R25 := R25["mCardIndex"]
195 [-]: GETTABLE  R24 R24 R25  ; R24 := R24[R25]
196 [-]: GETTABLE  R24 R24 K57  ; R24 := R24["mLevelReq"]
197 [-]: SETTABLE  R23 K60 R24  ; R23["RANK"] := R24
198 [-]: CALL      R19 5 2      ; R19 := R19(R20,R21,R22,R23)
199 [-]: GETUPVAL  R20 U4       ; R20 := U4
200 [-]: GETTABLE  R20 R20 K61  ; R20 := R20[0xa53f5e12]
201 [-]: MOVE      R21 R19      ; R21 := R19
202 [-]: CALL      R20 2 1      ; R20(R21)
203 [-]: LOADKB    R20 0 0      ; R20 := false
204 [-]: RETURN    R20 2        ; return R20
205 [-]: GETUPVAL  R20 U1       ; R20 := U1
206 [-]: GETTABLE  R20 R20 K8   ; R20 := R20["info"]
207 [-]: GETTABLE  R20 R20 K9   ; R20 := R20["mItemId"]
208 [-]: GETTABLE  R20 R20 K10  ; R20 := R20["mId"]
209 [-]: GETTABLE  R21 R1 K3    ; R21 := R1["element"]
210 [-]: NEWTABLE  R22 0 7      ; R22 := {}
211 [-]: GETTABLE  R23 R2 K7    ; R23 := R2["mCardIndex"]
212 [-]: SETTABLE  R22 K62 R23  ; R22["CardIndex"] := R23
213 [-]: GETTABLE  R23 R2 K37   ; R23 := R2["mName"]
214 [-]: SETTABLE  R22 K63 R23  ; R22["Name"] := R23
215 [-]: GETTABLE  R23 R2 K11   ; R23 := R2["mInstalled"]
216 [-]: SETTABLE  R22 K64 R23  ; R22["Installed"] := R23
217 [-]: GETTABLE  R23 R2 K66   ; R23 := R2["mInstalledLoadOutType"]
218 [-]: SETTABLE  R22 K65 R23  ; R22["InstalledLoadOutType"] := R23
219 [-]: GETTABLE  R23 R2 K68   ; R23 := R2["mInstalledType"]
220 [-]: SETTABLE  R22 K67 R23  ; R22["InstalledType"] := R23
221 [-]: GETTABLE  R23 R2 K70   ; R23 := R2["mInstalledName"]
222 [-]: SETTABLE  R22 K69 R23  ; R22["InstalledName"] := R23
223 [-]: GETTABLE  R23 R2 K72   ; R23 := R2["mModSet"]
224 [-]: SETTABLE  R22 K71 R23  ; R22["ModSet"] := R23
225 [-]: GETTABLE  R23 R21 K7   ; R23 := R21["mCardIndex"]
226 [-]: SETTABLE  R2 K7 R23    ; R2["mCardIndex"] := R23
227 [-]: GETTABLE  R23 R21 K37  ; R23 := R21["mName"]
228 [-]: SETTABLE  R2 K37 R23   ; R2["mName"] := R23
229 [-]: GETTABLE  R23 R21 K11  ; R23 := R21["mInstalled"]
230 [-]: SETTABLE  R2 K11 R23   ; R2["mInstalled"] := R23
231 [-]: GETTABLE  R23 R21 K66  ; R23 := R21["mInstalledLoadOutType"]
232 [-]: SETTABLE  R2 K66 R23   ; R2["mInstalledLoadOutType"] := R23
233 [-]: GETTABLE  R23 R21 K68  ; R23 := R21["mInstalledType"]
234 [-]: SETTABLE  R2 K68 R23   ; R2["mInstalledType"] := R23
235 [-]: GETTABLE  R23 R21 K70  ; R23 := R21["mInstalledName"]
236 [-]: SETTABLE  R2 K70 R23   ; R2["mInstalledName"] := R23
237 [-]: GETTABLE  R23 R21 K72  ; R23 := R21["mModSet"]
238 [-]: SETTABLE  R2 K72 R23   ; R2["mModSet"] := R23
239 [-]: GETTABLE  R23 R22 K62  ; R23 := R22["CardIndex"]
240 [-]: SETTABLE  R21 K7 R23   ; R21["mCardIndex"] := R23
241 [-]: GETTABLE  R23 R22 K63  ; R23 := R22["Name"]
242 [-]: SETTABLE  R21 K37 R23  ; R21["mName"] := R23
243 [-]: GETTABLE  R23 R22 K64  ; R23 := R22["Installed"]
244 [-]: SETTABLE  R21 K11 R23  ; R21["mInstalled"] := R23
245 [-]: GETTABLE  R23 R22 K65  ; R23 := R22["InstalledLoadOutType"]
246 [-]: SETTABLE  R21 K66 R23  ; R21["mInstalledLoadOutType"] := R23
247 [-]: GETTABLE  R23 R22 K67  ; R23 := R22["InstalledType"]
248 [-]: SETTABLE  R21 K68 R23  ; R21["mInstalledType"] := R23
249 [-]: GETTABLE  R23 R22 K69  ; R23 := R22["InstalledName"]
250 [-]: SETTABLE  R21 K70 R23  ; R21["mInstalledName"] := R23
251 [-]: GETTABLE  R23 R22 K71  ; R23 := R22["ModSet"]
252 [-]: SETTABLE  R21 K72 R23  ; R21["mModSet"] := R23
253 [-]: LOADNIL   R23 R24      ; R23 := R24 := nil
254 [-]: GETTABLE  R25 R2 K7    ; R25 := R2["mCardIndex"]
255 [-]: LT        0 K73 R25    ; if 0.000000 >= R25 then PC := 296
256 [-]: JMP       296          ; PC := 296
257 [-]: GETGLOBAL R25 K6       ; R25 := mCards
258 [-]: GETTABLE  R26 R2 K7    ; R26 := R2["mCardIndex"]
259 [-]: GETTABLE  R23 R25 R26  ; R23 := R25[R26]
260 [-]: GETGLOBAL R25 K6       ; R25 := mCards
261 [-]: GETTABLE  R26 R2 K7    ; R26 := R2["mCardIndex"]
262 [-]: GETTABLE  R25 R25 R26  ; R25 := R25[R26]
263 [-]: GETGLOBAL R26 K6       ; R26 := mCards
264 [-]: GETTABLE  R27 R2 K7    ; R27 := R2["mCardIndex"]
265 [-]: GETTABLE  R26 R26 R27  ; R26 := R26[R27]
266 [-]: GETTABLE  R26 R26 K11  ; R26 := R26["mInstalled"]
267 [-]: GETTABLE  R26 R26 R20  ; R26 := R26[R20]
268 [-]: SETTABLE  R25 K74 R26  ; R25["mPriorInstalled"] := R26
269 [-]: GETGLOBAL R25 K6       ; R25 := mCards
270 [-]: GETTABLE  R26 R2 K7    ; R26 := R2["mCardIndex"]
271 [-]: GETTABLE  R25 R25 R26  ; R25 := R25[R26]
272 [-]: GETTABLE  R25 R25 K11  ; R25 := R25["mInstalled"]
273 [-]: GETUPVAL  R26 U4       ; R26 := U4
274 [-]: GETTABLE  R26 R26 K75  ; R26 := R26[0x06d055f9]
275 [-]: GETGLOBAL R27 K4       ; R27 := mInstalledGrid
276 [-]: EQ        0 R0 R27     ; if R0 ~= R27 then PC := 279
277 [-]: JMP       279          ; PC := 279
278 [-]: LOADKB    R27 0 1      ; R27 := false; PC := 279
279 [-]: LOADKB    R27 1 0      ; R27 := true
280 [-]: LOADNIL   R28 R28      ; R28 := nil
281 [-]: GETTABLE  R29 R2 K47   ; R29 := R2["Id"]
282 [-]: CALL      R26 4 2      ; R26 := R26(R27,R28,R29)
283 [-]: SETTABLE  R25 R20 R26  ; R25[R20] := R26
284 [-]: GETGLOBAL R25 K76      ; R25 := 0x3d106989
285 [-]: LOADK     R26 K77      ; R26 := "installed mod: "
286 [-]: GETTABLE  R27 R23 K37  ; R27 := R23["mName"]
287 [-]: LOADK     R28 K78      ; R28 := " ("
288 [-]: GETGLOBAL R29 K79      ; R29 := 0x64fb1586
289 [-]: GETTABLE  R30 R23 K16  ; R30 := R23["mUpgradeItemType"]
290 [-]: SELF      R30 R30 K53  ; R31 := R30; R30 := R30[0xed4e0128]
291 [-]: CALL      R30 2 0      ; R30,... := R30(R31)
292 [-]: CALL      R29 0 2      ; R29 := R29(R30,...)
293 [-]: LOADK     R30 K80      ; R30 := ")"
294 [-]: CONCAT    R26 R26 R30  ; R26 := R26 .. R27 .. R28 .. R29 .. R30
295 [-]: CALL      R25 2 1      ; R25(R26)
296 [-]: GETTABLE  R25 R1 K3    ; R25 := R1["element"]
297 [-]: GETTABLE  R25 R25 K7   ; R25 := R25["mCardIndex"]
298 [-]: LT        0 K73 R25    ; if 0.000000 >= R25 then PC := 333
299 [-]: JMP       333          ; PC := 333
300 [-]: GETGLOBAL R25 K6       ; R25 := mCards
301 [-]: GETTABLE  R26 R1 K3    ; R26 := R1["element"]
302 [-]: GETTABLE  R26 R26 K7   ; R26 := R26["mCardIndex"]
303 [-]: GETTABLE  R24 R25 R26  ; R24 := R25[R26]
304 [-]: GETGLOBAL R25 K6       ; R25 := mCards
305 [-]: GETTABLE  R26 R1 K3    ; R26 := R1["element"]
306 [-]: GETTABLE  R26 R26 K7   ; R26 := R26["mCardIndex"]
307 [-]: GETTABLE  R25 R25 R26  ; R25 := R25[R26]
308 [-]: GETGLOBAL R26 K6       ; R26 := mCards
309 [-]: GETTABLE  R27 R1 K3    ; R27 := R1["element"]
310 [-]: GETTABLE  R27 R27 K7   ; R27 := R27["mCardIndex"]
311 [-]: GETTABLE  R26 R26 R27  ; R26 := R26[R27]
312 [-]: GETTABLE  R26 R26 K11  ; R26 := R26["mInstalled"]
313 [-]: GETTABLE  R26 R26 R20  ; R26 := R26[R20]
314 [-]: SETTABLE  R25 K74 R26  ; R25["mPriorInstalled"] := R26
315 [-]: GETGLOBAL R25 K6       ; R25 := mCards
316 [-]: GETTABLE  R26 R1 K3    ; R26 := R1["element"]
317 [-]: GETTABLE  R26 R26 K7   ; R26 := R26["mCardIndex"]
318 [-]: GETTABLE  R25 R25 R26  ; R25 := R25[R26]
319 [-]: GETTABLE  R25 R25 K11  ; R25 := R25["mInstalled"]
320 [-]: GETUPVAL  R26 U4       ; R26 := U4
321 [-]: GETTABLE  R26 R26 K75  ; R26 := R26[0x06d055f9]
322 [-]: GETTABLE  R27 R1 K81   ; R27 := R1["grid"]
323 [-]: GETGLOBAL R28 K4       ; R28 := mInstalledGrid
324 [-]: EQ        0 R27 R28    ; if R27 ~= R28 then PC := 327
325 [-]: JMP       327          ; PC := 327
326 [-]: LOADKB    R27 0 1      ; R27 := false; PC := 327
327 [-]: LOADKB    R27 1 0      ; R27 := true
328 [-]: LOADNIL   R28 R28      ; R28 := nil
329 [-]: GETTABLE  R29 R1 K3    ; R29 := R1["element"]
330 [-]: GETTABLE  R29 R29 K47  ; R29 := R29["Id"]
331 [-]: CALL      R26 4 2      ; R26 := R26(R27,R28,R29)
332 [-]: SETTABLE  R25 R20 R26  ; R25[R20] := R26
333 [-]: GETUPVAL  R25 U5       ; R25 := U5
334 [-]: TESTSET   R26 R3 1     ; if R3 then PC := 337 else R26 := R3
335 [-]: JMP       337          ; PC := 337
336 [-]: MOVE      R26 R4       ; R26 := R4
337 [-]: CALL      R25 2 2      ; R25 := R25(R26)
338 [-]: TEST      R25 1        ; if R25 then PC := 563
339 [-]: JMP       563          ; PC := 563
340 [-]: GETUPVAL  R25 U6       ; R25 := U6
341 [-]: CALL      R25 1 2      ; R25 := R25()
342 [-]: TEST      R25 0        ; if not R25 then PC := 362
343 [-]: JMP       362          ; PC := 362
344 [-]: GETTABLE  R25 R23 K82  ; R25 := R23["mIsStance"]
345 [-]: TEST      R25 0        ; if not R25 then PC := 362
346 [-]: JMP       362          ; PC := 362
347 [-]: GETGLOBAL R25 K0       ; R25 := 0x7b998233
348 [-]: GETUPVAL  R26 U1       ; R26 := U1
349 [-]: GETTABLE  R26 R26 K15  ; R26 := R26["item"]
350 [-]: CALL      R25 2 2      ; R25 := R25(R26)
351 [-]: TEST      R25 1        ; if R25 then PC := 362
352 [-]: JMP       362          ; PC := 362
353 [-]: GETUPVAL  R25 U1       ; R25 := U1
354 [-]: GETTABLE  R25 R25 K15  ; R25 := R25["item"]
355 [-]: SELF      R25 R25 K83  ; R26 := R25; R25 := R25[0x78c595ae]
356 [-]: GETGLOBAL R27 K84      ; R27 := 0x0469f296
357 [-]: LOADK     R28 K85      ; R28 := "POWER_WEAPON"
358 [-]: CALL      R27 2 0      ; R27,... := R27(R28)
359 [-]: CALL      R25 0 2      ; R25 := R25(R26,...)
360 [-]: TEST      R25 1        ; if R25 then PC := 563
361 [-]: JMP       563          ; PC := 563
362 [-]: GETGLOBAL R25 K86      ; R25 := mCollectionGrid
363 [-]: EQ        0 R0 R25     ; if R0 ~= R25 then PC := 377
364 [-]: JMP       377          ; PC := 377
365 [-]: GETTABLE  R25 R22 K62  ; R25 := R22["CardIndex"]
366 [-]: EQ        0 R25 K56    ; if R25 ~= -1.000000 then PC := 377
367 [-]: JMP       377          ; PC := 377
368 [-]: TEST      R23 0        ; if not R23 then PC := 560
369 [-]: JMP       560          ; PC := 560
370 [-]: GETTABLE  R25 R23 K87  ; R25 := R23["mType"]
371 [-]: EQ        1 R25 K88    ; if R25 == "AURA" then PC := 377
372 [-]: JMP       377          ; PC := 377
373 [-]: GETTABLE  R25 R23 K82  ; R25 := R23["mIsStance"]
374 [-]: TEST      R25 1        ; if R25 then PC := 377
375 [-]: JMP       377          ; PC := 377
376 [-]: JMP       560          ; PC := 560
377 [-]: TEST      R3 1         ; if R3 then PC := 429
378 [-]: JMP       429          ; PC := 429
379 [-]: TEST      R4 1         ; if R4 then PC := 429
380 [-]: JMP       429          ; PC := 429
381 [-]: GETGLOBAL R25 K4       ; R25 := mInstalledGrid
382 [-]: EQ        0 R0 R25     ; if R0 ~= R25 then PC := 411
383 [-]: JMP       411          ; PC := 411
384 [-]: GETGLOBAL R25 K89      ; R25 := mUpdateStatFailType
385 [-]: EQ        0 R25 K20    ; if R25 ~= 1.000000 then PC := 411
386 [-]: JMP       411          ; PC := 411
387 [-]: GETTABLE  R25 R2 K14   ; R25 := R2["mClipName"]
388 [-]: EQ        1 R25 K12    ; if R25 == nil then PC := 400
389 [-]: JMP       400          ; PC := 400
390 [-]: GETUPVAL  R25 U2       ; R25 := U2
391 [-]: GETTABLE  R26 R2 K14   ; R26 := R2["mClipName"]
392 [-]: LOADK     R27 K90      ; R27 := ".SocketType"
393 [-]: CONCAT    R26 R26 R27  ; R26 := R26 .. R27
394 [-]: CALL      R25 2 1      ; R25(R26)
395 [-]: GETUPVAL  R25 U2       ; R25 := U2
396 [-]: GETTABLE  R26 R2 K14   ; R26 := R2["mClipName"]
397 [-]: LOADK     R27 K91      ; R27 := ".SocketTypeBacker"
398 [-]: CONCAT    R26 R26 R27  ; R26 := R26 .. R27
399 [-]: CALL      R25 2 1      ; R25(R26)
400 [-]: GETTABLE  R25 R1 K3    ; R25 := R1["element"]
401 [-]: GETTABLE  R25 R25 K14  ; R25 := R25["mClipName"]
402 [-]: EQ        1 R25 K12    ; if R25 == nil then PC := 429
403 [-]: JMP       429          ; PC := 429
404 [-]: GETUPVAL  R25 U2       ; R25 := U2
405 [-]: GETTABLE  R26 R1 K3    ; R26 := R1["element"]
406 [-]: GETTABLE  R26 R26 K14  ; R26 := R26["mClipName"]
407 [-]: LOADK     R27 K92      ; R27 := ".Card.TopCenterIcon"
408 [-]: CONCAT    R26 R26 R27  ; R26 := R26 .. R27
409 [-]: CALL      R25 2 1      ; R25(R26)
410 [-]: JMP       429          ; PC := 429
411 [-]: GETTABLE  R25 R2 K14   ; R25 := R2["mClipName"]
412 [-]: EQ        1 R25 K12    ; if R25 == nil then PC := 419
413 [-]: JMP       419          ; PC := 419
414 [-]: GETUPVAL  R25 U2       ; R25 := U2
415 [-]: GETTABLE  R26 R2 K14   ; R26 := R2["mClipName"]
416 [-]: LOADK     R27 K93      ; R27 := ".Card.TopInfo.Cost"
417 [-]: CONCAT    R26 R26 R27  ; R26 := R26 .. R27
418 [-]: CALL      R25 2 1      ; R25(R26)
419 [-]: GETTABLE  R25 R1 K3    ; R25 := R1["element"]
420 [-]: GETTABLE  R25 R25 K14  ; R25 := R25["mClipName"]
421 [-]: EQ        1 R25 K12    ; if R25 == nil then PC := 429
422 [-]: JMP       429          ; PC := 429
423 [-]: GETUPVAL  R25 U2       ; R25 := U2
424 [-]: GETTABLE  R26 R1 K3    ; R26 := R1["element"]
425 [-]: GETTABLE  R26 R26 K14  ; R26 := R26["mClipName"]
426 [-]: LOADK     R27 K94      ; R27 := ".Card.TopInfo"
427 [-]: CONCAT    R26 R26 R27  ; R26 := R26 .. R27
428 [-]: CALL      R25 2 1      ; R25(R26)
429 [-]: NEWTABLE  R25 0 7      ; R25 := {}
430 [-]: GETTABLE  R26 R2 K7    ; R26 := R2["mCardIndex"]
431 [-]: SETTABLE  R25 K62 R26  ; R25["CardIndex"] := R26
432 [-]: GETTABLE  R26 R2 K37   ; R26 := R2["mName"]
433 [-]: SETTABLE  R25 K63 R26  ; R25["Name"] := R26
434 [-]: GETTABLE  R26 R2 K11   ; R26 := R2["mInstalled"]
435 [-]: SETTABLE  R25 K64 R26  ; R25["Installed"] := R26
436 [-]: GETTABLE  R26 R2 K66   ; R26 := R2["mInstalledLoadOutType"]
437 [-]: SETTABLE  R25 K65 R26  ; R25["InstalledLoadOutType"] := R26
438 [-]: GETTABLE  R26 R2 K68   ; R26 := R2["mInstalledType"]
439 [-]: SETTABLE  R25 K67 R26  ; R25["InstalledType"] := R26
440 [-]: GETTABLE  R26 R2 K70   ; R26 := R2["mInstalledName"]
441 [-]: SETTABLE  R25 K69 R26  ; R25["InstalledName"] := R26
442 [-]: GETTABLE  R26 R2 K72   ; R26 := R2["mModSet"]
443 [-]: SETTABLE  R25 K71 R26  ; R25["ModSet"] := R26
444 [-]: MOVE      R22 R25      ; R22 := R25
445 [-]: GETTABLE  R25 R21 K7   ; R25 := R21["mCardIndex"]
446 [-]: SETTABLE  R2 K7 R25    ; R2["mCardIndex"] := R25
447 [-]: GETTABLE  R25 R21 K37  ; R25 := R21["mName"]
448 [-]: SETTABLE  R2 K37 R25   ; R2["mName"] := R25
449 [-]: GETTABLE  R25 R21 K11  ; R25 := R21["mInstalled"]
450 [-]: SETTABLE  R2 K11 R25   ; R2["mInstalled"] := R25
451 [-]: GETTABLE  R25 R21 K66  ; R25 := R21["mInstalledLoadOutType"]
452 [-]: SETTABLE  R2 K66 R25   ; R2["mInstalledLoadOutType"] := R25
453 [-]: GETTABLE  R25 R21 K68  ; R25 := R21["mInstalledType"]
454 [-]: SETTABLE  R2 K68 R25   ; R2["mInstalledType"] := R25
455 [-]: GETTABLE  R25 R21 K70  ; R25 := R21["mInstalledName"]
456 [-]: SETTABLE  R2 K70 R25   ; R2["mInstalledName"] := R25
457 [-]: GETTABLE  R25 R21 K72  ; R25 := R21["mModSet"]
458 [-]: SETTABLE  R2 K72 R25   ; R2["mModSet"] := R25
459 [-]: GETTABLE  R25 R22 K62  ; R25 := R22["CardIndex"]
460 [-]: SETTABLE  R21 K7 R25   ; R21["mCardIndex"] := R25
461 [-]: GETTABLE  R25 R22 K63  ; R25 := R22["Name"]
462 [-]: SETTABLE  R21 K37 R25  ; R21["mName"] := R25
463 [-]: GETTABLE  R25 R22 K64  ; R25 := R22["Installed"]
464 [-]: SETTABLE  R21 K11 R25  ; R21["mInstalled"] := R25
465 [-]: GETTABLE  R25 R22 K65  ; R25 := R22["InstalledLoadOutType"]
466 [-]: SETTABLE  R21 K66 R25  ; R21["mInstalledLoadOutType"] := R25
467 [-]: GETTABLE  R25 R22 K67  ; R25 := R22["InstalledType"]
468 [-]: SETTABLE  R21 K68 R25  ; R21["mInstalledType"] := R25
469 [-]: GETTABLE  R25 R22 K69  ; R25 := R22["InstalledName"]
470 [-]: SETTABLE  R21 K70 R25  ; R21["mInstalledName"] := R25
471 [-]: GETTABLE  R25 R22 K71  ; R25 := R22["ModSet"]
472 [-]: SETTABLE  R21 K72 R25  ; R21["mModSet"] := R25
473 [-]: GETTABLE  R25 R2 K7    ; R25 := R2["mCardIndex"]
474 [-]: LT        0 K73 R25    ; if 0.000000 >= R25 then PC := 503
475 [-]: JMP       503          ; PC := 503
476 [-]: GETGLOBAL R25 K6       ; R25 := mCards
477 [-]: GETTABLE  R26 R2 K7    ; R26 := R2["mCardIndex"]
478 [-]: GETTABLE  R23 R25 R26  ; R23 := R25[R26]
479 [-]: GETGLOBAL R25 K6       ; R25 := mCards
480 [-]: GETTABLE  R26 R2 K7    ; R26 := R2["mCardIndex"]
481 [-]: GETTABLE  R25 R25 R26  ; R25 := R25[R26]
482 [-]: GETGLOBAL R26 K6       ; R26 := mCards
483 [-]: GETTABLE  R27 R2 K7    ; R27 := R2["mCardIndex"]
484 [-]: GETTABLE  R26 R26 R27  ; R26 := R26[R27]
485 [-]: GETTABLE  R26 R26 K11  ; R26 := R26["mInstalled"]
486 [-]: GETTABLE  R26 R26 R20  ; R26 := R26[R20]
487 [-]: SETTABLE  R25 K74 R26  ; R25["mPriorInstalled"] := R26
488 [-]: GETGLOBAL R25 K6       ; R25 := mCards
489 [-]: GETTABLE  R26 R2 K7    ; R26 := R2["mCardIndex"]
490 [-]: GETTABLE  R25 R25 R26  ; R25 := R25[R26]
491 [-]: GETTABLE  R25 R25 K11  ; R25 := R25["mInstalled"]
492 [-]: GETUPVAL  R26 U4       ; R26 := U4
493 [-]: GETTABLE  R26 R26 K75  ; R26 := R26[0x06d055f9]
494 [-]: GETGLOBAL R27 K4       ; R27 := mInstalledGrid
495 [-]: EQ        0 R0 R27     ; if R0 ~= R27 then PC := 498
496 [-]: JMP       498          ; PC := 498
497 [-]: LOADKB    R27 0 1      ; R27 := false; PC := 498
498 [-]: LOADKB    R27 1 0      ; R27 := true
499 [-]: LOADNIL   R28 R28      ; R28 := nil
500 [-]: GETTABLE  R29 R2 K47   ; R29 := R2["Id"]
501 [-]: CALL      R26 4 2      ; R26 := R26(R27,R28,R29)
502 [-]: SETTABLE  R25 R20 R26  ; R25[R20] := R26
503 [-]: GETTABLE  R25 R1 K3    ; R25 := R1["element"]
504 [-]: GETTABLE  R25 R25 K7   ; R25 := R25["mCardIndex"]
505 [-]: LT        0 K73 R25    ; if 0.000000 >= R25 then PC := 540
506 [-]: JMP       540          ; PC := 540
507 [-]: GETGLOBAL R25 K6       ; R25 := mCards
508 [-]: GETTABLE  R26 R1 K3    ; R26 := R1["element"]
509 [-]: GETTABLE  R26 R26 K7   ; R26 := R26["mCardIndex"]
510 [-]: GETTABLE  R24 R25 R26  ; R24 := R25[R26]
511 [-]: GETGLOBAL R25 K6       ; R25 := mCards
512 [-]: GETTABLE  R26 R1 K3    ; R26 := R1["element"]
513 [-]: GETTABLE  R26 R26 K7   ; R26 := R26["mCardIndex"]
514 [-]: GETTABLE  R25 R25 R26  ; R25 := R25[R26]
515 [-]: GETGLOBAL R26 K6       ; R26 := mCards
516 [-]: GETTABLE  R27 R1 K3    ; R27 := R1["element"]
517 [-]: GETTABLE  R27 R27 K7   ; R27 := R27["mCardIndex"]
518 [-]: GETTABLE  R26 R26 R27  ; R26 := R26[R27]
519 [-]: GETTABLE  R26 R26 K11  ; R26 := R26["mInstalled"]
520 [-]: GETTABLE  R26 R26 R20  ; R26 := R26[R20]
521 [-]: SETTABLE  R25 K74 R26  ; R25["mPriorInstalled"] := R26
522 [-]: GETGLOBAL R25 K6       ; R25 := mCards
523 [-]: GETTABLE  R26 R1 K3    ; R26 := R1["element"]
524 [-]: GETTABLE  R26 R26 K7   ; R26 := R26["mCardIndex"]
525 [-]: GETTABLE  R25 R25 R26  ; R25 := R25[R26]
526 [-]: GETTABLE  R25 R25 K11  ; R25 := R25["mInstalled"]
527 [-]: GETUPVAL  R26 U4       ; R26 := U4
528 [-]: GETTABLE  R26 R26 K75  ; R26 := R26[0x06d055f9]
529 [-]: GETTABLE  R27 R1 K81   ; R27 := R1["grid"]
530 [-]: GETGLOBAL R28 K4       ; R28 := mInstalledGrid
531 [-]: EQ        0 R27 R28    ; if R27 ~= R28 then PC := 534
532 [-]: JMP       534          ; PC := 534
533 [-]: LOADKB    R27 0 1      ; R27 := false; PC := 534
534 [-]: LOADKB    R27 1 0      ; R27 := true
535 [-]: LOADNIL   R28 R28      ; R28 := nil
536 [-]: GETTABLE  R29 R1 K3    ; R29 := R1["element"]
537 [-]: GETTABLE  R29 R29 K47  ; R29 := R29["Id"]
538 [-]: CALL      R26 4 2      ; R26 := R26(R27,R28,R29)
539 [-]: SETTABLE  R25 R20 R26  ; R25[R20] := R26
540 [-]: GETTABLE  R25 R1 K3    ; R25 := R1["element"]
541 [-]: GETTABLE  R25 R25 K14  ; R25 := R25["mClipName"]
542 [-]: EQ        1 R25 K12    ; if R25 == nil then PC := 548
543 [-]: JMP       548          ; PC := 548
544 [-]: GETTABLE  R25 R1 K81   ; R25 := R1["grid"]
545 [-]: GETTABLE  R25 R25 K95  ; R25 := R25[0xb15e6aca]
546 [-]: GETTABLE  R26 R1 K3    ; R26 := R1["element"]
547 [-]: CALL      R25 2 1      ; R25(R26)
548 [-]: GETUPVAL  R25 U5       ; R25 := U5
549 [-]: MOVE      R26 R3       ; R26 := R3
550 [-]: CALL      R25 2 1      ; R25(R26)
551 [-]: TEST      R3 1         ; if R3 then PC := 560
552 [-]: JMP       560          ; PC := 560
553 [-]: TEST      R4 1         ; if R4 then PC := 560
554 [-]: JMP       560          ; PC := 560
555 [-]: GETUPVAL  R25 U4       ; R25 := U4
556 [-]: GETTABLE  R25 R25 K96  ; R25 := R25[0x659d451f]
557 [-]: GETGLOBAL R26 K97      ; R26 := 0x0032441c
558 [-]: GETTABLE  R26 R26 K98  ; R26 := R26["UISound_Error"]
559 [-]: CALL      R25 2 1      ; R25(R26)
560 [-]: LOADKB    R25 0 0      ; R25 := false
561 [-]: RETURN    R25 2        ; return R25
562 [-]: JMP       662          ; PC := 662
563 [-]: LOADNIL   R25 R25      ; R25 := nil
564 [-]: GETGLOBAL R26 K86      ; R26 := mCollectionGrid
565 [-]: EQ        0 R0 R26     ; if R0 ~= R26 then PC := 569
566 [-]: JMP       569          ; PC := 569
567 [-]: MOVE      R25 R2       ; R25 := R2
568 [-]: JMP       570          ; PC := 570
569 [-]: GETTABLE  R25 R1 K3    ; R25 := R1["element"]
570 [-]: GETTABLE  R26 R25 K7   ; R26 := R25["mCardIndex"]
571 [-]: LE        0 R26 K73    ; if R26 > 0.000000 then PC := 576
572 [-]: JMP       576          ; PC := 576
573 [-]: GETGLOBAL R26 K100     ; R26 := mFillerCategories
574 [-]: SETTABLE  R25 K99 R26  ; R25["Categories"] := R26
575 [-]: JMP       582          ; PC := 582
576 [-]: GETUPVAL  R26 U7       ; R26 := U7
577 [-]: GETGLOBAL R27 K6       ; R27 := mCards
578 [-]: GETTABLE  R28 R25 K7   ; R28 := R25["mCardIndex"]
579 [-]: GETTABLE  R27 R27 R28  ; R27 := R27[R28]
580 [-]: CALL      R26 2 2      ; R26 := R26(R27)
581 [-]: SETTABLE  R25 K99 R26  ; R25["Categories"] := R26
582 [-]: GETTABLE  R26 R2 K7    ; R26 := R2["mCardIndex"]
583 [-]: LT        0 K73 R26    ; if 0.000000 >= R26 then PC := 604
584 [-]: JMP       604          ; PC := 604
585 [-]: GETGLOBAL R26 K6       ; R26 := mCards
586 [-]: GETTABLE  R27 R2 K7    ; R27 := R2["mCardIndex"]
587 [-]: GETTABLE  R26 R26 R27  ; R26 := R26[R27]
588 [-]: SETTABLE  R26 K13 R2   ; R26["mElement"] := R2
589 [-]: GETUPVAL  R26 U8       ; R26 := U8
590 [-]: GETGLOBAL R27 K6       ; R27 := mCards
591 [-]: GETTABLE  R28 R2 K7    ; R28 := R2["mCardIndex"]
592 [-]: GETTABLE  R27 R27 R28  ; R27 := R27[R28]
593 [-]: CALL      R26 2 1      ; R26(R27)
594 [-]: GETGLOBAL R26 K86      ; R26 := mCollectionGrid
595 [-]: EQ        0 R0 R26     ; if R0 ~= R26 then PC := 604
596 [-]: JMP       604          ; PC := 604
597 [-]: GETUPVAL  R26 U0       ; R26 := U0
598 [-]: GETTABLE  R26 R26 K102 ; R26 := R26[0x1ac299fb]
599 [-]: GETGLOBAL R27 K6       ; R27 := mCards
600 [-]: GETTABLE  R28 R2 K7    ; R28 := R2["mCardIndex"]
601 [-]: GETTABLE  R27 R27 R28  ; R27 := R27[R28]
602 [-]: CALL      R26 2 2      ; R26 := R26(R27)
603 [-]: SETTABLE  R2 K101 R26  ; R2["SearchCache"] := R26
604 [-]: GETTABLE  R26 R1 K3    ; R26 := R1["element"]
605 [-]: GETTABLE  R26 R26 K7   ; R26 := R26["mCardIndex"]
606 [-]: LT        0 K73 R26    ; if 0.000000 >= R26 then PC := 621
607 [-]: JMP       621          ; PC := 621
608 [-]: GETGLOBAL R26 K6       ; R26 := mCards
609 [-]: GETTABLE  R27 R1 K3    ; R27 := R1["element"]
610 [-]: GETTABLE  R27 R27 K7   ; R27 := R27["mCardIndex"]
611 [-]: GETTABLE  R26 R26 R27  ; R26 := R26[R27]
612 [-]: GETTABLE  R27 R1 K3    ; R27 := R1["element"]
613 [-]: SETTABLE  R26 K13 R27  ; R26["mElement"] := R27
614 [-]: GETUPVAL  R26 U8       ; R26 := U8
615 [-]: GETGLOBAL R27 K6       ; R27 := mCards
616 [-]: GETTABLE  R28 R1 K3    ; R28 := R1["element"]
617 [-]: GETTABLE  R28 R28 K7   ; R28 := R28["mCardIndex"]
618 [-]: GETTABLE  R27 R27 R28  ; R27 := R27[R28]
619 [-]: CALL      R26 2 1      ; R26(R27)
620 [-]: JMP       626          ; PC := 626
621 [-]: GETGLOBAL R26 K4       ; R26 := mInstalledGrid
622 [-]: EQ        0 R0 R26     ; if R0 ~= R26 then PC := 626
623 [-]: JMP       626          ; PC := 626
624 [-]: GETTABLE  R26 R1 K3    ; R26 := R1["element"]
625 [-]: SETTABLE  R26 K101 K103; R26["SearchCache"] := ""
626 [-]: GETGLOBAL R26 K4       ; R26 := mInstalledGrid
627 [-]: EQ        0 R0 R26     ; if R0 ~= R26 then PC := 655
628 [-]: JMP       655          ; PC := 655
629 [-]: GETUPVAL  R26 U0       ; R26 := U0
630 [-]: GETTABLE  R26 R26 K5   ; R26 := R26[0x04213f13]
631 [-]: GETGLOBAL R27 K6       ; R27 := mCards
632 [-]: GETTABLE  R28 R2 K7    ; R28 := R2["mCardIndex"]
633 [-]: GETTABLE  R27 R27 R28  ; R27 := R27[R28]
634 [-]: CALL      R26 2 2      ; R26 := R26(R27)
635 [-]: TEST      R26 0        ; if not R26 then PC := 655
636 [-]: JMP       655          ; PC := 655
637 [-]: GETGLOBAL R26 K0       ; R26 := 0x7b998233
638 [-]: GETGLOBAL R27 K104     ; R27 := _T
639 [-]: GETTABLE  R27 R27 K105 ; R27 := R27["OnOmegaEvent"]
640 [-]: CALL      R26 2 2      ; R26 := R26(R27)
641 [-]: TEST      R26 1        ; if R26 then PC := 655
642 [-]: JMP       655          ; PC := 655
643 [-]: GETGLOBAL R26 K104     ; R26 := _T
644 [-]: GETTABLE  R26 R26 K106 ; R26 := R26[0x134cd82a]
645 [-]: GETUPVAL  R27 U4       ; R27 := U4
646 [-]: GETTABLE  R27 R27 K75  ; R27 := R27[0x06d055f9]
647 [-]: GETGLOBAL R28 K6       ; R28 := mCards
648 [-]: GETTABLE  R29 R2 K7    ; R29 := R2["mCardIndex"]
649 [-]: GETTABLE  R28 R28 R29  ; R28 := R28[R29]
650 [-]: GETTABLE  R28 R28 K107 ; R28 := R28["mIdentified"]
651 [-]: LOADK     R29 K108     ; R29 := "InstallIdentified"
652 [-]: LOADK     R30 K109     ; R30 := "InstallUnidentified"
653 [-]: CALL      R27 4 0      ; R27,... := R27(R28,R29,R30)
654 [-]: CALL      R26 0 1      ; R26(R27,...)
655 [-]: GETUPVAL  R26 U9       ; R26 := U9
656 [-]: CALL      R26 1 2      ; R26 := R26()
657 [-]: TEST      R26 0        ; if not R26 then PC := 662
658 [-]: JMP       662          ; PC := 662
659 [-]: GETGLOBAL R26 K110     ; R26 := mAvionicCategories
660 [-]: SELF      R26 R26 K111 ; R27 := R26; R26 := R26[0xb52a46b7]
661 [-]: CALL      R26 2 1      ; R26(R27)
662 [-]: GETTABLE  R26 R1 K3    ; R26 := R1["element"]
663 [-]: EQ        1 R2 R26     ; if R2 == R26 then PC := 682
664 [-]: JMP       682          ; PC := 682
665 [-]: GETGLOBAL R26 K4       ; R26 := mInstalledGrid
666 [-]: EQ        1 R0 R26     ; if R0 == R26 then PC := 672
667 [-]: JMP       672          ; PC := 672
668 [-]: GETTABLE  R26 R1 K81   ; R26 := R1["grid"]
669 [-]: GETGLOBAL R27 K4       ; R27 := mInstalledGrid
670 [-]: EQ        0 R26 R27    ; if R26 ~= R27 then PC := 682
671 [-]: JMP       682          ; PC := 682
672 [-]: LOADKB    R26 1 0      ; R26 := true
673 [-]: SETGLOBAL R26 K112     ; mChanged := R26
674 [-]: TEST      R3 1         ; if R3 then PC := 682
675 [-]: JMP       682          ; PC := 682
676 [-]: GETUPVAL  R26 U10      ; R26 := U10
677 [-]: MOVE      R27 R2       ; R27 := R2
678 [-]: CALL      R26 2 1      ; R26(R27)
679 [-]: GETUPVAL  R26 U10      ; R26 := U10
680 [-]: GETTABLE  R27 R1 K3    ; R27 := R1["element"]
681 [-]: CALL      R26 2 1      ; R26(R27)
682 [-]: GETTABLE  R26 R1 K3    ; R26 := R1["element"]
683 [-]: EQ        1 R2 R26     ; if R2 == R26 then PC := 736
684 [-]: JMP       736          ; PC := 736
685 [-]: GETGLOBAL R26 K4       ; R26 := mInstalledGrid
686 [-]: EQ        0 R0 R26     ; if R0 ~= R26 then PC := 698
687 [-]: JMP       698          ; PC := 698
688 [-]: GETTABLE  R26 R2 K7    ; R26 := R2["mCardIndex"]
689 [-]: LT        0 K73 R26    ; if 0.000000 >= R26 then PC := 698
690 [-]: JMP       698          ; PC := 698
691 [-]: GETTABLE  R26 R2 K113  ; R26 := R2["mPolarity"]
692 [-]: GETGLOBAL R27 K6       ; R27 := mCards
693 [-]: GETTABLE  R28 R2 K7    ; R28 := R2["mCardIndex"]
694 [-]: GETTABLE  R27 R27 R28  ; R27 := R27[R28]
695 [-]: GETTABLE  R27 R27 K113 ; R27 := R27["mPolarity"]
696 [-]: EQ        1 R26 R27    ; if R26 == R27 then PC := 699
697 [-]: JMP       699          ; PC := 699
698 [-]: LOADKB    R26 0 1      ; R26 := false; PC := 699
699 [-]: LOADKB    R26 1 0      ; R26 := true
700 [-]: GETTABLE  R27 R1 K81   ; R27 := R1["grid"]
701 [-]: GETGLOBAL R28 K4       ; R28 := mInstalledGrid
702 [-]: EQ        0 R27 R28    ; if R27 ~= R28 then PC := 717
703 [-]: JMP       717          ; PC := 717
704 [-]: GETTABLE  R27 R1 K3    ; R27 := R1["element"]
705 [-]: GETTABLE  R27 R27 K7   ; R27 := R27["mCardIndex"]
706 [-]: LT        0 K73 R27    ; if 0.000000 >= R27 then PC := 717
707 [-]: JMP       717          ; PC := 717
708 [-]: GETTABLE  R27 R1 K3    ; R27 := R1["element"]
709 [-]: GETTABLE  R27 R27 K113 ; R27 := R27["mPolarity"]
710 [-]: GETGLOBAL R28 K6       ; R28 := mCards
711 [-]: GETTABLE  R29 R1 K3    ; R29 := R1["element"]
712 [-]: GETTABLE  R29 R29 K7   ; R29 := R29["mCardIndex"]
713 [-]: GETTABLE  R28 R28 R29  ; R28 := R28[R29]
714 [-]: GETTABLE  R28 R28 K113 ; R28 := R28["mPolarity"]
715 [-]: EQ        1 R27 R28    ; if R27 == R28 then PC := 718
716 [-]: JMP       718          ; PC := 718
717 [-]: LOADKB    R27 0 1      ; R27 := false; PC := 718
718 [-]: LOADKB    R27 1 0      ; R27 := true
719 [-]: TEST      R26 1        ; if R26 then PC := 723
720 [-]: JMP       723          ; PC := 723
721 [-]: TEST      R27 0        ; if not R27 then PC := 736
722 [-]: JMP       736          ; PC := 736
723 [-]: GETGLOBAL R28 K114     ; R28 := 0xba7dfcd2
724 [-]: SELF      R28 R28 K115 ; R29 := R28; R28 := R28[0xf056b179]
725 [-]: GETGLOBAL R30 K116     ; R30 := 0x89326c93
726 [-]: SELF      R30 R30 K117 ; R31 := R30; R30 := R30[0xfb64e76c]
727 [-]: CALL      R30 2 2      ; R30 := R30(R31)
728 [-]: GETGLOBAL R31 K84      ; R31 := 0x0469f296
729 [-]: LOADK     R32 K118     ; R32 := "INSTALLED_MOD_WITH_MATCHING_POLARITY"
730 [-]: CALL      R31 2 0      ; R31,... := R31(R32)
731 [-]: CALL      R28 0 1      ; R28(R29,...)
732 [-]: GETGLOBAL R28 K119     ; R28 := 0x25d99d89
733 [-]: SELF      R28 R28 K120 ; R29 := R28; R28 := R28[0xd723c617]
734 [-]: LOADK     R30 K121     ; R30 := "OnUploadChallengeProgress"
735 [-]: CALL      R28 3 1      ; R28(R29,R30)
736 [-]: GETTABLE  R28 R1 K3    ; R28 := R1["element"]
737 [-]: EQ        1 R2 R28     ; if R2 == R28 then PC := 796
738 [-]: JMP       796          ; PC := 796
739 [-]: LOADNIL   R28 R28      ; R28 := nil
740 [-]: GETGLOBAL R29 K4       ; R29 := mInstalledGrid
741 [-]: EQ        0 R0 R29     ; if R0 ~= R29 then PC := 750
742 [-]: JMP       750          ; PC := 750
743 [-]: GETTABLE  R29 R2 K7    ; R29 := R2["mCardIndex"]
744 [-]: LT        0 K73 R29    ; if 0.000000 >= R29 then PC := 750
745 [-]: JMP       750          ; PC := 750
746 [-]: GETGLOBAL R29 K6       ; R29 := mCards
747 [-]: GETTABLE  R30 R2 K7    ; R30 := R2["mCardIndex"]
748 [-]: GETTABLE  R28 R29 R30  ; R28 := R29[R30]
749 [-]: JMP       762          ; PC := 762
750 [-]: GETTABLE  R29 R1 K81   ; R29 := R1["grid"]
751 [-]: GETGLOBAL R30 K4       ; R30 := mInstalledGrid
752 [-]: EQ        0 R29 R30    ; if R29 ~= R30 then PC := 762
753 [-]: JMP       762          ; PC := 762
754 [-]: GETTABLE  R29 R1 K3    ; R29 := R1["element"]
755 [-]: GETTABLE  R29 R29 K7   ; R29 := R29["mCardIndex"]
756 [-]: LT        0 K73 R29    ; if 0.000000 >= R29 then PC := 762
757 [-]: JMP       762          ; PC := 762
758 [-]: GETGLOBAL R29 K6       ; R29 := mCards
759 [-]: GETTABLE  R30 R1 K3    ; R30 := R1["element"]
760 [-]: GETTABLE  R30 R30 K7   ; R30 := R30["mCardIndex"]
761 [-]: GETTABLE  R28 R29 R30  ; R28 := R29[R30]
762 [-]: GETGLOBAL R29 K0       ; R29 := 0x7b998233
763 [-]: MOVE      R30 R28      ; R30 := R28
764 [-]: CALL      R29 2 2      ; R29 := R29(R30)
765 [-]: TEST      R29 1        ; if R29 then PC := 796
766 [-]: JMP       796          ; PC := 796
767 [-]: GETTABLE  R29 R28 K122 ; R29 := R28["mItemCompatibility"]
768 [-]: SELF      R29 R29 K123 ; R30 := R29; R29 := R29[0xf2deaf69]
769 [-]: GETUPVAL  R31 U0       ; R31 := U0
770 [-]: GETTABLE  R31 R31 K124 ; R31 := R31["warframeForFiltering"]
771 [-]: CALL      R29 3 2      ; R29 := R29(R30,R31)
772 [-]: TEST      R29 0        ; if not R29 then PC := 781
773 [-]: JMP       781          ; PC := 781
774 [-]: GETTABLE  R29 R28 K122 ; R29 := R28["mItemCompatibility"]
775 [-]: GETUPVAL  R30 U0       ; R30 := U0
776 [-]: GETTABLE  R30 R30 K124 ; R30 := R30["warframeForFiltering"]
777 [-]: EQ        0 R29 R30    ; if R29 ~= R30 then PC := 780
778 [-]: JMP       780          ; PC := 780
779 [-]: LOADKB    R29 0 1      ; R29 := false; PC := 780
780 [-]: LOADKB    R29 1 0      ; R29 := true
781 [-]: TEST      R29 0        ; if not R29 then PC := 796
782 [-]: JMP       796          ; PC := 796
783 [-]: GETGLOBAL R30 K114     ; R30 := 0xba7dfcd2
784 [-]: SELF      R30 R30 K115 ; R31 := R30; R30 := R30[0xf056b179]
785 [-]: GETGLOBAL R32 K116     ; R32 := 0x89326c93
786 [-]: SELF      R32 R32 K117 ; R33 := R32; R32 := R32[0xfb64e76c]
787 [-]: CALL      R32 2 2      ; R32 := R32(R33)
788 [-]: GETGLOBAL R33 K84      ; R33 := 0x0469f296
789 [-]: LOADK     R34 K125     ; R34 := "INSTALLED_AUGMENT_MOD"
790 [-]: CALL      R33 2 0      ; R33,... := R33(R34)
791 [-]: CALL      R30 0 1      ; R30(R31,...)
792 [-]: GETGLOBAL R30 K119     ; R30 := 0x25d99d89
793 [-]: SELF      R30 R30 K120 ; R31 := R30; R30 := R30[0xd723c617]
794 [-]: LOADK     R32 K121     ; R32 := "OnUploadChallengeProgress"
795 [-]: CALL      R30 3 1      ; R30(R31,R32)
796 [-]: GETTABLE  R30 R2 K14   ; R30 := R2["mClipName"]
797 [-]: EQ        1 R30 K12    ; if R30 == nil then PC := 811
798 [-]: JMP       811          ; PC := 811
799 [-]: GETTABLE  R30 R0 K95   ; R30 := R0[0xb15e6aca]
800 [-]: MOVE      R31 R2       ; R31 := R2
801 [-]: CALL      R30 2 1      ; R30(R31)
802 [-]: GETGLOBAL R30 K126     ; R30 := mMouseDrag
803 [-]: SELF      R30 R30 K127 ; R31 := R30; R30 := R30[0xf37943ff]
804 [-]: CALL      R30 2 2      ; R30 := R30(R31)
805 [-]: TEST      R30 0        ; if not R30 then PC := 811
806 [-]: JMP       811          ; PC := 811
807 [-]: GETTABLE  R30 R0 K128  ; R30 := R0[0xaf2cb9be]
808 [-]: MOVE      R31 R2       ; R31 := R2
809 [-]: LOADKB    R32 1 0      ; R32 := true
810 [-]: CALL      R30 3 1      ; R30(R31,R32)
811 [-]: GETTABLE  R30 R1 K3    ; R30 := R1["element"]
812 [-]: GETTABLE  R30 R30 K14  ; R30 := R30["mClipName"]
813 [-]: EQ        1 R30 K12    ; if R30 == nil then PC := 819
814 [-]: JMP       819          ; PC := 819
815 [-]: GETTABLE  R30 R1 K81   ; R30 := R1["grid"]
816 [-]: GETTABLE  R30 R30 K95  ; R30 := R30[0xb15e6aca]
817 [-]: GETTABLE  R31 R1 K3    ; R31 := R1["element"]
818 [-]: CALL      R30 2 1      ; R30(R31)
819 [-]: GETGLOBAL R30 K112     ; R30 := mChanged
820 [-]: TEST      R30 0        ; if not R30 then PC := 945
821 [-]: JMP       945          ; PC := 945
822 [-]: TEST      R5 1         ; if R5 then PC := 945
823 [-]: JMP       945          ; PC := 945
824 [-]: GETGLOBAL R30 K0       ; R30 := 0x7b998233
825 [-]: GETTABLE  R31 R2 K72   ; R31 := R2["mModSet"]
826 [-]: CALL      R30 2 2      ; R30 := R30(R31)
827 [-]: TEST      R30 0        ; if not R30 then PC := 835
828 [-]: JMP       835          ; PC := 835
829 [-]: GETGLOBAL R30 K0       ; R30 := 0x7b998233
830 [-]: GETTABLE  R31 R21 K72  ; R31 := R21["mModSet"]
831 [-]: CALL      R30 2 2      ; R30 := R30(R31)
832 [-]: NOT       R30 R30      ; R30 :=  R30
833 [-]: JMP       836          ; PC := 836
834 [-]: LOADKB    R30 0 1      ; R30 := false; PC := 835
835 [-]: LOADKB    R30 1 0      ; R30 := true
836 [-]: SETUPVAL  R30 U11      ; U82 := R11
837 [-]: NEWTABLE  R30 0 0      ; R30 := {}
838 [-]: CONST     R31 1        ; R31 := 1.000000
839 [-]: GETGLOBAL R32 K6       ; R32 := mCards
840 [-]: LEN       R32 R32      ; R32 := # R32
841 [-]: CONST     R33 1        ; R33 := 1.000000
842 [-]: FORPREP   R31 856      ; R31 -= R33; PC := 856
843 [-]: GETGLOBAL R35 K6       ; R35 := mCards
844 [-]: GETTABLE  R35 R35 R34  ; R35 := R35[R34]
845 [-]: GETTABLE  R36 R35 K11  ; R36 := R35["mInstalled"]
846 [-]: GETTABLE  R36 R36 R20  ; R36 := R36[R20]
847 [-]: EQ        1 R36 K12    ; if R36 == nil then PC := 856
848 [-]: JMP       856          ; PC := 856
849 [-]: GETGLOBAL R36 K129     ; R36 := 0x33bdd652
850 [-]: GETTABLE  R36 R36 K130 ; R36 := R36[0x23d5322f]
851 [-]: MOVE      R37 R30      ; R37 := R30
852 [-]: GETTABLE  R38 R35 K16  ; R38 := R35["mUpgradeItemType"]
853 [-]: SELF      R38 R38 K53  ; R39 := R38; R38 := R38[0xed4e0128]
854 [-]: CALL      R38 2 0      ; R38,... := R38(R39)
855 [-]: CALL      R36 0 1      ; R36(R37,...)
856 [-]: FORLOOP   R31 843      ; R31 += R33; if R31 <= R32 then begin PC := 843; R34 := R31 end
857 [-]: GETGLOBAL R36 K132     ; R36 := 0xbd496aa1
858 [-]: GETTABLE  R36 R36 K133 ; R36 := R36[0x42645da3]
859 [-]: MOVE      R37 R30      ; R37 := R30
860 [-]: LOADKB    R38 1 0      ; R38 := true
861 [-]: CALL      R36 3 2      ; R36 := R36(R37,R38)
862 [-]: SETGLOBAL R36 K131     ; mCardLoader := R36
863 [-]: GETGLOBAL R36 K0       ; R36 := 0x7b998233
864 [-]: GETGLOBAL R37 K104     ; R37 := _T
865 [-]: GETTABLE  R37 R37 K134 ; R37 := R37["BackgroundMovie"]
866 [-]: CALL      R36 2 2      ; R36 := R36(R37)
867 [-]: TEST      R36 1        ; if R36 then PC := 875
868 [-]: JMP       875          ; PC := 875
869 [-]: GETGLOBAL R36 K104     ; R36 := _T
870 [-]: GETTABLE  R36 R36 K134 ; R36 := R36["BackgroundMovie"]
871 [-]: SELF      R36 R36 K51  ; R37 := R36; R36 := R36[0xe4162eed]
872 [-]: LOADK     R38 K135     ; R38 := "ShowBlockingMessage"
873 [-]: LOADK     R39 K136     ; R39 := "2"
874 [-]: CALL      R36 4 1      ; R36(R37,R38,R39)
875 [-]: LOADKB    R36 1 0      ; R36 := true
876 [-]: SETGLOBAL R36 K137     ; mInputBlocked := R36
877 [-]: LOADNIL   R36 R36      ; R36 := nil
878 [-]: GETGLOBAL R37 K4       ; R37 := mInstalledGrid
879 [-]: EQ        0 R0 R37     ; if R0 ~= R37 then PC := 886
880 [-]: JMP       886          ; PC := 886
881 [-]: GETTABLE  R37 R2 K7    ; R37 := R2["mCardIndex"]
882 [-]: EQ        1 R37 K56    ; if R37 == -1.000000 then PC := 886
883 [-]: JMP       886          ; PC := 886
884 [-]: MOVE      R36 R2       ; R36 := R2
885 [-]: JMP       893          ; PC := 893
886 [-]: GETGLOBAL R37 K86      ; R37 := mCollectionGrid
887 [-]: EQ        0 R0 R37     ; if R0 ~= R37 then PC := 893
888 [-]: JMP       893          ; PC := 893
889 [-]: GETTABLE  R37 R21 K7   ; R37 := R21["mCardIndex"]
890 [-]: EQ        1 R37 K56    ; if R37 == -1.000000 then PC := 893
891 [-]: JMP       893          ; PC := 893
892 [-]: MOVE      R36 R21      ; R36 := R21
893 [-]: TEST      R36 0        ; if not R36 then PC := 945
894 [-]: JMP       945          ; PC := 945
895 [-]: GETGLOBAL R37 K0       ; R37 := 0x7b998233
896 [-]: GETTABLE  R38 R36 K72  ; R38 := R36["mModSet"]
897 [-]: CALL      R37 2 2      ; R37 := R37(R38)
898 [-]: TEST      R37 1        ; if R37 then PC := 913
899 [-]: JMP       913          ; PC := 913
900 [-]: GETTABLE  R37 R36 K72  ; R37 := R36["mModSet"]
901 [-]: SELF      R37 R37 K138 ; R38 := R37; R37 := R37[0xa038b7f0]
902 [-]: CALL      R37 2 2      ; R37 := R37(R38)
903 [-]: GETGLOBAL R38 K0       ; R38 := 0x7b998233
904 [-]: MOVE      R39 R37      ; R39 := R37
905 [-]: CALL      R38 2 2      ; R38 := R38(R39)
906 [-]: TEST      R38 1        ; if R38 then PC := 945
907 [-]: JMP       945          ; PC := 945
908 [-]: GETUPVAL  R38 U4       ; R38 := U4
909 [-]: GETTABLE  R38 R38 K96  ; R38 := R38[0x659d451f]
910 [-]: MOVE      R39 R37      ; R39 := R37
911 [-]: CALL      R38 2 1      ; R38(R39)
912 [-]: JMP       945          ; PC := 945
913 [-]: GETGLOBAL R38 K0       ; R38 := 0x7b998233
914 [-]: GETGLOBAL R39 K6       ; R39 := mCards
915 [-]: GETTABLE  R40 R36 K7   ; R40 := R36["mCardIndex"]
916 [-]: GETTABLE  R39 R39 R40  ; R39 := R39[R40]
917 [-]: CALL      R38 2 2      ; R38 := R38(R39)
918 [-]: TEST      R38 1        ; if R38 then PC := 945
919 [-]: JMP       945          ; PC := 945
920 [-]: GETGLOBAL R38 K0       ; R38 := 0x7b998233
921 [-]: GETGLOBAL R39 K6       ; R39 := mCards
922 [-]: GETTABLE  R40 R36 K7   ; R40 := R36["mCardIndex"]
923 [-]: GETTABLE  R39 R39 R40  ; R39 := R39[R40]
924 [-]: GETTABLE  R39 R39 K16  ; R39 := R39["mUpgradeItemType"]
925 [-]: CALL      R38 2 2      ; R38 := R38(R39)
926 [-]: TEST      R38 1        ; if R38 then PC := 945
927 [-]: JMP       945          ; PC := 945
928 [-]: GETGLOBAL R38 K139     ; R38 := 0xb009bbc6
929 [-]: GETGLOBAL R39 K6       ; R39 := mCards
930 [-]: GETTABLE  R40 R36 K7   ; R40 := R36["mCardIndex"]
931 [-]: GETTABLE  R39 R39 R40  ; R39 := R39[R40]
932 [-]: GETTABLE  R39 R39 K16  ; R39 := R39["mUpgradeItemType"]
933 [-]: CALL      R38 2 2      ; R38 := R38(R39)
934 [-]: SELF      R39 R38 K138 ; R40 := R38; R39 := R38[0xa038b7f0]
935 [-]: CALL      R39 2 2      ; R39 := R39(R40)
936 [-]: GETGLOBAL R40 K0       ; R40 := 0x7b998233
937 [-]: MOVE      R41 R39      ; R41 := R39
938 [-]: CALL      R40 2 2      ; R40 := R40(R41)
939 [-]: TEST      R40 1        ; if R40 then PC := 945
940 [-]: JMP       945          ; PC := 945
941 [-]: GETUPVAL  R40 U4       ; R40 := U4
942 [-]: GETTABLE  R40 R40 K96  ; R40 := R40[0x659d451f]
943 [-]: MOVE      R41 R39      ; R41 := R39
944 [-]: CALL      R40 2 1      ; R40(R41)
945 [-]: LOADKB    R40 1 0      ; R40 := true
946 [-]: RETURN    R40 2        ; return R40
947 [-]: RETURN    R0 1         ; return 


; Function #51:
;
; Name:            
; Defined at line: 1955
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  9

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0xae91e43b
  2 [-]: SELF      R1 R1 K1     ; R2 := R1; R1 := R1[0x67bc869f]
  3 [-]: GETTABLE  R3 R0 K2     ; R3 := R0["mClipName"]
  4 [-]: CONST     R4 9         ; R4 := 9.000000
  5 [-]: GETUPVAL  R5 U0        ; R5 := U0
  6 [-]: GETTABLE  R5 R5 K3     ; R5 := R5[0x06d055f9]
  7 [-]: GETTABLE  R6 R0 K4     ; R6 := R0["mInstalled"]
  8 [-]: LOADK     R7 K5        ; R7 := 5592405.000000
  9 [-]: LOADK     R8 K6        ; R8 := 16777215.000000
 10 [-]: CALL      R5 4 0       ; R5,... := R5(R6,R7,R8)
 11 [-]: CALL      R1 0 1       ; R1(R2,...)
 12 [-]: GETGLOBAL R1 K0        ; R1 := 0xae91e43b
 13 [-]: SELF      R1 R1 K7     ; R2 := R1; R1 := R1[0xc0a3774b]
 14 [-]: GETTABLE  R3 R0 K2     ; R3 := R0["mClipName"]
 15 [-]: LOADK     R4 K8        ; R4 := "Card.UsageCounter"
 16 [-]: CONST     R5 11        ; R5 := 11.000000
 17 [-]: GETTABLE  R6 R0 K4     ; R6 := R0["mInstalled"]
 18 [-]: TEST      R6 1         ; if R6 then PC := 21
 19 [-]: JMP       21           ; PC := 21
 20 [-]: GETTABLE  R6 R0 K9     ; R6 := R0["Selected"]
 21 [-]: EQ        1 R6 K10     ; if R6 == true then PC := 24
 22 [-]: JMP       24           ; PC := 24
 23 [-]: LOADKB    R6 0 1       ; R6 := false; PC := 24
 24 [-]: LOADKB    R6 1 0       ; R6 := true
 25 [-]: CALL      R1 6 1       ; R1(R2,R3,R4,R5,R6)
 26 [-]: GETTABLE  R1 R0 K9     ; R1 := R0["Selected"]
 27 [-]: TEST      R1 0         ; if not R1 then PC := 50
 28 [-]: JMP       50           ; PC := 50
 29 [-]: GETGLOBAL R1 K0        ; R1 := 0xae91e43b
 30 [-]: SELF      R1 R1 K11    ; R2 := R1; R1 := R1[0x1cb415c1]
 31 [-]: GETTABLE  R3 R0 K2     ; R3 := R0["mClipName"]
 32 [-]: LOADK     R4 K12       ; R4 := ".Card.UsageCounter.UseCounterBacker"
 33 [-]: CONCAT    R3 R3 R4     ; R3 := R3 .. R4
 34 [-]: GETGLOBAL R4 K13       ; R4 := 0xa73e5ed7
 35 [-]: CALL      R1 4 1       ; R1(R2,R3,R4)
 36 [-]: GETGLOBAL R1 K0        ; R1 := 0xae91e43b
 37 [-]: SELF      R1 R1 K14    ; R2 := R1; R1 := R1[0xf64b7262]
 38 [-]: GETTABLE  R3 R0 K2     ; R3 := R0["mClipName"]
 39 [-]: LOADK     R4 K15       ; R4 := "Card.UsageCounter.UseCounterBacker"
 40 [-]: CONST     R5 5         ; R5 := 5.000000
 41 [-]: CONST     R6 100       ; R6 := 100.000000
 42 [-]: CALL      R1 6 1       ; R1(R2,R3,R4,R5,R6)
 43 [-]: GETGLOBAL R1 K0        ; R1 := 0xae91e43b
 44 [-]: SELF      R1 R1 K14    ; R2 := R1; R1 := R1[0xf64b7262]
 45 [-]: GETTABLE  R3 R0 K2     ; R3 := R0["mClipName"]
 46 [-]: LOADK     R4 K15       ; R4 := "Card.UsageCounter.UseCounterBacker"
 47 [-]: CONST     R5 6         ; R5 := 6.000000
 48 [-]: CONST     R6 100       ; R6 := 100.000000
 49 [-]: CALL      R1 6 1       ; R1(R2,R3,R4,R5,R6)
 50 [-]: RETURN    R0 1         ; return 


; Function #52:
;
; Name:            
; Defined at line: 1966
; #Upvalues:       2
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  7

  1 [-]: GETGLOBAL R2 K0        ; R2 := mMouseDrag
  2 [-]: SELF      R2 R2 K1     ; R3 := R2; R2 := R2[0xbdd1058d]
  3 [-]: CALL      R2 2 2       ; R2 := R2(R3)
  4 [-]: GETGLOBAL R3 K2        ; R3 := 0x7b998233
  5 [-]: MOVE      R4 R2        ; R4 := R2
  6 [-]: CALL      R3 2 2       ; R3 := R3(R4)
  7 [-]: TEST      R3 1         ; if R3 then PC := 19
  8 [-]: JMP       19           ; PC := 19
  9 [-]: GETUPVAL  R3 U0        ; R3 := U0
 10 [-]: GETTABLE  R3 R3 K3     ; R3 := R3[0x659d451f]
 11 [-]: GETGLOBAL R4 K4        ; R4 := 0x0032441c
 12 [-]: GETTABLE  R4 R4 K5     ; R4 := R4["UISound_Select"]
 13 [-]: CALL      R3 2 1       ; R3(R4)
 14 [-]: GETUPVAL  R3 U1        ; R3 := U1
 15 [-]: MOVE      R4 R0        ; R4 := R0
 16 [-]: MOVE      R5 R2        ; R5 := R2
 17 [-]: MOVE      R6 R1        ; R6 := R1
 18 [-]: CALL      R3 4 1       ; R3(R4,R5,R6)
 19 [-]: GETGLOBAL R3 K0        ; R3 := mMouseDrag
 20 [-]: SELF      R3 R3 K6     ; R4 := R3; R3 := R3[0xf4e253b6]
 21 [-]: CALL      R3 2 1       ; R3(R4)
 22 [-]: RETURN    R0 1         ; return 


; Function #53:
;
; Name:            
; Defined at line: 1975
; #Upvalues:       2
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  12

  1 [-]: GETGLOBAL R1 K0        ; R1 := mCards
  2 [-]: GETTABLE  R2 R0 K1     ; R2 := R0["mCardIndex"]
  3 [-]: GETTABLE  R1 R1 R2     ; R1 := R1[R2]
  4 [-]: EQ        0 R1 K2      ; if R1 ~= nil then PC := 7
  5 [-]: JMP       7            ; PC := 7
  6 [-]: RETURN    R0 1         ; return 
  7 [-]: GETUPVAL  R2 U0        ; R2 := U0
  8 [-]: GETTABLE  R2 R2 K3     ; R2 := R2[0xfcab08e3]
  9 [-]: MOVE      R3 R1        ; R3 := R1
 10 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 11 [-]: TEST      R2 0         ; if not R2 then PC := 59
 12 [-]: JMP       59           ; PC := 59
 13 [-]: GETTABLE  R2 R1 K4     ; R2 := R1["mArtifactUpgrade"]
 14 [-]: SELF      R2 R2 K5     ; R3 := R2; R2 := R2[0xf2deaf69]
 15 [-]: GETGLOBAL R4 K6        ; R4 := 0xfaca2614
 16 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 17 [-]: TEST      R2 1         ; if R2 then PC := 59
 18 [-]: JMP       59           ; PC := 59
 19 [-]: GETUPVAL  R2 U0        ; R2 := U0
 20 [-]: GETTABLE  R2 R2 K7     ; R2 := R2[0x81959fae]
 21 [-]: MOVE      R3 R1        ; R3 := R1
 22 [-]: LOADKB    R4 1 0       ; R4 := true
 23 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 24 [-]: GETGLOBAL R3 K8        ; R3 := 0x7b998233
 25 [-]: MOVE      R4 R2        ; R4 := R2
 26 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 27 [-]: TEST      R3 1         ; if R3 then PC := 59
 28 [-]: JMP       59           ; PC := 59
 29 [-]: NEWTABLE  R3 0 7       ; R3 := {}
 30 [-]: SETTABLE  R3 K9 K10    ; R3["CustomEntry"] := true
 31 [-]: SETTABLE  R3 K11 K10   ; R3["IsAbility"] := true
 32 [-]: SETTABLE  R3 K12 K10   ; R3["IsRailjackAbility"] := true
 33 [-]: SETTABLE  R3 K13 R2    ; R3["Resource"] := R2
 34 [-]: GETTABLE  R4 R1 K15    ; R4 := R1["mName"]
 35 [-]: SETTABLE  R3 K14 R4    ; R3["Name"] := R4
 36 [-]: GETTABLE  R4 R1 K17    ; R4 := R1["mLevel"]
 37 [-]: SETTABLE  R3 K16 R4    ; R3["Level"] := R4
 38 [-]: GETTABLE  R4 R1 K17    ; R4 := R1["mLevel"]
 39 [-]: SETTABLE  R3 K18 R4    ; R3["AbilityLevelOverride"] := R4
 40 [-]: GETUPVAL  R4 U1        ; R4 := U1
 41 [-]: GETTABLE  R4 R4 K19    ; R4 := R4[0xfc3fed1f]
 42 [-]: GETGLOBAL R5 K20       ; R5 := 0xae91e43b
 43 [-]: MOVE      R6 R3        ; R6 := R3
 44 [-]: GETGLOBAL R7 K20       ; R7 := 0xae91e43b
 45 [-]: SELF      R7 R7 K21    ; R8 := R7; R7 := R7[0x91a24e4b]
 46 [-]: GETTABLE  R9 R0 K22    ; R9 := R0["mClipName"]
 47 [-]: CONST     R10 2        ; R10 := 2.000000
 48 [-]: CALL      R7 4 2       ; R7 := R7(R8,R9,R10)
 49 [-]: GETGLOBAL R8 K20       ; R8 := 0xae91e43b
 50 [-]: SELF      R8 R8 K21    ; R9 := R8; R8 := R8[0x91a24e4b]
 51 [-]: GETTABLE  R10 R0 K22   ; R10 := R0["mClipName"]
 52 [-]: CONST     R11 3        ; R11 := 3.000000
 53 [-]: CALL      R8 4 2       ; R8 := R8(R9,R10,R11)
 54 [-]: CONST     R9 200       ; R9 := 200.000000
 55 [-]: CONST     R10 100      ; R10 := 100.000000
 56 [-]: CALL      R4 7 1       ; R4(R5,R6,R7,R8,R9,R10)
 57 [-]: GETGLOBAL R4 K23       ; R4 := _T
 58 [-]: SETTABLE  R4 K24 R3    ; R4["InfoPopup_Data"] := R3
 59 [-]: RETURN    R0 1         ; return 


; Function #54:
;
; Name:            
; Defined at line: 2007
; #Upvalues:       15
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  11

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x2d0fad09
  2 [-]: LOADK     R1 K1        ; R1 := "Lotus.Interface.Components.CategorizedGrid"
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: GETGLOBAL R1 K2        ; R1 := mInstalledGrid
  5 [-]: EQ        1 R1 K3      ; if R1 == nil then PC := 10
  6 [-]: JMP       10           ; PC := 10
  7 [-]: GETGLOBAL R1 K2        ; R1 := mInstalledGrid
  8 [-]: SELF      R1 R1 K4     ; R2 := R1; R1 := R1[0x6f56e33a]
  9 [-]: CALL      R1 2 1       ; R1(R2)
 10 [-]: GETUPVAL  R1 U0        ; R1 := U0
 11 [-]: CALL      R1 1 2       ; R1 := R1()
 12 [-]: GETUPVAL  R2 U1        ; R2 := U1
 13 [-]: GETTABLE  R2 R2 K7     ; R2 := R2[0xeddfdfaa]
 14 [-]: GETGLOBAL R3 K8        ; R3 := _T
 15 [-]: GETTABLE  R3 R3 K9     ; R3 := R3["upgradeItemCategory"]
 16 [-]: MOVE      R4 R1        ; R4 := R1
 17 [-]: GETGLOBAL R5 K8        ; R5 := _T
 18 [-]: GETTABLE  R5 R5 K10    ; R5 := R5["upgradeItemLot"]
 19 [-]: CALL      R2 4 3       ; R2,R3 := R2(R3,R4,R5)
 20 [-]: SETGLOBAL R3 K6        ; columns := R3
 21 [-]: SETGLOBAL R2 K5        ; rows := R2
 22 [-]: GETTABLE  R2 R0 K11    ; R2 := R0[0x67d7b715]
 23 [-]: GETGLOBAL R3 K12       ; R3 := 0xae91e43b
 24 [-]: LOADK     R4 K13       ; R4 := "Installed.Card1"
 25 [-]: GETGLOBAL R5 K6        ; R5 := columns
 26 [-]: GETGLOBAL R6 K5        ; R6 := rows
 27 [-]: CALL      R2 5 2       ; R2 := R2(R3,R4,R5,R6)
 28 [-]: SETGLOBAL R2 K2        ; mInstalledGrid := R2
 29 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
 30 [-]: SETTABLE  R2 K14 K15   ; R2["GRID_SEP_X"] := -272.000000
 31 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
 32 [-]: SETTABLE  R2 K16 K17   ; R2["GRID_SEP_Y"] := -150.000000
 33 [-]: GETGLOBAL R2 K18       ; R2 := 0x38f10e85
 34 [-]: GETGLOBAL R3 K12       ; R3 := 0xae91e43b
 35 [-]: LOADK     R4 K19       ; R4 := "Installed.Card1.swapDepths"
 36 [-]: GETGLOBAL R5 K2        ; R5 := mInstalledGrid
 37 [-]: GETTABLE  R5 R5 K20    ; R5 := R5["mInitialDepth"]
 38 [-]: CALL      R2 4 1       ; R2(R3,R4,R5)
 39 [-]: GETGLOBAL R2 K21       ; R2 := mOriginalInstalledInitialX
 40 [-]: EQ        0 R2 K3      ; if R2 ~= nil then PC := 45
 41 [-]: JMP       45           ; PC := 45
 42 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
 43 [-]: GETTABLE  R2 R2 K22    ; R2 := R2["mInitialX"]
 44 [-]: SETGLOBAL R2 K21       ; mOriginalInstalledInitialX := R2
 45 [-]: GETGLOBAL R2 K23       ; R2 := mOriginalInstalledInitialY
 46 [-]: EQ        0 R2 K3      ; if R2 ~= nil then PC := 51
 47 [-]: JMP       51           ; PC := 51
 48 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
 49 [-]: GETTABLE  R2 R2 K24    ; R2 := R2["mInitialY"]
 50 [-]: SETGLOBAL R2 K23       ; mOriginalInstalledInitialY := R2
 51 [-]: GETGLOBAL R2 K25       ; R2 := 0x7b998233
 52 [-]: MOVE      R3 R1        ; R3 := R1
 53 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 54 [-]: TEST      R2 1         ; if R2 then PC := 167
 55 [-]: JMP       167          ; PC := 167
 56 [-]: GETUPVAL  R2 U2        ; R2 := U2
 57 [-]: CALL      R2 1 2       ; R2 := R2()
 58 [-]: TEST      R2 0         ; if not R2 then PC := 68
 59 [-]: JMP       68           ; PC := 68
 60 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
 61 [-]: GETGLOBAL R3 K21       ; R3 := mOriginalInstalledInitialX
 62 [-]: GETGLOBAL R4 K2        ; R4 := mInstalledGrid
 63 [-]: GETTABLE  R4 R4 K14    ; R4 := R4["GRID_SEP_X"]
 64 [-]: MUL       R4 R4 K26    ; R4 := R4 * -0.200000
 65 [-]: ADD       R3 R3 R4     ; R3 := R3 + R4
 66 [-]: SETTABLE  R2 K22 R3    ; R2["mInitialX"] := R3
 67 [-]: JMP       116          ; PC := 116
 68 [-]: GETGLOBAL R2 K27       ; R2 := mArcaneInfo
 69 [-]: GETTABLE  R2 R2 K28    ; R2 := R2["Slots"]
 70 [-]: LT        1 K29 R2     ; if 0.000000 < R2 then PC := 84
 71 [-]: JMP       84           ; PC := 84
 72 [-]: GETGLOBAL R2 K8        ; R2 := _T
 73 [-]: GETTABLE  R2 R2 K9     ; R2 := R2["upgradeItemCategory"]
 74 [-]: EQ        1 R2 K31     ; if R2 == 3.000000 then PC := 84
 75 [-]: JMP       84           ; PC := 84
 76 [-]: GETGLOBAL R2 K8        ; R2 := _T
 77 [-]: GETTABLE  R2 R2 K9     ; R2 := R2["upgradeItemCategory"]
 78 [-]: EQ        1 R2 K32     ; if R2 == 1.000000 then PC := 84
 79 [-]: JMP       84           ; PC := 84
 80 [-]: GETGLOBAL R2 K8        ; R2 := _T
 81 [-]: GETTABLE  R2 R2 K9     ; R2 := R2["upgradeItemCategory"]
 82 [-]: EQ        0 R2 K29     ; if R2 ~= 0.000000 then PC := 92
 83 [-]: JMP       92           ; PC := 92
 84 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
 85 [-]: GETGLOBAL R3 K21       ; R3 := mOriginalInstalledInitialX
 86 [-]: GETGLOBAL R4 K2        ; R4 := mInstalledGrid
 87 [-]: GETTABLE  R4 R4 K14    ; R4 := R4["GRID_SEP_X"]
 88 [-]: MUL       R4 R4 K33    ; R4 := R4 * 0.500000
 89 [-]: ADD       R3 R3 R4     ; R3 := R3 + R4
 90 [-]: SETTABLE  R2 K22 R3    ; R2["mInitialX"] := R3
 91 [-]: JMP       116          ; PC := 116
 92 [-]: SELF      R2 R1 K34    ; R3 := R1; R2 := R1[0xf2deaf69]
 93 [-]: GETGLOBAL R4 K35       ; R4 := gSentinelPowerSuitType
 94 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 95 [-]: TEST      R2 0         ; if not R2 then PC := 105
 96 [-]: JMP       105          ; PC := 105
 97 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
 98 [-]: GETGLOBAL R3 K21       ; R3 := mOriginalInstalledInitialX
 99 [-]: GETGLOBAL R4 K2        ; R4 := mInstalledGrid
100 [-]: GETTABLE  R4 R4 K14    ; R4 := R4["GRID_SEP_X"]
101 [-]: MUL       R4 R4 K36    ; R4 := R4 * -0.500000
102 [-]: ADD       R3 R3 R4     ; R3 := R3 + R4
103 [-]: SETTABLE  R2 K22 R3    ; R2["mInitialX"] := R3
104 [-]: JMP       116          ; PC := 116
105 [-]: GETUPVAL  R2 U3        ; R2 := U3
106 [-]: CALL      R2 1 2       ; R2 := R2()
107 [-]: TEST      R2 0         ; if not R2 then PC := 116
108 [-]: JMP       116          ; PC := 116
109 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
110 [-]: GETGLOBAL R3 K21       ; R3 := mOriginalInstalledInitialX
111 [-]: GETGLOBAL R4 K2        ; R4 := mInstalledGrid
112 [-]: GETTABLE  R4 R4 K14    ; R4 := R4["GRID_SEP_X"]
113 [-]: MUL       R4 R4 K33    ; R4 := R4 * 0.500000
114 [-]: ADD       R3 R3 R4     ; R3 := R3 + R4
115 [-]: SETTABLE  R2 K22 R3    ; R2["mInitialX"] := R3
116 [-]: SELF      R2 R1 K34    ; R3 := R1; R2 := R1[0xf2deaf69]
117 [-]: GETGLOBAL R4 K35       ; R4 := gSentinelPowerSuitType
118 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
119 [-]: TEST      R2 1         ; if R2 then PC := 133
120 [-]: JMP       133          ; PC := 133
121 [-]: GETGLOBAL R2 K37       ; R2 := mCardSlots
122 [-]: GETGLOBAL R3 K38       ; R3 := NUM_NORMAL_SLOTS
123 [-]: LE        1 R2 R3      ; if R2 <= R3 then PC := 133
124 [-]: JMP       133          ; PC := 133
125 [-]: GETGLOBAL R2 K8        ; R2 := _T
126 [-]: GETTABLE  R2 R2 K9     ; R2 := R2["upgradeItemCategory"]
127 [-]: EQ        1 R2 K32     ; if R2 == 1.000000 then PC := 133
128 [-]: JMP       133          ; PC := 133
129 [-]: GETGLOBAL R2 K8        ; R2 := _T
130 [-]: GETTABLE  R2 R2 K9     ; R2 := R2["upgradeItemCategory"]
131 [-]: EQ        0 R2 K29     ; if R2 ~= 0.000000 then PC := 167
132 [-]: JMP       167          ; PC := 167
133 [-]: GETGLOBAL R2 K8        ; R2 := _T
134 [-]: GETTABLE  R2 R2 K10    ; R2 := R2["upgradeItemLot"]
135 [-]: EQ        0 R2 K40     ; if R2 ~= 7.000000 then PC := 147
136 [-]: JMP       147          ; PC := 147
137 [-]: GETGLOBAL R2 K37       ; R2 := mCardSlots
138 [-]: EQ        0 R2 K31     ; if R2 ~= 3.000000 then PC := 147
139 [-]: JMP       147          ; PC := 147
140 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
141 [-]: GETGLOBAL R3 K23       ; R3 := mOriginalInstalledInitialY
142 [-]: GETGLOBAL R4 K2        ; R4 := mInstalledGrid
143 [-]: GETTABLE  R4 R4 K16    ; R4 := R4["GRID_SEP_Y"]
144 [-]: ADD       R3 R3 R4     ; R3 := R3 + R4
145 [-]: SETTABLE  R2 K24 R3    ; R2["mInitialY"] := R3
146 [-]: JMP       167          ; PC := 167
147 [-]: GETGLOBAL R2 K25       ; R2 := 0x7b998233
148 [-]: GETGLOBAL R3 K41       ; R3 := mRailjackMovie
149 [-]: CALL      R2 2 2       ; R2 := R2(R3)
150 [-]: TEST      R2 1         ; if R2 then PC := 160
151 [-]: JMP       160          ; PC := 160
152 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
153 [-]: GETGLOBAL R3 K23       ; R3 := mOriginalInstalledInitialY
154 [-]: GETGLOBAL R4 K2        ; R4 := mInstalledGrid
155 [-]: GETTABLE  R4 R4 K16    ; R4 := R4["GRID_SEP_Y"]
156 [-]: MUL       R4 R4 K42    ; R4 := R4 * 0.080000
157 [-]: ADD       R3 R3 R4     ; R3 := R3 + R4
158 [-]: SETTABLE  R2 K24 R3    ; R2["mInitialY"] := R3
159 [-]: JMP       167          ; PC := 167
160 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
161 [-]: GETGLOBAL R3 K23       ; R3 := mOriginalInstalledInitialY
162 [-]: GETGLOBAL R4 K2        ; R4 := mInstalledGrid
163 [-]: GETTABLE  R4 R4 K16    ; R4 := R4["GRID_SEP_Y"]
164 [-]: MUL       R4 R4 K36    ; R4 := R4 * -0.500000
165 [-]: SUB       R3 R3 R4     ; R3 := R3 - R4
166 [-]: SETTABLE  R2 K24 R3    ; R2["mInitialY"] := R3
167 [-]: GETGLOBAL R2 K30       ; R2 := 0x34291f5c
168 [-]: GETTABLE  R2 R2 K43    ; R2 := R2[0xe6b41adb]
169 [-]: CALL      R2 1 2       ; R2 := R2()
170 [-]: TEST      R2 0         ; if not R2 then PC := 183
171 [-]: JMP       183          ; PC := 183
172 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
173 [-]: SELF      R2 R2 K44    ; R3 := R2; R2 := R2[0x1e5b5cfe]
174 [-]: LOADK     R4 K45       ; R4 := "Selected"
175 [-]: LOADK     R5 K46       ; R5 := "Focused"
176 [-]: LOADK     R6 K47       ; R6 := "Unfocused"
177 [-]: LOADK     R7 K48       ; R7 := "Pressed"
178 [-]: LOADK     R8 K46       ; R8 := "Focused"
179 [-]: LOADNIL   R9 R9        ; R9 := nil
180 [-]: LOADK     R10 K45      ; R10 := "Selected"
181 [-]: CALL      R2 9 1       ; R2(R3,R4,R5,R6,R7,R8,R9,R10)
182 [-]: JMP       191          ; PC := 191
183 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
184 [-]: SELF      R2 R2 K44    ; R3 := R2; R2 := R2[0x1e5b5cfe]
185 [-]: LOADK     R4 K45       ; R4 := "Selected"
186 [-]: LOADK     R5 K46       ; R5 := "Focused"
187 [-]: LOADK     R6 K47       ; R6 := "Unfocused"
188 [-]: LOADK     R7 K48       ; R7 := "Pressed"
189 [-]: LOADK     R8 K46       ; R8 := "Focused"
190 [-]: CALL      R2 7 1       ; R2(R3,R4,R5,R6,R7,R8)
191 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
192 [-]: SETTABLE  R2 K49 K50   ; R2["mElementDelayTime"] := 0.010000
193 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
194 [-]: SETTABLE  R2 K51 K52   ; R2["mElementTransitionTime"] := 0.050000
195 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
196 [-]: GETGLOBAL R3 K2        ; R3 := mInstalledGrid
197 [-]: GETTABLE  R3 R3 K14    ; R3 := R3["GRID_SEP_X"]
198 [-]: SETTABLE  R2 K53 R3    ; R2["mColumnSeparation"] := R3
199 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
200 [-]: GETGLOBAL R3 K2        ; R3 := mInstalledGrid
201 [-]: GETTABLE  R3 R3 K16    ; R3 := R3["GRID_SEP_Y"]
202 [-]: SETTABLE  R2 K54 R3    ; R2["mRowSeparation"] := R3
203 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
204 [-]: SETTABLE  R2 K55 K56   ; R2["mSelectedScale"] := 100.000000
205 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
206 [-]: SETTABLE  R2 K57 K58   ; R2["mSelectElementsOnFocus"] := false
207 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
208 [-]: SETTABLE  R2 K59 K58   ; R2["mAddFillerElements"] := false
209 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
210 [-]: SETTABLE  R2 K60 K58   ; R2["mQuickFilterAll"] := false
211 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
212 [-]: CLOSURE   R3 0         ; R3 := closure(Function #54.1)
213 [-]: GETUPVAL  R0 U4        ; R0 := U4
214 [-]: GETUPVAL  R0 U5        ; R0 := U5
215 [-]: GETUPVAL  R0 U6        ; R0 := U6
216 [-]: GETUPVAL  R0 U7        ; R0 := U7
217 [-]: SETTABLE  R2 K61 R3    ; R2["mOnFocusedCallback"] := R3
218 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
219 [-]: CLOSURE   R3 1         ; R3 := closure(Function #54.2)
220 [-]: GETUPVAL  R0 U4        ; R0 := U4
221 [-]: GETUPVAL  R0 U6        ; R0 := U6
222 [-]: GETUPVAL  R0 U5        ; R0 := U5
223 [-]: SETTABLE  R2 K62 R3    ; R2["mOnUnfocusedCallback"] := R3
224 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
225 [-]: CLOSURE   R3 2         ; R3 := closure(Function #54.3)
226 [-]: GETUPVAL  R0 U8        ; R0 := U8
227 [-]: GETUPVAL  R0 U5        ; R0 := U5
228 [-]: GETUPVAL  R0 U6        ; R0 := U6
229 [-]: GETUPVAL  R0 U9        ; R0 := U9
230 [-]: SETTABLE  R2 K63 R3    ; R2["mOnPressedCallback"] := R3
231 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
232 [-]: CLOSURE   R3 3         ; R3 := closure(Function #54.4)
233 [-]: GETUPVAL  R0 U6        ; R0 := U6
234 [-]: GETUPVAL  R0 U5        ; R0 := U5
235 [-]: GETUPVAL  R0 U8        ; R0 := U8
236 [-]: GETUPVAL  R0 U1        ; R0 := U1
237 [-]: GETUPVAL  R0 U10       ; R0 := U10
238 [-]: GETUPVAL  R0 U11       ; R0 := U11
239 [-]: SETTABLE  R2 K64 R3    ; R2["mOnSelectedCallback"] := R3
240 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
241 [-]: CLOSURE   R3 4         ; R3 := closure(Function #54.5)
242 [-]: GETUPVAL  R0 U9        ; R0 := U9
243 [-]: GETUPVAL  R0 U6        ; R0 := U6
244 [-]: GETUPVAL  R0 U5        ; R0 := U5
245 [-]: GETUPVAL  R0 U12       ; R0 := U12
246 [-]: GETUPVAL  R0 U2        ; R0 := U2
247 [-]: GETUPVAL  R0 U13       ; R0 := U13
248 [-]: GETUPVAL  R0 U14       ; R0 := U14
249 [-]: GETUPVAL  R0 U3        ; R0 := U3
250 [-]: GETUPVAL  R0 U1        ; R0 := U1
251 [-]: GETUPVAL  R0 U10       ; R0 := U10
252 [-]: SETTABLE  R2 K65 R3    ; R2["mElementDrawCallback"] := R3
253 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
254 [-]: GETGLOBAL R3 K2        ; R3 := mInstalledGrid
255 [-]: GETTABLE  R3 R3 K67    ; R3 := R3["Redraw"]
256 [-]: SETTABLE  R2 K66 R3    ; R2["_InstalledGrid_Redraw"] := R3
257 [-]: GETGLOBAL R2 K2        ; R2 := mInstalledGrid
258 [-]: CLOSURE   R3 5         ; R3 := closure(Function #54.6)
259 [-]: SETTABLE  R2 K67 R3    ; R2["Redraw"] := R3
260 [-]: RETURN    R0 1         ; return 


; Function #54.1:
;
; Name:            
; Defined at line: 2065
; #Upvalues:       4
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  14

  1 [-]: GETGLOBAL R2 K0        ; R2 := mInputBlocked
  2 [-]: TEST      R2 1         ; if R2 then PC := 11
  3 [-]: JMP       11           ; PC := 11
  4 [-]: GETGLOBAL R2 K1        ; R2 := mMouseDrag
  5 [-]: SELF      R2 R2 K2     ; R3 := R2; R2 := R2[0xf37943ff]
  6 [-]: CALL      R2 2 2       ; R2 := R2(R3)
  7 [-]: TEST      R2 0         ; if not R2 then PC := 12
  8 [-]: JMP       12           ; PC := 12
  9 [-]: TEST      R1 1         ; if R1 then PC := 12
 10 [-]: JMP       12           ; PC := 12
 11 [-]: RETURN    R0 1         ; return 
 12 [-]: GETUPVAL  R2 U0        ; R2 := U0
 13 [-]: CALL      R2 1 1       ; R2()
 14 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["mCardIndex"]
 15 [-]: LT        0 R2 K4      ; if R2 >= 1.000000 then PC := 18
 16 [-]: JMP       18           ; PC := 18
 17 [-]: RETURN    R0 1         ; return 
 18 [-]: GETGLOBAL R2 K5        ; R2 := 0x38f10e85
 19 [-]: GETGLOBAL R3 K6        ; R3 := 0xae91e43b
 20 [-]: LOADK     R4 K7        ; R4 := "Installed.swapDepths"
 21 [-]: CONST     R5 1200      ; R5 := 1200.000000
 22 [-]: CALL      R2 4 1       ; R2(R3,R4,R5)
 23 [-]: GETTABLE  R2 R0 K9     ; R2 := R0["Id"]
 24 [-]: SETGLOBAL R2 K8        ; mLastInstalledSlotFocused := R2
 25 [-]: GETUPVAL  R2 U1        ; R2 := U1
 26 [-]: GETTABLE  R2 R2 K10    ; R2 := R2[0x659d451f]
 27 [-]: GETGLOBAL R3 K11       ; R3 := 0x0032441c
 28 [-]: GETTABLE  R3 R3 K12    ; R3 := R3["UISound_Focus"]
 29 [-]: CALL      R2 2 1       ; R2(R3)
 30 [-]: GETUPVAL  R2 U2        ; R2 := U2
 31 [-]: GETTABLE  R2 R2 K13    ; R2 := R2[0x37970f97]
 32 [-]: MOVE      R3 R0        ; R3 := R0
 33 [-]: GETTABLE  R4 R0 K14    ; R4 := R0["mClipName"]
 34 [-]: LOADK     R5 K15       ; R5 := ".Card"
 35 [-]: CONCAT    R4 R4 R5     ; R4 := R4 .. R5
 36 [-]: LOADKB    R5 1 0       ; R5 := true
 37 [-]: LOADNIL   R6 R9        ; R6 := R7 := R8 := R9 := nil
 38 [-]: GETUPVAL  R10 U1       ; R10 := U1
 39 [-]: GETTABLE  R10 R10 K16  ; R10 := R10[0x06d055f9]
 40 [-]: GETGLOBAL R11 K17      ; R11 := mIsDiegetic
 41 [-]: LOADNIL   R12 R12      ; R12 := nil
 42 [-]: CONST     R13 2        ; R13 := 2.000000
 43 [-]: CALL      R10 4 0      ; R10,... := R10(R11,R12,R13)
 44 [-]: CALL      R2 0 1       ; R2(R3,...)
 45 [-]: GETGLOBAL R2 K5        ; R2 := 0x38f10e85
 46 [-]: GETGLOBAL R3 K6        ; R3 := 0xae91e43b
 47 [-]: GETTABLE  R4 R0 K14    ; R4 := R0["mClipName"]
 48 [-]: LOADK     R5 K18       ; R5 := ".swapDepths"
 49 [-]: CONCAT    R4 R4 R5     ; R4 := R4 .. R5
 50 [-]: CONST     R5 1200      ; R5 := 1200.000000
 51 [-]: CALL      R2 4 1       ; R2(R3,R4,R5)
 52 [-]: GETGLOBAL R2 K19       ; R2 := _T
 53 [-]: GETTABLE  R3 R0 K14    ; R3 := R0["mClipName"]
 54 [-]: SETTABLE  R2 K20 R3    ; R2["FocusedCard"] := R3
 55 [-]: GETUPVAL  R2 U3        ; R2 := U3
 56 [-]: MOVE      R3 R0        ; R3 := R0
 57 [-]: CALL      R2 2 1       ; R2(R3)
 58 [-]: RETURN    R0 1         ; return 


; Function #54.2:
;
; Name:            
; Defined at line: 2094
; #Upvalues:       3
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  13

  1 [-]: GETGLOBAL R1 K0        ; R1 := mInputBlocked
  2 [-]: TEST      R1 0         ; if not R1 then PC := 9
  3 [-]: JMP       9            ; PC := 9
  4 [-]: GETGLOBAL R1 K1        ; R1 := 0x34291f5c
  5 [-]: GETTABLE  R1 R1 K2     ; R1 := R1[0x781669d7]
  6 [-]: CALL      R1 1 2       ; R1 := R1()
  7 [-]: TEST      R1 0         ; if not R1 then PC := 17
  8 [-]: JMP       17           ; PC := 17
  9 [-]: GETGLOBAL R1 K3        ; R1 := mMouseDrag
 10 [-]: SELF      R1 R1 K4     ; R2 := R1; R1 := R1[0xf37943ff]
 11 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 12 [-]: TEST      R1 1         ; if R1 then PC := 17
 13 [-]: JMP       17           ; PC := 17
 14 [-]: GETTABLE  R1 R0 K5     ; R1 := R0["mClipName"]
 15 [-]: EQ        0 R1 K6      ; if R1 ~= nil then PC := 18
 16 [-]: JMP       18           ; PC := 18
 17 [-]: RETURN    R0 1         ; return 
 18 [-]: GETUPVAL  R1 U0        ; R1 := U0
 19 [-]: LOADKB    R2 1 0       ; R2 := true
 20 [-]: CALL      R1 2 1       ; R1(R2)
 21 [-]: GETGLOBAL R1 K7        ; R1 := _T
 22 [-]: SETTABLE  R1 K8 K6     ; R1["InfoPopup_Data"] := nil
 23 [-]: GETGLOBAL R1 K7        ; R1 := _T
 24 [-]: SETTABLE  R1 K9 K6     ; R1["gToolTip"] := nil
 25 [-]: GETUPVAL  R1 U1        ; R1 := U1
 26 [-]: GETTABLE  R1 R1 K10    ; R1 := R1[0x37970f97]
 27 [-]: MOVE      R2 R0        ; R2 := R0
 28 [-]: GETTABLE  R3 R0 K5     ; R3 := R0["mClipName"]
 29 [-]: LOADK     R4 K11       ; R4 := ".Card"
 30 [-]: CONCAT    R3 R3 R4     ; R3 := R3 .. R4
 31 [-]: LOADKB    R4 0 0       ; R4 := false
 32 [-]: LOADNIL   R5 R8        ; R5 := R6 := R7 := R8 := nil
 33 [-]: GETUPVAL  R9 U2        ; R9 := U2
 34 [-]: GETTABLE  R9 R9 K12    ; R9 := R9[0x06d055f9]
 35 [-]: GETGLOBAL R10 K13      ; R10 := mIsDiegetic
 36 [-]: LOADNIL   R11 R11      ; R11 := nil
 37 [-]: CONST     R12 2        ; R12 := 2.000000
 38 [-]: CALL      R9 4 0       ; R9,... := R9(R10,R11,R12)
 39 [-]: CALL      R1 0 1       ; R1(R2,...)
 40 [-]: RETURN    R0 1         ; return 


; Function #54.3:
;
; Name:            
; Defined at line: 2106
; #Upvalues:       4
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  18

  1 [-]: GETTABLE  R1 R0 K0     ; R1 := R0["mCardLocked"]
  2 [-]: TEST      R1 0         ; if not R1 then PC := 5
  3 [-]: JMP       5            ; PC := 5
  4 [-]: RETURN    R0 1         ; return 
  5 [-]: GETGLOBAL R1 K1        ; R1 := mMouseDrag
  6 [-]: SELF      R1 R1 K2     ; R2 := R1; R1 := R1[0xf37943ff]
  7 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  8 [-]: TEST      R1 0         ; if not R1 then PC := 20
  9 [-]: JMP       20           ; PC := 20
 10 [-]: GETUPVAL  R1 U0        ; R1 := U0
 11 [-]: GETGLOBAL R2 K3        ; R2 := mInstalledGrid
 12 [-]: MOVE      R3 R0        ; R3 := R0
 13 [-]: CALL      R1 3 1       ; R1(R2,R3)
 14 [-]: GETUPVAL  R1 U1        ; R1 := U1
 15 [-]: GETTABLE  R1 R1 K4     ; R1 := R1[0x659d451f]
 16 [-]: GETGLOBAL R2 K5        ; R2 := 0x0032441c
 17 [-]: GETTABLE  R2 R2 K6     ; R2 := R2["UISound_ButtonSelect"]
 18 [-]: CALL      R1 2 1       ; R1(R2)
 19 [-]: JMP       134          ; PC := 134
 20 [-]: GETGLOBAL R1 K7        ; R1 := mCards
 21 [-]: GETTABLE  R2 R0 K8     ; R2 := R0["mCardIndex"]
 22 [-]: GETTABLE  R1 R1 R2     ; R1 := R1[R2]
 23 [-]: GETGLOBAL R2 K9        ; R2 := 0x7b998233
 24 [-]: MOVE      R3 R1        ; R3 := R1
 25 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 26 [-]: TEST      R2 1         ; if R2 then PC := 134
 27 [-]: JMP       134          ; PC := 134
 28 [-]: GETUPVAL  R2 U1        ; R2 := U1
 29 [-]: GETTABLE  R2 R2 K4     ; R2 := R2[0x659d451f]
 30 [-]: GETGLOBAL R3 K5        ; R3 := 0x0032441c
 31 [-]: GETTABLE  R3 R3 K10    ; R3 := R3["UISound_Select"]
 32 [-]: CALL      R2 2 1       ; R2(R3)
 33 [-]: GETTABLE  R2 R1 K11    ; R2 := R1["mIcon"]
 34 [-]: GETGLOBAL R3 K3        ; R3 := mInstalledGrid
 35 [-]: SELF      R3 R3 K12    ; R4 := R3; R3 := R3[0xbce5a201]
 36 [-]: GETTABLE  R5 R0 K13    ; R5 := R0["Id"]
 37 [-]: CALL      R3 3 1       ; R3(R4,R5)
 38 [-]: GETUPVAL  R3 U2        ; R3 := U2
 39 [-]: GETTABLE  R3 R3 K14    ; R3 := R3[0x6b32352d]
 40 [-]: MOVE      R4 R1        ; R4 := R1
 41 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 42 [-]: TEST      R3 0         ; if not R3 then PC := 79
 43 [-]: JMP       79           ; PC := 79
 44 [-]: GETGLOBAL R3 K15       ; R3 := 0xae91e43b
 45 [-]: SELF      R3 R3 K16    ; R4 := R3; R3 := R3[0xd5181643]
 46 [-]: LOADK     R5 K17       ; R5 := "DragImage"
 47 [-]: GETGLOBAL R6 K5        ; R6 := 0x0032441c
 48 [-]: GETTABLE  R6 R6 K18    ; R6 := R6["UIMaterial_Mods"]
 49 [-]: GETTABLE  R6 R6 K19    ; R6 := R6[2.000000]
 50 [-]: GETTABLE  R6 R6 K20    ; R6 := R6["ImmortalIcon"]
 51 [-]: CALL      R3 4 1       ; R3(R4,R5,R6)
 52 [-]: GETGLOBAL R3 K15       ; R3 := 0xae91e43b
 53 [-]: SELF      R3 R3 K21    ; R4 := R3; R3 := R3[0x64735a8e]
 54 [-]: LOADK     R5 K17       ; R5 := "DragImage"
 55 [-]: GETGLOBAL R6 K22       ; R6 := 0x0469f296
 56 [-]: LOADK     R7 K23       ; R7 := "DetailMap"
 57 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 58 [-]: GETTABLE  R7 R1 K24    ; R7 := R1["mGlowIcon"]
 59 [-]: CALL      R3 5 1       ; R3(R4,R5,R6,R7)
 60 [-]: GETGLOBAL R3 K15       ; R3 := 0xae91e43b
 61 [-]: SELF      R3 R3 K25    ; R4 := R3; R3 := R3[0x91e13703]
 62 [-]: LOADK     R5 K17       ; R5 := "DragImage"
 63 [-]: LOADK     R6 K26       ; R6 := "DetailMapTint"
 64 [-]: LOADK     R7 K27       ; R7 := 0.635300
 65 [-]: CONST     R8 0         ; R8 := 0.000000
 66 [-]: LOADK     R9 K28       ; R9 := 0.180400
 67 [-]: CONST     R10 1        ; R10 := 1.000000
 68 [-]: CALL      R3 8 1       ; R3(R4,R5,R6,R7,R8,R9,R10)
 69 [-]: GETGLOBAL R3 K15       ; R3 := 0xae91e43b
 70 [-]: SELF      R3 R3 K25    ; R4 := R3; R3 := R3[0x91e13703]
 71 [-]: LOADK     R5 K17       ; R5 := "DragImage"
 72 [-]: LOADK     R6 K29       ; R6 := "DetailMapParams"
 73 [-]: CONST     R7 1         ; R7 := 1.000000
 74 [-]: CONST     R8 1         ; R8 := 1.000000
 75 [-]: CONST     R9 1         ; R9 := 1.000000
 76 [-]: CONST     R10 1        ; R10 := 1.000000
 77 [-]: CALL      R3 8 1       ; R3(R4,R5,R6,R7,R8,R9,R10)
 78 [-]: JMP       122          ; PC := 122
 79 [-]: GETGLOBAL R3 K15       ; R3 := 0xae91e43b
 80 [-]: SELF      R3 R3 K16    ; R4 := R3; R3 := R3[0xd5181643]
 81 [-]: LOADK     R5 K17       ; R5 := "DragImage"
 82 [-]: GETGLOBAL R6 K5        ; R6 := 0x0032441c
 83 [-]: GETTABLE  R6 R6 K18    ; R6 := R6["UIMaterial_Mods"]
 84 [-]: GETTABLE  R6 R6 K19    ; R6 := R6[2.000000]
 85 [-]: GETTABLE  R6 R6 K30    ; R6 := R6["Icon"]
 86 [-]: CALL      R3 4 1       ; R3(R4,R5,R6)
 87 [-]: GETGLOBAL R3 K5        ; R3 := 0x0032441c
 88 [-]: GETTABLE  R3 R3 K18    ; R3 := R3["UIMaterial_Mods"]
 89 [-]: GETTABLE  R3 R3 K19    ; R3 := R3[2.000000]
 90 [-]: GETTABLE  R3 R3 K30    ; R3 := R3["Icon"]
 91 [-]: SELF      R3 R3 K31    ; R4 := R3; R3 := R3[0x0a395711]
 92 [-]: GETGLOBAL R5 K22       ; R5 := 0x0469f296
 93 [-]: LOADK     R6 K23       ; R6 := "DetailMap"
 94 [-]: CALL      R5 2 0       ; R5,... := R5(R6)
 95 [-]: CALL      R3 0 2       ; R3 := R3(R4,...)
 96 [-]: GETGLOBAL R4 K15       ; R4 := 0xae91e43b
 97 [-]: SELF      R4 R4 K21    ; R5 := R4; R4 := R4[0x64735a8e]
 98 [-]: LOADK     R6 K17       ; R6 := "DragImage"
 99 [-]: GETGLOBAL R7 K22       ; R7 := 0x0469f296
100 [-]: LOADK     R8 K23       ; R8 := "DetailMap"
101 [-]: CALL      R7 2 2       ; R7 := R7(R8)
102 [-]: MOVE      R8 R3        ; R8 := R3
103 [-]: CALL      R4 5 1       ; R4(R5,R6,R7,R8)
104 [-]: GETGLOBAL R4 K15       ; R4 := 0xae91e43b
105 [-]: SELF      R4 R4 K25    ; R5 := R4; R4 := R4[0x91e13703]
106 [-]: LOADK     R6 K17       ; R6 := "DragImage"
107 [-]: LOADK     R7 K26       ; R7 := "DetailMapTint"
108 [-]: CONST     R8 1         ; R8 := 1.000000
109 [-]: CONST     R9 1         ; R9 := 1.000000
110 [-]: CONST     R10 1        ; R10 := 1.000000
111 [-]: CONST     R11 0        ; R11 := 0.000000
112 [-]: CALL      R4 8 1       ; R4(R5,R6,R7,R8,R9,R10,R11)
113 [-]: GETGLOBAL R4 K15       ; R4 := 0xae91e43b
114 [-]: SELF      R4 R4 K25    ; R5 := R4; R4 := R4[0x91e13703]
115 [-]: LOADK     R6 K17       ; R6 := "DragImage"
116 [-]: LOADK     R7 K29       ; R7 := "DetailMapParams"
117 [-]: CONST     R8 0         ; R8 := 0.000000
118 [-]: CONST     R9 0         ; R9 := 0.000000
119 [-]: CONST     R10 1        ; R10 := 1.000000
120 [-]: CONST     R11 1        ; R11 := 1.000000
121 [-]: CALL      R4 8 1       ; R4(R5,R6,R7,R8,R9,R10,R11)
122 [-]: GETGLOBAL R4 K1        ; R4 := mMouseDrag
123 [-]: SELF      R4 R4 K32    ; R5 := R4; R4 := R4[0x383d2e7d]
124 [-]: LOADK     R6 K17       ; R6 := "DragImage"
125 [-]: MOVE      R7 R2        ; R7 := R2
126 [-]: NEWTABLE  R8 0 3       ; R8 := {}
127 [-]: SETTABLE  R8 K33 R1    ; R8["item"] := R1
128 [-]: GETGLOBAL R9 K3        ; R9 := mInstalledGrid
129 [-]: SETTABLE  R8 K34 R9    ; R8["grid"] := R9
130 [-]: SETTABLE  R8 K35 R0    ; R8["element"] := R0
131 [-]: CALL      R4 5 1       ; R4(R5,R6,R7,R8)
132 [-]: GETGLOBAL R4 K36       ; R4 := _T
133 [-]: SETTABLE  R4 K37 K38   ; R4["gToolTip"] := nil
134 [-]: GETGLOBAL R4 K39       ; R4 := 0x34291f5c
135 [-]: GETTABLE  R4 R4 K40    ; R4 := R4[0x781669d7]
136 [-]: CALL      R4 1 2       ; R4 := R4()
137 [-]: TEST      R4 0         ; if not R4 then PC := 168
138 [-]: JMP       168          ; PC := 168
139 [-]: GETGLOBAL R4 K15       ; R4 := 0xae91e43b
140 [-]: SELF      R4 R4 K41    ; R5 := R4; R4 := R4[0x91a24e4b]
141 [-]: GETTABLE  R6 R0 K42    ; R6 := R0["mClipName"]
142 [-]: CONST     R7 0         ; R7 := 0.000000
143 [-]: CALL      R4 4 2       ; R4 := R4(R5,R6,R7)
144 [-]: GETGLOBAL R5 K15       ; R5 := 0xae91e43b
145 [-]: SELF      R5 R5 K41    ; R6 := R5; R5 := R5[0x91a24e4b]
146 [-]: GETTABLE  R7 R0 K42    ; R7 := R0["mClipName"]
147 [-]: CONST     R8 1         ; R8 := 1.000000
148 [-]: CALL      R5 4 2       ; R5 := R5(R6,R7,R8)
149 [-]: SETUPVAL  R0 U3        ; U82 := R3
150 [-]: GETUPVAL  R6 U2        ; R6 := U2
151 [-]: GETTABLE  R6 R6 K43    ; R6 := R6[0x37970f97]
152 [-]: MOVE      R7 R0        ; R7 := R0
153 [-]: GETTABLE  R8 R0 K42    ; R8 := R0["mClipName"]
154 [-]: LOADK     R9 K44       ; R9 := ".Card"
155 [-]: CONCAT    R8 R8 R9     ; R8 := R8 .. R9
156 [-]: LOADKB    R9 1 0       ; R9 := true
157 [-]: LOADNIL   R10 R10      ; R10 := nil
158 [-]: SUB       R11 K45 R4   ; R11 := 400.000000 - R4
159 [-]: SUB       R12 K46 R5   ; R12 := -100.000000 - R5
160 [-]: LOADNIL   R13 R13      ; R13 := nil
161 [-]: GETUPVAL  R14 U1       ; R14 := U1
162 [-]: GETTABLE  R14 R14 K47  ; R14 := R14[0x06d055f9]
163 [-]: GETGLOBAL R15 K48      ; R15 := mIsDiegetic
164 [-]: LOADNIL   R16 R16      ; R16 := nil
165 [-]: CONST     R17 2        ; R17 := 2.000000
166 [-]: CALL      R14 4 0      ; R14,... := R14(R15,R16,R17)
167 [-]: CALL      R6 0 1       ; R6(R7,...)
168 [-]: RETURN    R0 1         ; return 


; Function #54.4:
;
; Name:            
; Defined at line: 2146
; #Upvalues:       6
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  13

  1 [-]: GETGLOBAL R1 K0        ; R1 := mInputBlocked
  2 [-]: TEST      R1 0         ; if not R1 then PC := 5
  3 [-]: JMP       5            ; PC := 5
  4 [-]: RETURN    R0 1         ; return 
  5 [-]: GETGLOBAL R1 K1        ; R1 := 0x34291f5c
  6 [-]: GETTABLE  R1 R1 K2     ; R1 := R1[0x781669d7]
  7 [-]: CALL      R1 1 2       ; R1 := R1()
  8 [-]: TEST      R1 0         ; if not R1 then PC := 38
  9 [-]: JMP       38           ; PC := 38
 10 [-]: GETGLOBAL R1 K3        ; R1 := 0x7b998233
 11 [-]: MOVE      R2 R0        ; R2 := R0
 12 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 13 [-]: TEST      R1 1         ; if R1 then PC := 38
 14 [-]: JMP       38           ; PC := 38
 15 [-]: GETGLOBAL R1 K3        ; R1 := 0x7b998233
 16 [-]: GETTABLE  R2 R0 K4     ; R2 := R0["mClipName"]
 17 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 18 [-]: TEST      R1 1         ; if R1 then PC := 38
 19 [-]: JMP       38           ; PC := 38
 20 [-]: GETUPVAL  R1 U0        ; R1 := U0
 21 [-]: GETTABLE  R1 R1 K5     ; R1 := R1[0x37970f97]
 22 [-]: MOVE      R2 R0        ; R2 := R0
 23 [-]: GETTABLE  R3 R0 K4     ; R3 := R0["mClipName"]
 24 [-]: LOADK     R4 K6        ; R4 := ".Card"
 25 [-]: CONCAT    R3 R3 R4     ; R3 := R3 .. R4
 26 [-]: LOADKB    R4 0 0       ; R4 := false
 27 [-]: LOADNIL   R5 R5        ; R5 := nil
 28 [-]: CONST     R6 0         ; R6 := 0.000000
 29 [-]: CONST     R7 0         ; R7 := 0.000000
 30 [-]: LOADNIL   R8 R8        ; R8 := nil
 31 [-]: GETUPVAL  R9 U1        ; R9 := U1
 32 [-]: GETTABLE  R9 R9 K7     ; R9 := R9[0x06d055f9]
 33 [-]: GETGLOBAL R10 K8       ; R10 := mIsDiegetic
 34 [-]: LOADNIL   R11 R11      ; R11 := nil
 35 [-]: CONST     R12 2        ; R12 := 2.000000
 36 [-]: CALL      R9 4 0       ; R9,... := R9(R10,R11,R12)
 37 [-]: CALL      R1 0 1       ; R1(R2,...)
 38 [-]: GETGLOBAL R1 K9        ; R1 := mMouseDrag
 39 [-]: SELF      R1 R1 K10    ; R2 := R1; R1 := R1[0xf37943ff]
 40 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 41 [-]: TEST      R1 0         ; if not R1 then PC := 58
 42 [-]: JMP       58           ; PC := 58
 43 [-]: GETGLOBAL R1 K1        ; R1 := 0x34291f5c
 44 [-]: GETTABLE  R1 R1 K11    ; R1 := R1[0x1467d5f4]
 45 [-]: CALL      R1 1 2       ; R1 := R1()
 46 [-]: TEST      R1 1         ; if R1 then PC := 77
 47 [-]: JMP       77           ; PC := 77
 48 [-]: GETUPVAL  R1 U2        ; R1 := U2
 49 [-]: GETGLOBAL R2 K12       ; R2 := mInstalledGrid
 50 [-]: MOVE      R3 R0        ; R3 := R0
 51 [-]: CALL      R1 3 1       ; R1(R2,R3)
 52 [-]: GETUPVAL  R1 U1        ; R1 := U1
 53 [-]: GETTABLE  R1 R1 K13    ; R1 := R1[0x659d451f]
 54 [-]: GETGLOBAL R2 K14       ; R2 := 0x0032441c
 55 [-]: GETTABLE  R2 R2 K15    ; R2 := R2["UISound_ItemTipSection"]
 56 [-]: CALL      R1 2 1       ; R1(R2)
 57 [-]: JMP       77           ; PC := 77
 58 [-]: GETUPVAL  R1 U3        ; R1 := U3
 59 [-]: GETTABLE  R1 R1 K16    ; R1 := R1[0xba7a0a82]
 60 [-]: GETUPVAL  R2 U4        ; R2 := U4
 61 [-]: GETTABLE  R2 R2 K17    ; R2 := R2["type"]
 62 [-]: GETTABLE  R3 R0 K18    ; R3 := R0["Id"]
 63 [-]: CALL      R1 3 2       ; R1 := R1(R2,R3)
 64 [-]: TEST      R1 0         ; if not R1 then PC := 77
 65 [-]: JMP       77           ; PC := 77
 66 [-]: GETTABLE  R1 R0 K19    ; R1 := R0["Locked"]
 67 [-]: TEST      R1 0         ; if not R1 then PC := 77
 68 [-]: JMP       77           ; PC := 77
 69 [-]: GETGLOBAL R1 K3        ; R1 := 0x7b998233
 70 [-]: GETGLOBAL R2 K20       ; R2 := mPendingUpgradeOperation
 71 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 72 [-]: TEST      R1 0         ; if not R1 then PC := 77
 73 [-]: JMP       77           ; PC := 77
 74 [-]: GETUPVAL  R1 U5        ; R1 := U5
 75 [-]: CONST     R2 1         ; R2 := 1.000000
 76 [-]: CALL      R1 2 1       ; R1(R2)
 77 [-]: RETURN    R0 1         ; return 


; Function #54.5:
;
; Name:            
; Defined at line: 2165
; #Upvalues:       10
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  15

  1 [-]: GETTABLE  R1 R0 K0     ; R1 := R0["mClipName"]
  2 [-]: EQ        0 R1 K1      ; if R1 ~= nil then PC := 5
  3 [-]: JMP       5            ; PC := 5
  4 [-]: RETURN    R0 1         ; return 
  5 [-]: GETGLOBAL R1 K2        ; R1 := 0x34291f5c
  6 [-]: GETTABLE  R1 R1 K3     ; R1 := R1[0x781669d7]
  7 [-]: CALL      R1 1 2       ; R1 := R1()
  8 [-]: TEST      R1 0         ; if not R1 then PC := 40
  9 [-]: JMP       40           ; PC := 40
 10 [-]: GETGLOBAL R1 K4        ; R1 := 0x7b998233
 11 [-]: GETUPVAL  R2 U0        ; R2 := U0
 12 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 13 [-]: TEST      R1 1         ; if R1 then PC := 40
 14 [-]: JMP       40           ; PC := 40
 15 [-]: GETGLOBAL R1 K4        ; R1 := 0x7b998233
 16 [-]: GETUPVAL  R2 U0        ; R2 := U0
 17 [-]: GETTABLE  R2 R2 K0     ; R2 := R2["mClipName"]
 18 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 19 [-]: TEST      R1 1         ; if R1 then PC := 40
 20 [-]: JMP       40           ; PC := 40
 21 [-]: GETUPVAL  R1 U1        ; R1 := U1
 22 [-]: GETTABLE  R1 R1 K5     ; R1 := R1[0x37970f97]
 23 [-]: GETUPVAL  R2 U0        ; R2 := U0
 24 [-]: GETUPVAL  R3 U0        ; R3 := U0
 25 [-]: GETTABLE  R3 R3 K0     ; R3 := R3["mClipName"]
 26 [-]: LOADK     R4 K6        ; R4 := ".Card"
 27 [-]: CONCAT    R3 R3 R4     ; R3 := R3 .. R4
 28 [-]: LOADKB    R4 0 0       ; R4 := false
 29 [-]: LOADNIL   R5 R5        ; R5 := nil
 30 [-]: CONST     R6 0         ; R6 := 0.000000
 31 [-]: CONST     R7 0         ; R7 := 0.000000
 32 [-]: LOADNIL   R8 R8        ; R8 := nil
 33 [-]: GETUPVAL  R9 U2        ; R9 := U2
 34 [-]: GETTABLE  R9 R9 K7     ; R9 := R9[0x06d055f9]
 35 [-]: GETGLOBAL R10 K8       ; R10 := mIsDiegetic
 36 [-]: LOADNIL   R11 R11      ; R11 := nil
 37 [-]: CONST     R12 2        ; R12 := 2.000000
 38 [-]: CALL      R9 4 0       ; R9,... := R9(R10,R11,R12)
 39 [-]: CALL      R1 0 1       ; R1(R2,...)
 40 [-]: GETGLOBAL R1 K9        ; R1 := mInstalledGrid
 41 [-]: SELF      R1 R1 K10    ; R2 := R1; R1 := R1[0x1d246732]
 42 [-]: GETTABLE  R3 R0 K11    ; R3 := R0["Id"]
 43 [-]: CALL      R1 3 2       ; R1 := R1(R2,R3)
 44 [-]: GETGLOBAL R2 K9        ; R2 := mInstalledGrid
 45 [-]: GETTABLE  R2 R2 K12    ; R2 := R2["mCurrentElementIndex"]
 46 [-]: EQ        1 R2 K1      ; if R2 == nil then PC := 52
 47 [-]: JMP       52           ; PC := 52
 48 [-]: GETGLOBAL R2 K9        ; R2 := mInstalledGrid
 49 [-]: GETTABLE  R2 R2 K12    ; R2 := R2["mCurrentElementIndex"]
 50 [-]: EQ        1 R1 R2      ; if R1 == R2 then PC := 53
 51 [-]: JMP       53           ; PC := 53
 52 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 53
 53 [-]: LOADKB    R2 1 0       ; R2 := true
 54 [-]: GETGLOBAL R3 K13       ; R3 := 0xae91e43b
 55 [-]: SELF      R3 R3 K14    ; R4 := R3; R3 := R3[0x19ad3f57]
 56 [-]: GETTABLE  R5 R0 K0     ; R5 := R0["mClipName"]
 57 [-]: LOADK     R6 K15       ; R6 := "Btn"
 58 [-]: LOADK     R7 K16       ; R7 := "trackAsMenu"
 59 [-]: LOADKB    R8 1 0       ; R8 := true
 60 [-]: CALL      R3 6 1       ; R3(R4,R5,R6,R7,R8)
 61 [-]: GETUPVAL  R3 U1        ; R3 := U1
 62 [-]: GETTABLE  R3 R3 K17    ; R3 := R3[0xcbcefa26]
 63 [-]: MOVE      R4 R0        ; R4 := R0
 64 [-]: LOADNIL   R5 R7        ; R5 := R6 := R7 := nil
 65 [-]: GETUPVAL  R8 U2        ; R8 := U2
 66 [-]: GETTABLE  R8 R8 K7     ; R8 := R8[0x06d055f9]
 67 [-]: GETGLOBAL R9 K8        ; R9 := mIsDiegetic
 68 [-]: LOADNIL   R10 R10      ; R10 := nil
 69 [-]: CONST     R11 2        ; R11 := 2.000000
 70 [-]: CALL      R8 4 0       ; R8,... := R8(R9,R10,R11)
 71 [-]: CALL      R3 0 1       ; R3(R4,...)
 72 [-]: GETUPVAL  R3 U1        ; R3 := U1
 73 [-]: GETTABLE  R3 R3 K5     ; R3 := R3[0x37970f97]
 74 [-]: MOVE      R4 R0        ; R4 := R0
 75 [-]: GETTABLE  R5 R0 K0     ; R5 := R0["mClipName"]
 76 [-]: LOADK     R6 K6        ; R6 := ".Card"
 77 [-]: CONCAT    R5 R5 R6     ; R5 := R5 .. R6
 78 [-]: MOVE      R6 R2        ; R6 := R2
 79 [-]: CONST     R7 0         ; R7 := 0.000000
 80 [-]: LOADNIL   R8 R10       ; R8 := R9 := R10 := nil
 81 [-]: GETUPVAL  R11 U2       ; R11 := U2
 82 [-]: GETTABLE  R11 R11 K7   ; R11 := R11[0x06d055f9]
 83 [-]: GETGLOBAL R12 K8       ; R12 := mIsDiegetic
 84 [-]: LOADNIL   R13 R13      ; R13 := nil
 85 [-]: CONST     R14 2        ; R14 := 2.000000
 86 [-]: CALL      R11 4 0      ; R11,... := R11(R12,R13,R14)
 87 [-]: CALL      R3 0 1       ; R3(R4,...)
 88 [-]: GETUPVAL  R3 U3        ; R3 := U3
 89 [-]: MOVE      R4 R0        ; R4 := R0
 90 [-]: CALL      R3 2 1       ; R3(R4)
 91 [-]: LOADNIL   R3 R3        ; R3 := nil
 92 [-]: GETUPVAL  R4 U4        ; R4 := U4
 93 [-]: CALL      R4 1 2       ; R4 := R4()
 94 [-]: TEST      R4 0         ; if not R4 then PC := 134
 95 [-]: JMP       134          ; PC := 134
 96 [-]: GETTABLE  R4 R0 K11    ; R4 := R0["Id"]
 97 [-]: GETGLOBAL R5 K18       ; R5 := RAILJACK_SLOTS
 98 [-]: GETTABLE  R5 R5 K19    ; R5 := R5["BATTLE_DEF"]
 99 [-]: EQ        1 R4 R5      ; if R4 == R5 then PC := 106
100 [-]: JMP       106          ; PC := 106
101 [-]: GETTABLE  R4 R0 K11    ; R4 := R0["Id"]
102 [-]: GETGLOBAL R5 K18       ; R5 := RAILJACK_SLOTS
103 [-]: GETTABLE  R5 R5 K20    ; R5 := R5["TAC_DEF"]
104 [-]: EQ        0 R4 R5      ; if R4 ~= R5 then PC := 109
105 [-]: JMP       109          ; PC := 109
106 [-]: GETGLOBAL R4 K21       ; R4 := 0x0032441c
107 [-]: GETTABLE  R3 R4 K22    ; R3 := R4["UICategoryIcon_RailjackDefensiveOn"]
108 [-]: JMP       134          ; PC := 134
109 [-]: GETTABLE  R4 R0 K11    ; R4 := R0["Id"]
110 [-]: GETGLOBAL R5 K18       ; R5 := RAILJACK_SLOTS
111 [-]: GETTABLE  R5 R5 K23    ; R5 := R5["BATTLE_OFF"]
112 [-]: EQ        1 R4 R5      ; if R4 == R5 then PC := 119
113 [-]: JMP       119          ; PC := 119
114 [-]: GETTABLE  R4 R0 K11    ; R4 := R0["Id"]
115 [-]: GETGLOBAL R5 K18       ; R5 := RAILJACK_SLOTS
116 [-]: GETTABLE  R5 R5 K24    ; R5 := R5["TAC_OFF"]
117 [-]: EQ        0 R4 R5      ; if R4 ~= R5 then PC := 122
118 [-]: JMP       122          ; PC := 122
119 [-]: GETGLOBAL R4 K21       ; R4 := 0x0032441c
120 [-]: GETTABLE  R3 R4 K25    ; R3 := R4["UICategoryIcon_RailjackOffensiveOn"]
121 [-]: JMP       134          ; PC := 134
122 [-]: GETTABLE  R4 R0 K11    ; R4 := R0["Id"]
123 [-]: GETGLOBAL R5 K18       ; R5 := RAILJACK_SLOTS
124 [-]: GETTABLE  R5 R5 K26    ; R5 := R5["BATTLE_SUPER"]
125 [-]: EQ        1 R4 R5      ; if R4 == R5 then PC := 132
126 [-]: JMP       132          ; PC := 132
127 [-]: GETTABLE  R4 R0 K11    ; R4 := R0["Id"]
128 [-]: GETGLOBAL R5 K18       ; R5 := RAILJACK_SLOTS
129 [-]: GETTABLE  R5 R5 K27    ; R5 := R5["TAC_SUPER"]
130 [-]: EQ        0 R4 R5      ; if R4 ~= R5 then PC := 134
131 [-]: JMP       134          ; PC := 134
132 [-]: GETGLOBAL R4 K21       ; R4 := 0x0032441c
133 [-]: GETTABLE  R3 R4 K28    ; R3 := R4["UICategoryIcon_RailjackSuperOn"]
134 [-]: GETTABLE  R4 R0 K11    ; R4 := R0["Id"]
135 [-]: GETGLOBAL R5 K29       ; R5 := AURA_SLOT_INDEX
136 [-]: EQ        0 R4 R5      ; if R4 ~= R5 then PC := 149
137 [-]: JMP       149          ; PC := 149
138 [-]: GETUPVAL  R4 U5        ; R4 := U5
139 [-]: CALL      R4 1 2       ; R4 := R4()
140 [-]: TEST      R4 1         ; if R4 then PC := 146
141 [-]: JMP       146          ; PC := 146
142 [-]: GETUPVAL  R4 U4        ; R4 := U4
143 [-]: CALL      R4 1 2       ; R4 := R4()
144 [-]: TEST      R4 0         ; if not R4 then PC := 149
145 [-]: JMP       149          ; PC := 149
146 [-]: GETGLOBAL R4 K21       ; R4 := 0x0032441c
147 [-]: GETTABLE  R3 R4 K30    ; R3 := R4["UICategoryIcon_AuraOn"]
148 [-]: JMP       159          ; PC := 159
149 [-]: GETTABLE  R4 R0 K11    ; R4 := R0["Id"]
150 [-]: GETGLOBAL R5 K31       ; R5 := MELEE_STANCE_SLOT
151 [-]: EQ        0 R4 R5      ; if R4 ~= R5 then PC := 159
152 [-]: JMP       159          ; PC := 159
153 [-]: GETUPVAL  R4 U6        ; R4 := U6
154 [-]: CALL      R4 1 2       ; R4 := R4()
155 [-]: TEST      R4 0         ; if not R4 then PC := 159
156 [-]: JMP       159          ; PC := 159
157 [-]: GETGLOBAL R4 K21       ; R4 := 0x0032441c
158 [-]: GETTABLE  R3 R4 K32    ; R3 := R4["UICategoryIcon_StanceOn"]
159 [-]: EQ        0 R3 K1      ; if R3 ~= nil then PC := 162
160 [-]: JMP       162          ; PC := 162
161 [-]: LOADKB    R4 0 1       ; R4 := false; PC := 162
162 [-]: LOADKB    R4 1 0       ; R4 := true
163 [-]: GETGLOBAL R5 K13       ; R5 := 0xae91e43b
164 [-]: SELF      R5 R5 K33    ; R6 := R5; R5 := R5[0xc0a3774b]
165 [-]: GETTABLE  R7 R0 K0     ; R7 := R0["mClipName"]
166 [-]: LOADK     R8 K34       ; R8 := "SocketType"
167 [-]: CONST     R9 11        ; R9 := 11.000000
168 [-]: MOVE      R10 R4       ; R10 := R4
169 [-]: CALL      R5 6 1       ; R5(R6,R7,R8,R9,R10)
170 [-]: GETGLOBAL R5 K13       ; R5 := 0xae91e43b
171 [-]: SELF      R5 R5 K33    ; R6 := R5; R5 := R5[0xc0a3774b]
172 [-]: GETTABLE  R7 R0 K0     ; R7 := R0["mClipName"]
173 [-]: LOADK     R8 K35       ; R8 := "SocketTypeBacker"
174 [-]: CONST     R9 11        ; R9 := 11.000000
175 [-]: MOVE      R10 R4       ; R10 := R4
176 [-]: CALL      R5 6 1       ; R5(R6,R7,R8,R9,R10)
177 [-]: TEST      R4 0         ; if not R4 then PC := 186
178 [-]: JMP       186          ; PC := 186
179 [-]: GETGLOBAL R5 K13       ; R5 := 0xae91e43b
180 [-]: SELF      R5 R5 K36    ; R6 := R5; R5 := R5[0x1cb415c1]
181 [-]: GETTABLE  R7 R0 K0     ; R7 := R0["mClipName"]
182 [-]: LOADK     R8 K37       ; R8 := ".SocketType"
183 [-]: CONCAT    R7 R7 R8     ; R7 := R7 .. R8
184 [-]: MOVE      R8 R3        ; R8 := R3
185 [-]: CALL      R5 4 1       ; R5(R6,R7,R8)
186 [-]: LOADK     R5 K38       ; R5 := "Installed.Brackets"
187 [-]: GETTABLE  R6 R0 K39    ; R6 := R0["mIndex"]
188 [-]: CONCAT    R5 R5 R6     ; R5 := R5 .. R6
189 [-]: GETGLOBAL R6 K13       ; R6 := 0xae91e43b
190 [-]: SELF      R6 R6 K40    ; R7 := R6; R6 := R6[0xa7ec3e8a]
191 [-]: MOVE      R8 R5        ; R8 := R5
192 [-]: CALL      R6 3 2       ; R6 := R6(R7,R8)
193 [-]: TEST      R6 1         ; if R6 then PC := 208
194 [-]: JMP       208          ; PC := 208
195 [-]: GETGLOBAL R6 K41       ; R6 := 0x015284cd
196 [-]: LOADK     R7 K42       ; R7 := "."
197 [-]: MOVE      R8 R5        ; R8 := R5
198 [-]: CALL      R6 3 2       ; R6 := R6(R7,R8)
199 [-]: GETGLOBAL R7 K43       ; R7 := 0x38f10e85
200 [-]: GETGLOBAL R8 K13       ; R8 := 0xae91e43b
201 [-]: LOADK     R9 K44       ; R9 := "Installed.Brackets1.duplicateMovieClip"
202 [-]: LEN       R10 R6       ; R10 := # R6
203 [-]: GETTABLE  R10 R6 R10   ; R10 := R6[R10]
204 [-]: GETTABLE  R11 R0 K11   ; R11 := R0["Id"]
205 [-]: ADD       R11 K45 R11  ; R11 := -1000.000000 + R11
206 [-]: CALL      R7 5 1       ; R7(R8,R9,R10,R11)
207 [-]: JMP       216          ; PC := 216
208 [-]: GETGLOBAL R7 K43       ; R7 := 0x38f10e85
209 [-]: GETGLOBAL R8 K13       ; R8 := 0xae91e43b
210 [-]: MOVE      R9 R5        ; R9 := R5
211 [-]: LOADK     R10 K46      ; R10 := ".swapDepths"
212 [-]: CONCAT    R9 R9 R10    ; R9 := R9 .. R10
213 [-]: GETTABLE  R10 R0 K11   ; R10 := R0["Id"]
214 [-]: ADD       R10 K45 R10  ; R10 := -1000.000000 + R10
215 [-]: CALL      R7 4 1       ; R7(R8,R9,R10)
216 [-]: GETGLOBAL R7 K13       ; R7 := 0xae91e43b
217 [-]: SELF      R7 R7 K47    ; R8 := R7; R7 := R7[0x67bc869f]
218 [-]: MOVE      R9 R5        ; R9 := R5
219 [-]: CONST     R10 0        ; R10 := 0.000000
220 [-]: GETGLOBAL R11 K9       ; R11 := mInstalledGrid
221 [-]: SELF      R11 R11 K48  ; R12 := R11; R11 := R11[0x67e369fa]
222 [-]: MOVE      R13 R0       ; R13 := R0
223 [-]: CALL      R11 3 0      ; R11,... := R11(R12,R13)
224 [-]: CALL      R7 0 1       ; R7(R8,...)
225 [-]: GETGLOBAL R7 K13       ; R7 := 0xae91e43b
226 [-]: SELF      R7 R7 K47    ; R8 := R7; R7 := R7[0x67bc869f]
227 [-]: MOVE      R9 R5        ; R9 := R5
228 [-]: CONST     R10 1        ; R10 := 1.000000
229 [-]: GETGLOBAL R11 K9       ; R11 := mInstalledGrid
230 [-]: SELF      R11 R11 K49  ; R12 := R11; R11 := R11[0x68e36b8d]
231 [-]: MOVE      R13 R0       ; R13 := R0
232 [-]: CALL      R11 3 0      ; R11,... := R11(R12,R13)
233 [-]: CALL      R7 0 1       ; R7(R8,...)
234 [-]: GETGLOBAL R7 K13       ; R7 := 0xae91e43b
235 [-]: SELF      R7 R7 K33    ; R8 := R7; R7 := R7[0xc0a3774b]
236 [-]: MOVE      R9 R5        ; R9 := R5
237 [-]: LOADK     R10 K50      ; R10 := "Border"
238 [-]: CONST     R11 11       ; R11 := 11.000000
239 [-]: GETTABLE  R12 R0 K51   ; R12 := R0["Locked"]
240 [-]: NOT       R12 R12      ; R12 :=  R12
241 [-]: CALL      R7 6 1       ; R7(R8,R9,R10,R11,R12)
242 [-]: GETGLOBAL R7 K13       ; R7 := 0xae91e43b
243 [-]: SELF      R7 R7 K33    ; R8 := R7; R7 := R7[0xc0a3774b]
244 [-]: MOVE      R9 R5        ; R9 := R5
245 [-]: LOADK     R10 K51      ; R10 := "Locked"
246 [-]: CONST     R11 11       ; R11 := 11.000000
247 [-]: GETTABLE  R12 R0 K51   ; R12 := R0["Locked"]
248 [-]: CALL      R7 6 1       ; R7(R8,R9,R10,R11,R12)
249 [-]: CONST     R7 8         ; R7 := 8.000000
250 [-]: GETUPVAL  R8 U7        ; R8 := U7
251 [-]: CALL      R8 1 2       ; R8 := R8()
252 [-]: TEST      R8 0         ; if not R8 then PC := 282
253 [-]: JMP       282          ; PC := 282
254 [-]: GETTABLE  R8 R0 K11    ; R8 := R0["Id"]
255 [-]: GETGLOBAL R9 K52       ; R9 := IMMORTAL_SLOT_INDEX
256 [-]: LE        0 R9 R8      ; if R9 > R8 then PC := 282
257 [-]: JMP       282          ; PC := 282
258 [-]: GETGLOBAL R8 K13       ; R8 := 0xae91e43b
259 [-]: SELF      R8 R8 K36    ; R9 := R8; R8 := R8[0x1cb415c1]
260 [-]: MOVE      R10 R5       ; R10 := R5
261 [-]: LOADK     R11 K53      ; R11 := ".Icon"
262 [-]: CONCAT    R10 R10 R11  ; R10 := R10 .. R11
263 [-]: GETGLOBAL R11 K21      ; R11 := 0x0032441c
264 [-]: GETTABLE  R11 R11 K54  ; R11 := R11["UICategoryIcon_ImmortalOn"]
265 [-]: CALL      R8 4 1       ; R8(R9,R10,R11)
266 [-]: GETGLOBAL R8 K13       ; R8 := 0xae91e43b
267 [-]: SELF      R8 R8 K55    ; R9 := R8; R8 := R8[0xf64b7262]
268 [-]: MOVE      R10 R5       ; R10 := R5
269 [-]: LOADK     R11 K56      ; R11 := "Icon"
270 [-]: CONST     R12 10       ; R12 := 10.000000
271 [-]: CONST     R13 20       ; R13 := 20.000000
272 [-]: CALL      R8 6 1       ; R8(R9,R10,R11,R12,R13)
273 [-]: GETGLOBAL R8 K43       ; R8 := 0x38f10e85
274 [-]: GETGLOBAL R9 K13       ; R9 := 0xae91e43b
275 [-]: MOVE      R10 R5       ; R10 := R5
276 [-]: LOADK     R11 K57      ; R11 := ".Border.gotoAndStop"
277 [-]: CONCAT    R10 R10 R11  ; R10 := R10 .. R11
278 [-]: LOADK     R11 K58      ; R11 := "Immortal"
279 [-]: CALL      R8 4 1       ; R8(R9,R10,R11)
280 [-]: CONST     R7 0         ; R7 := 0.000000
281 [-]: JMP       327          ; PC := 327
282 [-]: GETUPVAL  R8 U8        ; R8 := U8
283 [-]: GETTABLE  R8 R8 K59    ; R8 := R8[0xba7a0a82]
284 [-]: GETUPVAL  R9 U9        ; R9 := U9
285 [-]: GETTABLE  R9 R9 K60    ; R9 := R9["type"]
286 [-]: GETTABLE  R10 R0 K11   ; R10 := R0["Id"]
287 [-]: CALL      R8 3 2       ; R8 := R8(R9,R10)
288 [-]: TEST      R8 0         ; if not R8 then PC := 313
289 [-]: JMP       313          ; PC := 313
290 [-]: GETGLOBAL R8 K13       ; R8 := 0xae91e43b
291 [-]: SELF      R8 R8 K36    ; R9 := R8; R8 := R8[0x1cb415c1]
292 [-]: MOVE      R10 R5       ; R10 := R5
293 [-]: LOADK     R11 K53      ; R11 := ".Icon"
294 [-]: CONCAT    R10 R10 R11  ; R10 := R10 .. R11
295 [-]: GETGLOBAL R11 K21      ; R11 := 0x0032441c
296 [-]: GETTABLE  R11 R11 K61  ; R11 := R11["UICategoryIcon_UtilityOn"]
297 [-]: CALL      R8 4 1       ; R8(R9,R10,R11)
298 [-]: GETGLOBAL R8 K13       ; R8 := 0xae91e43b
299 [-]: SELF      R8 R8 K55    ; R9 := R8; R8 := R8[0xf64b7262]
300 [-]: MOVE      R10 R5       ; R10 := R5
301 [-]: LOADK     R11 K56      ; R11 := "Icon"
302 [-]: CONST     R12 10       ; R12 := 10.000000
303 [-]: CONST     R13 20       ; R13 := 20.000000
304 [-]: CALL      R8 6 1       ; R8(R9,R10,R11,R12,R13)
305 [-]: GETGLOBAL R8 K43       ; R8 := 0x38f10e85
306 [-]: GETGLOBAL R9 K13       ; R9 := 0xae91e43b
307 [-]: MOVE      R10 R5       ; R10 := R5
308 [-]: LOADK     R11 K57      ; R11 := ".Border.gotoAndStop"
309 [-]: CONCAT    R10 R10 R11  ; R10 := R10 .. R11
310 [-]: LOADK     R11 K62      ; R11 := "Normal"
311 [-]: CALL      R8 4 1       ; R8(R9,R10,R11)
312 [-]: JMP       327          ; PC := 327
313 [-]: GETGLOBAL R8 K13       ; R8 := 0xae91e43b
314 [-]: SELF      R8 R8 K55    ; R9 := R8; R8 := R8[0xf64b7262]
315 [-]: MOVE      R10 R5       ; R10 := R5
316 [-]: LOADK     R11 K56      ; R11 := "Icon"
317 [-]: CONST     R12 10       ; R12 := 10.000000
318 [-]: CONST     R13 0        ; R13 := 0.000000
319 [-]: CALL      R8 6 1       ; R8(R9,R10,R11,R12,R13)
320 [-]: GETGLOBAL R8 K43       ; R8 := 0x38f10e85
321 [-]: GETGLOBAL R9 K13       ; R9 := 0xae91e43b
322 [-]: MOVE      R10 R5       ; R10 := R5
323 [-]: LOADK     R11 K57      ; R11 := ".Border.gotoAndStop"
324 [-]: CONCAT    R10 R10 R11  ; R10 := R10 .. R11
325 [-]: LOADK     R11 K62      ; R11 := "Normal"
326 [-]: CALL      R8 4 1       ; R8(R9,R10,R11)
327 [-]: GETGLOBAL R8 K13       ; R8 := 0xae91e43b
328 [-]: SELF      R8 R8 K55    ; R9 := R8; R8 := R8[0xf64b7262]
329 [-]: MOVE      R10 R5       ; R10 := R5
330 [-]: LOADK     R11 K56      ; R11 := "Icon"
331 [-]: CONST     R12 1        ; R12 := 1.000000
332 [-]: MOVE      R13 R7       ; R13 := R7
333 [-]: CALL      R8 6 1       ; R8(R9,R10,R11,R12,R13)
334 [-]: RETURN    R0 1         ; return 


; Function #54.6:
;
; Name:            
; Defined at line: 2235
; #Upvalues:       0
; #Parameters:     6
; Is_vararg:       0
; Max Stack Size:  14

  1 [-]: SELF      R6 R0 K0     ; R7 := R0; R6 := R0[0xb1fd8d7f]
  2 [-]: MOVE      R8 R1        ; R8 := R1
  3 [-]: MOVE      R9 R2        ; R9 := R2
  4 [-]: MOVE      R10 R3       ; R10 := R3
  5 [-]: MOVE      R11 R4       ; R11 := R4
  6 [-]: MOVE      R12 R5       ; R12 := R5
  7 [-]: CALL      R6 7 1       ; R6(R7,R8,R9,R10,R11,R12)
  8 [-]: SELF      R6 R0 K1     ; R7 := R0; R6 := R0[0x5fbddc1a]
  9 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 10 [-]: CONST     R7 1         ; R7 := 1.000000
 11 [-]: LOADK     R8 K2        ; R8 := "Installed.Brackets"
 12 [-]: MOVE      R9 R7        ; R9 := R7
 13 [-]: CONCAT    R8 R8 R9     ; R8 := R8 .. R9
 14 [-]: GETGLOBAL R9 K3        ; R9 := 0xae91e43b
 15 [-]: SELF      R9 R9 K4     ; R10 := R9; R9 := R9[0xa7ec3e8a]
 16 [-]: MOVE      R11 R8       ; R11 := R8
 17 [-]: CALL      R9 3 2       ; R9 := R9(R10,R11)
 18 [-]: TEST      R9 1         ; if R9 then PC := 22
 19 [-]: JMP       22           ; PC := 22
 20 [-]: JMP       33           ; PC := 33
 21 [-]: JMP       31           ; PC := 31
 22 [-]: GETGLOBAL R9 K3        ; R9 := 0xae91e43b
 23 [-]: SELF      R9 R9 K5     ; R10 := R9; R9 := R9[0xaade900e]
 24 [-]: MOVE      R11 R8       ; R11 := R8
 25 [-]: CONST     R12 11       ; R12 := 11.000000
 26 [-]: LE        1 R7 R6      ; if R7 <= R6 then PC := 29
 27 [-]: JMP       29           ; PC := 29
 28 [-]: LOADKB    R13 0 1      ; R13 := false; PC := 29
 29 [-]: LOADKB    R13 1 0      ; R13 := true
 30 [-]: CALL      R9 5 1       ; R9(R10,R11,R12,R13)
 31 [-]: ADD       R7 R7 K6     ; R7 := R7 + 1.000000
 32 [-]: JMP       11           ; PC := 11
 33 [-]: RETURN    R0 1         ; return 


; Function #55:
;
; Name:            
; Defined at line: 2254
; #Upvalues:       9
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  32

  1 [-]: GETUPVAL  R0 U0        ; R0 := U0
  2 [-]: CALL      R0 1 1       ; R0()
  3 [-]: GETGLOBAL R0 K0        ; R0 := mInstalledGrid
  4 [-]: SELF      R0 R0 K1     ; R1 := R0; R0 := R0[0x7c09c373]
  5 [-]: CALL      R0 2 1       ; R0(R1)
  6 [-]: GETUPVAL  R0 U1        ; R0 := U1
  7 [-]: GETTABLE  R0 R0 K2     ; R0 := R0["info"]
  8 [-]: GETTABLE  R0 R0 K3     ; R0 := R0["mItemId"]
  9 [-]: GETTABLE  R0 R0 K4     ; R0 := R0["mId"]
 10 [-]: GETGLOBAL R1 K5        ; R1 := 0xae91e43b
 11 [-]: SELF      R1 R1 K6     ; R2 := R1; R1 := R1[0x42b04007]
 12 [-]: LOADK     R3 K7        ; R3 := "<MOD_SELECTOR>"
 13 [-]: LOADKB    R4 1 0       ; R4 := true
 14 [-]: CALL      R1 4 2       ; R1 := R1(R2,R3,R4)
 15 [-]: CONST     R2 1         ; R2 := 1.000000
 16 [-]: GETGLOBAL R3 K8        ; R3 := mCardSlots
 17 [-]: CONST     R4 1         ; R4 := 1.000000
 18 [-]: FORPREP   R2 89        ; R2 -= R4; PC := 89
 19 [-]: LOADKB    R6 0 0       ; R6 := false
 20 [-]: GETUPVAL  R7 U2        ; R7 := U2
 21 [-]: GETTABLE  R7 R7 K9     ; R7 := R7[0xba7a0a82]
 22 [-]: GETUPVAL  R8 U1        ; R8 := U1
 23 [-]: GETTABLE  R8 R8 K10    ; R8 := R8["type"]
 24 [-]: MOVE      R9 R5        ; R9 := R5
 25 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
 26 [-]: TEST      R7 0         ; if not R7 then PC := 34
 27 [-]: JMP       34           ; PC := 34
 28 [-]: GETUPVAL  R7 U1        ; R7 := U1
 29 [-]: GETTABLE  R7 R7 K2     ; R7 := R7["info"]
 30 [-]: SELF      R7 R7 K11    ; R8 := R7; R7 := R7[0xdbfbf6c0]
 31 [-]: CONST     R9 1         ; R9 := 1.000000
 32 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
 33 [-]: NOT       R6 R7        ; R6 :=  R7
 34 [-]: NEWTABLE  R7 0 6       ; R7 := {}
 35 [-]: SETTABLE  R7 K13 R5    ; R7["Id"] := R5
 36 [-]: SETTABLE  R7 K14 K15   ; R7["mCardIndex"] := -1.000000
 37 [-]: GETGLOBAL R8 K17       ; R8 := mArtifactSlots
 38 [-]: GETTABLE  R8 R8 R5     ; R8 := R8[R5]
 39 [-]: SETTABLE  R7 K16 R8    ; R7["mPolarity"] := R8
 40 [-]: SETTABLE  R7 K18 K19   ; R7["mHasSlot"] := true
 41 [-]: SETTABLE  R7 K20 R1    ; R7["mSelectionText"] := R1
 42 [-]: SETTABLE  R7 K21 R6    ; R7["Locked"] := R6
 43 [-]: GETUPVAL  R8 U3        ; R8 := U3
 44 [-]: CALL      R8 1 2       ; R8 := R8()
 45 [-]: TEST      R8 0         ; if not R8 then PC := 51
 46 [-]: JMP       51           ; PC := 51
 47 [-]: GETGLOBAL R8 K22       ; R8 := IMMORTAL_SLOT_INDEX
 48 [-]: LE        0 R8 R5      ; if R8 > R5 then PC := 51
 49 [-]: JMP       51           ; PC := 51
 50 [-]: SETTABLE  R7 K23 K24   ; R7["mSlotType"] := "Immortal"
 51 [-]: GETUPVAL  R8 U4        ; R8 := U4
 52 [-]: CALL      R8 1 2       ; R8 := R8()
 53 [-]: TEST      R8 0         ; if not R8 then PC := 84
 54 [-]: JMP       84           ; PC := 84
 55 [-]: NEWTABLE  R8 0 0       ; R8 := {}
 56 [-]: SETTABLE  R7 K25 R8    ; R7["Categories"] := R8
 57 [-]: LE        0 R5 K26     ; if R5 > 3.000000 then PC := 67
 58 [-]: JMP       67           ; PC := 67
 59 [-]: GETGLOBAL R8 K27       ; R8 := 0x33bdd652
 60 [-]: GETTABLE  R8 R8 K28    ; R8 := R8[0x23d5322f]
 61 [-]: GETTABLE  R9 R7 K25    ; R9 := R7["Categories"]
 62 [-]: GETGLOBAL R10 K29      ; R10 := mAvionicCategories
 63 [-]: GETTABLE  R10 R10 K25  ; R10 := R10["Categories"]
 64 [-]: GETTABLE  R10 R10 K30  ; R10 := R10["BATTLE"]
 65 [-]: CALL      R8 3 1       ; R8(R9,R10)
 66 [-]: JMP       84           ; PC := 84
 67 [-]: LE        0 R5 K31     ; if R5 > 6.000000 then PC := 77
 68 [-]: JMP       77           ; PC := 77
 69 [-]: GETGLOBAL R8 K27       ; R8 := 0x33bdd652
 70 [-]: GETTABLE  R8 R8 K28    ; R8 := R8[0x23d5322f]
 71 [-]: GETTABLE  R9 R7 K25    ; R9 := R7["Categories"]
 72 [-]: GETGLOBAL R10 K29      ; R10 := mAvionicCategories
 73 [-]: GETTABLE  R10 R10 K25  ; R10 := R10["Categories"]
 74 [-]: GETTABLE  R10 R10 K32  ; R10 := R10["TACTICAL"]
 75 [-]: CALL      R8 3 1       ; R8(R9,R10)
 76 [-]: JMP       84           ; PC := 84
 77 [-]: GETGLOBAL R8 K27       ; R8 := 0x33bdd652
 78 [-]: GETTABLE  R8 R8 K28    ; R8 := R8[0x23d5322f]
 79 [-]: GETTABLE  R9 R7 K25    ; R9 := R7["Categories"]
 80 [-]: GETGLOBAL R10 K29      ; R10 := mAvionicCategories
 81 [-]: GETTABLE  R10 R10 K25  ; R10 := R10["Categories"]
 82 [-]: GETTABLE  R10 R10 K33  ; R10 := R10["INTEGRATED"]
 83 [-]: CALL      R8 3 1       ; R8(R9,R10)
 84 [-]: GETGLOBAL R8 K0        ; R8 := mInstalledGrid
 85 [-]: SELF      R8 R8 K34    ; R9 := R8; R8 := R8[0xbad4316f]
 86 [-]: MOVE      R10 R7       ; R10 := R7
 87 [-]: LOADKB    R11 1 0      ; R11 := true
 88 [-]: CALL      R8 4 1       ; R8(R9,R10,R11)
 89 [-]: FORLOOP   R2 19        ; R2 += R4; if R2 <= R3 then begin PC := 19; R5 := R2 end
 90 [-]: GETGLOBAL R8 K35       ; R8 := mGameData
 91 [-]: SELF      R8 R8 K36    ; R9 := R8; R8 := R8[0x25a6e75e]
 92 [-]: CALL      R8 2 2       ; R8 := R8(R9)
 93 [-]: NEWTABLE  R9 0 0       ; R9 := {}
 94 [-]: CONST     R10 0        ; R10 := 0.000000
 95 [-]: CONST     R11 9        ; R11 := 9.000000
 96 [-]: CONST     R12 1        ; R12 := 1.000000
 97 [-]: FORPREP   R10 105      ; R10 -= R12; PC := 105
 98 [-]: SELF      R14 R8 K37   ; R15 := R8; R14 := R8[0x566259e1]
 99 [-]: MOVE      R16 R13      ; R16 := R13
100 [-]: SELF      R17 R8 K38   ; R18 := R8; R17 := R8[0x4e457768]
101 [-]: MOVE      R19 R13      ; R19 := R13
102 [-]: CALL      R17 3 0      ; R17,... := R17(R18,R19)
103 [-]: CALL      R14 0 2      ; R14 := R14(R15,...)
104 [-]: SETTABLE  R9 R13 R14   ; R9[R13] := R14
105 [-]: FORLOOP   R10 98       ; R10 += R12; if R10 <= R11 then begin PC := 98; R13 := R10 end
106 [-]: CONST     R14 1        ; R14 := 1.000000
107 [-]: GETGLOBAL R15 K39      ; R15 := mCards
108 [-]: LEN       R15 R15      ; R15 := # R15
109 [-]: CONST     R16 1        ; R16 := 1.000000
110 [-]: FORPREP   R14 156      ; R14 -= R16; PC := 156
111 [-]: GETGLOBAL R18 K39      ; R18 := mCards
112 [-]: GETTABLE  R18 R18 R17  ; R18 := R18[R17]
113 [-]: GETTABLE  R19 R18 K40  ; R19 := R18["mInstalled"]
114 [-]: GETTABLE  R19 R19 R0   ; R19 := R19[R0]
115 [-]: EQ        1 R19 K41    ; if R19 == nil then PC := 156
116 [-]: JMP       156          ; PC := 156
117 [-]: GETGLOBAL R19 K0       ; R19 := mInstalledGrid
118 [-]: SELF      R19 R19 K42  ; R20 := R19; R19 := R19[0xf73486b6]
119 [-]: GETTABLE  R21 R18 K40  ; R21 := R18["mInstalled"]
120 [-]: GETTABLE  R21 R21 R0   ; R21 := R21[R0]
121 [-]: CALL      R19 3 2      ; R19 := R19(R20,R21)
122 [-]: GETGLOBAL R20 K43      ; R20 := 0x7b998233
123 [-]: MOVE      R21 R19      ; R21 := R19
124 [-]: CALL      R20 2 2      ; R20 := R20(R21)
125 [-]: TEST      R20 1        ; if R20 then PC := 154
126 [-]: JMP       154          ; PC := 154
127 [-]: SETTABLE  R18 K44 R19  ; R18["mElement"] := R19
128 [-]: SETTABLE  R19 K14 R17  ; R19["mCardIndex"] := R17
129 [-]: GETUPVAL  R20 U5       ; R20 := U5
130 [-]: MOVE      R21 R18      ; R21 := R18
131 [-]: MOVE      R22 R9       ; R22 := R9
132 [-]: CALL      R20 3 5      ; R20,R21,R22,R23 := R20(R21,R22)
133 [-]: GETTABLE  R24 R18 K45  ; R24 := R18["mName"]
134 [-]: SETTABLE  R19 K45 R24  ; R19["mName"] := R24
135 [-]: SETTABLE  R19 K40 R20  ; R19["mInstalled"] := R20
136 [-]: SETTABLE  R19 K46 R21  ; R19["mInstalledLoadOutType"] := R21
137 [-]: SETTABLE  R19 K47 R22  ; R19["mInstalledType"] := R22
138 [-]: SETTABLE  R19 K48 R23  ; R19["mInstalledName"] := R23
139 [-]: GETTABLE  R24 R18 K49  ; R24 := R18["mModSet"]
140 [-]: SETTABLE  R19 K49 R24  ; R19["mModSet"] := R24
141 [-]: GETUPVAL  R24 U6       ; R24 := U6
142 [-]: GETTABLE  R24 R24 K50  ; R24 := R24[0x04213f13]
143 [-]: MOVE      R25 R18      ; R25 := R18
144 [-]: LOADKB    R26 1 0      ; R26 := true
145 [-]: CALL      R24 3 2      ; R24 := R24(R25,R26)
146 [-]: TEST      R24 0        ; if not R24 then PC := 156
147 [-]: JMP       156          ; PC := 156
148 [-]: GETGLOBAL R24 K51      ; R24 := mOmegaCount
149 [-]: GETTABLE  R25 R18 K52  ; R25 := R18["mUpgrade"]
150 [-]: GETTABLE  R25 R25 K53  ; R25 := R25["mItemCount"]
151 [-]: ADD       R24 R24 R25  ; R24 := R24 + R25
152 [-]: SETGLOBAL R24 K51      ; mOmegaCount := R24
153 [-]: JMP       156          ; PC := 156
154 [-]: GETTABLE  R24 R18 K40  ; R24 := R18["mInstalled"]
155 [-]: SETTABLE  R24 R0 K41   ; R24[R0] := nil
156 [-]: FORLOOP   R14 111      ; R14 += R16; if R14 <= R15 then begin PC := 111; R17 := R14 end
157 [-]: GETUPVAL  R24 U2       ; R24 := U2
158 [-]: GETTABLE  R24 R24 K54  ; R24 := R24[0x5d93cf60]
159 [-]: GETGLOBAL R25 K0       ; R25 := mInstalledGrid
160 [-]: GETGLOBAL R26 K55      ; R26 := _T
161 [-]: GETTABLE  R26 R26 K56  ; R26 := R26["upgradeItemCategory"]
162 [-]: GETGLOBAL R27 K55      ; R27 := _T
163 [-]: GETTABLE  R27 R27 K57  ; R27 := R27["upgradeItemSlot"]
164 [-]: GETUPVAL  R28 U1       ; R28 := U1
165 [-]: CALL      R24 5 1      ; R24(R25,R26,R27,R28)
166 [-]: GETUPVAL  R24 U2       ; R24 := U2
167 [-]: GETTABLE  R24 R24 K58  ; R24 := R24[0x9cebe2a3]
168 [-]: GETGLOBAL R25 K0       ; R25 := mInstalledGrid
169 [-]: GETGLOBAL R26 K55      ; R26 := _T
170 [-]: GETTABLE  R26 R26 K56  ; R26 := R26["upgradeItemCategory"]
171 [-]: GETGLOBAL R27 K55      ; R27 := _T
172 [-]: GETTABLE  R27 R27 K57  ; R27 := R27["upgradeItemSlot"]
173 [-]: GETUPVAL  R28 U1       ; R28 := U1
174 [-]: GETGLOBAL R29 K43      ; R29 := 0x7b998233
175 [-]: GETGLOBAL R30 K59      ; R30 := mRailjackMovie
176 [-]: CALL      R29 2 2      ; R29 := R29(R30)
177 [-]: NOT       R29 R29      ; R29 :=  R29
178 [-]: CALL      R24 6 1      ; R24(R25,R26,R27,R28,R29)
179 [-]: GETUPVAL  R24 U7       ; R24 := U7
180 [-]: CALL      R24 1 2      ; R24 := R24()
181 [-]: TEST      R24 0        ; if not R24 then PC := 212
182 [-]: JMP       212          ; PC := 212
183 [-]: GETGLOBAL R24 K0       ; R24 := mInstalledGrid
184 [-]: SELF      R24 R24 K60  ; R25 := R24; R24 := R24[0x5465f8f3]
185 [-]: GETGLOBAL R26 K61      ; R26 := MELEE_STANCE_SLOT
186 [-]: CALL      R24 3 2      ; R24 := R24(R25,R26)
187 [-]: GETGLOBAL R25 K43      ; R25 := 0x7b998233
188 [-]: MOVE      R26 R24      ; R26 := R24
189 [-]: CALL      R25 2 2      ; R25 := R25(R26)
190 [-]: TEST      R25 1        ; if R25 then PC := 212
191 [-]: JMP       212          ; PC := 212
192 [-]: GETGLOBAL R25 K5       ; R25 := 0xae91e43b
193 [-]: SELF      R25 R25 K62  ; R26 := R25; R25 := R25[0x67bc869f]
194 [-]: LOADK     R27 K63      ; R27 := "Installed.ComboBtn"
195 [-]: CONST     R28 0        ; R28 := 0.000000
196 [-]: GETGLOBAL R29 K0       ; R29 := mInstalledGrid
197 [-]: SELF      R29 R29 K64  ; R30 := R29; R29 := R29[0x67e369fa]
198 [-]: MOVE      R31 R24      ; R31 := R24
199 [-]: CALL      R29 3 2      ; R29 := R29(R30,R31)
200 [-]: SUB       R29 R29 K65  ; R29 := R29 - -150.000000
201 [-]: CALL      R25 5 1      ; R25(R26,R27,R28,R29)
202 [-]: GETGLOBAL R25 K5       ; R25 := 0xae91e43b
203 [-]: SELF      R25 R25 K62  ; R26 := R25; R25 := R25[0x67bc869f]
204 [-]: LOADK     R27 K63      ; R27 := "Installed.ComboBtn"
205 [-]: CONST     R28 1        ; R28 := 1.000000
206 [-]: GETGLOBAL R29 K0       ; R29 := mInstalledGrid
207 [-]: SELF      R29 R29 K66  ; R30 := R29; R29 := R29[0x68e36b8d]
208 [-]: MOVE      R31 R24      ; R31 := R24
209 [-]: CALL      R29 3 2      ; R29 := R29(R30,R31)
210 [-]: SUB       R29 R29 K67  ; R29 := R29 - -5.000000
211 [-]: CALL      R25 5 1      ; R25(R26,R27,R28,R29)
212 [-]: GETUPVAL  R25 U4       ; R25 := U4
213 [-]: CALL      R25 1 2      ; R25 := R25()
214 [-]: TEST      R25 0        ; if not R25 then PC := 255
215 [-]: JMP       255          ; PC := 255
216 [-]: GETGLOBAL R25 K29      ; R25 := mAvionicCategories
217 [-]: SELF      R25 R25 K68  ; R26 := R25; R25 := R25[0x070daa5a]
218 [-]: CONST     R27 1        ; R27 := 1.000000
219 [-]: CALL      R25 3 1      ; R25(R26,R27)
220 [-]: GETGLOBAL R25 K29      ; R25 := mAvionicCategories
221 [-]: SELF      R25 R25 K69  ; R26 := R25; R25 := R25[0xb52a46b7]
222 [-]: CALL      R25 2 1      ; R25(R26)
223 [-]: GETGLOBAL R25 K70      ; R25 := 0x25d99d89
224 [-]: SELF      R25 R25 K71  ; R26 := R25; R25 := R25[0x21a1810f]
225 [-]: GETGLOBAL R27 K72      ; R27 := 0x0469f296
226 [-]: LOADK     R28 K73      ; R28 := "RailjackPlexusTutorial"
227 [-]: CALL      R27 2 0      ; R27,... := R27(R28)
228 [-]: CALL      R25 0 2      ; R25 := R25(R26,...)
229 [-]: TEST      R25 1        ; if R25 then PC := 255
230 [-]: JMP       255          ; PC := 255
231 [-]: GETGLOBAL R25 K74      ; R25 := 0x34291f5c
232 [-]: GETTABLE  R25 R25 K75  ; R25 := R25[0xe27b35bb]
233 [-]: CALL      R25 1 2      ; R25 := R25()
234 [-]: SETTABLE  R25 K76 K77  ; R25["dialogType"] := 0.000000
235 [-]: SETTABLE  R25 K78 K79  ; R25["locString"] := "/Lotus/Language/Railjack/RailjackHelp_Plexus"
236 [-]: GETGLOBAL R26 K43      ; R26 := 0x7b998233
237 [-]: GETGLOBAL R27 K80      ; R27 := 0x7683d4b0
238 [-]: CALL      R26 2 2      ; R26 := R26(R27)
239 [-]: TEST      R26 1        ; if R26 then PC := 245
240 [-]: JMP       245          ; PC := 245
241 [-]: GETGLOBAL R26 K80      ; R26 := 0x7683d4b0
242 [-]: SELF      R26 R26 K82  ; R27 := R26; R26 := R26[0xed4e0128]
243 [-]: CALL      R26 2 2      ; R26 := R26(R27)
244 [-]: SETTABLE  R25 K81 R26  ; R25["icon"] := R26
245 [-]: GETUPVAL  R26 U8       ; R26 := U8
246 [-]: GETTABLE  R26 R26 K83  ; R26 := R26[0xe99b84e7]
247 [-]: MOVE      R27 R25      ; R27 := R25
248 [-]: CALL      R26 2 1      ; R26(R27)
249 [-]: GETGLOBAL R26 K70      ; R26 := 0x25d99d89
250 [-]: SELF      R26 R26 K84  ; R27 := R26; R26 := R26[0xbf6c9575]
251 [-]: GETGLOBAL R28 K72      ; R28 := 0x0469f296
252 [-]: LOADK     R29 K73      ; R29 := "RailjackPlexusTutorial"
253 [-]: CALL      R28 2 0      ; R28,... := R28(R29)
254 [-]: CALL      R26 0 1      ; R26(R27,...)
255 [-]: GETGLOBAL R26 K0       ; R26 := mInstalledGrid
256 [-]: SELF      R26 R26 K85  ; R27 := R26; R26 := R26[0x71e9ac81]
257 [-]: CALL      R26 2 1      ; R26(R27)
258 [-]: RETURN    R0 1         ; return 


; Function #56:
;
; Name:            
; Defined at line: 2344
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mAvionicCategories
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 15
  5 [-]: JMP       15           ; PC := 15
  6 [-]: GETGLOBAL R1 K2        ; R1 := mInputBlocked
  7 [-]: TEST      R1 1         ; if R1 then PC := 15
  8 [-]: JMP       15           ; PC := 15
  9 [-]: GETGLOBAL R1 K1        ; R1 := mAvionicCategories
 10 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0xdf42446e]
 11 [-]: GETGLOBAL R3 K4        ; R3 := 0x03f57322
 12 [-]: MOVE      R4 R0        ; R4 := R0
 13 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 14 [-]: CALL      R1 0 1       ; R1(R2,...)
 15 [-]: RETURN    R0 1         ; return 


; Function #57:
;
; Name:            
; Defined at line: 2350
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mAvionicCategories
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 15
  5 [-]: JMP       15           ; PC := 15
  6 [-]: GETGLOBAL R1 K2        ; R1 := mInputBlocked
  7 [-]: TEST      R1 1         ; if R1 then PC := 15
  8 [-]: JMP       15           ; PC := 15
  9 [-]: GETGLOBAL R1 K1        ; R1 := mAvionicCategories
 10 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0xbce5a201]
 11 [-]: GETGLOBAL R3 K4        ; R3 := 0x03f57322
 12 [-]: MOVE      R4 R0        ; R4 := R0
 13 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 14 [-]: CALL      R1 0 1       ; R1(R2,...)
 15 [-]: RETURN    R0 1         ; return 


; Function #58:
;
; Name:            
; Defined at line: 2356
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mAvionicCategories
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 20
  5 [-]: JMP       20           ; PC := 20
  6 [-]: GETGLOBAL R1 K2        ; R1 := mInputBlocked
  7 [-]: TEST      R1 1         ; if R1 then PC := 20
  8 [-]: JMP       20           ; PC := 20
  9 [-]: GETGLOBAL R1 K1        ; R1 := mAvionicCategories
 10 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0x070daa5a]
 11 [-]: GETGLOBAL R3 K4        ; R3 := 0x03f57322
 12 [-]: MOVE      R4 R0        ; R4 := R0
 13 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 14 [-]: CALL      R1 0 1       ; R1(R2,...)
 15 [-]: GETUPVAL  R1 U0        ; R1 := U0
 16 [-]: GETTABLE  R1 R1 K5     ; R1 := R1[0x659d451f]
 17 [-]: GETGLOBAL R2 K6        ; R2 := 0x0032441c
 18 [-]: GETTABLE  R2 R2 K7     ; R2 := R2["UISound_ItemTipSection"]
 19 [-]: CALL      R1 2 1       ; R1(R2)
 20 [-]: RETURN    R0 1         ; return 


; Function #59:
;
; Name:            
; Defined at line: 2363
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mAvionicCategories
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 20
  5 [-]: JMP       20           ; PC := 20
  6 [-]: GETGLOBAL R1 K2        ; R1 := mInputBlocked
  7 [-]: TEST      R1 1         ; if R1 then PC := 20
  8 [-]: JMP       20           ; PC := 20
  9 [-]: GETGLOBAL R1 K1        ; R1 := mAvionicCategories
 10 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0xaf5319dc]
 11 [-]: GETGLOBAL R3 K4        ; R3 := 0x03f57322
 12 [-]: MOVE      R4 R0        ; R4 := R0
 13 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 14 [-]: CALL      R1 0 1       ; R1(R2,...)
 15 [-]: GETUPVAL  R1 U0        ; R1 := U0
 16 [-]: GETTABLE  R1 R1 K5     ; R1 := R1[0x659d451f]
 17 [-]: GETGLOBAL R2 K6        ; R2 := 0x0032441c
 18 [-]: GETTABLE  R2 R2 K7     ; R2 := R2["UISound_ButtonSelect"]
 19 [-]: CALL      R1 2 1       ; R1(R2)
 20 [-]: RETURN    R0 1         ; return 


; Function #60:
;
; Name:            
; Defined at line: 2370
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mCollectionGrid
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 15
  5 [-]: JMP       15           ; PC := 15
  6 [-]: GETGLOBAL R1 K2        ; R1 := mInputBlocked
  7 [-]: TEST      R1 1         ; if R1 then PC := 15
  8 [-]: JMP       15           ; PC := 15
  9 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
 10 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0xdf42446e]
 11 [-]: GETGLOBAL R3 K4        ; R3 := 0x03f57322
 12 [-]: MOVE      R4 R0        ; R4 := R0
 13 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 14 [-]: CALL      R1 0 1       ; R1(R2,...)
 15 [-]: RETURN    R0 1         ; return 


; Function #61:
;
; Name:            
; Defined at line: 2376
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mCollectionGrid
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 15
  5 [-]: JMP       15           ; PC := 15
  6 [-]: GETGLOBAL R1 K2        ; R1 := mInputBlocked
  7 [-]: TEST      R1 1         ; if R1 then PC := 15
  8 [-]: JMP       15           ; PC := 15
  9 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
 10 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0xbce5a201]
 11 [-]: GETGLOBAL R3 K4        ; R3 := 0x03f57322
 12 [-]: MOVE      R4 R0        ; R4 := R0
 13 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 14 [-]: CALL      R1 0 1       ; R1(R2,...)
 15 [-]: RETURN    R0 1         ; return 


; Function #62:
;
; Name:            
; Defined at line: 2382
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mCollectionGrid
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 20
  5 [-]: JMP       20           ; PC := 20
  6 [-]: GETGLOBAL R1 K2        ; R1 := mInputBlocked
  7 [-]: TEST      R1 1         ; if R1 then PC := 20
  8 [-]: JMP       20           ; PC := 20
  9 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
 10 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0x070daa5a]
 11 [-]: GETGLOBAL R3 K4        ; R3 := 0x03f57322
 12 [-]: MOVE      R4 R0        ; R4 := R0
 13 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 14 [-]: CALL      R1 0 1       ; R1(R2,...)
 15 [-]: GETUPVAL  R1 U0        ; R1 := U0
 16 [-]: GETTABLE  R1 R1 K5     ; R1 := R1[0x659d451f]
 17 [-]: GETGLOBAL R2 K6        ; R2 := 0x0032441c
 18 [-]: GETTABLE  R2 R2 K7     ; R2 := R2["UISound_ItemTipSection"]
 19 [-]: CALL      R1 2 1       ; R1(R2)
 20 [-]: RETURN    R0 1         ; return 


; Function #63:
;
; Name:            
; Defined at line: 2389
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mCollectionGrid
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 20
  5 [-]: JMP       20           ; PC := 20
  6 [-]: GETGLOBAL R1 K2        ; R1 := mInputBlocked
  7 [-]: TEST      R1 1         ; if R1 then PC := 20
  8 [-]: JMP       20           ; PC := 20
  9 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
 10 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0xaf5319dc]
 11 [-]: GETGLOBAL R3 K4        ; R3 := 0x03f57322
 12 [-]: MOVE      R4 R0        ; R4 := R0
 13 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 14 [-]: CALL      R1 0 1       ; R1(R2,...)
 15 [-]: GETUPVAL  R1 U0        ; R1 := U0
 16 [-]: GETTABLE  R1 R1 K5     ; R1 := R1[0x659d451f]
 17 [-]: GETGLOBAL R2 K6        ; R2 := 0x0032441c
 18 [-]: GETTABLE  R2 R2 K7     ; R2 := R2["UISound_ButtonSelect"]
 19 [-]: CALL      R1 2 1       ; R1(R2)
 20 [-]: RETURN    R0 1         ; return 


; Function #64:
;
; Name:            
; Defined at line: 2396
; #Upvalues:       6
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R2 K0        ; R2 := mInstalledGrid
  2 [-]: SELF      R2 R2 K1     ; R3 := R2; R2 := R2[0x741d078c]
  3 [-]: CLOSURE   R4 0         ; R4 := closure(Function #64.1)
  4 [-]: MOVE      R0 R0        ; R0 := R0
  5 [-]: GETUPVAL  R0 U0        ; R0 := U0
  6 [-]: MOVE      R0 R1        ; R0 := R1
  7 [-]: GETUPVAL  R0 U1        ; R0 := U1
  8 [-]: GETUPVAL  R0 U2        ; R0 := U2
  9 [-]: GETUPVAL  R0 U3        ; R0 := U3
 10 [-]: GETUPVAL  R0 U4        ; R0 := U4
 11 [-]: GETUPVAL  R0 U5        ; R0 := U5
 12 [-]: CALL      R2 3 1       ; R2(R3,R4)
 13 [-]: RETURN    R0 1         ; return 


; Function #64.1:
;
; Name:            
; Defined at line: 2398
; #Upvalues:       8
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  13

  1 [-]: GETTABLE  R1 R0 K0     ; R1 := R0["mPolarity"]
  2 [-]: EQ        1 R1 K1      ; if R1 == nil then PC := 7
  3 [-]: JMP       7            ; PC := 7
  4 [-]: GETTABLE  R1 R0 K0     ; R1 := R0["mPolarity"]
  5 [-]: EQ        0 R1 K2      ; if R1 ~= 0.000000 then PC := 8
  6 [-]: JMP       8            ; PC := 8
  7 [-]: LOADKB    R1 0 1       ; R1 := false; PC := 8
  8 [-]: LOADKB    R1 1 0       ; R1 := true
  9 [-]: GETGLOBAL R2 K3        ; R2 := 0x0032441c
 10 [-]: GETTABLE  R2 R2 K4     ; R2 := R2["UIColor_White"]
 11 [-]: CONST     R3 45        ; R3 := 45.000000
 12 [-]: GETUPVAL  R4 U0        ; R4 := U0
 13 [-]: TEST      R4 0         ; if not R4 then PC := 101
 14 [-]: JMP       101          ; PC := 101
 15 [-]: GETUPVAL  R4 U1        ; R4 := U1
 16 [-]: GETTABLE  R4 R4 K5     ; R4 := R4[0x06d055f9]
 17 [-]: GETTABLE  R5 R0 K0     ; R5 := R0["mPolarity"]
 18 [-]: GETUPVAL  R6 U2        ; R6 := U2
 19 [-]: GETTABLE  R6 R6 K0     ; R6 := R6["mPolarity"]
 20 [-]: EQ        1 R5 R6      ; if R5 == R6 then PC := 26
 21 [-]: JMP       26           ; PC := 26
 22 [-]: GETTABLE  R5 R0 K0     ; R5 := R0["mPolarity"]
 23 [-]: EQ        1 R5 K7      ; if R5 == 9.000000 then PC := 26
 24 [-]: JMP       26           ; PC := 26
 25 [-]: LOADKB    R5 0 1       ; R5 := false; PC := 26
 26 [-]: LOADKB    R5 1 0       ; R5 := true
 27 [-]: GETGLOBAL R6 K3        ; R6 := 0x0032441c
 28 [-]: GETTABLE  R6 R6 K8     ; R6 := R6["UIColor_Green"]
 29 [-]: GETGLOBAL R7 K3        ; R7 := 0x0032441c
 30 [-]: GETTABLE  R7 R7 K9     ; R7 := R7["UIColor_Red"]
 31 [-]: CALL      R4 4 2       ; R4 := R4(R5,R6,R7)
 32 [-]: MOVE      R2 R4        ; R2 := R4
 33 [-]: CONST     R3 100       ; R3 := 100.000000
 34 [-]: GETTABLE  R4 R0 K10    ; R4 := R0["Id"]
 35 [-]: GETGLOBAL R5 K11       ; R5 := MELEE_STANCE_SLOT
 36 [-]: EQ        0 R4 R5      ; if R4 ~= R5 then PC := 41
 37 [-]: JMP       41           ; PC := 41
 38 [-]: GETUPVAL  R4 U3        ; R4 := U3
 39 [-]: CALL      R4 1 2       ; R4 := R4()
 40 [-]: JMP       43           ; PC := 43
 41 [-]: LOADKB    R4 0 1       ; R4 := false; PC := 42
 42 [-]: LOADKB    R4 1 0       ; R4 := true
 43 [-]: GETTABLE  R5 R0 K10    ; R5 := R0["Id"]
 44 [-]: GETGLOBAL R6 K12       ; R6 := AURA_SLOT_INDEX
 45 [-]: EQ        0 R5 R6      ; if R5 ~= R6 then PC := 54
 46 [-]: JMP       54           ; PC := 54
 47 [-]: GETUPVAL  R5 U4        ; R5 := U4
 48 [-]: CALL      R5 1 2       ; R5 := R5()
 49 [-]: TEST      R5 1         ; if R5 then PC := 56
 50 [-]: JMP       56           ; PC := 56
 51 [-]: GETUPVAL  R5 U5        ; R5 := U5
 52 [-]: CALL      R5 1 2       ; R5 := R5()
 53 [-]: JMP       56           ; PC := 56
 54 [-]: LOADKB    R5 0 1       ; R5 := false; PC := 55
 55 [-]: LOADKB    R5 1 0       ; R5 := true
 56 [-]: GETUPVAL  R6 U6        ; R6 := U6
 57 [-]: GETTABLE  R6 R6 K13    ; R6 := R6[0xba7a0a82]
 58 [-]: GETUPVAL  R7 U7        ; R7 := U7
 59 [-]: GETTABLE  R7 R7 K14    ; R7 := R7["type"]
 60 [-]: GETTABLE  R8 R0 K10    ; R8 := R0["Id"]
 61 [-]: CALL      R6 3 2       ; R6 := R6(R7,R8)
 62 [-]: GETUPVAL  R7 U2        ; R7 := U2
 63 [-]: GETTABLE  R7 R7 K15    ; R7 := R7["mIsStance"]
 64 [-]: TEST      R7 0         ; if not R7 then PC := 70
 65 [-]: JMP       70           ; PC := 70
 66 [-]: TEST      R1 0         ; if not R1 then PC := 69
 67 [-]: JMP       69           ; PC := 69
 68 [-]: MOVE      R1 R4        ; R1 := R4
 69 [-]: JMP       101          ; PC := 101
 70 [-]: GETUPVAL  R7 U2        ; R7 := U2
 71 [-]: GETTABLE  R7 R7 K16    ; R7 := R7["mType"]
 72 [-]: EQ        0 R7 K17     ; if R7 ~= "AURA" then PC := 78
 73 [-]: JMP       78           ; PC := 78
 74 [-]: TEST      R1 0         ; if not R1 then PC := 77
 75 [-]: JMP       77           ; PC := 77
 76 [-]: MOVE      R1 R5        ; R1 := R5
 77 [-]: JMP       101          ; PC := 101
 78 [-]: GETUPVAL  R7 U2        ; R7 := U2
 79 [-]: GETTABLE  R7 R7 K18    ; R7 := R7["mIsUtility"]
 80 [-]: TEST      R7 0         ; if not R7 then PC := 91
 81 [-]: JMP       91           ; PC := 91
 82 [-]: TEST      R1 0         ; if not R1 then PC := 90
 83 [-]: JMP       90           ; PC := 90
 84 [-]: TEST      R5 1         ; if R5 then PC := 88
 85 [-]: JMP       88           ; PC := 88
 86 [-]: NOT       R1 R4        ; R1 :=  R4
 87 [-]: JMP       101          ; PC := 101
 88 [-]: LOADKB    R1 0 1       ; R1 := false; PC := 89
 89 [-]: LOADKB    R1 1 0       ; R1 := true
 90 [-]: JMP       101          ; PC := 101
 91 [-]: TEST      R1 0         ; if not R1 then PC := 101
 92 [-]: JMP       101          ; PC := 101
 93 [-]: TEST      R5 1         ; if R5 then PC := 99
 94 [-]: JMP       99           ; PC := 99
 95 [-]: TEST      R4 1         ; if R4 then PC := 99
 96 [-]: JMP       99           ; PC := 99
 97 [-]: NOT       R1 R6        ; R1 :=  R6
 98 [-]: JMP       101          ; PC := 101
 99 [-]: LOADKB    R1 0 1       ; R1 := false; PC := 100
100 [-]: LOADKB    R1 1 0       ; R1 := true
101 [-]: TEST      R1 0         ; if not R1 then PC := 131
102 [-]: JMP       131          ; PC := 131
103 [-]: GETGLOBAL R7 K19       ; R7 := 0xae91e43b
104 [-]: SELF      R7 R7 K20    ; R8 := R7; R7 := R7[0xf64b7262]
105 [-]: GETTABLE  R9 R0 K21    ; R9 := R0["mClipName"]
106 [-]: LOADK     R10 K22      ; R10 := "SocketPolarity"
107 [-]: CONST     R11 36       ; R11 := 36.000000
108 [-]: MOVE      R12 R2       ; R12 := R2
109 [-]: CALL      R7 6 1       ; R7(R8,R9,R10,R11,R12)
110 [-]: GETGLOBAL R7 K19       ; R7 := 0xae91e43b
111 [-]: SELF      R7 R7 K20    ; R8 := R7; R7 := R7[0xf64b7262]
112 [-]: GETTABLE  R9 R0 K21    ; R9 := R0["mClipName"]
113 [-]: LOADK     R10 K23      ; R10 := "SocketPolarityBacker"
114 [-]: CONST     R11 9        ; R11 := 9.000000
115 [-]: MOVE      R12 R2       ; R12 := R2
116 [-]: CALL      R7 6 1       ; R7(R8,R9,R10,R11,R12)
117 [-]: GETGLOBAL R7 K19       ; R7 := 0xae91e43b
118 [-]: SELF      R7 R7 K20    ; R8 := R7; R7 := R7[0xf64b7262]
119 [-]: GETTABLE  R9 R0 K21    ; R9 := R0["mClipName"]
120 [-]: LOADK     R10 K22      ; R10 := "SocketPolarity"
121 [-]: CONST     R11 10       ; R11 := 10.000000
122 [-]: MOVE      R12 R3       ; R12 := R3
123 [-]: CALL      R7 6 1       ; R7(R8,R9,R10,R11,R12)
124 [-]: GETGLOBAL R7 K19       ; R7 := 0xae91e43b
125 [-]: SELF      R7 R7 K20    ; R8 := R7; R7 := R7[0xf64b7262]
126 [-]: GETTABLE  R9 R0 K21    ; R9 := R0["mClipName"]
127 [-]: LOADK     R10 K23      ; R10 := "SocketPolarityBacker"
128 [-]: CONST     R11 10       ; R11 := 10.000000
129 [-]: MOVE      R12 R3       ; R12 := R3
130 [-]: CALL      R7 6 1       ; R7(R8,R9,R10,R11,R12)
131 [-]: RETURN    R0 1         ; return 


; Function #65:
;
; Name:            
; Defined at line: 2430
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0xae91e43b
  2 [-]: SELF      R0 R0 K1     ; R1 := R0; R0 := R0[0xaade900e]
  3 [-]: LOADK     R2 K2        ; R2 := "DragImage"
  4 [-]: CONST     R3 11        ; R3 := 11.000000
  5 [-]: LOADKB    R4 0 0       ; R4 := false
  6 [-]: CALL      R0 5 1       ; R0(R1,R2,R3,R4)
  7 [-]: NEWTABLE  R0 0 11      ; R0 := {}
  8 [-]: SETTABLE  R0 K3 K4     ; R0["mClipName"] := ""
  9 [-]: SETTABLE  R0 K5 K6     ; R0["mX"] := 0.000000
 10 [-]: SETTABLE  R0 K7 K6     ; R0["mY"] := 0.000000
 11 [-]: SETTABLE  R0 K8 K9     ; R0["mIcon"] := nil
 12 [-]: SETTABLE  R0 K10 K11   ; R0["mIsEnabled"] := false
 13 [-]: SETTABLE  R0 K12 K9    ; R0["mUserData"] := nil
 14 [-]: CLOSURE   R1 0         ; R1 := closure(Function #65.1)
 15 [-]: SETTABLE  R0 K13 R1    ; R0["IsEnabled"] := R1
 16 [-]: CLOSURE   R1 1         ; R1 := closure(Function #65.2)
 17 [-]: SETTABLE  R0 K14 R1    ; R0["GetUserData"] := R1
 18 [-]: CLOSURE   R1 2         ; R1 := closure(Function #65.3)
 19 [-]: SETTABLE  R0 K15 R1    ; R0["Update"] := R1
 20 [-]: CLOSURE   R1 3         ; R1 := closure(Function #65.4)
 21 [-]: GETUPVAL  R0 U0        ; R0 := U0
 22 [-]: SETTABLE  R0 K16 R1    ; R0["Enable"] := R1
 23 [-]: CLOSURE   R1 4         ; R1 := closure(Function #65.5)
 24 [-]: GETUPVAL  R0 U0        ; R0 := U0
 25 [-]: SETTABLE  R0 K17 R1    ; R0["Disable"] := R1
 26 [-]: RETURN    R0 2         ; return R0
 27 [-]: RETURN    R0 1         ; return 


; Function #65.1:
;
; Name:            
; Defined at line: 2441
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETTABLE  R1 R0 K0     ; R1 := R0["mIsEnabled"]
  2 [-]: RETURN    R1 2         ; return R1
  3 [-]: RETURN    R0 1         ; return 


; Function #65.2:
;
; Name:            
; Defined at line: 2445
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETTABLE  R1 R0 K0     ; R1 := R0["mUserData"]
  2 [-]: RETURN    R1 2         ; return R1
  3 [-]: RETURN    R0 1         ; return 


; Function #65.3:
;
; Name:            
; Defined at line: 2449
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  6

  1 [-]: GETTABLE  R1 R0 K0     ; R1 := R0["mIsEnabled"]
  2 [-]: TEST      R1 1         ; if R1 then PC := 5
  3 [-]: JMP       5            ; PC := 5
  4 [-]: RETURN    R0 1         ; return 
  5 [-]: GETGLOBAL R1 K2        ; R1 := 0xae91e43b
  6 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0x91a24e4b]
  7 [-]: LOADK     R3 K4        ; R3 := "_root"
  8 [-]: CONST     R4 25        ; R4 := 25.000000
  9 [-]: CALL      R1 4 2       ; R1 := R1(R2,R3,R4)
 10 [-]: SETTABLE  R0 K1 R1     ; R0["mX"] := R1
 11 [-]: GETGLOBAL R1 K2        ; R1 := 0xae91e43b
 12 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0x91a24e4b]
 13 [-]: LOADK     R3 K4        ; R3 := "_root"
 14 [-]: CONST     R4 26        ; R4 := 26.000000
 15 [-]: CALL      R1 4 2       ; R1 := R1(R2,R3,R4)
 16 [-]: SETTABLE  R0 K5 R1     ; R0["mY"] := R1
 17 [-]: GETGLOBAL R1 K2        ; R1 := 0xae91e43b
 18 [-]: SELF      R1 R1 K6     ; R2 := R1; R1 := R1[0x67bc869f]
 19 [-]: GETTABLE  R3 R0 K7     ; R3 := R0["mClipName"]
 20 [-]: CONST     R4 0         ; R4 := 0.000000
 21 [-]: GETTABLE  R5 R0 K1     ; R5 := R0["mX"]
 22 [-]: CALL      R1 5 1       ; R1(R2,R3,R4,R5)
 23 [-]: GETGLOBAL R1 K2        ; R1 := 0xae91e43b
 24 [-]: SELF      R1 R1 K6     ; R2 := R1; R1 := R1[0x67bc869f]
 25 [-]: GETTABLE  R3 R0 K7     ; R3 := R0["mClipName"]
 26 [-]: CONST     R4 1         ; R4 := 1.000000
 27 [-]: GETTABLE  R5 R0 K5     ; R5 := R0["mY"]
 28 [-]: CALL      R1 5 1       ; R1(R2,R3,R4,R5)
 29 [-]: GETGLOBAL R1 K8        ; R1 := 0x38f10e85
 30 [-]: GETGLOBAL R2 K2        ; R2 := 0xae91e43b
 31 [-]: GETTABLE  R3 R0 K7     ; R3 := R0["mClipName"]
 32 [-]: LOADK     R4 K9        ; R4 := ".swapDepths"
 33 [-]: CONCAT    R3 R3 R4     ; R3 := R3 .. R4
 34 [-]: CONST     R4 1500      ; R4 := 1500.000000
 35 [-]: CALL      R1 4 1       ; R1(R2,R3,R4)
 36 [-]: RETURN    R0 1         ; return 


; Function #65.4:
;
; Name:            
; Defined at line: 2461
; #Upvalues:       1
; #Parameters:     4
; Is_vararg:       0
; Max Stack Size:  9

  1 [-]: GETGLOBAL R4 K0        ; R4 := 0x7b998233
  2 [-]: MOVE      R5 R1        ; R5 := R1
  3 [-]: CALL      R4 2 2       ; R4 := R4(R5)
  4 [-]: TEST      R4 0         ; if not R4 then PC := 7
  5 [-]: JMP       7            ; PC := 7
  6 [-]: RETURN    R0 1         ; return 
  7 [-]: GETUPVAL  R4 U0        ; R4 := U0
  8 [-]: LOADKB    R5 1 0       ; R5 := true
  9 [-]: GETTABLE  R6 R3 K1     ; R6 := R3["item"]
 10 [-]: CALL      R4 3 1       ; R4(R5,R6)
 11 [-]: SETTABLE  R0 K2 K3     ; R0["mIsEnabled"] := true
 12 [-]: SETTABLE  R0 K4 R1     ; R0["mClipName"] := R1
 13 [-]: SETTABLE  R0 K5 R2     ; R0["mIcon"] := R2
 14 [-]: SETTABLE  R0 K6 R3     ; R0["mUserData"] := R3
 15 [-]: GETGLOBAL R4 K7        ; R4 := 0xae91e43b
 16 [-]: SELF      R4 R4 K8     ; R5 := R4; R4 := R4[0xaade900e]
 17 [-]: GETTABLE  R6 R0 K4     ; R6 := R0["mClipName"]
 18 [-]: CONST     R7 11        ; R7 := 11.000000
 19 [-]: LOADKB    R8 1 0       ; R8 := true
 20 [-]: CALL      R4 5 1       ; R4(R5,R6,R7,R8)
 21 [-]: GETGLOBAL R4 K7        ; R4 := 0xae91e43b
 22 [-]: SELF      R4 R4 K9     ; R5 := R4; R4 := R4[0x1cb415c1]
 23 [-]: GETTABLE  R6 R0 K4     ; R6 := R0["mClipName"]
 24 [-]: MOVE      R7 R2        ; R7 := R2
 25 [-]: CALL      R4 4 1       ; R4(R5,R6,R7)
 26 [-]: SELF      R4 R0 K10    ; R5 := R0; R4 := R0[0xfaa69527]
 27 [-]: CALL      R4 2 1       ; R4(R5)
 28 [-]: RETURN    R0 1         ; return 


; Function #65.5:
;
; Name:            
; Defined at line: 2475
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  6

  1 [-]: GETTABLE  R1 R0 K0     ; R1 := R0["mIsEnabled"]
  2 [-]: TEST      R1 1         ; if R1 then PC := 5
  3 [-]: JMP       5            ; PC := 5
  4 [-]: RETURN    R0 1         ; return 
  5 [-]: GETUPVAL  R1 U0        ; R1 := U0
  6 [-]: LOADKB    R2 0 0       ; R2 := false
  7 [-]: CALL      R1 2 1       ; R1(R2)
  8 [-]: SETTABLE  R0 K0 K1     ; R0["mIsEnabled"] := false
  9 [-]: SETTABLE  R0 K2 K3     ; R0["mUserData"] := nil
 10 [-]: GETGLOBAL R1 K4        ; R1 := 0xae91e43b
 11 [-]: SELF      R1 R1 K5     ; R2 := R1; R1 := R1[0xaade900e]
 12 [-]: GETTABLE  R3 R0 K6     ; R3 := R0["mClipName"]
 13 [-]: CONST     R4 11        ; R4 := 11.000000
 14 [-]: LOADKB    R5 0 0       ; R5 := false
 15 [-]: CALL      R1 5 1       ; R1(R2,R3,R4,R5)
 16 [-]: RETURN    R0 1         ; return 


; Function #66:
;
; Name:            
; Defined at line: 2489
; #Upvalues:       10
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  35

  1 [-]: GETGLOBAL R0 K0        ; R0 := mCollectionGrid
  2 [-]: EQ        0 R0 K1      ; if R0 ~= nil then PC := 718
  3 [-]: JMP       718          ; PC := 718
  4 [-]: GETGLOBAL R0 K2        ; R0 := 0x2d0fad09
  5 [-]: LOADK     R1 K3        ; R1 := "Lotus.Interface.Components.CategorizedGrid"
  6 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  7 [-]: GETTABLE  R1 R0 K4     ; R1 := R0[0x67d7b715]
  8 [-]: GETGLOBAL R2 K5        ; R2 := 0xae91e43b
  9 [-]: LOADK     R3 K6        ; R3 := "Available.Card1"
 10 [-]: CONST     R4 2         ; R4 := 2.000000
 11 [-]: CONST     R5 7         ; R5 := 7.000000
 12 [-]: LOADK     R6 K7        ; R6 := "MiddleMenu.Category"
 13 [-]: LOADK     R7 K8        ; R7 := "Available.SortMenu"
 14 [-]: LOADNIL   R8 R9        ; R8 := R9 := nil
 15 [-]: LOADKB    R10 1 0      ; R10 := true
 16 [-]: CALL      R1 10 2      ; R1 := R1(R2,R3,R4,R5,R6,R7,R8,R9,R10)
 17 [-]: SETGLOBAL R1 K0        ; mCollectionGrid := R1
 18 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 19 [-]: SELF      R1 R1 K9     ; R2 := R1; R1 := R1[0x1e5b5cfe]
 20 [-]: LOADK     R3 K10       ; R3 := "ModItemSelected"
 21 [-]: LOADK     R4 K11       ; R4 := "ModItemFocused"
 22 [-]: LOADK     R5 K12       ; R5 := "ModItemUnfocused"
 23 [-]: LOADK     R6 K13       ; R6 := "ModItemPressed"
 24 [-]: LOADK     R7 K11       ; R7 := "ModItemFocused"
 25 [-]: LOADNIL   R8 R8        ; R8 := nil
 26 [-]: LOADK     R9 K10       ; R9 := "ModItemSelected"
 27 [-]: CALL      R1 9 1       ; R1(R2,R3,R4,R5,R6,R7,R8,R9)
 28 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 29 [-]: SETTABLE  R1 K14 K15   ; R1["mInitialDepth"] := 2000.000000
 30 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 31 [-]: SETTABLE  R1 K16 K17   ; R1["mAddFillerElements"] := false
 32 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 33 [-]: SETTABLE  R1 K18 K19   ; R1["mColumnSeparation"] := 139.000000
 34 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 35 [-]: SETTABLE  R1 K20 K21   ; R1["mRowSeparation"] := 272.000000
 36 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 37 [-]: CLOSURE   R2 0         ; R2 := closure(Function #66.1)
 38 [-]: SETTABLE  R1 K22 R2    ; R1["CalculateScrollBarHeight"] := R2
 39 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 40 [-]: SELF      R1 R1 K23    ; R2 := R1; R1 := R1[0x3bc79f4f]
 41 [-]: LOADK     R3 K24       ; R3 := "Available.ScrollBar"
 42 [-]: CONST     R4 -45       ; R4 := -45.000000
 43 [-]: CALL      R1 4 1       ; R1(R2,R3,R4)
 44 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 45 [-]: SETTABLE  R1 K25 K26   ; R1["mSelectedScale"] := 100.000000
 46 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 47 [-]: SETTABLE  R1 K27 K17   ; R1["mSelectElementsOnFocus"] := false
 48 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 49 [-]: SETTABLE  R1 K28 K1    ; R1["mSortMenuHorizontalOffset"] := nil
 50 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 51 [-]: SETTABLE  R1 K29 K1    ; R1["mSortMenuVerticalOffset"] := nil
 52 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 53 [-]: SETTABLE  R1 K30 K1    ; R1["mScrollBarHorizontalOffset"] := nil
 54 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 55 [-]: SETTABLE  R1 K31 K32   ; R1["mElementDelayTime"] := 0.010000
 56 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 57 [-]: SETTABLE  R1 K33 K34   ; R1["mSmoothScrollExtraSpace"] := 0.000000
 58 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 59 [-]: SELF      R1 R1 K35    ; R2 := R1; R1 := R1[0x7220acb6]
 60 [-]: CALL      R1 2 1       ; R1(R2)
 61 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 62 [-]: SETTABLE  R1 K36 K37   ; R1["mMuteGridOpenSound"] := true
 63 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 64 [-]: SETTABLE  R1 K38 K39   ; R1["mLowerBoundBuffer"] := 2.000000
 65 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 66 [-]: SETTABLE  R1 K40 K41   ; R1["mExtraRowScroll"] := 1.000000
 67 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 68 [-]: GETTABLE  R1 R1 K42    ; R1 := R1["mCategoryMenu"]
 69 [-]: SETTABLE  R1 K43 K37   ; R1["mHideEmptyCategories"] := true
 70 [-]: GETGLOBAL R1 K44       ; R1 := 0x7b998233
 71 [-]: GETGLOBAL R2 K45       ; R2 := mAvionicCategories
 72 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 73 [-]: TEST      R1 1         ; if R1 then PC := 86
 74 [-]: JMP       86           ; PC := 86
 75 [-]: GETGLOBAL R1 K44       ; R1 := 0x7b998233
 76 [-]: GETGLOBAL R2 K45       ; R2 := mAvionicCategories
 77 [-]: GETTABLE  R2 R2 K46    ; R2 := R2["mSelectedElement"]
 78 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 79 [-]: TEST      R1 1         ; if R1 then PC := 86
 80 [-]: JMP       86           ; PC := 86
 81 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 82 [-]: GETGLOBAL R2 K45       ; R2 := mAvionicCategories
 83 [-]: GETTABLE  R2 R2 K46    ; R2 := R2["mSelectedElement"]
 84 [-]: GETTABLE  R2 R2 K48    ; R2 := R2["HiddenCats"]
 85 [-]: SETTABLE  R1 K47 R2    ; R1["mForceHiddenCategories"] := R2
 86 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 87 [-]: CLOSURE   R2 1         ; R2 := closure(Function #66.2)
 88 [-]: SETTABLE  R1 K49 R2    ; R1["RepositionButton"] := R2
 89 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 90 [-]: CLOSURE   R2 2         ; R2 := closure(Function #66.3)
 91 [-]: SETTABLE  R1 K50 R2    ; R1["SetupPreInterpolationValues"] := R2
 92 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 93 [-]: GETGLOBAL R2 K0        ; R2 := mCollectionGrid
 94 [-]: GETTABLE  R2 R2 K52    ; R2 := R2["DefaultAlphaInterpolation"]
 95 [-]: SETTABLE  R1 K51 R2    ; R1["GetInterpolationProperties"] := R2
 96 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
 97 [-]: SELF      R1 R1 K53    ; R2 := R1; R1 := R1[0xb029c588]
 98 [-]: NEWTABLE  R3 0 3       ; R3 := {}
 99 [-]: GETGLOBAL R4 K5        ; R4 := 0xae91e43b
100 [-]: SELF      R4 R4 K55    ; R5 := R4; R4 := R4[0x42b04007]
101 [-]: LOADK     R6 K56       ; R6 := "/Lotus/Language/Menu/SortName"
102 [-]: LOADKB    R7 0 0       ; R7 := false
103 [-]: CALL      R4 4 2       ; R4 := R4(R5,R6,R7)
104 [-]: SETTABLE  R3 K54 R4    ; R3["Name"] := R4
105 [-]: SETTABLE  R3 K57 K58   ; R3["SortId"] := "NAME"
106 [-]: CLOSURE   R4 3         ; R4 := closure(Function #66.4)
107 [-]: SETTABLE  R3 K59 R4    ; R3["Attribute"] := R4
108 [-]: CALL      R1 3 1       ; R1(R2,R3)
109 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
110 [-]: SELF      R1 R1 K53    ; R2 := R1; R1 := R1[0xb029c588]
111 [-]: NEWTABLE  R3 0 3       ; R3 := {}
112 [-]: GETGLOBAL R4 K5        ; R4 := 0xae91e43b
113 [-]: SELF      R4 R4 K55    ; R5 := R4; R4 := R4[0x42b04007]
114 [-]: LOADK     R6 K60       ; R6 := "/Lotus/Language/Menu/Arsenal_Rank"
115 [-]: LOADKB    R7 0 0       ; R7 := false
116 [-]: CALL      R4 4 2       ; R4 := R4(R5,R6,R7)
117 [-]: SETTABLE  R3 K54 R4    ; R3["Name"] := R4
118 [-]: SETTABLE  R3 K57 K61   ; R3["SortId"] := "LEVEL"
119 [-]: CLOSURE   R4 4         ; R4 := closure(Function #66.5)
120 [-]: SETTABLE  R3 K59 R4    ; R3["Attribute"] := R4
121 [-]: CALL      R1 3 1       ; R1(R2,R3)
122 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
123 [-]: SELF      R1 R1 K53    ; R2 := R1; R1 := R1[0xb029c588]
124 [-]: NEWTABLE  R3 0 3       ; R3 := {}
125 [-]: GETGLOBAL R4 K5        ; R4 := 0xae91e43b
126 [-]: SELF      R4 R4 K55    ; R5 := R4; R4 := R4[0x42b04007]
127 [-]: LOADK     R6 K62       ; R6 := "/Lotus/Language/Menu/SortBy_CapacityRequirement"
128 [-]: LOADKB    R7 0 0       ; R7 := false
129 [-]: CALL      R4 4 2       ; R4 := R4(R5,R6,R7)
130 [-]: SETTABLE  R3 K54 R4    ; R3["Name"] := R4
131 [-]: SETTABLE  R3 K57 K63   ; R3["SortId"] := "CAPACITY"
132 [-]: CLOSURE   R4 5         ; R4 := closure(Function #66.6)
133 [-]: SETTABLE  R3 K59 R4    ; R3["Attribute"] := R4
134 [-]: CALL      R1 3 1       ; R1(R2,R3)
135 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
136 [-]: SELF      R1 R1 K53    ; R2 := R1; R1 := R1[0xb029c588]
137 [-]: NEWTABLE  R3 0 3       ; R3 := {}
138 [-]: GETGLOBAL R4 K5        ; R4 := 0xae91e43b
139 [-]: SELF      R4 R4 K55    ; R5 := R4; R4 := R4[0x42b04007]
140 [-]: LOADK     R6 K64       ; R6 := "/Lotus/Language/Menu/SortBy_Polarity"
141 [-]: LOADKB    R7 0 0       ; R7 := false
142 [-]: CALL      R4 4 2       ; R4 := R4(R5,R6,R7)
143 [-]: SETTABLE  R3 K54 R4    ; R3["Name"] := R4
144 [-]: SETTABLE  R3 K57 K65   ; R3["SortId"] := "POLARITY"
145 [-]: CLOSURE   R4 6         ; R4 := closure(Function #66.7)
146 [-]: SETTABLE  R3 K59 R4    ; R3["Attribute"] := R4
147 [-]: CALL      R1 3 1       ; R1(R2,R3)
148 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
149 [-]: CLOSURE   R2 7         ; R2 := closure(Function #66.8)
150 [-]: GETUPVAL  R0 U0        ; R0 := U0
151 [-]: GETUPVAL  R0 U1        ; R0 := U1
152 [-]: GETUPVAL  R0 U2        ; R0 := U2
153 [-]: SETTABLE  R1 K66 R2    ; R1["mOnFocusedCallback"] := R2
154 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
155 [-]: CLOSURE   R2 8         ; R2 := closure(Function #66.9)
156 [-]: GETUPVAL  R0 U1        ; R0 := U1
157 [-]: GETUPVAL  R0 U0        ; R0 := U0
158 [-]: SETTABLE  R1 K67 R2    ; R1["mOnUnfocusedCallback"] := R2
159 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
160 [-]: CLOSURE   R2 9         ; R2 := closure(Function #66.10)
161 [-]: GETUPVAL  R0 U3        ; R0 := U3
162 [-]: GETUPVAL  R0 U1        ; R0 := U1
163 [-]: GETUPVAL  R0 U0        ; R0 := U0
164 [-]: GETUPVAL  R0 U4        ; R0 := U4
165 [-]: SETTABLE  R1 K68 R2    ; R1["mOnSelectedCallback"] := R2
166 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
167 [-]: CLOSURE   R2 10        ; R2 := closure(Function #66.11)
168 [-]: GETUPVAL  R0 U0        ; R0 := U0
169 [-]: GETUPVAL  R0 U4        ; R0 := U4
170 [-]: GETUPVAL  R0 U1        ; R0 := U1
171 [-]: GETUPVAL  R0 U3        ; R0 := U3
172 [-]: SETTABLE  R1 K69 R2    ; R1["mOnPressedCallback"] := R2
173 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
174 [-]: CLOSURE   R2 11        ; R2 := closure(Function #66.12)
175 [-]: GETUPVAL  R0 U1        ; R0 := U1
176 [-]: GETUPVAL  R0 U0        ; R0 := U0
177 [-]: GETUPVAL  R0 U3        ; R0 := U3
178 [-]: GETUPVAL  R0 U5        ; R0 := U5
179 [-]: SETTABLE  R1 K70 R2    ; R1["mElementDrawCallback"] := R2
180 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
181 [-]: GETGLOBAL R2 K0        ; R2 := mCollectionGrid
182 [-]: GETTABLE  R2 R2 K72    ; R2 := R2["Redraw"]
183 [-]: SETTABLE  R1 K71 R2    ; R1["_CollectionGrid_Redraw"] := R2
184 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
185 [-]: CLOSURE   R2 12        ; R2 := closure(Function #66.13)
186 [-]: SETTABLE  R1 K72 R2    ; R1["Redraw"] := R2
187 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
188 [-]: GETGLOBAL R2 K0        ; R2 := mCollectionGrid
189 [-]: GETTABLE  R2 R2 K74    ; R2 := R2["SetCategory_Internal"]
190 [-]: SETTABLE  R1 K73 R2    ; R1["_CollectionGrid_SetCategory_Internal"] := R2
191 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
192 [-]: CLOSURE   R2 13        ; R2 := closure(Function #66.14)
193 [-]: SETTABLE  R1 K74 R2    ; R1["SetCategory_Internal"] := R2
194 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
195 [-]: CLOSURE   R2 14        ; R2 := closure(Function #66.15)
196 [-]: SETTABLE  R1 K75 R2    ; R1["CalculateX"] := R2
197 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
198 [-]: CLOSURE   R2 15        ; R2 := closure(Function #66.16)
199 [-]: SETTABLE  R1 K76 R2    ; R1["CalculateY"] := R2
200 [-]: GETGLOBAL R1 K0        ; R1 := mCollectionGrid
201 [-]: CLOSURE   R2 16        ; R2 := closure(Function #66.17)
202 [-]: GETUPVAL  R0 U6        ; R0 := U6
203 [-]: SETTABLE  R1 K77 R2    ; R1["AdditionalFilterFunction"] := R2
204 [-]: NEWTABLE  R1 9 0       ; R1 := {}
205 [-]: LOADK     R2 K78       ; R2 := "ATTACK"
206 [-]: LOADK     R3 K79       ; R3 := "DEFENSE"
207 [-]: LOADK     R4 K80       ; R4 := "TACTIC"
208 [-]: LOADK     R5 K81       ; R5 := "POWER"
209 [-]: LOADK     R6 K82       ; R6 := "WARD"
210 [-]: LOADK     R7 K83       ; R7 := "PRECEPT"
211 [-]: LOADK     R8 K84       ; R8 := "FUSION"
212 [-]: LOADK     R9 K85       ; R9 := "UMBRA"
213 [-]: LOADK     R10 K86      ; R10 := "ANY"
214 [-]: SETLIST   R1 9 1       ; R1[(1-1)*FPF+i] := R(1+i), 1 <= i <= 9
215 [-]: NEWTABLE  R2 6 0       ; R2 := {}
216 [-]: NEWTABLE  R3 0 3       ; R3 := {}
217 [-]: GETGLOBAL R4 K88       ; R4 := RAILJACK_SLOTS
218 [-]: GETTABLE  R4 R4 K89    ; R4 := R4["BATTLE_DEF"]
219 [-]: SETTABLE  R3 K87 R4    ; R3["Index"] := R4
220 [-]: GETGLOBAL R4 K5        ; R4 := 0xae91e43b
221 [-]: SELF      R4 R4 K55    ; R5 := R4; R4 := R4[0x42b04007]
222 [-]: LOADK     R6 K90       ; R6 := "/Lotus/Language/Railjack/Avionics_Defensive"
223 [-]: LOADKB    R7 0 0       ; R7 := false
224 [-]: CALL      R4 4 2       ; R4 := R4(R5,R6,R7)
225 [-]: SETTABLE  R3 K54 R4    ; R3["Name"] := R4
226 [-]: GETGLOBAL R4 K92       ; R4 := 0x0032441c
227 [-]: GETTABLE  R4 R4 K93    ; R4 := R4["UICategoryIcon_RailjackDefensiveOn"]
228 [-]: SETTABLE  R3 K91 R4    ; R3["Icon"] := R4
229 [-]: NEWTABLE  R4 0 3       ; R4 := {}
230 [-]: GETGLOBAL R5 K88       ; R5 := RAILJACK_SLOTS
231 [-]: GETTABLE  R5 R5 K94    ; R5 := R5["BATTLE_OFF"]
232 [-]: SETTABLE  R4 K87 R5    ; R4["Index"] := R5
233 [-]: GETGLOBAL R5 K5        ; R5 := 0xae91e43b
234 [-]: SELF      R5 R5 K55    ; R6 := R5; R5 := R5[0x42b04007]
235 [-]: LOADK     R7 K95       ; R7 := "/Lotus/Language/Railjack/Avionics_Offensive"
236 [-]: LOADKB    R8 0 0       ; R8 := false
237 [-]: CALL      R5 4 2       ; R5 := R5(R6,R7,R8)
238 [-]: SETTABLE  R4 K54 R5    ; R4["Name"] := R5
239 [-]: GETGLOBAL R5 K92       ; R5 := 0x0032441c
240 [-]: GETTABLE  R5 R5 K96    ; R5 := R5["UICategoryIcon_RailjackOffensiveOn"]
241 [-]: SETTABLE  R4 K91 R5    ; R4["Icon"] := R5
242 [-]: NEWTABLE  R5 0 3       ; R5 := {}
243 [-]: GETGLOBAL R6 K88       ; R6 := RAILJACK_SLOTS
244 [-]: GETTABLE  R6 R6 K97    ; R6 := R6["BATTLE_SUPER"]
245 [-]: SETTABLE  R5 K87 R6    ; R5["Index"] := R6
246 [-]: GETGLOBAL R6 K5        ; R6 := 0xae91e43b
247 [-]: SELF      R6 R6 K55    ; R7 := R6; R6 := R6[0x42b04007]
248 [-]: LOADK     R8 K98       ; R8 := "/Lotus/Language/Railjack/Avionics_Super"
249 [-]: LOADKB    R9 0 0       ; R9 := false
250 [-]: CALL      R6 4 2       ; R6 := R6(R7,R8,R9)
251 [-]: SETTABLE  R5 K54 R6    ; R5["Name"] := R6
252 [-]: GETGLOBAL R6 K92       ; R6 := 0x0032441c
253 [-]: GETTABLE  R6 R6 K99    ; R6 := R6["UICategoryIcon_RailjackSuperOn"]
254 [-]: SETTABLE  R5 K91 R6    ; R5["Icon"] := R6
255 [-]: NEWTABLE  R6 0 3       ; R6 := {}
256 [-]: GETGLOBAL R7 K88       ; R7 := RAILJACK_SLOTS
257 [-]: GETTABLE  R7 R7 K100   ; R7 := R7["TAC_DEF"]
258 [-]: SETTABLE  R6 K87 R7    ; R6["Index"] := R7
259 [-]: GETGLOBAL R7 K5        ; R7 := 0xae91e43b
260 [-]: SELF      R7 R7 K55    ; R8 := R7; R7 := R7[0x42b04007]
261 [-]: LOADK     R9 K90       ; R9 := "/Lotus/Language/Railjack/Avionics_Defensive"
262 [-]: LOADKB    R10 0 0      ; R10 := false
263 [-]: CALL      R7 4 2       ; R7 := R7(R8,R9,R10)
264 [-]: SETTABLE  R6 K54 R7    ; R6["Name"] := R7
265 [-]: GETGLOBAL R7 K92       ; R7 := 0x0032441c
266 [-]: GETTABLE  R7 R7 K93    ; R7 := R7["UICategoryIcon_RailjackDefensiveOn"]
267 [-]: SETTABLE  R6 K91 R7    ; R6["Icon"] := R7
268 [-]: NEWTABLE  R7 0 3       ; R7 := {}
269 [-]: GETGLOBAL R8 K88       ; R8 := RAILJACK_SLOTS
270 [-]: GETTABLE  R8 R8 K101   ; R8 := R8["TAC_OFF"]
271 [-]: SETTABLE  R7 K87 R8    ; R7["Index"] := R8
272 [-]: GETGLOBAL R8 K5        ; R8 := 0xae91e43b
273 [-]: SELF      R8 R8 K55    ; R9 := R8; R8 := R8[0x42b04007]
274 [-]: LOADK     R10 K95      ; R10 := "/Lotus/Language/Railjack/Avionics_Offensive"
275 [-]: LOADKB    R11 0 0      ; R11 := false
276 [-]: CALL      R8 4 2       ; R8 := R8(R9,R10,R11)
277 [-]: SETTABLE  R7 K54 R8    ; R7["Name"] := R8
278 [-]: GETGLOBAL R8 K92       ; R8 := 0x0032441c
279 [-]: GETTABLE  R8 R8 K96    ; R8 := R8["UICategoryIcon_RailjackOffensiveOn"]
280 [-]: SETTABLE  R7 K91 R8    ; R7["Icon"] := R8
281 [-]: NEWTABLE  R8 0 3       ; R8 := {}
282 [-]: GETGLOBAL R9 K88       ; R9 := RAILJACK_SLOTS
283 [-]: GETTABLE  R9 R9 K102   ; R9 := R9["TAC_SUPER"]
284 [-]: SETTABLE  R8 K87 R9    ; R8["Index"] := R9
285 [-]: GETGLOBAL R9 K5        ; R9 := 0xae91e43b
286 [-]: SELF      R9 R9 K55    ; R10 := R9; R9 := R9[0x42b04007]
287 [-]: LOADK     R11 K98      ; R11 := "/Lotus/Language/Railjack/Avionics_Super"
288 [-]: LOADKB    R12 0 0      ; R12 := false
289 [-]: CALL      R9 4 2       ; R9 := R9(R10,R11,R12)
290 [-]: SETTABLE  R8 K54 R9    ; R8["Name"] := R9
291 [-]: GETGLOBAL R9 K92       ; R9 := 0x0032441c
292 [-]: GETTABLE  R9 R9 K99    ; R9 := R9["UICategoryIcon_RailjackSuperOn"]
293 [-]: SETTABLE  R8 K91 R9    ; R8["Icon"] := R9
294 [-]: SETLIST   R2 6 1       ; R2[(1-1)*FPF+i] := R(2+i), 1 <= i <= 6
295 [-]: NEWTABLE  R3 0 0       ; R3 := {}
296 [-]: GETGLOBAL R4 K103      ; R4 := 0x33bdd652
297 [-]: GETTABLE  R4 R4 K104   ; R4 := R4[0x23d5322f]
298 [-]: MOVE      R5 R3        ; R5 := R3
299 [-]: NEWTABLE  R6 0 3       ; R6 := {}
300 [-]: GETUPVAL  R7 U1        ; R7 := U1
301 [-]: GETTABLE  R7 R7 K106   ; R7 := R7["CategoryId_ALL"]
302 [-]: SETTABLE  R6 K105 R7   ; R6["Category"] := R7
303 [-]: GETGLOBAL R7 K5        ; R7 := 0xae91e43b
304 [-]: SELF      R7 R7 K55    ; R8 := R7; R7 := R7[0x42b04007]
305 [-]: LOADK     R9 K107      ; R9 := "/Lotus/Language/Menu/CategoryAll"
306 [-]: LOADKB    R10 0 0      ; R10 := false
307 [-]: CALL      R7 4 2       ; R7 := R7(R8,R9,R10)
308 [-]: SETTABLE  R6 K54 R7    ; R6["Name"] := R7
309 [-]: GETGLOBAL R7 K92       ; R7 := 0x0032441c
310 [-]: GETTABLE  R7 R7 K108   ; R7 := R7["UICategoryIcon_AllOn"]
311 [-]: SETTABLE  R6 K91 R7    ; R6["Icon"] := R7
312 [-]: CALL      R4 3 1       ; R4(R5,R6)
313 [-]: GETUPVAL  R4 U6        ; R4 := U6
314 [-]: CALL      R4 1 2       ; R4 := R4()
315 [-]: TEST      R4 0         ; if not R4 then PC := 355
316 [-]: JMP       355          ; PC := 355
317 [-]: GETGLOBAL R4 K103      ; R4 := 0x33bdd652
318 [-]: GETTABLE  R4 R4 K104   ; R4 := R4[0x23d5322f]
319 [-]: MOVE      R5 R3        ; R5 := R3
320 [-]: NEWTABLE  R6 0 3       ; R6 := {}
321 [-]: GETUPVAL  R7 U1        ; R7 := U1
322 [-]: GETTABLE  R7 R7 K109   ; R7 := R7["CategoryId_AURA"]
323 [-]: SETTABLE  R6 K105 R7   ; R6["Category"] := R7
324 [-]: GETGLOBAL R7 K5        ; R7 := 0xae91e43b
325 [-]: SELF      R7 R7 K55    ; R8 := R7; R7 := R7[0x42b04007]
326 [-]: LOADK     R9 K110      ; R9 := "/Lotus/Language/Menu/CategoryAura"
327 [-]: LOADKB    R10 0 0      ; R10 := false
328 [-]: CALL      R7 4 2       ; R7 := R7(R8,R9,R10)
329 [-]: SETTABLE  R6 K54 R7    ; R6["Name"] := R7
330 [-]: GETGLOBAL R7 K92       ; R7 := 0x0032441c
331 [-]: GETTABLE  R7 R7 K111   ; R7 := R7["UICategoryIcon_AuraOn"]
332 [-]: SETTABLE  R6 K91 R7    ; R6["Icon"] := R7
333 [-]: CALL      R4 3 1       ; R4(R5,R6)
334 [-]: CONST     R4 1         ; R4 := 1.000000
335 [-]: LEN       R5 R2        ; R5 := # R2
336 [-]: CONST     R6 1         ; R6 := 1.000000
337 [-]: FORPREP   R4 353       ; R4 -= R6; PC := 353
338 [-]: GETGLOBAL R8 K103      ; R8 := 0x33bdd652
339 [-]: GETTABLE  R8 R8 K104   ; R8 := R8[0x23d5322f]
340 [-]: MOVE      R9 R3        ; R9 := R3
341 [-]: NEWTABLE  R10 0 3      ; R10 := {}
342 [-]: GETTABLE  R11 R2 R7    ; R11 := R2[R7]
343 [-]: GETTABLE  R11 R11 K87  ; R11 := R11["Index"]
344 [-]: ADD       R11 K112 R11 ; R11 := 200.000000 + R11
345 [-]: SETTABLE  R10 K105 R11 ; R10["Category"] := R11
346 [-]: GETTABLE  R11 R2 R7    ; R11 := R2[R7]
347 [-]: GETTABLE  R11 R11 K54  ; R11 := R11["Name"]
348 [-]: SETTABLE  R10 K54 R11  ; R10["Name"] := R11
349 [-]: GETTABLE  R11 R2 R7    ; R11 := R2[R7]
350 [-]: GETTABLE  R11 R11 K91  ; R11 := R11["Icon"]
351 [-]: SETTABLE  R10 K91 R11  ; R10["Icon"] := R11
352 [-]: CALL      R8 3 1       ; R8(R9,R10)
353 [-]: FORLOOP   R4 338       ; R4 += R6; if R4 <= R5 then begin PC := 338; R7 := R4 end
354 [-]: JMP       529          ; PC := 529
355 [-]: GETUPVAL  R8 U7        ; R8 := U7
356 [-]: CALL      R8 1 2       ; R8 := R8()
357 [-]: TEST      R8 1         ; if R8 then PC := 367
358 [-]: JMP       367          ; PC := 367
359 [-]: GETGLOBAL R8 K113      ; R8 := _T
360 [-]: GETTABLE  R8 R8 K114   ; R8 := R8["upgradeItemCategory"]
361 [-]: EQ        1 R8 K41     ; if R8 == 1.000000 then PC := 367
362 [-]: JMP       367          ; PC := 367
363 [-]: GETGLOBAL R8 K113      ; R8 := _T
364 [-]: GETTABLE  R8 R8 K114   ; R8 := R8["upgradeItemCategory"]
365 [-]: EQ        0 R8 K34     ; if R8 ~= 0.000000 then PC := 423
366 [-]: JMP       423          ; PC := 423
367 [-]: GETUPVAL  R8 U7        ; R8 := U7
368 [-]: CALL      R8 1 2       ; R8 := R8()
369 [-]: TEST      R8 0         ; if not R8 then PC := 405
370 [-]: JMP       405          ; PC := 405
371 [-]: GETGLOBAL R8 K103      ; R8 := 0x33bdd652
372 [-]: GETTABLE  R8 R8 K104   ; R8 := R8[0x23d5322f]
373 [-]: MOVE      R9 R3        ; R9 := R3
374 [-]: NEWTABLE  R10 0 3      ; R10 := {}
375 [-]: GETUPVAL  R11 U1       ; R11 := U1
376 [-]: GETTABLE  R11 R11 K109 ; R11 := R11["CategoryId_AURA"]
377 [-]: SETTABLE  R10 K105 R11 ; R10["Category"] := R11
378 [-]: GETGLOBAL R11 K5       ; R11 := 0xae91e43b
379 [-]: SELF      R11 R11 K55  ; R12 := R11; R11 := R11[0x42b04007]
380 [-]: LOADK     R13 K110     ; R13 := "/Lotus/Language/Menu/CategoryAura"
381 [-]: LOADKB    R14 0 0      ; R14 := false
382 [-]: CALL      R11 4 2      ; R11 := R11(R12,R13,R14)
383 [-]: SETTABLE  R10 K54 R11  ; R10["Name"] := R11
384 [-]: GETGLOBAL R11 K92      ; R11 := 0x0032441c
385 [-]: GETTABLE  R11 R11 K111 ; R11 := R11["UICategoryIcon_AuraOn"]
386 [-]: SETTABLE  R10 K91 R11  ; R10["Icon"] := R11
387 [-]: CALL      R8 3 1       ; R8(R9,R10)
388 [-]: GETGLOBAL R8 K103      ; R8 := 0x33bdd652
389 [-]: GETTABLE  R8 R8 K104   ; R8 := R8[0x23d5322f]
390 [-]: MOVE      R9 R3        ; R9 := R3
391 [-]: NEWTABLE  R10 0 3      ; R10 := {}
392 [-]: GETUPVAL  R11 U1       ; R11 := U1
393 [-]: GETTABLE  R11 R11 K116 ; R11 := R11["CategoryId_AUGMENT"]
394 [-]: SETTABLE  R10 K105 R11 ; R10["Category"] := R11
395 [-]: GETGLOBAL R11 K5       ; R11 := 0xae91e43b
396 [-]: SELF      R11 R11 K55  ; R12 := R11; R11 := R11[0x42b04007]
397 [-]: LOADK     R13 K117     ; R13 := "/Lotus/Language/Menu/CategoryAugment"
398 [-]: LOADKB    R14 0 0      ; R14 := false
399 [-]: CALL      R11 4 2      ; R11 := R11(R12,R13,R14)
400 [-]: SETTABLE  R10 K54 R11  ; R10["Name"] := R11
401 [-]: GETGLOBAL R11 K92      ; R11 := 0x0032441c
402 [-]: GETTABLE  R11 R11 K118 ; R11 := R11["UICategoryIcon_AugmentOn"]
403 [-]: SETTABLE  R10 K91 R11  ; R10["Icon"] := R11
404 [-]: CALL      R8 3 1       ; R8(R9,R10)
405 [-]: GETGLOBAL R8 K103      ; R8 := 0x33bdd652
406 [-]: GETTABLE  R8 R8 K104   ; R8 := R8[0x23d5322f]
407 [-]: MOVE      R9 R3        ; R9 := R3
408 [-]: NEWTABLE  R10 0 3      ; R10 := {}
409 [-]: GETUPVAL  R11 U1       ; R11 := U1
410 [-]: GETTABLE  R11 R11 K119 ; R11 := R11["CategoryId_UTILITY"]
411 [-]: SETTABLE  R10 K105 R11 ; R10["Category"] := R11
412 [-]: GETGLOBAL R11 K5       ; R11 := 0xae91e43b
413 [-]: SELF      R11 R11 K55  ; R12 := R11; R11 := R11[0x42b04007]
414 [-]: LOADK     R13 K120     ; R13 := "/Lotus/Language/Menu/CategoryUtility"
415 [-]: LOADKB    R14 0 0      ; R14 := false
416 [-]: CALL      R11 4 2      ; R11 := R11(R12,R13,R14)
417 [-]: SETTABLE  R10 K54 R11  ; R10["Name"] := R11
418 [-]: GETGLOBAL R11 K92      ; R11 := 0x0032441c
419 [-]: GETTABLE  R11 R11 K121 ; R11 := R11["UICategoryIcon_UtilityOn"]
420 [-]: SETTABLE  R10 K91 R11  ; R10["Icon"] := R11
421 [-]: CALL      R8 3 1       ; R8(R9,R10)
422 [-]: JMP       529          ; PC := 529
423 [-]: GETGLOBAL R8 K113      ; R8 := _T
424 [-]: GETTABLE  R8 R8 K114   ; R8 := R8["upgradeItemCategory"]
425 [-]: EQ        0 R8 K122    ; if R8 ~= 27.000000 then PC := 445
426 [-]: JMP       445          ; PC := 445
427 [-]: GETGLOBAL R8 K103      ; R8 := 0x33bdd652
428 [-]: GETTABLE  R8 R8 K104   ; R8 := R8[0x23d5322f]
429 [-]: MOVE      R9 R3        ; R9 := R3
430 [-]: NEWTABLE  R10 0 3      ; R10 := {}
431 [-]: GETUPVAL  R11 U1       ; R11 := U1
432 [-]: GETTABLE  R11 R11 K116 ; R11 := R11["CategoryId_AUGMENT"]
433 [-]: SETTABLE  R10 K105 R11 ; R10["Category"] := R11
434 [-]: GETGLOBAL R11 K5       ; R11 := 0xae91e43b
435 [-]: SELF      R11 R11 K55  ; R12 := R11; R11 := R11[0x42b04007]
436 [-]: LOADK     R13 K117     ; R13 := "/Lotus/Language/Menu/CategoryAugment"
437 [-]: LOADKB    R14 0 0      ; R14 := false
438 [-]: CALL      R11 4 2      ; R11 := R11(R12,R13,R14)
439 [-]: SETTABLE  R10 K54 R11  ; R10["Name"] := R11
440 [-]: GETGLOBAL R11 K92      ; R11 := 0x0032441c
441 [-]: GETTABLE  R11 R11 K118 ; R11 := R11["UICategoryIcon_AugmentOn"]
442 [-]: SETTABLE  R10 K91 R11  ; R10["Icon"] := R11
443 [-]: CALL      R8 3 1       ; R8(R9,R10)
444 [-]: JMP       529          ; PC := 529
445 [-]: GETGLOBAL R8 K113      ; R8 := _T
446 [-]: GETTABLE  R8 R8 K114   ; R8 := R8["upgradeItemCategory"]
447 [-]: EQ        0 R8 K123    ; if R8 ~= 5.000000 then PC := 467
448 [-]: JMP       467          ; PC := 467
449 [-]: GETGLOBAL R8 K103      ; R8 := 0x33bdd652
450 [-]: GETTABLE  R8 R8 K104   ; R8 := R8[0x23d5322f]
451 [-]: MOVE      R9 R3        ; R9 := R3
452 [-]: NEWTABLE  R10 0 3      ; R10 := {}
453 [-]: GETUPVAL  R11 U1       ; R11 := U1
454 [-]: GETTABLE  R11 R11 K124 ; R11 := R11["CategoryId_STANCE"]
455 [-]: SETTABLE  R10 K105 R11 ; R10["Category"] := R11
456 [-]: GETGLOBAL R11 K5       ; R11 := 0xae91e43b
457 [-]: SELF      R11 R11 K55  ; R12 := R11; R11 := R11[0x42b04007]
458 [-]: LOADK     R13 K125     ; R13 := "/Lotus/Language/Menu/CategoryMeleeStance"
459 [-]: LOADKB    R14 0 0      ; R14 := false
460 [-]: CALL      R11 4 2      ; R11 := R11(R12,R13,R14)
461 [-]: SETTABLE  R10 K54 R11  ; R10["Name"] := R11
462 [-]: GETGLOBAL R11 K92      ; R11 := 0x0032441c
463 [-]: GETTABLE  R11 R11 K126 ; R11 := R11["UICategoryIcon_StanceOn"]
464 [-]: SETTABLE  R10 K91 R11  ; R10["Icon"] := R11
465 [-]: CALL      R8 3 1       ; R8(R9,R10)
466 [-]: JMP       529          ; PC := 529
467 [-]: GETGLOBAL R8 K113      ; R8 := _T
468 [-]: GETTABLE  R8 R8 K114   ; R8 := R8["upgradeItemCategory"]
469 [-]: EQ        0 R8 K127    ; if R8 ~= 38.000000 then PC := 508
470 [-]: JMP       508          ; PC := 508
471 [-]: GETUPVAL  R8 U8        ; R8 := U8
472 [-]: CALL      R8 1 2       ; R8 := R8()
473 [-]: GETGLOBAL R9 K44       ; R9 := 0x7b998233
474 [-]: MOVE      R10 R8       ; R10 := R8
475 [-]: CALL      R9 2 2       ; R9 := R9(R10)
476 [-]: TEST      R9 1         ; if R9 then PC := 529
477 [-]: JMP       529          ; PC := 529
478 [-]: SELF      R9 R8 K128   ; R10 := R8; R9 := R8[0xf2deaf69]
479 [-]: GETGLOBAL R11 K129     ; R11 := gLotusMeleeWeaponType
480 [-]: CALL      R9 3 2       ; R9 := R9(R10,R11)
481 [-]: TEST      R9 0         ; if not R9 then PC := 529
482 [-]: JMP       529          ; PC := 529
483 [-]: SELF      R9 R8 K130   ; R10 := R8; R9 := R8[0x78c595ae]
484 [-]: GETGLOBAL R11 K131     ; R11 := 0x0469f296
485 [-]: LOADK     R12 K132     ; R12 := "POWER_WEAPON"
486 [-]: CALL      R11 2 0      ; R11,... := R11(R12)
487 [-]: CALL      R9 0 2       ; R9 := R9(R10,...)
488 [-]: TEST      R9 1         ; if R9 then PC := 529
489 [-]: JMP       529          ; PC := 529
490 [-]: GETGLOBAL R9 K103      ; R9 := 0x33bdd652
491 [-]: GETTABLE  R9 R9 K104   ; R9 := R9[0x23d5322f]
492 [-]: MOVE      R10 R3       ; R10 := R3
493 [-]: NEWTABLE  R11 0 3      ; R11 := {}
494 [-]: GETUPVAL  R12 U1       ; R12 := U1
495 [-]: GETTABLE  R12 R12 K124 ; R12 := R12["CategoryId_STANCE"]
496 [-]: SETTABLE  R11 K105 R12 ; R11["Category"] := R12
497 [-]: GETGLOBAL R12 K5       ; R12 := 0xae91e43b
498 [-]: SELF      R12 R12 K55  ; R13 := R12; R12 := R12[0x42b04007]
499 [-]: LOADK     R14 K125     ; R14 := "/Lotus/Language/Menu/CategoryMeleeStance"
500 [-]: LOADKB    R15 0 0      ; R15 := false
501 [-]: CALL      R12 4 2      ; R12 := R12(R13,R14,R15)
502 [-]: SETTABLE  R11 K54 R12  ; R11["Name"] := R12
503 [-]: GETGLOBAL R12 K92      ; R12 := 0x0032441c
504 [-]: GETTABLE  R12 R12 K126 ; R12 := R12["UICategoryIcon_StanceOn"]
505 [-]: SETTABLE  R11 K91 R12  ; R11["Icon"] := R12
506 [-]: CALL      R9 3 1       ; R9(R10,R11)
507 [-]: JMP       529          ; PC := 529
508 [-]: GETGLOBAL R9 K113      ; R9 := _T
509 [-]: GETTABLE  R9 R9 K114   ; R9 := R9["upgradeItemCategory"]
510 [-]: EQ        0 R9 K133    ; if R9 ~= 47.000000 then PC := 529
511 [-]: JMP       529          ; PC := 529
512 [-]: GETGLOBAL R9 K103      ; R9 := 0x33bdd652
513 [-]: GETTABLE  R9 R9 K104   ; R9 := R9[0x23d5322f]
514 [-]: MOVE      R10 R3       ; R10 := R3
515 [-]: NEWTABLE  R11 0 3      ; R11 := {}
516 [-]: GETUPVAL  R12 U1       ; R12 := U1
517 [-]: GETTABLE  R12 R12 K134 ; R12 := R12["CategoryId_IMMORTAL"]
518 [-]: SETTABLE  R11 K105 R12 ; R11["Category"] := R12
519 [-]: GETGLOBAL R12 K5       ; R12 := 0xae91e43b
520 [-]: SELF      R12 R12 K55  ; R13 := R12; R12 := R12[0x42b04007]
521 [-]: LOADK     R14 K135     ; R14 := "/Lotus/Language/Menu/ProjectionManager_TierDesc5"
522 [-]: LOADKB    R15 0 0      ; R15 := false
523 [-]: CALL      R12 4 2      ; R12 := R12(R13,R14,R15)
524 [-]: SETTABLE  R11 K54 R12  ; R11["Name"] := R12
525 [-]: GETGLOBAL R12 K92      ; R12 := 0x0032441c
526 [-]: GETTABLE  R12 R12 K136 ; R12 := R12["UICategoryIcon_ImmortalOn"]
527 [-]: SETTABLE  R11 K91 R12  ; R11["Icon"] := R12
528 [-]: CALL      R9 3 1       ; R9(R10,R11)
529 [-]: LOADNIL   R9 R11       ; R9 := R10 := R11 := nil
530 [-]: GETGLOBAL R12 K137     ; R12 := 0xc8802016
531 [-]: MOVE      R13 R1       ; R13 := R1
532 [-]: CALL      R12 2 4      ; R12,R13,R14 := R12(R13)
533 [-]: JMP       572          ; PC := 572
534 [-]: GETGLOBAL R17 K138     ; R17 := Lotus_Game
535 [-]: LOADK     R18 K139     ; R18 := "AP_"
536 [-]: MOVE      R19 R16      ; R19 := R16
537 [-]: CONCAT    R18 R18 R19  ; R18 := R18 .. R19
538 [-]: GETTABLE  R9 R17 R18   ; R9 := R17[R18]
539 [-]: GETGLOBAL R17 K5       ; R17 := 0xae91e43b
540 [-]: SELF      R17 R17 K55  ; R18 := R17; R17 := R17[0x42b04007]
541 [-]: LOADK     R19 K140     ; R19 := "/Lotus/Language/Menu/AP_"
542 [-]: MOVE      R20 R16      ; R20 := R16
543 [-]: CONCAT    R19 R19 R20  ; R19 := R19 .. R20
544 [-]: LOADKB    R20 0 0      ; R20 := false
545 [-]: CALL      R17 4 2      ; R17 := R17(R18,R19,R20)
546 [-]: MOVE      R10 R17      ; R10 := R17
547 [-]: GETGLOBAL R17 K141     ; R17 := 0x7f5022cf
548 [-]: GETTABLE  R17 R17 K142 ; R17 := R17[0xa5c556b9]
549 [-]: MOVE      R18 R10      ; R18 := R10
550 [-]: LOADK     R19 K143     ; R19 := ">"
551 [-]: CALL      R17 3 2      ; R17 := R17(R18,R19)
552 [-]: MOVE      R11 R17      ; R11 := R17
553 [-]: EQ        1 R11 K1     ; if R11 == nil then PC := 561
554 [-]: JMP       561          ; PC := 561
555 [-]: GETGLOBAL R17 K141     ; R17 := 0x7f5022cf
556 [-]: GETTABLE  R17 R17 K144 ; R17 := R17[0x1a94c9cc]
557 [-]: MOVE      R18 R10      ; R18 := R10
558 [-]: ADD       R19 R11 K41  ; R19 := R11 + 1.000000
559 [-]: CALL      R17 3 2      ; R17 := R17(R18,R19)
560 [-]: MOVE      R10 R17      ; R10 := R17
561 [-]: GETGLOBAL R17 K103     ; R17 := 0x33bdd652
562 [-]: GETTABLE  R17 R17 K104 ; R17 := R17[0x23d5322f]
563 [-]: MOVE      R18 R3       ; R18 := R3
564 [-]: NEWTABLE  R19 0 3      ; R19 := {}
565 [-]: ADD       R20 K26 R9   ; R20 := 100.000000 + R9
566 [-]: SETTABLE  R19 K105 R20 ; R19["Category"] := R20
567 [-]: SETTABLE  R19 K54 R10  ; R19["Name"] := R10
568 [-]: GETGLOBAL R20 K145     ; R20 := 0x9228af18
569 [-]: GETTABLE  R20 R20 R9   ; R20 := R20[R9]
570 [-]: SETTABLE  R19 K91 R20  ; R19["Icon"] := R20
571 [-]: CALL      R17 3 1      ; R17(R18,R19)
572 [-]: TFORLOOP  R12 2        ; R15,R16 :=  R12(R13,R14); if R15 ~= nil then begin PC = 534; R14 := R15 end
573 [-]: JMP       534          ; PC := 534
574 [-]: CONST     R17 1        ; R17 := 1.000000
575 [-]: LEN       R18 R3       ; R18 := # R3
576 [-]: CONST     R19 1        ; R19 := 1.000000
577 [-]: FORPREP   R17 582      ; R17 -= R19; PC := 582
578 [-]: GETGLOBAL R21 K0       ; R21 := mCollectionGrid
579 [-]: SELF      R21 R21 K146 ; R22 := R21; R21 := R21[0x06d36229]
580 [-]: GETTABLE  R23 R3 R20   ; R23 := R3[R20]
581 [-]: CALL      R21 3 1      ; R21(R22,R23)
582 [-]: FORLOOP   R17 578      ; R17 += R19; if R17 <= R18 then begin PC := 578; R20 := R17 end
583 [-]: GETGLOBAL R21 K5       ; R21 := 0xae91e43b
584 [-]: SELF      R21 R21 K147 ; R22 := R21; R21 := R21[0xd5181643]
585 [-]: LOADK     R23 K148     ; R23 := "Available.SortMenu.MainButton.Underline"
586 [-]: GETGLOBAL R24 K92      ; R24 := 0x0032441c
587 [-]: GETTABLE  R24 R24 K149 ; R24 := R24["UIMaterial_SmoothEdge"]
588 [-]: CALL      R21 4 1      ; R21(R22,R23,R24)
589 [-]: GETGLOBAL R21 K5       ; R21 := 0xae91e43b
590 [-]: SELF      R21 R21 K147 ; R22 := R21; R21 := R21[0xd5181643]
591 [-]: LOADK     R23 K150     ; R23 := "Available.SortMenu.MainButton.Underline2"
592 [-]: GETGLOBAL R24 K92      ; R24 := 0x0032441c
593 [-]: GETTABLE  R24 R24 K149 ; R24 := R24["UIMaterial_SmoothEdge"]
594 [-]: CALL      R21 4 1      ; R21(R22,R23,R24)
595 [-]: GETGLOBAL R21 K5       ; R21 := 0xae91e43b
596 [-]: SELF      R21 R21 K151 ; R22 := R21; R21 := R21[0xaade900e]
597 [-]: LOADK     R23 K152     ; R23 := "TopMenu.LeftBumper"
598 [-]: CONST     R24 11       ; R24 := 11.000000
599 [-]: GETGLOBAL R25 K115     ; R25 := 0x34291f5c
600 [-]: GETTABLE  R25 R25 K153 ; R25 := R25[0x1467d5f4]
601 [-]: CALL      R25 1 2      ; R25 := R25()
602 [-]: TEST      R25 0        ; if not R25 then PC := 609
603 [-]: JMP       609          ; PC := 609
604 [-]: LEN       R25 R3       ; R25 := # R3
605 [-]: LT        1 K41 R25    ; if 1.000000 < R25 then PC := 608
606 [-]: JMP       608          ; PC := 608
607 [-]: LOADKB    R25 0 1      ; R25 := false; PC := 608
608 [-]: LOADKB    R25 1 0      ; R25 := true
609 [-]: CALL      R21 5 1      ; R21(R22,R23,R24,R25)
610 [-]: GETGLOBAL R21 K5       ; R21 := 0xae91e43b
611 [-]: SELF      R21 R21 K151 ; R22 := R21; R21 := R21[0xaade900e]
612 [-]: LOADK     R23 K154     ; R23 := "TopMenu.RightBumper"
613 [-]: CONST     R24 11       ; R24 := 11.000000
614 [-]: GETGLOBAL R25 K115     ; R25 := 0x34291f5c
615 [-]: GETTABLE  R25 R25 K153 ; R25 := R25[0x1467d5f4]
616 [-]: CALL      R25 1 2      ; R25 := R25()
617 [-]: TEST      R25 0        ; if not R25 then PC := 624
618 [-]: JMP       624          ; PC := 624
619 [-]: LEN       R25 R3       ; R25 := # R3
620 [-]: LT        1 K41 R25    ; if 1.000000 < R25 then PC := 623
621 [-]: JMP       623          ; PC := 623
622 [-]: LOADKB    R25 0 1      ; R25 := false; PC := 623
623 [-]: LOADKB    R25 1 0      ; R25 := true
624 [-]: CALL      R21 5 1      ; R21(R22,R23,R24,R25)
625 [-]: GETGLOBAL R21 K5       ; R21 := 0xae91e43b
626 [-]: SELF      R21 R21 K155 ; R22 := R21; R21 := R21[0x492f9da2]
627 [-]: CALL      R21 2 2      ; R21 := R21(R22)
628 [-]: GETGLOBAL R22 K44      ; R22 := 0x7b998233
629 [-]: GETGLOBAL R23 K156     ; R23 := 0x25d99d89
630 [-]: CALL      R22 2 2      ; R22 := R22(R23)
631 [-]: TEST      R22 1        ; if R22 then PC := 644
632 [-]: JMP       644          ; PC := 644
633 [-]: GETGLOBAL R22 K156     ; R22 := 0x25d99d89
634 [-]: SELF      R22 R22 K157 ; R23 := R22; R22 := R22[0xb6b7ca1e]
635 [-]: MOVE      R24 R21      ; R24 := R21
636 [-]: CALL      R22 3 2      ; R22 := R22(R23,R24)
637 [-]: EQ        0 R22 K158   ; if R22 ~= "" then PC := 640
638 [-]: JMP       640          ; PC := 640
639 [-]: LOADK     R22 K65      ; R22 := "POLARITY"
640 [-]: GETGLOBAL R23 K0       ; R23 := mCollectionGrid
641 [-]: SELF      R23 R23 K159 ; R24 := R23; R23 := R23[0x60125a4f]
642 [-]: MOVE      R25 R22      ; R25 := R22
643 [-]: CALL      R23 3 1      ; R23(R24,R25)
644 [-]: SETGLOBAL R1 K160      ; mFillerCategories := R1
645 [-]: CONST     R23 1        ; R23 := 1.000000
646 [-]: GETGLOBAL R24 K160     ; R24 := mFillerCategories
647 [-]: LEN       R24 R24      ; R24 := # R24
648 [-]: CONST     R25 1        ; R25 := 1.000000
649 [-]: FORPREP   R23 659      ; R23 -= R25; PC := 659
650 [-]: GETGLOBAL R27 K160     ; R27 := mFillerCategories
651 [-]: GETGLOBAL R28 K138     ; R28 := Lotus_Game
652 [-]: LOADK     R29 K139     ; R29 := "AP_"
653 [-]: GETGLOBAL R30 K160     ; R30 := mFillerCategories
654 [-]: GETTABLE  R30 R30 R26  ; R30 := R30[R26]
655 [-]: CONCAT    R29 R29 R30  ; R29 := R29 .. R30
656 [-]: GETTABLE  R28 R28 R29  ; R28 := R28[R29]
657 [-]: ADD       R28 K26 R28  ; R28 := 100.000000 + R28
658 [-]: SETTABLE  R27 R26 R28  ; R27[R26] := R28
659 [-]: FORLOOP   R23 650      ; R23 += R25; if R23 <= R24 then begin PC := 650; R26 := R23 end
660 [-]: GETUPVAL  R27 U6       ; R27 := U6
661 [-]: CALL      R27 1 2      ; R27 := R27()
662 [-]: TEST      R27 0        ; if not R27 then PC := 676
663 [-]: JMP       676          ; PC := 676
664 [-]: CONST     R27 1        ; R27 := 1.000000
665 [-]: LEN       R28 R2       ; R28 := # R2
666 [-]: CONST     R29 1        ; R29 := 1.000000
667 [-]: FORPREP   R27 675      ; R27 -= R29; PC := 675
668 [-]: GETGLOBAL R31 K103     ; R31 := 0x33bdd652
669 [-]: GETTABLE  R31 R31 K104 ; R31 := R31[0x23d5322f]
670 [-]: GETGLOBAL R32 K160     ; R32 := mFillerCategories
671 [-]: GETTABLE  R33 R2 R30   ; R33 := R2[R30]
672 [-]: GETTABLE  R33 R33 K87  ; R33 := R33["Index"]
673 [-]: ADD       R33 K112 R33 ; R33 := 200.000000 + R33
674 [-]: CALL      R31 3 1      ; R31(R32,R33)
675 [-]: FORLOOP   R27 668      ; R27 += R29; if R27 <= R28 then begin PC := 668; R30 := R27 end
676 [-]: GETGLOBAL R31 K103     ; R31 := 0x33bdd652
677 [-]: GETTABLE  R31 R31 K104 ; R31 := R31[0x23d5322f]
678 [-]: GETGLOBAL R32 K160     ; R32 := mFillerCategories
679 [-]: GETUPVAL  R33 U1       ; R33 := U1
680 [-]: GETTABLE  R33 R33 K106 ; R33 := R33["CategoryId_ALL"]
681 [-]: CALL      R31 3 1      ; R31(R32,R33)
682 [-]: GETGLOBAL R31 K103     ; R31 := 0x33bdd652
683 [-]: GETTABLE  R31 R31 K104 ; R31 := R31[0x23d5322f]
684 [-]: GETGLOBAL R32 K160     ; R32 := mFillerCategories
685 [-]: GETUPVAL  R33 U1       ; R33 := U1
686 [-]: GETTABLE  R33 R33 K124 ; R33 := R33["CategoryId_STANCE"]
687 [-]: CALL      R31 3 1      ; R31(R32,R33)
688 [-]: GETGLOBAL R31 K103     ; R31 := 0x33bdd652
689 [-]: GETTABLE  R31 R31 K104 ; R31 := R31[0x23d5322f]
690 [-]: GETGLOBAL R32 K160     ; R32 := mFillerCategories
691 [-]: GETUPVAL  R33 U1       ; R33 := U1
692 [-]: GETTABLE  R33 R33 K109 ; R33 := R33["CategoryId_AURA"]
693 [-]: CALL      R31 3 1      ; R31(R32,R33)
694 [-]: GETGLOBAL R31 K103     ; R31 := 0x33bdd652
695 [-]: GETTABLE  R31 R31 K104 ; R31 := R31[0x23d5322f]
696 [-]: GETGLOBAL R32 K160     ; R32 := mFillerCategories
697 [-]: GETUPVAL  R33 U1       ; R33 := U1
698 [-]: GETTABLE  R33 R33 K116 ; R33 := R33["CategoryId_AUGMENT"]
699 [-]: CALL      R31 3 1      ; R31(R32,R33)
700 [-]: GETGLOBAL R31 K103     ; R31 := 0x33bdd652
701 [-]: GETTABLE  R31 R31 K104 ; R31 := R31[0x23d5322f]
702 [-]: GETGLOBAL R32 K160     ; R32 := mFillerCategories
703 [-]: GETUPVAL  R33 U1       ; R33 := U1
704 [-]: GETTABLE  R33 R33 K119 ; R33 := R33["CategoryId_UTILITY"]
705 [-]: CALL      R31 3 1      ; R31(R32,R33)
706 [-]: GETGLOBAL R31 K103     ; R31 := 0x33bdd652
707 [-]: GETTABLE  R31 R31 K104 ; R31 := R31[0x23d5322f]
708 [-]: GETGLOBAL R32 K160     ; R32 := mFillerCategories
709 [-]: GETUPVAL  R33 U1       ; R33 := U1
710 [-]: GETTABLE  R33 R33 K161 ; R33 := R33["CategoryId_OMEGA"]
711 [-]: CALL      R31 3 1      ; R31(R32,R33)
712 [-]: GETGLOBAL R31 K103     ; R31 := 0x33bdd652
713 [-]: GETTABLE  R31 R31 K104 ; R31 := R31[0x23d5322f]
714 [-]: GETGLOBAL R32 K160     ; R32 := mFillerCategories
715 [-]: GETUPVAL  R33 U1       ; R33 := U1
716 [-]: GETTABLE  R33 R33 K134 ; R33 := R33["CategoryId_IMMORTAL"]
717 [-]: CALL      R31 3 1      ; R31(R32,R33)
718 [-]: GETGLOBAL R31 K0       ; R31 := mCollectionGrid
719 [-]: SELF      R31 R31 K162 ; R32 := R31; R31 := R31[0x7c09c373]
720 [-]: LOADKB    R33 1 0      ; R33 := true
721 [-]: LOADKB    R34 1 0      ; R34 := true
722 [-]: CALL      R31 4 1      ; R31(R32,R33,R34)
723 [-]: GETUPVAL  R31 U9       ; R31 := U9
724 [-]: CALL      R31 1 1      ; R31()
725 [-]: GETGLOBAL R31 K0       ; R31 := mCollectionGrid
726 [-]: SETTABLE  R31 K163 K17 ; R31["mHasDoneFirstRedraw"] := false
727 [-]: GETGLOBAL R31 K0       ; R31 := mCollectionGrid
728 [-]: SELF      R31 R31 K164 ; R32 := R31; R31 := R31[0x71e9ac81]
729 [-]: CALL      R31 2 1      ; R31(R32)
730 [-]: GETGLOBAL R31 K0       ; R31 := mCollectionGrid
731 [-]: GETTABLE  R31 R31 K165 ; R31 := R31["mScrollBar"]
732 [-]: SETTABLE  R31 K166 K34 ; R31["mInitialY"] := 0.000000
733 [-]: GETGLOBAL R31 K0       ; R31 := mCollectionGrid
734 [-]: GETTABLE  R31 R31 K165 ; R31 := R31["mScrollBar"]
735 [-]: SELF      R31 R31 K167 ; R32 := R31; R31 := R31[0x44aa79ac]
736 [-]: CONST     R33 0        ; R33 := 0.000000
737 [-]: CALL      R31 3 1      ; R31(R32,R33)
738 [-]: GETGLOBAL R31 K0       ; R31 := mCollectionGrid
739 [-]: GETTABLE  R31 R31 K165 ; R31 := R31["mScrollBar"]
740 [-]: SELF      R31 R31 K168 ; R32 := R31; R31 := R31[0xa8854625]
741 [-]: CALL      R31 2 1      ; R31(R32)
742 [-]: RETURN    R0 1         ; return 


; Function #66.1:
;
; Name:            
; Defined at line: 2500
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: LOADK     R2 K0        ; R2 := 2310.000000
  2 [-]: RETURN    R2 2         ; return R2
  3 [-]: RETURN    R0 1         ; return 


; Function #66.2:
;
; Name:            
; Defined at line: 2520
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: RETURN    R0 1         ; return 
  2 [-]: RETURN    R0 1         ; return 


; Function #66.3:
;
; Name:            
; Defined at line: 2524
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  7

  1 [-]: GETGLOBAL R2 K0        ; R2 := 0x7b998233
  2 [-]: GETTABLE  R3 R1 K1     ; R3 := R1["mClipName"]
  3 [-]: CALL      R2 2 2       ; R2 := R2(R3)
  4 [-]: TEST      R2 0         ; if not R2 then PC := 7
  5 [-]: JMP       7            ; PC := 7
  6 [-]: RETURN    R0 1         ; return 
  7 [-]: GETTABLE  R2 R0 K2     ; R2 := R0["mMovie"]
  8 [-]: SELF      R2 R2 K3     ; R3 := R2; R2 := R2[0x67bc869f]
  9 [-]: GETTABLE  R4 R1 K1     ; R4 := R1["mClipName"]
 10 [-]: CONST     R5 10        ; R5 := 10.000000
 11 [-]: CONST     R6 0         ; R6 := 0.000000
 12 [-]: CALL      R2 5 1       ; R2(R3,R4,R5,R6)
 13 [-]: RETURN    R0 1         ; return 


; Function #66.4:
;
; Name:            
; Defined at line: 2532
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETGLOBAL R2 K0        ; R2 := 0xce225efa
  2 [-]: CONST     R3 0         ; R3 := 0.000000
  3 [-]: CALL      R2 2 1       ; R2(R3)
  4 [-]: GETGLOBAL R2 K1        ; R2 := mCards
  5 [-]: GETTABLE  R3 R0 K2     ; R3 := R0["mCardIndex"]
  6 [-]: GETTABLE  R0 R2 R3     ; R0 := R2[R3]
  7 [-]: GETGLOBAL R2 K1        ; R2 := mCards
  8 [-]: GETTABLE  R3 R1 K2     ; R3 := R1["mCardIndex"]
  9 [-]: GETTABLE  R1 R2 R3     ; R1 := R2[R3]
 10 [-]: EQ        0 R0 K3      ; if R0 ~= nil then PC := 15
 11 [-]: JMP       15           ; PC := 15
 12 [-]: LOADKB    R2 0 0       ; R2 := false
 13 [-]: RETURN    R2 2         ; return R2
 14 [-]: JMP       62           ; PC := 62
 15 [-]: EQ        0 R1 K3      ; if R1 ~= nil then PC := 20
 16 [-]: JMP       20           ; PC := 20
 17 [-]: LOADKB    R2 1 0       ; R2 := true
 18 [-]: RETURN    R2 2         ; return R2
 19 [-]: JMP       62           ; PC := 62
 20 [-]: GETGLOBAL R2 K4        ; R2 := mCollectionGrid
 21 [-]: GETTABLE  R2 R2 K5     ; R2 := R2["mHasDoneFirstRedraw"]
 22 [-]: TEST      R2 1         ; if R2 then PC := 31
 23 [-]: JMP       31           ; PC := 31
 24 [-]: GETTABLE  R2 R0 K6     ; R2 := R0["mIsNew"]
 25 [-]: GETTABLE  R3 R1 K6     ; R3 := R1["mIsNew"]
 26 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 31
 27 [-]: JMP       31           ; PC := 31
 28 [-]: GETTABLE  R2 R0 K6     ; R2 := R0["mIsNew"]
 29 [-]: RETURN    R2 2         ; return R2
 30 [-]: JMP       62           ; PC := 62
 31 [-]: GETTABLE  R2 R0 K7     ; R2 := R0["mName"]
 32 [-]: GETTABLE  R3 R1 K7     ; R3 := R1["mName"]
 33 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 43
 34 [-]: JMP       43           ; PC := 43
 35 [-]: GETTABLE  R2 R0 K7     ; R2 := R0["mName"]
 36 [-]: GETTABLE  R3 R1 K7     ; R3 := R1["mName"]
 37 [-]: LT        1 R2 R3      ; if R2 < R3 then PC := 40
 38 [-]: JMP       40           ; PC := 40
 39 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 40
 40 [-]: LOADKB    R2 1 0       ; R2 := true
 41 [-]: RETURN    R2 2         ; return R2
 42 [-]: JMP       62           ; PC := 62
 43 [-]: GETTABLE  R2 R0 K8     ; R2 := R0["mUpgradeType"]
 44 [-]: GETTABLE  R3 R1 K8     ; R3 := R1["mUpgradeType"]
 45 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 55
 46 [-]: JMP       55           ; PC := 55
 47 [-]: GETTABLE  R2 R0 K8     ; R2 := R0["mUpgradeType"]
 48 [-]: GETTABLE  R3 R1 K8     ; R3 := R1["mUpgradeType"]
 49 [-]: LT        1 R2 R3      ; if R2 < R3 then PC := 52
 50 [-]: JMP       52           ; PC := 52
 51 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 52
 52 [-]: LOADKB    R2 1 0       ; R2 := true
 53 [-]: RETURN    R2 2         ; return R2
 54 [-]: JMP       62           ; PC := 62
 55 [-]: GETTABLE  R2 R0 K9     ; R2 := R0["mLevel"]
 56 [-]: GETTABLE  R3 R1 K9     ; R3 := R1["mLevel"]
 57 [-]: LT        1 R3 R2      ; if R3 < R2 then PC := 60
 58 [-]: JMP       60           ; PC := 60
 59 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 60
 60 [-]: LOADKB    R2 1 0       ; R2 := true
 61 [-]: RETURN    R2 2         ; return R2
 62 [-]: RETURN    R0 1         ; return 


; Function #66.5:
;
; Name:            
; Defined at line: 2551
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETGLOBAL R2 K0        ; R2 := mCards
  2 [-]: GETTABLE  R3 R0 K1     ; R3 := R0["mCardIndex"]
  3 [-]: GETTABLE  R0 R2 R3     ; R0 := R2[R3]
  4 [-]: GETGLOBAL R2 K0        ; R2 := mCards
  5 [-]: GETTABLE  R3 R1 K1     ; R3 := R1["mCardIndex"]
  6 [-]: GETTABLE  R1 R2 R3     ; R1 := R2[R3]
  7 [-]: EQ        0 R0 K2      ; if R0 ~= nil then PC := 12
  8 [-]: JMP       12           ; PC := 12
  9 [-]: LOADKB    R2 0 0       ; R2 := false
 10 [-]: RETURN    R2 2         ; return R2
 11 [-]: JMP       47           ; PC := 47
 12 [-]: EQ        0 R1 K2      ; if R1 ~= nil then PC := 17
 13 [-]: JMP       17           ; PC := 17
 14 [-]: LOADKB    R2 1 0       ; R2 := true
 15 [-]: RETURN    R2 2         ; return R2
 16 [-]: JMP       47           ; PC := 47
 17 [-]: GETGLOBAL R2 K3        ; R2 := mCollectionGrid
 18 [-]: GETTABLE  R2 R2 K4     ; R2 := R2["mHasDoneFirstRedraw"]
 19 [-]: TEST      R2 1         ; if R2 then PC := 28
 20 [-]: JMP       28           ; PC := 28
 21 [-]: GETTABLE  R2 R0 K5     ; R2 := R0["mIsNew"]
 22 [-]: GETTABLE  R3 R1 K5     ; R3 := R1["mIsNew"]
 23 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 28
 24 [-]: JMP       28           ; PC := 28
 25 [-]: GETTABLE  R2 R0 K5     ; R2 := R0["mIsNew"]
 26 [-]: RETURN    R2 2         ; return R2
 27 [-]: JMP       47           ; PC := 47
 28 [-]: GETTABLE  R2 R0 K6     ; R2 := R0["mLevel"]
 29 [-]: GETTABLE  R3 R1 K6     ; R3 := R1["mLevel"]
 30 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 40
 31 [-]: JMP       40           ; PC := 40
 32 [-]: GETTABLE  R2 R0 K6     ; R2 := R0["mLevel"]
 33 [-]: GETTABLE  R3 R1 K6     ; R3 := R1["mLevel"]
 34 [-]: LT        1 R3 R2      ; if R3 < R2 then PC := 37
 35 [-]: JMP       37           ; PC := 37
 36 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 37
 37 [-]: LOADKB    R2 1 0       ; R2 := true
 38 [-]: RETURN    R2 2         ; return R2
 39 [-]: JMP       47           ; PC := 47
 40 [-]: GETTABLE  R2 R0 K7     ; R2 := R0["mName"]
 41 [-]: GETTABLE  R3 R1 K7     ; R3 := R1["mName"]
 42 [-]: LT        1 R2 R3      ; if R2 < R3 then PC := 45
 43 [-]: JMP       45           ; PC := 45
 44 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 45
 45 [-]: LOADKB    R2 1 0       ; R2 := true
 46 [-]: RETURN    R2 2         ; return R2
 47 [-]: RETURN    R0 1         ; return 


; Function #66.6:
;
; Name:            
; Defined at line: 2567
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R2 K0        ; R2 := mCards
  2 [-]: GETTABLE  R3 R0 K1     ; R3 := R0["mCardIndex"]
  3 [-]: GETTABLE  R0 R2 R3     ; R0 := R2[R3]
  4 [-]: GETGLOBAL R2 K0        ; R2 := mCards
  5 [-]: GETTABLE  R3 R1 K1     ; R3 := R1["mCardIndex"]
  6 [-]: GETTABLE  R1 R2 R3     ; R1 := R2[R3]
  7 [-]: EQ        0 R0 K2      ; if R0 ~= nil then PC := 12
  8 [-]: JMP       12           ; PC := 12
  9 [-]: LOADKB    R2 0 0       ; R2 := false
 10 [-]: RETURN    R2 2         ; return R2
 11 [-]: JMP       77           ; PC := 77
 12 [-]: EQ        0 R1 K2      ; if R1 ~= nil then PC := 17
 13 [-]: JMP       17           ; PC := 17
 14 [-]: LOADKB    R2 1 0       ; R2 := true
 15 [-]: RETURN    R2 2         ; return R2
 16 [-]: JMP       77           ; PC := 77
 17 [-]: GETGLOBAL R2 K3        ; R2 := mCollectionGrid
 18 [-]: GETTABLE  R2 R2 K4     ; R2 := R2["mHasDoneFirstRedraw"]
 19 [-]: TEST      R2 1         ; if R2 then PC := 28
 20 [-]: JMP       28           ; PC := 28
 21 [-]: GETTABLE  R2 R0 K5     ; R2 := R0["mIsNew"]
 22 [-]: GETTABLE  R3 R1 K5     ; R3 := R1["mIsNew"]
 23 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 28
 24 [-]: JMP       28           ; PC := 28
 25 [-]: GETTABLE  R2 R0 K5     ; R2 := R0["mIsNew"]
 26 [-]: RETURN    R2 2         ; return R2
 27 [-]: JMP       77           ; PC := 77
 28 [-]: GETTABLE  R2 R0 K6     ; R2 := R0["mDrain"]
 29 [-]: GETTABLE  R3 R1 K6     ; R3 := R1["mDrain"]
 30 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 46
 31 [-]: JMP       46           ; PC := 46
 32 [-]: GETGLOBAL R2 K7        ; R2 := 0x5bced4c4
 33 [-]: GETTABLE  R2 R2 K8     ; R2 := R2[0xe4a5b3ca]
 34 [-]: GETTABLE  R3 R0 K6     ; R3 := R0["mDrain"]
 35 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 36 [-]: GETGLOBAL R3 K7        ; R3 := 0x5bced4c4
 37 [-]: GETTABLE  R3 R3 K8     ; R3 := R3[0xe4a5b3ca]
 38 [-]: GETTABLE  R4 R1 K6     ; R4 := R1["mDrain"]
 39 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 40 [-]: LT        1 R3 R2      ; if R3 < R2 then PC := 43
 41 [-]: JMP       43           ; PC := 43
 42 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 43
 43 [-]: LOADKB    R2 1 0       ; R2 := true
 44 [-]: RETURN    R2 2         ; return R2
 45 [-]: JMP       77           ; PC := 77
 46 [-]: GETTABLE  R2 R0 K9     ; R2 := R0["mName"]
 47 [-]: GETTABLE  R3 R1 K9     ; R3 := R1["mName"]
 48 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 58
 49 [-]: JMP       58           ; PC := 58
 50 [-]: GETTABLE  R2 R0 K9     ; R2 := R0["mName"]
 51 [-]: GETTABLE  R3 R1 K9     ; R3 := R1["mName"]
 52 [-]: LT        1 R2 R3      ; if R2 < R3 then PC := 55
 53 [-]: JMP       55           ; PC := 55
 54 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 55
 55 [-]: LOADKB    R2 1 0       ; R2 := true
 56 [-]: RETURN    R2 2         ; return R2
 57 [-]: JMP       77           ; PC := 77
 58 [-]: GETTABLE  R2 R0 K10    ; R2 := R0["mUpgradeType"]
 59 [-]: GETTABLE  R3 R1 K10    ; R3 := R1["mUpgradeType"]
 60 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 70
 61 [-]: JMP       70           ; PC := 70
 62 [-]: GETTABLE  R2 R0 K10    ; R2 := R0["mUpgradeType"]
 63 [-]: GETTABLE  R3 R1 K10    ; R3 := R1["mUpgradeType"]
 64 [-]: LT        1 R2 R3      ; if R2 < R3 then PC := 67
 65 [-]: JMP       67           ; PC := 67
 66 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 67
 67 [-]: LOADKB    R2 1 0       ; R2 := true
 68 [-]: RETURN    R2 2         ; return R2
 69 [-]: JMP       77           ; PC := 77
 70 [-]: GETTABLE  R2 R0 K11    ; R2 := R0["mLevel"]
 71 [-]: GETTABLE  R3 R1 K11    ; R3 := R1["mLevel"]
 72 [-]: LT        1 R3 R2      ; if R3 < R2 then PC := 75
 73 [-]: JMP       75           ; PC := 75
 74 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 75
 75 [-]: LOADKB    R2 1 0       ; R2 := true
 76 [-]: RETURN    R2 2         ; return R2
 77 [-]: RETURN    R0 1         ; return 


; Function #66.7:
;
; Name:            
; Defined at line: 2587
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETGLOBAL R2 K0        ; R2 := mCards
  2 [-]: GETTABLE  R3 R0 K1     ; R3 := R0["mCardIndex"]
  3 [-]: GETTABLE  R0 R2 R3     ; R0 := R2[R3]
  4 [-]: GETGLOBAL R2 K0        ; R2 := mCards
  5 [-]: GETTABLE  R3 R1 K1     ; R3 := R1["mCardIndex"]
  6 [-]: GETTABLE  R1 R2 R3     ; R1 := R2[R3]
  7 [-]: EQ        0 R0 K2      ; if R0 ~= nil then PC := 12
  8 [-]: JMP       12           ; PC := 12
  9 [-]: LOADKB    R2 0 0       ; R2 := false
 10 [-]: RETURN    R2 2         ; return R2
 11 [-]: JMP       71           ; PC := 71
 12 [-]: EQ        0 R1 K2      ; if R1 ~= nil then PC := 17
 13 [-]: JMP       17           ; PC := 17
 14 [-]: LOADKB    R2 1 0       ; R2 := true
 15 [-]: RETURN    R2 2         ; return R2
 16 [-]: JMP       71           ; PC := 71
 17 [-]: GETGLOBAL R2 K3        ; R2 := mCollectionGrid
 18 [-]: GETTABLE  R2 R2 K4     ; R2 := R2["mHasDoneFirstRedraw"]
 19 [-]: TEST      R2 1         ; if R2 then PC := 28
 20 [-]: JMP       28           ; PC := 28
 21 [-]: GETTABLE  R2 R0 K5     ; R2 := R0["mIsNew"]
 22 [-]: GETTABLE  R3 R1 K5     ; R3 := R1["mIsNew"]
 23 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 28
 24 [-]: JMP       28           ; PC := 28
 25 [-]: GETTABLE  R2 R0 K5     ; R2 := R0["mIsNew"]
 26 [-]: RETURN    R2 2         ; return R2
 27 [-]: JMP       71           ; PC := 71
 28 [-]: GETTABLE  R2 R0 K6     ; R2 := R0["mPolarity"]
 29 [-]: GETTABLE  R3 R1 K6     ; R3 := R1["mPolarity"]
 30 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 40
 31 [-]: JMP       40           ; PC := 40
 32 [-]: GETTABLE  R2 R0 K6     ; R2 := R0["mPolarity"]
 33 [-]: GETTABLE  R3 R1 K6     ; R3 := R1["mPolarity"]
 34 [-]: LT        1 R3 R2      ; if R3 < R2 then PC := 37
 35 [-]: JMP       37           ; PC := 37
 36 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 37
 37 [-]: LOADKB    R2 1 0       ; R2 := true
 38 [-]: RETURN    R2 2         ; return R2
 39 [-]: JMP       71           ; PC := 71
 40 [-]: GETTABLE  R2 R0 K7     ; R2 := R0["mName"]
 41 [-]: GETTABLE  R3 R1 K7     ; R3 := R1["mName"]
 42 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 52
 43 [-]: JMP       52           ; PC := 52
 44 [-]: GETTABLE  R2 R0 K7     ; R2 := R0["mName"]
 45 [-]: GETTABLE  R3 R1 K7     ; R3 := R1["mName"]
 46 [-]: LT        1 R2 R3      ; if R2 < R3 then PC := 49
 47 [-]: JMP       49           ; PC := 49
 48 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 49
 49 [-]: LOADKB    R2 1 0       ; R2 := true
 50 [-]: RETURN    R2 2         ; return R2
 51 [-]: JMP       71           ; PC := 71
 52 [-]: GETTABLE  R2 R0 K8     ; R2 := R0["mUpgradeType"]
 53 [-]: GETTABLE  R3 R1 K8     ; R3 := R1["mUpgradeType"]
 54 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 64
 55 [-]: JMP       64           ; PC := 64
 56 [-]: GETTABLE  R2 R0 K8     ; R2 := R0["mUpgradeType"]
 57 [-]: GETTABLE  R3 R1 K8     ; R3 := R1["mUpgradeType"]
 58 [-]: LT        1 R2 R3      ; if R2 < R3 then PC := 61
 59 [-]: JMP       61           ; PC := 61
 60 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 61
 61 [-]: LOADKB    R2 1 0       ; R2 := true
 62 [-]: RETURN    R2 2         ; return R2
 63 [-]: JMP       71           ; PC := 71
 64 [-]: GETTABLE  R2 R0 K9     ; R2 := R0["mLevel"]
 65 [-]: GETTABLE  R3 R1 K9     ; R3 := R1["mLevel"]
 66 [-]: LT        1 R3 R2      ; if R3 < R2 then PC := 69
 67 [-]: JMP       69           ; PC := 69
 68 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 69
 69 [-]: LOADKB    R2 1 0       ; R2 := true
 70 [-]: RETURN    R2 2         ; return R2
 71 [-]: RETURN    R0 1         ; return 


; Function #66.8:
;
; Name:            
; Defined at line: 2607
; #Upvalues:       3
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  16

  1 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mClipName"]
  2 [-]: EQ        1 R2 K1      ; if R2 == nil then PC := 7
  3 [-]: JMP       7            ; PC := 7
  4 [-]: GETTABLE  R2 R0 K2     ; R2 := R0["mCardIndex"]
  5 [-]: EQ        0 R2 K3      ; if R2 ~= -1.000000 then PC := 8
  6 [-]: JMP       8            ; PC := 8
  7 [-]: RETURN    R0 1         ; return 
  8 [-]: GETTABLE  R2 R0 K4     ; R2 := R0["mOrigDepth"]
  9 [-]: EQ        0 R2 K1      ; if R2 ~= nil then PC := 35
 10 [-]: JMP       35           ; PC := 35
 11 [-]: GETGLOBAL R2 K5        ; R2 := 0x03f57322
 12 [-]: GETGLOBAL R3 K6        ; R3 := 0x38f10e85
 13 [-]: GETGLOBAL R4 K7        ; R4 := 0xae91e43b
 14 [-]: GETTABLE  R5 R0 K0     ; R5 := R0["mClipName"]
 15 [-]: LOADK     R6 K8        ; R6 := ".getDepth"
 16 [-]: CONCAT    R5 R5 R6     ; R5 := R5 .. R6
 17 [-]: CALL      R3 3 0       ; R3,... := R3(R4,R5)
 18 [-]: CALL      R2 0 2       ; R2 := R2(R3,...)
 19 [-]: SETTABLE  R0 K4 R2     ; R0["mOrigDepth"] := R2
 20 [-]: GETGLOBAL R2 K6        ; R2 := 0x38f10e85
 21 [-]: GETGLOBAL R3 K7        ; R3 := 0xae91e43b
 22 [-]: GETTABLE  R4 R0 K0     ; R4 := R0["mClipName"]
 23 [-]: LOADK     R5 K9        ; R5 := ".swapDepths"
 24 [-]: CONCAT    R4 R4 R5     ; R4 := R4 .. R5
 25 [-]: GETGLOBAL R5 K10       ; R5 := mCollectionGrid
 26 [-]: GETTABLE  R5 R5 K11    ; R5 := R5["mInitialDepth"]
 27 [-]: GETGLOBAL R6 K10       ; R6 := mCollectionGrid
 28 [-]: GETTABLE  R6 R6 K12    ; R6 := R6["mTopClipIndexUsed"]
 29 [-]: ADD       R6 R6 K13    ; R6 := R6 + 1.000000
 30 [-]: GETGLOBAL R7 K10       ; R7 := mCollectionGrid
 31 [-]: GETTABLE  R7 R7 K14    ; R7 := R7["mDepthDirection"]
 32 [-]: MUL       R6 R6 R7     ; R6 := R6 * R7
 33 [-]: ADD       R5 R5 R6     ; R5 := R5 + R6
 34 [-]: CALL      R2 4 1       ; R2(R3,R4,R5)
 35 [-]: GETGLOBAL R2 K15       ; R2 := mMouseDrag
 36 [-]: SELF      R2 R2 K16    ; R3 := R2; R2 := R2[0xf37943ff]
 37 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 38 [-]: TEST      R2 0         ; if not R2 then PC := 41
 39 [-]: JMP       41           ; PC := 41
 40 [-]: RETURN    R0 1         ; return 
 41 [-]: GETTABLE  R2 R0 K18    ; R2 := R0["Id"]
 42 [-]: SETGLOBAL R2 K17       ; mLastCollectionCardFocused := R2
 43 [-]: GETUPVAL  R2 U0        ; R2 := U0
 44 [-]: GETTABLE  R2 R2 K19    ; R2 := R2[0x659d451f]
 45 [-]: GETGLOBAL R3 K20       ; R3 := 0x0032441c
 46 [-]: GETTABLE  R3 R3 K21    ; R3 := R3["UISound_Focus"]
 47 [-]: CALL      R2 2 1       ; R2(R3)
 48 [-]: GETGLOBAL R2 K6        ; R2 := 0x38f10e85
 49 [-]: GETGLOBAL R3 K7        ; R3 := 0xae91e43b
 50 [-]: LOADK     R4 K22       ; R4 := "Available.swapDepths"
 51 [-]: CONST     R5 1200      ; R5 := 1200.000000
 52 [-]: CALL      R2 4 1       ; R2(R3,R4,R5)
 53 [-]: TEST      R1 1         ; if R1 then PC := 84
 54 [-]: JMP       84           ; PC := 84
 55 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mClipName"]
 56 [-]: EQ        1 R2 K1      ; if R2 == nil then PC := 84
 57 [-]: JMP       84           ; PC := 84
 58 [-]: CONST     R2 0         ; R2 := 0.000000
 59 [-]: GETGLOBAL R3 K10       ; R3 := mCollectionGrid
 60 [-]: SELF      R3 R3 K23    ; R4 := R3; R3 := R3[0xeb0d56b0]
 61 [-]: MOVE      R5 R0        ; R5 := R0
 62 [-]: CALL      R3 3 2       ; R3 := R3(R4,R5)
 63 [-]: EQ        0 R3 K24     ; if R3 ~= 2.000000 then PC := 66
 64 [-]: JMP       66           ; PC := 66
 65 [-]: SUB       R2 R2 K25    ; R2 := R2 - 100.000000
 66 [-]: GETUPVAL  R4 U1        ; R4 := U1
 67 [-]: GETTABLE  R4 R4 K26    ; R4 := R4[0x37970f97]
 68 [-]: MOVE      R5 R0        ; R5 := R0
 69 [-]: GETTABLE  R6 R0 K0     ; R6 := R0["mClipName"]
 70 [-]: LOADK     R7 K27       ; R7 := ".Card"
 71 [-]: CONCAT    R6 R6 R7     ; R6 := R6 .. R7
 72 [-]: LOADKB    R7 1 0       ; R7 := true
 73 [-]: LOADNIL   R8 R8        ; R8 := nil
 74 [-]: CONST     R9 0         ; R9 := 0.000000
 75 [-]: MOVE      R10 R2       ; R10 := R2
 76 [-]: LOADNIL   R11 R11      ; R11 := nil
 77 [-]: GETUPVAL  R12 U0       ; R12 := U0
 78 [-]: GETTABLE  R12 R12 K28  ; R12 := R12[0x06d055f9]
 79 [-]: GETGLOBAL R13 K29      ; R13 := mIsDiegetic
 80 [-]: LOADNIL   R14 R14      ; R14 := nil
 81 [-]: CONST     R15 2        ; R15 := 2.000000
 82 [-]: CALL      R12 4 0      ; R12,... := R12(R13,R14,R15)
 83 [-]: CALL      R4 0 1       ; R4(R5,...)
 84 [-]: GETUPVAL  R4 U2        ; R4 := U2
 85 [-]: MOVE      R5 R0        ; R5 := R0
 86 [-]: CALL      R4 2 1       ; R4(R5)
 87 [-]: RETURN    R0 1         ; return 


; Function #66.9:
;
; Name:            
; Defined at line: 2640
; #Upvalues:       2
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  13

  1 [-]: GETGLOBAL R1 K0        ; R1 := _T
  2 [-]: SETTABLE  R1 K1 K2     ; R1["InfoPopup_Data"] := nil
  3 [-]: GETTABLE  R1 R0 K3     ; R1 := R0["mClipName"]
  4 [-]: EQ        1 R1 K2      ; if R1 == nil then PC := 35
  5 [-]: JMP       35           ; PC := 35
  6 [-]: GETUPVAL  R1 U0        ; R1 := U0
  7 [-]: GETTABLE  R1 R1 K4     ; R1 := R1[0x37970f97]
  8 [-]: MOVE      R2 R0        ; R2 := R0
  9 [-]: GETTABLE  R3 R0 K3     ; R3 := R0["mClipName"]
 10 [-]: LOADK     R4 K5        ; R4 := ".Card"
 11 [-]: CONCAT    R3 R3 R4     ; R3 := R3 .. R4
 12 [-]: LOADKB    R4 0 0       ; R4 := false
 13 [-]: LOADNIL   R5 R5        ; R5 := nil
 14 [-]: CONST     R6 0         ; R6 := 0.000000
 15 [-]: CONST     R7 0         ; R7 := 0.000000
 16 [-]: LOADNIL   R8 R8        ; R8 := nil
 17 [-]: GETUPVAL  R9 U1        ; R9 := U1
 18 [-]: GETTABLE  R9 R9 K6     ; R9 := R9[0x06d055f9]
 19 [-]: GETGLOBAL R10 K7       ; R10 := mIsDiegetic
 20 [-]: LOADNIL   R11 R11      ; R11 := nil
 21 [-]: CONST     R12 2        ; R12 := 2.000000
 22 [-]: CALL      R9 4 0       ; R9,... := R9(R10,R11,R12)
 23 [-]: CALL      R1 0 1       ; R1(R2,...)
 24 [-]: GETTABLE  R1 R0 K8     ; R1 := R0["mOrigDepth"]
 25 [-]: EQ        1 R1 K2      ; if R1 == nil then PC := 35
 26 [-]: JMP       35           ; PC := 35
 27 [-]: GETGLOBAL R1 K9        ; R1 := 0x38f10e85
 28 [-]: GETGLOBAL R2 K10       ; R2 := 0xae91e43b
 29 [-]: GETTABLE  R3 R0 K3     ; R3 := R0["mClipName"]
 30 [-]: LOADK     R4 K11       ; R4 := ".swapDepths"
 31 [-]: CONCAT    R3 R3 R4     ; R3 := R3 .. R4
 32 [-]: GETTABLE  R4 R0 K8     ; R4 := R0["mOrigDepth"]
 33 [-]: CALL      R1 4 1       ; R1(R2,R3,R4)
 34 [-]: SETTABLE  R0 K8 K2     ; R0["mOrigDepth"] := nil
 35 [-]: GETGLOBAL R1 K0        ; R1 := _T
 36 [-]: SETTABLE  R1 K12 K2    ; R1["gToolTip"] := nil
 37 [-]: RETURN    R0 1         ; return 


; Function #66.10:
;
; Name:            
; Defined at line: 2653
; #Upvalues:       4
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  13

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x34291f5c
  2 [-]: GETTABLE  R1 R1 K1     ; R1 := R1[0x781669d7]
  3 [-]: CALL      R1 1 2       ; R1 := R1()
  4 [-]: TEST      R1 0         ; if not R1 then PC := 36
  5 [-]: JMP       36           ; PC := 36
  6 [-]: GETGLOBAL R1 K2        ; R1 := 0x7b998233
  7 [-]: GETUPVAL  R2 U0        ; R2 := U0
  8 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  9 [-]: TEST      R1 1         ; if R1 then PC := 36
 10 [-]: JMP       36           ; PC := 36
 11 [-]: GETGLOBAL R1 K2        ; R1 := 0x7b998233
 12 [-]: GETUPVAL  R2 U0        ; R2 := U0
 13 [-]: GETTABLE  R2 R2 K3     ; R2 := R2["mClipName"]
 14 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 15 [-]: TEST      R1 1         ; if R1 then PC := 36
 16 [-]: JMP       36           ; PC := 36
 17 [-]: GETUPVAL  R1 U1        ; R1 := U1
 18 [-]: GETTABLE  R1 R1 K4     ; R1 := R1[0x37970f97]
 19 [-]: GETUPVAL  R2 U0        ; R2 := U0
 20 [-]: GETUPVAL  R3 U0        ; R3 := U0
 21 [-]: GETTABLE  R3 R3 K3     ; R3 := R3["mClipName"]
 22 [-]: LOADK     R4 K5        ; R4 := ".Card"
 23 [-]: CONCAT    R3 R3 R4     ; R3 := R3 .. R4
 24 [-]: LOADKB    R4 0 0       ; R4 := false
 25 [-]: LOADNIL   R5 R5        ; R5 := nil
 26 [-]: CONST     R6 0         ; R6 := 0.000000
 27 [-]: CONST     R7 0         ; R7 := 0.000000
 28 [-]: LOADNIL   R8 R8        ; R8 := nil
 29 [-]: GETUPVAL  R9 U2        ; R9 := U2
 30 [-]: GETTABLE  R9 R9 K6     ; R9 := R9[0x06d055f9]
 31 [-]: GETGLOBAL R10 K7       ; R10 := mIsDiegetic
 32 [-]: LOADNIL   R11 R11      ; R11 := nil
 33 [-]: CONST     R12 2        ; R12 := 2.000000
 34 [-]: CALL      R9 4 0       ; R9,... := R9(R10,R11,R12)
 35 [-]: CALL      R1 0 1       ; R1(R2,...)
 36 [-]: GETGLOBAL R1 K0        ; R1 := 0x34291f5c
 37 [-]: GETTABLE  R1 R1 K8     ; R1 := R1[0x1467d5f4]
 38 [-]: CALL      R1 1 2       ; R1 := R1()
 39 [-]: TEST      R1 1         ; if R1 then PC := 45
 40 [-]: JMP       45           ; PC := 45
 41 [-]: GETUPVAL  R1 U3        ; R1 := U3
 42 [-]: GETGLOBAL R2 K9        ; R2 := mCollectionGrid
 43 [-]: MOVE      R3 R0        ; R3 := R0
 44 [-]: CALL      R1 3 1       ; R1(R2,R3)
 45 [-]: RETURN    R0 1         ; return 


; Function #66.11:
;
; Name:            
; Defined at line: 2663
; #Upvalues:       4
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  18

  1 [-]: GETUPVAL  R1 U0        ; R1 := U0
  2 [-]: GETTABLE  R1 R1 K0     ; R1 := R1[0x659d451f]
  3 [-]: GETGLOBAL R2 K1        ; R2 := 0x0032441c
  4 [-]: GETTABLE  R2 R2 K2     ; R2 := R2["UISound_Select"]
  5 [-]: CALL      R1 2 1       ; R1(R2)
  6 [-]: GETGLOBAL R1 K3        ; R1 := 0x7b998233
  7 [-]: GETGLOBAL R2 K4        ; R2 := _T
  8 [-]: GETTABLE  R2 R2 K5     ; R2 := R2["ContextMenu"]
  9 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 10 [-]: TEST      R1 1         ; if R1 then PC := 19
 11 [-]: JMP       19           ; PC := 19
 12 [-]: GETGLOBAL R1 K4        ; R1 := _T
 13 [-]: GETTABLE  R1 R1 K5     ; R1 := R1["ContextMenu"]
 14 [-]: SELF      R1 R1 K6     ; R2 := R1; R1 := R1[0x67dbb071]
 15 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 16 [-]: TEST      R1 0         ; if not R1 then PC := 19
 17 [-]: JMP       19           ; PC := 19
 18 [-]: RETURN    R0 1         ; return 
 19 [-]: GETTABLE  R1 R0 K7     ; R1 := R0["mInstalled"]
 20 [-]: TEST      R1 0         ; if not R1 then PC := 38
 21 [-]: JMP       38           ; PC := 38
 22 [-]: GETUPVAL  R1 U0        ; R1 := U0
 23 [-]: GETTABLE  R1 R1 K8     ; R1 := R1[0xa53f5e12]
 24 [-]: GETGLOBAL R2 K9        ; R2 := 0xae91e43b
 25 [-]: SELF      R2 R2 K10    ; R3 := R2; R2 := R2[0x42b04007]
 26 [-]: LOADK     R4 K11       ; R4 := "/Lotus/Language/Menu/Loadout_ModAlreadyInstalled"
 27 [-]: LOADKB    R5 1 0       ; R5 := true
 28 [-]: NEWTABLE  R6 0 2       ; R6 := {}
 29 [-]: GETTABLE  R7 R0 K13    ; R7 := R0["mName"]
 30 [-]: SETTABLE  R6 K12 R7    ; R6["MOD"] := R7
 31 [-]: GETTABLE  R7 R0 K15    ; R7 := R0["mInstalledName"]
 32 [-]: SETTABLE  R6 K14 R7    ; R6["WEAPON"] := R7
 33 [-]: CALL      R2 5 2       ; R2 := R2(R3,R4,R5,R6)
 34 [-]: LOADNIL   R3 R4        ; R3 := R4 := nil
 35 [-]: LOADKB    R5 1 0       ; R5 := true
 36 [-]: CALL      R1 5 1       ; R1(R2,R3,R4,R5)
 37 [-]: RETURN    R0 1         ; return 
 38 [-]: GETGLOBAL R1 K16       ; R1 := mMouseDrag
 39 [-]: SELF      R1 R1 K17    ; R2 := R1; R1 := R1[0xf37943ff]
 40 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 41 [-]: TEST      R1 0         ; if not R1 then PC := 48
 42 [-]: JMP       48           ; PC := 48
 43 [-]: GETUPVAL  R1 U1        ; R1 := U1
 44 [-]: GETGLOBAL R2 K18       ; R2 := mCollectionGrid
 45 [-]: MOVE      R3 R0        ; R3 := R0
 46 [-]: CALL      R1 3 1       ; R1(R2,R3)
 47 [-]: JMP       157          ; PC := 157
 48 [-]: GETGLOBAL R1 K19       ; R1 := mCards
 49 [-]: GETTABLE  R2 R0 K20    ; R2 := R0["mCardIndex"]
 50 [-]: GETTABLE  R1 R1 R2     ; R1 := R1[R2]
 51 [-]: GETGLOBAL R2 K3        ; R2 := 0x7b998233
 52 [-]: MOVE      R3 R1        ; R3 := R1
 53 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 54 [-]: TEST      R2 1         ; if R2 then PC := 157
 55 [-]: JMP       157          ; PC := 157
 56 [-]: GETTABLE  R2 R1 K21    ; R2 := R1["mIcon"]
 57 [-]: GETUPVAL  R3 U2        ; R3 := U2
 58 [-]: GETTABLE  R3 R3 K22    ; R3 := R3[0x6b32352d]
 59 [-]: MOVE      R4 R1        ; R4 := R1
 60 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 61 [-]: TEST      R3 0         ; if not R3 then PC := 98
 62 [-]: JMP       98           ; PC := 98
 63 [-]: GETGLOBAL R3 K9        ; R3 := 0xae91e43b
 64 [-]: SELF      R3 R3 K23    ; R4 := R3; R3 := R3[0xd5181643]
 65 [-]: LOADK     R5 K24       ; R5 := "DragImage"
 66 [-]: GETGLOBAL R6 K1        ; R6 := 0x0032441c
 67 [-]: GETTABLE  R6 R6 K25    ; R6 := R6["UIMaterial_Mods"]
 68 [-]: GETTABLE  R6 R6 K26    ; R6 := R6[2.000000]
 69 [-]: GETTABLE  R6 R6 K27    ; R6 := R6["ImmortalIcon"]
 70 [-]: CALL      R3 4 1       ; R3(R4,R5,R6)
 71 [-]: GETGLOBAL R3 K9        ; R3 := 0xae91e43b
 72 [-]: SELF      R3 R3 K28    ; R4 := R3; R3 := R3[0x64735a8e]
 73 [-]: LOADK     R5 K24       ; R5 := "DragImage"
 74 [-]: GETGLOBAL R6 K29       ; R6 := 0x0469f296
 75 [-]: LOADK     R7 K30       ; R7 := "DetailMap"
 76 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 77 [-]: GETTABLE  R7 R1 K31    ; R7 := R1["mGlowIcon"]
 78 [-]: CALL      R3 5 1       ; R3(R4,R5,R6,R7)
 79 [-]: GETGLOBAL R3 K9        ; R3 := 0xae91e43b
 80 [-]: SELF      R3 R3 K32    ; R4 := R3; R3 := R3[0x91e13703]
 81 [-]: LOADK     R5 K24       ; R5 := "DragImage"
 82 [-]: LOADK     R6 K33       ; R6 := "DetailMapTint"
 83 [-]: LOADK     R7 K34       ; R7 := 0.635300
 84 [-]: CONST     R8 0         ; R8 := 0.000000
 85 [-]: LOADK     R9 K35       ; R9 := 0.180400
 86 [-]: CONST     R10 1        ; R10 := 1.000000
 87 [-]: CALL      R3 8 1       ; R3(R4,R5,R6,R7,R8,R9,R10)
 88 [-]: GETGLOBAL R3 K9        ; R3 := 0xae91e43b
 89 [-]: SELF      R3 R3 K32    ; R4 := R3; R3 := R3[0x91e13703]
 90 [-]: LOADK     R5 K24       ; R5 := "DragImage"
 91 [-]: LOADK     R6 K36       ; R6 := "DetailMapParams"
 92 [-]: CONST     R7 1         ; R7 := 1.000000
 93 [-]: CONST     R8 1         ; R8 := 1.000000
 94 [-]: CONST     R9 1         ; R9 := 1.000000
 95 [-]: CONST     R10 1        ; R10 := 1.000000
 96 [-]: CALL      R3 8 1       ; R3(R4,R5,R6,R7,R8,R9,R10)
 97 [-]: JMP       141          ; PC := 141
 98 [-]: GETGLOBAL R3 K9        ; R3 := 0xae91e43b
 99 [-]: SELF      R3 R3 K23    ; R4 := R3; R3 := R3[0xd5181643]
100 [-]: LOADK     R5 K24       ; R5 := "DragImage"
101 [-]: GETGLOBAL R6 K1        ; R6 := 0x0032441c
102 [-]: GETTABLE  R6 R6 K25    ; R6 := R6["UIMaterial_Mods"]
103 [-]: GETTABLE  R6 R6 K26    ; R6 := R6[2.000000]
104 [-]: GETTABLE  R6 R6 K37    ; R6 := R6["Icon"]
105 [-]: CALL      R3 4 1       ; R3(R4,R5,R6)
106 [-]: GETGLOBAL R3 K1        ; R3 := 0x0032441c
107 [-]: GETTABLE  R3 R3 K25    ; R3 := R3["UIMaterial_Mods"]
108 [-]: GETTABLE  R3 R3 K26    ; R3 := R3[2.000000]
109 [-]: GETTABLE  R3 R3 K37    ; R3 := R3["Icon"]
110 [-]: SELF      R3 R3 K38    ; R4 := R3; R3 := R3[0x0a395711]
111 [-]: GETGLOBAL R5 K29       ; R5 := 0x0469f296
112 [-]: LOADK     R6 K30       ; R6 := "DetailMap"
113 [-]: CALL      R5 2 0       ; R5,... := R5(R6)
114 [-]: CALL      R3 0 2       ; R3 := R3(R4,...)
115 [-]: GETGLOBAL R4 K9        ; R4 := 0xae91e43b
116 [-]: SELF      R4 R4 K28    ; R5 := R4; R4 := R4[0x64735a8e]
117 [-]: LOADK     R6 K24       ; R6 := "DragImage"
118 [-]: GETGLOBAL R7 K29       ; R7 := 0x0469f296
119 [-]: LOADK     R8 K30       ; R8 := "DetailMap"
120 [-]: CALL      R7 2 2       ; R7 := R7(R8)
121 [-]: MOVE      R8 R3        ; R8 := R3
122 [-]: CALL      R4 5 1       ; R4(R5,R6,R7,R8)
123 [-]: GETGLOBAL R4 K9        ; R4 := 0xae91e43b
124 [-]: SELF      R4 R4 K32    ; R5 := R4; R4 := R4[0x91e13703]
125 [-]: LOADK     R6 K24       ; R6 := "DragImage"
126 [-]: LOADK     R7 K33       ; R7 := "DetailMapTint"
127 [-]: CONST     R8 1         ; R8 := 1.000000
128 [-]: CONST     R9 1         ; R9 := 1.000000
129 [-]: CONST     R10 1        ; R10 := 1.000000
130 [-]: CONST     R11 0        ; R11 := 0.000000
131 [-]: CALL      R4 8 1       ; R4(R5,R6,R7,R8,R9,R10,R11)
132 [-]: GETGLOBAL R4 K9        ; R4 := 0xae91e43b
133 [-]: SELF      R4 R4 K32    ; R5 := R4; R4 := R4[0x91e13703]
134 [-]: LOADK     R6 K24       ; R6 := "DragImage"
135 [-]: LOADK     R7 K36       ; R7 := "DetailMapParams"
136 [-]: CONST     R8 0         ; R8 := 0.000000
137 [-]: CONST     R9 0         ; R9 := 0.000000
138 [-]: CONST     R10 1        ; R10 := 1.000000
139 [-]: CONST     R11 1        ; R11 := 1.000000
140 [-]: CALL      R4 8 1       ; R4(R5,R6,R7,R8,R9,R10,R11)
141 [-]: GETGLOBAL R4 K16       ; R4 := mMouseDrag
142 [-]: SELF      R4 R4 K39    ; R5 := R4; R4 := R4[0x383d2e7d]
143 [-]: LOADK     R6 K24       ; R6 := "DragImage"
144 [-]: MOVE      R7 R2        ; R7 := R2
145 [-]: NEWTABLE  R8 0 3       ; R8 := {}
146 [-]: SETTABLE  R8 K40 R1    ; R8["item"] := R1
147 [-]: GETGLOBAL R9 K18       ; R9 := mCollectionGrid
148 [-]: SETTABLE  R8 K41 R9    ; R8["grid"] := R9
149 [-]: SETTABLE  R8 K42 R0    ; R8["element"] := R0
150 [-]: CALL      R4 5 1       ; R4(R5,R6,R7,R8)
151 [-]: GETGLOBAL R4 K4        ; R4 := _T
152 [-]: SETTABLE  R4 K43 K44   ; R4["gToolTip"] := nil
153 [-]: GETGLOBAL R4 K18       ; R4 := mCollectionGrid
154 [-]: SELF      R4 R4 K45    ; R5 := R4; R4 := R4[0xbce5a201]
155 [-]: GETTABLE  R6 R0 K46    ; R6 := R0["Id"]
156 [-]: CALL      R4 3 1       ; R4(R5,R6)
157 [-]: GETGLOBAL R4 K47       ; R4 := 0x34291f5c
158 [-]: GETTABLE  R4 R4 K48    ; R4 := R4[0x781669d7]
159 [-]: CALL      R4 1 2       ; R4 := R4()
160 [-]: TEST      R4 0         ; if not R4 then PC := 191
161 [-]: JMP       191          ; PC := 191
162 [-]: GETGLOBAL R4 K9        ; R4 := 0xae91e43b
163 [-]: SELF      R4 R4 K49    ; R5 := R4; R4 := R4[0x91a24e4b]
164 [-]: GETTABLE  R6 R0 K50    ; R6 := R0["mClipName"]
165 [-]: CONST     R7 0         ; R7 := 0.000000
166 [-]: CALL      R4 4 2       ; R4 := R4(R5,R6,R7)
167 [-]: GETGLOBAL R5 K9        ; R5 := 0xae91e43b
168 [-]: SELF      R5 R5 K49    ; R6 := R5; R5 := R5[0x91a24e4b]
169 [-]: GETTABLE  R7 R0 K50    ; R7 := R0["mClipName"]
170 [-]: CONST     R8 1         ; R8 := 1.000000
171 [-]: CALL      R5 4 2       ; R5 := R5(R6,R7,R8)
172 [-]: SETUPVAL  R0 U3        ; U82 := R3
173 [-]: GETUPVAL  R6 U2        ; R6 := U2
174 [-]: GETTABLE  R6 R6 K51    ; R6 := R6[0x37970f97]
175 [-]: MOVE      R7 R0        ; R7 := R0
176 [-]: GETTABLE  R8 R0 K50    ; R8 := R0["mClipName"]
177 [-]: LOADK     R9 K52       ; R9 := ".Card"
178 [-]: CONCAT    R8 R8 R9     ; R8 := R8 .. R9
179 [-]: LOADKB    R9 1 0       ; R9 := true
180 [-]: LOADNIL   R10 R10      ; R10 := nil
181 [-]: SUB       R11 K53 R4   ; R11 := 1850.000000 - R4
182 [-]: SUB       R12 K54 R5   ; R12 := -270.000000 - R5
183 [-]: LOADNIL   R13 R13      ; R13 := nil
184 [-]: GETUPVAL  R14 U0       ; R14 := U0
185 [-]: GETTABLE  R14 R14 K55  ; R14 := R14[0x06d055f9]
186 [-]: GETGLOBAL R15 K56      ; R15 := mIsDiegetic
187 [-]: LOADNIL   R16 R16      ; R16 := nil
188 [-]: CONST     R17 2        ; R17 := 2.000000
189 [-]: CALL      R14 4 0      ; R14,... := R14(R15,R16,R17)
190 [-]: CALL      R6 0 1       ; R6(R7,...)
191 [-]: RETURN    R0 1         ; return 


; Function #66.12:
;
; Name:            
; Defined at line: 2705
; #Upvalues:       4
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  15

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETTABLE  R2 R0 K1     ; R2 := R0["mClipName"]
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 0         ; if not R1 then PC := 7
  5 [-]: JMP       7            ; PC := 7
  6 [-]: RETURN    R0 1         ; return 
  7 [-]: GETGLOBAL R1 K2        ; R1 := mCollectionGrid
  8 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0xed1ab921]
  9 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 10 [-]: GETGLOBAL R2 K0        ; R2 := 0x7b998233
 11 [-]: MOVE      R3 R1        ; R3 := R1
 12 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 13 [-]: TEST      R2 1         ; if R2 then PC := 19
 14 [-]: JMP       19           ; PC := 19
 15 [-]: GETTABLE  R2 R1 K4     ; R2 := R1["Id"]
 16 [-]: GETTABLE  R3 R0 K4     ; R3 := R0["Id"]
 17 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 20
 18 [-]: JMP       20           ; PC := 20
 19 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 20
 20 [-]: LOADKB    R2 1 0       ; R2 := true
 21 [-]: GETUPVAL  R3 U0        ; R3 := U0
 22 [-]: GETTABLE  R3 R3 K5     ; R3 := R3[0xcbcefa26]
 23 [-]: MOVE      R4 R0        ; R4 := R0
 24 [-]: LOADNIL   R5 R7        ; R5 := R6 := R7 := nil
 25 [-]: GETUPVAL  R8 U1        ; R8 := U1
 26 [-]: GETTABLE  R8 R8 K6     ; R8 := R8[0x06d055f9]
 27 [-]: GETGLOBAL R9 K7        ; R9 := mIsDiegetic
 28 [-]: LOADNIL   R10 R10      ; R10 := nil
 29 [-]: CONST     R11 2        ; R11 := 2.000000
 30 [-]: CALL      R8 4 0       ; R8,... := R8(R9,R10,R11)
 31 [-]: CALL      R3 0 1       ; R3(R4,...)
 32 [-]: GETGLOBAL R3 K8        ; R3 := 0x34291f5c
 33 [-]: GETTABLE  R3 R3 K9     ; R3 := R3[0x781669d7]
 34 [-]: CALL      R3 1 2       ; R3 := R3()
 35 [-]: TEST      R3 0         ; if not R3 then PC := 68
 36 [-]: JMP       68           ; PC := 68
 37 [-]: GETGLOBAL R3 K0        ; R3 := 0x7b998233
 38 [-]: GETUPVAL  R4 U2        ; R4 := U2
 39 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 40 [-]: TEST      R3 1         ; if R3 then PC := 68
 41 [-]: JMP       68           ; PC := 68
 42 [-]: GETGLOBAL R3 K0        ; R3 := 0x7b998233
 43 [-]: GETUPVAL  R4 U2        ; R4 := U2
 44 [-]: GETTABLE  R4 R4 K1     ; R4 := R4["mClipName"]
 45 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 46 [-]: TEST      R3 1         ; if R3 then PC := 68
 47 [-]: JMP       68           ; PC := 68
 48 [-]: GETUPVAL  R3 U0        ; R3 := U0
 49 [-]: GETTABLE  R3 R3 K10    ; R3 := R3[0x37970f97]
 50 [-]: GETUPVAL  R4 U2        ; R4 := U2
 51 [-]: GETUPVAL  R5 U2        ; R5 := U2
 52 [-]: GETTABLE  R5 R5 K1     ; R5 := R5["mClipName"]
 53 [-]: LOADK     R6 K11       ; R6 := ".Card"
 54 [-]: CONCAT    R5 R5 R6     ; R5 := R5 .. R6
 55 [-]: LOADKB    R6 0 0       ; R6 := false
 56 [-]: LOADNIL   R7 R7        ; R7 := nil
 57 [-]: CONST     R8 0         ; R8 := 0.000000
 58 [-]: CONST     R9 0         ; R9 := 0.000000
 59 [-]: LOADNIL   R10 R10      ; R10 := nil
 60 [-]: GETUPVAL  R11 U1       ; R11 := U1
 61 [-]: GETTABLE  R11 R11 K6   ; R11 := R11[0x06d055f9]
 62 [-]: GETGLOBAL R12 K7       ; R12 := mIsDiegetic
 63 [-]: LOADNIL   R13 R13      ; R13 := nil
 64 [-]: CONST     R14 2        ; R14 := 2.000000
 65 [-]: CALL      R11 4 0      ; R11,... := R11(R12,R13,R14)
 66 [-]: CALL      R3 0 1       ; R3(R4,...)
 67 [-]: JMP       84           ; PC := 84
 68 [-]: GETUPVAL  R3 U0        ; R3 := U0
 69 [-]: GETTABLE  R3 R3 K10    ; R3 := R3[0x37970f97]
 70 [-]: MOVE      R4 R0        ; R4 := R0
 71 [-]: GETTABLE  R5 R0 K1     ; R5 := R0["mClipName"]
 72 [-]: LOADK     R6 K11       ; R6 := ".Card"
 73 [-]: CONCAT    R5 R5 R6     ; R5 := R5 .. R6
 74 [-]: MOVE      R6 R2        ; R6 := R2
 75 [-]: CONST     R7 0         ; R7 := 0.000000
 76 [-]: LOADNIL   R8 R10       ; R8 := R9 := R10 := nil
 77 [-]: GETUPVAL  R11 U1       ; R11 := U1
 78 [-]: GETTABLE  R11 R11 K6   ; R11 := R11[0x06d055f9]
 79 [-]: GETGLOBAL R12 K7       ; R12 := mIsDiegetic
 80 [-]: LOADNIL   R13 R13      ; R13 := nil
 81 [-]: CONST     R14 2        ; R14 := 2.000000
 82 [-]: CALL      R11 4 0      ; R11,... := R11(R12,R13,R14)
 83 [-]: CALL      R3 0 1       ; R3(R4,...)
 84 [-]: GETUPVAL  R3 U3        ; R3 := U3
 85 [-]: MOVE      R4 R0        ; R4 := R0
 86 [-]: CALL      R3 2 1       ; R3(R4)
 87 [-]: GETGLOBAL R3 K12       ; R3 := 0xae91e43b
 88 [-]: SELF      R3 R3 K13    ; R4 := R3; R3 := R3[0x19ad3f57]
 89 [-]: GETTABLE  R5 R0 K1     ; R5 := R0["mClipName"]
 90 [-]: LOADK     R6 K14       ; R6 := "Btn"
 91 [-]: LOADK     R7 K15       ; R7 := "trackAsMenu"
 92 [-]: LOADKB    R8 1 0       ; R8 := true
 93 [-]: CALL      R3 6 1       ; R3(R4,R5,R6,R7,R8)
 94 [-]: GETGLOBAL R3 K12       ; R3 := 0xae91e43b
 95 [-]: SELF      R3 R3 K16    ; R4 := R3; R3 := R3[0xc0a3774b]
 96 [-]: GETTABLE  R5 R0 K1     ; R5 := R0["mClipName"]
 97 [-]: LOADK     R6 K17       ; R6 := "Lock"
 98 [-]: CONST     R7 11        ; R7 := 11.000000
 99 [-]: LOADKB    R8 0 0       ; R8 := false
100 [-]: CALL      R3 6 1       ; R3(R4,R5,R6,R7,R8)
101 [-]: GETGLOBAL R3 K12       ; R3 := 0xae91e43b
102 [-]: SELF      R3 R3 K18    ; R4 := R3; R3 := R3[0x5f56eeab]
103 [-]: GETTABLE  R5 R0 K1     ; R5 := R0["mClipName"]
104 [-]: CONST     R6 49        ; R6 := 49.000000
105 [-]: CONST     R7 0         ; R7 := 0.000000
106 [-]: CALL      R3 5 1       ; R3(R4,R5,R6,R7)
107 [-]: GETGLOBAL R3 K12       ; R3 := 0xae91e43b
108 [-]: SELF      R3 R3 K19    ; R4 := R3; R3 := R3[0x0c33ebb2]
109 [-]: GETTABLE  R5 R0 K1     ; R5 := R0["mClipName"]
110 [-]: LOADK     R6 K4        ; R6 := "Id"
111 [-]: GETTABLE  R7 R0 K4     ; R7 := R0["Id"]
112 [-]: CALL      R3 5 1       ; R3(R4,R5,R6,R7)
113 [-]: RETURN    R0 1         ; return 


; Function #66.13:
;
; Name:            
; Defined at line: 2731
; #Upvalues:       0
; #Parameters:     6
; Is_vararg:       0
; Max Stack Size:  14

  1 [-]: SELF      R6 R0 K0     ; R7 := R0; R6 := R0[0xed1ab921]
  2 [-]: CALL      R6 2 2       ; R6 := R6(R7)
  3 [-]: GETGLOBAL R7 K1        ; R7 := 0x7b998233
  4 [-]: MOVE      R8 R6        ; R8 := R6
  5 [-]: CALL      R7 2 2       ; R7 := R7(R8)
  6 [-]: TEST      R7 1         ; if R7 then PC := 22
  7 [-]: JMP       22           ; PC := 22
  8 [-]: GETTABLE  R7 R6 K2     ; R7 := R6["mClipName"]
  9 [-]: EQ        1 R7 K3      ; if R7 == nil then PC := 22
 10 [-]: JMP       22           ; PC := 22
 11 [-]: GETTABLE  R7 R6 K4     ; R7 := R6["mOrigDepth"]
 12 [-]: EQ        1 R7 K3      ; if R7 == nil then PC := 22
 13 [-]: JMP       22           ; PC := 22
 14 [-]: GETGLOBAL R7 K5        ; R7 := 0x38f10e85
 15 [-]: GETGLOBAL R8 K6        ; R8 := 0xae91e43b
 16 [-]: GETTABLE  R9 R6 K2     ; R9 := R6["mClipName"]
 17 [-]: LOADK     R10 K7       ; R10 := ".swapDepths"
 18 [-]: CONCAT    R9 R9 R10    ; R9 := R9 .. R10
 19 [-]: GETTABLE  R10 R6 K4    ; R10 := R6["mOrigDepth"]
 20 [-]: CALL      R7 4 1       ; R7(R8,R9,R10)
 21 [-]: SETTABLE  R6 K4 K3     ; R6["mOrigDepth"] := nil
 22 [-]: SELF      R7 R0 K8     ; R8 := R0; R7 := R0[0x9dc189e7]
 23 [-]: MOVE      R9 R1        ; R9 := R1
 24 [-]: MOVE      R10 R2       ; R10 := R2
 25 [-]: MOVE      R11 R3       ; R11 := R3
 26 [-]: MOVE      R12 R4       ; R12 := R4
 27 [-]: MOVE      R13 R5       ; R13 := R5
 28 [-]: CALL      R7 7 1       ; R7(R8,R9,R10,R11,R12,R13)
 29 [-]: SETTABLE  R0 K9 K10    ; R0["mHasDoneFirstRedraw"] := true
 30 [-]: SELF      R7 R0 K0     ; R8 := R0; R7 := R0[0xed1ab921]
 31 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 32 [-]: MOVE      R6 R7        ; R6 := R7
 33 [-]: GETGLOBAL R7 K1        ; R7 := 0x7b998233
 34 [-]: MOVE      R8 R6        ; R8 := R6
 35 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 36 [-]: TEST      R7 1         ; if R7 then PC := 68
 37 [-]: JMP       68           ; PC := 68
 38 [-]: GETTABLE  R7 R6 K2     ; R7 := R6["mClipName"]
 39 [-]: EQ        1 R7 K3      ; if R7 == nil then PC := 68
 40 [-]: JMP       68           ; PC := 68
 41 [-]: GETTABLE  R7 R6 K4     ; R7 := R6["mOrigDepth"]
 42 [-]: EQ        0 R7 K3      ; if R7 ~= nil then PC := 68
 43 [-]: JMP       68           ; PC := 68
 44 [-]: GETGLOBAL R7 K11       ; R7 := 0x03f57322
 45 [-]: GETGLOBAL R8 K5        ; R8 := 0x38f10e85
 46 [-]: GETGLOBAL R9 K6        ; R9 := 0xae91e43b
 47 [-]: GETTABLE  R10 R6 K2    ; R10 := R6["mClipName"]
 48 [-]: LOADK     R11 K12      ; R11 := ".getDepth"
 49 [-]: CONCAT    R10 R10 R11  ; R10 := R10 .. R11
 50 [-]: CALL      R8 3 0       ; R8,... := R8(R9,R10)
 51 [-]: CALL      R7 0 2       ; R7 := R7(R8,...)
 52 [-]: SETTABLE  R6 K4 R7     ; R6["mOrigDepth"] := R7
 53 [-]: GETGLOBAL R7 K5        ; R7 := 0x38f10e85
 54 [-]: GETGLOBAL R8 K6        ; R8 := 0xae91e43b
 55 [-]: GETTABLE  R9 R6 K2     ; R9 := R6["mClipName"]
 56 [-]: LOADK     R10 K7       ; R10 := ".swapDepths"
 57 [-]: CONCAT    R9 R9 R10    ; R9 := R9 .. R10
 58 [-]: GETGLOBAL R10 K13      ; R10 := mCollectionGrid
 59 [-]: GETTABLE  R10 R10 K14  ; R10 := R10["mInitialDepth"]
 60 [-]: GETGLOBAL R11 K13      ; R11 := mCollectionGrid
 61 [-]: GETTABLE  R11 R11 K15  ; R11 := R11["mTopClipIndexUsed"]
 62 [-]: ADD       R11 R11 K16  ; R11 := R11 + 1.000000
 63 [-]: GETGLOBAL R12 K13      ; R12 := mCollectionGrid
 64 [-]: GETTABLE  R12 R12 K17  ; R12 := R12["mDepthDirection"]
 65 [-]: MUL       R11 R11 R12  ; R11 := R11 * R12
 66 [-]: ADD       R10 R10 R11  ; R10 := R10 + R11
 67 [-]: CALL      R7 4 1       ; R7(R8,R9,R10)
 68 [-]: RETURN    R0 1         ; return 


; Function #66.14:
;
; Name:            
; Defined at line: 2750
; #Upvalues:       0
; #Parameters:     4
; Is_vararg:       0
; Max Stack Size:  9

  1 [-]: EQ        0 R2 K0      ; if R2 ~= nil then PC := 9
  2 [-]: JMP       9            ; PC := 9
  3 [-]: GETTABLE  R4 R0 K1     ; R4 := R0["mFilterBy"]
  4 [-]: EQ        1 R4 K0      ; if R4 == nil then PC := 9
  5 [-]: JMP       9            ; PC := 9
  6 [-]: LOADKB    R4 1 0       ; R4 := true
  7 [-]: SETGLOBAL R4 K2        ; mInputBlocked := R4
  8 [-]: CLOSURE   R2 0         ; R2 := closure(Function #66.14.1)
  9 [-]: SELF      R4 R0 K3     ; R5 := R0; R4 := R0[0x5b9b01e0]
 10 [-]: MOVE      R6 R1        ; R6 := R1
 11 [-]: MOVE      R7 R2        ; R7 := R2
 12 [-]: MOVE      R8 R3        ; R8 := R3
 13 [-]: CALL      R4 5 1       ; R4(R5,R6,R7,R8)
 14 [-]: RETURN    R0 1         ; return 


; Function #66.14.1:
;
; Name:            
; Defined at line: 2754
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: LOADKB    R0 0 0       ; R0 := false
  2 [-]: SETGLOBAL R0 K0        ; mInputBlocked := R0
  3 [-]: RETURN    R0 1         ; return 


; Function #66.15:
;
; Name:            
; Defined at line: 2760
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  6

  1 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mInitialX"]
  2 [-]: SELF      R3 R0 K1     ; R4 := R0; R3 := R0[0x5219f6ee]
  3 [-]: MOVE      R5 R1        ; R5 := R1
  4 [-]: CALL      R3 3 2       ; R3 := R3(R4,R5)
  5 [-]: SUB       R3 R3 K2     ; R3 := R3 - 1.000000
  6 [-]: GETTABLE  R4 R0 K3     ; R4 := R0["mRowSeparation"]
  7 [-]: MUL       R3 R3 R4     ; R3 := R3 * R4
  8 [-]: ADD       R2 R2 R3     ; R2 := R2 + R3
  9 [-]: GETTABLE  R3 R0 K4     ; R3 := R0["mSmoothScroll"]
 10 [-]: TEST      R3 0         ; if not R3 then PC := 18
 11 [-]: JMP       18           ; PC := 18
 12 [-]: SELF      R3 R0 K5     ; R4 := R0; R3 := R0[0x9cb26453]
 13 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 14 [-]: MOD       R3 R3 K2     ; R3 := R3 % 1.000000
 15 [-]: GETTABLE  R4 R0 K3     ; R4 := R0["mRowSeparation"]
 16 [-]: MUL       R3 R3 R4     ; R3 := R3 * R4
 17 [-]: SUB       R2 R2 R3     ; R2 := R2 - R3
 18 [-]: RETURN    R2 2         ; return R2
 19 [-]: RETURN    R0 1         ; return 


; Function #66.16:
;
; Name:            
; Defined at line: 2768
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  6

  1 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mInitialY"]
  2 [-]: SELF      R3 R0 K1     ; R4 := R0; R3 := R0[0xeb0d56b0]
  3 [-]: MOVE      R5 R1        ; R5 := R1
  4 [-]: CALL      R3 3 2       ; R3 := R3(R4,R5)
  5 [-]: SUB       R3 R3 K2     ; R3 := R3 - 1.000000
  6 [-]: GETTABLE  R4 R0 K3     ; R4 := R0["mColumnSeparation"]
  7 [-]: MUL       R3 R3 R4     ; R3 := R3 * R4
  8 [-]: ADD       R2 R2 R3     ; R2 := R2 + R3
  9 [-]: RETURN    R2 2         ; return R2
 10 [-]: RETURN    R0 1         ; return 


; Function #66.17:
;
; Name:            
; Defined at line: 2773
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  13

  1 [-]: GETUPVAL  R1 U0        ; R1 := U0
  2 [-]: CALL      R1 1 2       ; R1 := R1()
  3 [-]: TEST      R1 0         ; if not R1 then PC := 38
  4 [-]: JMP       38           ; PC := 38
  5 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  6 [-]: GETGLOBAL R2 K1        ; R2 := mAvionicCategories
  7 [-]: GETTABLE  R2 R2 K2     ; R2 := R2["mSelectedElement"]
  8 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  9 [-]: TEST      R1 1         ; if R1 then PC := 38
 10 [-]: JMP       38           ; PC := 38
 11 [-]: GETGLOBAL R1 K3        ; R1 := mCards
 12 [-]: GETTABLE  R2 R0 K4     ; R2 := R0["mCardIndex"]
 13 [-]: GETTABLE  R1 R1 R2     ; R1 := R1[R2]
 14 [-]: EQ        1 R1 K5      ; if R1 == nil then PC := 38
 15 [-]: JMP       38           ; PC := 38
 16 [-]: GETGLOBAL R2 K1        ; R2 := mAvionicCategories
 17 [-]: GETTABLE  R2 R2 K2     ; R2 := R2["mSelectedElement"]
 18 [-]: GETTABLE  R2 R2 K6     ; R2 := R2["ModTypes"]
 19 [-]: LOADKB    R3 0 0       ; R3 := false
 20 [-]: CONST     R4 1         ; R4 := 1.000000
 21 [-]: LEN       R5 R2        ; R5 := # R2
 22 [-]: CONST     R6 1         ; R6 := 1.000000
 23 [-]: FORPREP   R4 33        ; R4 -= R6; PC := 33
 24 [-]: GETTABLE  R8 R1 K7     ; R8 := R1["mUpgrade"]
 25 [-]: GETTABLE  R8 R8 K8     ; R8 := R8["mItemType"]
 26 [-]: SELF      R8 R8 K9     ; R9 := R8; R8 := R8[0xf2deaf69]
 27 [-]: GETTABLE  R10 R2 R7    ; R10 := R2[R7]
 28 [-]: CALL      R8 3 2       ; R8 := R8(R9,R10)
 29 [-]: TEST      R8 0         ; if not R8 then PC := 33
 30 [-]: JMP       33           ; PC := 33
 31 [-]: LOADKB    R3 1 0       ; R3 := true
 32 [-]: JMP       34           ; PC := 34
 33 [-]: FORLOOP   R4 24        ; R4 += R6; if R4 <= R5 then begin PC := 24; R7 := R4 end
 34 [-]: TEST      R3 1         ; if R3 then PC := 38
 35 [-]: JMP       38           ; PC := 38
 36 [-]: LOADKB    R8 1 0       ; R8 := true
 37 [-]: RETURN    R8 2         ; return R8
 38 [-]: GETGLOBAL R8 K0        ; R8 := 0x7b998233
 39 [-]: GETGLOBAL R9 K10       ; R9 := mSearchBox
 40 [-]: CALL      R8 2 2       ; R8 := R8(R9)
 41 [-]: TEST      R8 1         ; if R8 then PC := 50
 42 [-]: JMP       50           ; PC := 50
 43 [-]: GETGLOBAL R8 K10       ; R8 := mSearchBox
 44 [-]: GETTABLE  R8 R8 K11    ; R8 := R8["mLabel"]
 45 [-]: EQ        1 R8 K12     ; if R8 == "" then PC := 50
 46 [-]: JMP       50           ; PC := 50
 47 [-]: GETTABLE  R8 R0 K13    ; R8 := R0["SearchCache"]
 48 [-]: EQ        0 R8 K5      ; if R8 ~= nil then PC := 53
 49 [-]: JMP       53           ; PC := 53
 50 [-]: LOADKB    R8 0 0       ; R8 := false
 51 [-]: RETURN    R8 2         ; return R8
 52 [-]: JMP       72           ; PC := 72
 53 [-]: GETTABLE  R8 R0 K4     ; R8 := R0["mCardIndex"]
 54 [-]: LE        1 R8 K14     ; if R8 <= -1.000000 then PC := 69
 55 [-]: JMP       69           ; PC := 69
 56 [-]: GETGLOBAL R8 K15       ; R8 := 0x7f5022cf
 57 [-]: GETTABLE  R8 R8 K16    ; R8 := R8[0xa5c556b9]
 58 [-]: GETTABLE  R9 R0 K13    ; R9 := R0["SearchCache"]
 59 [-]: GETGLOBAL R10 K17      ; R10 := 0x83e41587
 60 [-]: GETGLOBAL R11 K10      ; R11 := mSearchBox
 61 [-]: GETTABLE  R11 R11 K11  ; R11 := R11["mLabel"]
 62 [-]: CALL      R10 2 2      ; R10 := R10(R11)
 63 [-]: CONST     R11 1        ; R11 := 1.000000
 64 [-]: LOADKB    R12 1 0      ; R12 := true
 65 [-]: CALL      R8 5 2       ; R8 := R8(R9,R10,R11,R12)
 66 [-]: EQ        0 R8 K5      ; if R8 ~= nil then PC := 69
 67 [-]: JMP       69           ; PC := 69
 68 [-]: LOADKB    R8 0 1       ; R8 := false; PC := 69
 69 [-]: LOADKB    R8 1 0       ; R8 := true
 70 [-]: NOT       R9 R8        ; R9 :=  R8
 71 [-]: RETURN    R9 2         ; return R9
 72 [-]: RETURN    R0 1         ; return 


; Function #67:
;
; Name:            
; Defined at line: 2907
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  12

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := 0x25d99d89
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 0         ; if not R1 then PC := 8
  5 [-]: JMP       8            ; PC := 8
  6 [-]: CONST     R1 0         ; R1 := 0.000000
  7 [-]: RETURN    R1 2         ; return R1
  8 [-]: GETGLOBAL R1 K1        ; R1 := 0x25d99d89
  9 [-]: SELF      R1 R1 K2     ; R2 := R1; R1 := R1[0x25a6e75e]
 10 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 11 [-]: SELF      R2 R1 K3     ; R3 := R1; R2 := R1[0xf4045b7e]
 12 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 13 [-]: CONST     R3 0         ; R3 := 0.000000
 14 [-]: CONST     R4 1         ; R4 := 1.000000
 15 [-]: LEN       R5 R2        ; R5 := # R2
 16 [-]: CONST     R6 1         ; R6 := 1.000000
 17 [-]: FORPREP   R4 33        ; R4 -= R6; PC := 33
 18 [-]: GETTABLE  R8 R2 R7     ; R8 := R2[R7]
 19 [-]: GETTABLE  R8 R8 K4     ; R8 := R8["mItemType"]
 20 [-]: GETGLOBAL R9 K0        ; R9 := 0x7b998233
 21 [-]: MOVE      R10 R8       ; R10 := R8
 22 [-]: CALL      R9 2 2       ; R9 := R9(R10)
 23 [-]: TEST      R9 1         ; if R9 then PC := 33
 24 [-]: JMP       33           ; PC := 33
 25 [-]: SELF      R9 R8 K5     ; R10 := R8; R9 := R8[0xf2deaf69]
 26 [-]: MOVE      R11 R0       ; R11 := R0
 27 [-]: CALL      R9 3 2       ; R9 := R9(R10,R11)
 28 [-]: TEST      R9 0         ; if not R9 then PC := 33
 29 [-]: JMP       33           ; PC := 33
 30 [-]: GETTABLE  R9 R2 R7     ; R9 := R2[R7]
 31 [-]: GETTABLE  R9 R9 K6     ; R9 := R9["mItemCount"]
 32 [-]: ADD       R3 R3 R9     ; R3 := R3 + R9
 33 [-]: FORLOOP   R4 18        ; R4 += R6; if R4 <= R5 then begin PC := 18; R7 := R4 end
 34 [-]: RETURN    R3 2         ; return R3
 35 [-]: RETURN    R0 1         ; return 


; Function #68:
;
; Name:            
; Defined at line: 2925
; #Upvalues:       2
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETUPVAL  R2 U0        ; R2 := U0
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 0         ; if not R1 then PC := 12
  5 [-]: JMP       12           ; PC := 12
  6 [-]: NEWTABLE  R1 3 0       ; R1 := {}
  7 [-]: CONST     R2 1         ; R2 := 1.000000
  8 [-]: CONST     R3 1         ; R3 := 1.000000
  9 [-]: LOADNIL   R4 R4        ; R4 := nil
 10 [-]: SETLIST   R1 3 1       ; R1[(1-1)*FPF+i] := R(1+i), 1 <= i <= 3
 11 [-]: RETURN    R1 2         ; return R1
 12 [-]: NEWTABLE  R1 3 0       ; R1 := {}
 13 [-]: CONST     R2 1         ; R2 := 1.000000
 14 [-]: GETUPVAL  R3 U1        ; R3 := U1
 15 [-]: MOVE      R4 R0        ; R4 := R0
 16 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 17 [-]: MOVE      R4 R0        ; R4 := R0
 18 [-]: SETLIST   R1 3 1       ; R1[(1-1)*FPF+i] := R(1+i), 1 <= i <= 3
 19 [-]: RETURN    R1 2         ; return R1
 20 [-]: RETURN    R0 1         ; return 


; Function #69:
;
; Name:            
; Defined at line: 2932
; #Upvalues:       2
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  28

  1 [-]: GETGLOBAL R0 K0        ; R0 := _T
  2 [-]: GETTABLE  R0 R0 K1     ; R0 := R0["ArsenalState"]
  3 [-]: EQ        1 R0 K3      ; if R0 == 2.000000 then PC := 16
  4 [-]: JMP       16           ; PC := 16
  5 [-]: GETGLOBAL R0 K4        ; R0 := 0x7b998233
  6 [-]: GETUPVAL  R1 U0        ; R1 := U0
  7 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  8 [-]: TEST      R0 1         ; if R0 then PC := 16
  9 [-]: JMP       16           ; PC := 16
 10 [-]: GETGLOBAL R0 K4        ; R0 := 0x7b998233
 11 [-]: GETUPVAL  R1 U0        ; R1 := U0
 12 [-]: GETTABLE  R1 R1 K5     ; R1 := R1["item"]
 13 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 14 [-]: TEST      R0 0         ; if not R0 then PC := 23
 15 [-]: JMP       23           ; PC := 23
 16 [-]: GETGLOBAL R0 K6        ; R0 := 0xae91e43b
 17 [-]: SELF      R0 R0 K7     ; R1 := R0; R0 := R0[0xaade900e]
 18 [-]: LOADK     R2 K8        ; R2 := "LevelUpgrades"
 19 [-]: CONST     R3 11        ; R3 := 11.000000
 20 [-]: LOADKB    R4 0 0       ; R4 := false
 21 [-]: CALL      R0 5 1       ; R0(R1,R2,R3,R4)
 22 [-]: RETURN    R0 1         ; return 
 23 [-]: GETUPVAL  R0 U0        ; R0 := U0
 24 [-]: GETTABLE  R0 R0 K9     ; R0 := R0["info"]
 25 [-]: GETGLOBAL R1 K10       ; R1 := 0xa94df70b
 26 [-]: SELF      R1 R1 K11    ; R2 := R1; R1 := R1[0x84fb4327]
 27 [-]: GETTABLE  R3 R0 K12    ; R3 := R0["mItemType"]
 28 [-]: GETTABLE  R4 R0 K13    ; R4 := R0["mPolarized"]
 29 [-]: CALL      R1 4 2       ; R1 := R1(R2,R3,R4)
 30 [-]: GETGLOBAL R2 K14       ; R2 := 0x5bced4c4
 31 [-]: GETTABLE  R2 R2 K15    ; R2 := R2[0xac1b386a]
 32 [-]: MOVE      R3 R1        ; R3 := R1
 33 [-]: GETGLOBAL R4 K10       ; R4 := 0xa94df70b
 34 [-]: SELF      R4 R4 K16    ; R5 := R4; R4 := R4[0x8427bf69]
 35 [-]: GETTABLE  R6 R0 K17    ; R6 := R0["mXP"]
 36 [-]: GETTABLE  R7 R0 K12    ; R7 := R0["mItemType"]
 37 [-]: CALL      R4 4 0       ; R4,... := R4(R5,R6,R7)
 38 [-]: CALL      R2 0 2       ; R2 := R2(R3,...)
 39 [-]: GETUPVAL  R3 U0        ; R3 := U0
 40 [-]: GETTABLE  R3 R3 K5     ; R3 := R3["item"]
 41 [-]: SELF      R3 R3 K18    ; R4 := R3; R3 := R3[0xf2deaf69]
 42 [-]: GETGLOBAL R5 K19       ; R5 := gPowerSuitType
 43 [-]: CALL      R3 3 2       ; R3 := R3(R4,R5)
 44 [-]: TEST      R3 1         ; if R3 then PC := 50
 45 [-]: JMP       50           ; PC := 50
 46 [-]: LT        1 K20 R2     ; if 30.000000 < R2 then PC := 49
 47 [-]: JMP       49           ; PC := 49
 48 [-]: LOADKB    R3 0 1       ; R3 := false; PC := 49
 49 [-]: LOADKB    R3 1 0       ; R3 := true
 50 [-]: EQ        1 R2 K21     ; if R2 == 0.000000 then PC := 54
 51 [-]: JMP       54           ; PC := 54
 52 [-]: TEST      R3 1         ; if R3 then PC := 61
 53 [-]: JMP       61           ; PC := 61
 54 [-]: GETGLOBAL R4 K6        ; R4 := 0xae91e43b
 55 [-]: SELF      R4 R4 K7     ; R5 := R4; R4 := R4[0xaade900e]
 56 [-]: LOADK     R6 K8        ; R6 := "LevelUpgrades"
 57 [-]: CONST     R7 11        ; R7 := 11.000000
 58 [-]: LOADKB    R8 0 0       ; R8 := false
 59 [-]: CALL      R4 5 1       ; R4(R5,R6,R7,R8)
 60 [-]: RETURN    R0 1         ; return 
 61 [-]: GETGLOBAL R4 K22       ; R4 := 0x0469f296
 62 [-]: LOADK     R5 K23       ; R5 := "Sentient"
 63 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 64 [-]: NEWTABLE  R5 0 0       ; R5 := {}
 65 [-]: GETUPVAL  R6 U0        ; R6 := U0
 66 [-]: GETTABLE  R6 R6 K5     ; R6 := R6["item"]
 67 [-]: SELF      R6 R6 K24    ; R7 := R6; R6 := R6[0x6483c155]
 68 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 69 [-]: CONST     R7 1         ; R7 := 1.000000
 70 [-]: GETGLOBAL R8 K14       ; R8 := 0x5bced4c4
 71 [-]: GETTABLE  R8 R8 K15    ; R8 := R8[0xac1b386a]
 72 [-]: ADD       R9 R2 K25    ; R9 := R2 + 1.000000
 73 [-]: LEN       R10 R6       ; R10 := # R6
 74 [-]: CALL      R8 3 2       ; R8 := R8(R9,R10)
 75 [-]: CONST     R9 1         ; R9 := 1.000000
 76 [-]: FORPREP   R7 214       ; R7 -= R9; PC := 214
 77 [-]: LOADKB    R11 0 0      ; R11 := false
 78 [-]: GETTABLE  R12 R6 R10   ; R12 := R6[R10]
 79 [-]: SELF      R12 R12 K26  ; R13 := R12; R12 := R12[0x9f236ac2]
 80 [-]: CALL      R12 2 2      ; R12 := R12(R13)
 81 [-]: CONST     R13 1        ; R13 := 1.000000
 82 [-]: LEN       R14 R5       ; R14 := # R5
 83 [-]: CONST     R15 1        ; R15 := 1.000000
 84 [-]: FORPREP   R13 99       ; R13 -= R15; PC := 99
 85 [-]: GETTABLE  R17 R5 R16   ; R17 := R5[R16]
 86 [-]: GETTABLE  R17 R17 K27  ; R17 := R17["Type"]
 87 [-]: EQ        0 R12 R17    ; if R12 ~= R17 then PC := 99
 88 [-]: JMP       99           ; PC := 99
 89 [-]: GETTABLE  R17 R5 R16   ; R17 := R5[R16]
 90 [-]: GETTABLE  R18 R5 R16   ; R18 := R5[R16]
 91 [-]: GETTABLE  R18 R18 K28  ; R18 := R18["Value"]
 92 [-]: GETTABLE  R19 R6 R10   ; R19 := R6[R10]
 93 [-]: SELF      R19 R19 K29  ; R20 := R19; R19 := R19[0x0fbc7293]
 94 [-]: CALL      R19 2 2      ; R19 := R19(R20)
 95 [-]: ADD       R18 R18 R19  ; R18 := R18 + R19
 96 [-]: SETTABLE  R17 K28 R18  ; R17["Value"] := R18
 97 [-]: LOADKB    R11 1 0      ; R11 := true
 98 [-]: JMP       100          ; PC := 100
 99 [-]: FORLOOP   R13 85       ; R13 += R15; if R13 <= R14 then begin PC := 85; R16 := R13 end
100 [-]: TEST      R11 1        ; if R11 then PC := 214
101 [-]: JMP       214          ; PC := 214
102 [-]: EQ        1 R12 K21    ; if R12 == 0.000000 then PC := 214
103 [-]: JMP       214          ; PC := 214
104 [-]: NEWTABLE  R17 0 3      ; R17 := {}
105 [-]: SETTABLE  R17 K27 R12  ; R17["Type"] := R12
106 [-]: GETTABLE  R18 R6 R10   ; R18 := R6[R10]
107 [-]: SELF      R18 R18 K32  ; R19 := R18; R18 := R18[0xfba51907]
108 [-]: CALL      R18 2 2      ; R18 := R18(R19)
109 [-]: SETTABLE  R17 K31 R18  ; R17["OpType"] := R18
110 [-]: GETTABLE  R18 R6 R10   ; R18 := R6[R10]
111 [-]: SELF      R18 R18 K29  ; R19 := R18; R18 := R18[0x0fbc7293]
112 [-]: CALL      R18 2 2      ; R18 := R18(R19)
113 [-]: SETTABLE  R17 K28 R18  ; R17["Value"] := R18
114 [-]: EQ        0 R12 K33    ; if R12 ~= 65.000000 then PC := 123
115 [-]: JMP       123          ; PC := 123
116 [-]: GETGLOBAL R18 K6       ; R18 := 0xae91e43b
117 [-]: SELF      R18 R18 K35  ; R19 := R18; R18 := R18[0x42b04007]
118 [-]: LOADK     R20 K36      ; R20 := "/Lotus/Language/Labels/AVATAR_HEALTH_MAX"
119 [-]: LOADKB    R21 0 0      ; R21 := false
120 [-]: CALL      R18 4 2      ; R18 := R18(R19,R20,R21)
121 [-]: SETTABLE  R17 K34 R18  ; R17["Name"] := R18
122 [-]: JMP       200          ; PC := 200
123 [-]: EQ        0 R12 K37    ; if R12 ~= 120.000000 then PC := 132
124 [-]: JMP       132          ; PC := 132
125 [-]: GETGLOBAL R18 K6       ; R18 := 0xae91e43b
126 [-]: SELF      R18 R18 K35  ; R19 := R18; R18 := R18[0x42b04007]
127 [-]: LOADK     R20 K38      ; R20 := "/Lotus/Language/Labels/AVATAR_SHIELD"
128 [-]: LOADKB    R21 0 0      ; R21 := false
129 [-]: CALL      R18 4 2      ; R18 := R18(R19,R20,R21)
130 [-]: SETTABLE  R17 K34 R18  ; R17["Name"] := R18
131 [-]: JMP       200          ; PC := 200
132 [-]: EQ        0 R12 K39    ; if R12 ~= 88.000000 then PC := 141
133 [-]: JMP       141          ; PC := 141
134 [-]: GETGLOBAL R18 K6       ; R18 := 0xae91e43b
135 [-]: SELF      R18 R18 K35  ; R19 := R18; R18 := R18[0x42b04007]
136 [-]: LOADK     R20 K40      ; R20 := "/Lotus/Language/Labels/AVATAR_POWER_MAX"
137 [-]: LOADKB    R21 0 0      ; R21 := false
138 [-]: CALL      R18 4 2      ; R18 := R18(R19,R20,R21)
139 [-]: SETTABLE  R17 K34 R18  ; R17["Name"] := R18
140 [-]: JMP       200          ; PC := 200
141 [-]: EQ        0 R12 K41    ; if R12 ~= 63.000000 then PC := 150
142 [-]: JMP       150          ; PC := 150
143 [-]: GETGLOBAL R18 K6       ; R18 := 0xae91e43b
144 [-]: SELF      R18 R18 K35  ; R19 := R18; R18 := R18[0x42b04007]
145 [-]: LOADK     R20 K42      ; R20 := "/Lotus/Language/Labels/AVATAR_HEAL_RATE"
146 [-]: LOADKB    R21 0 0      ; R21 := false
147 [-]: CALL      R18 4 2      ; R18 := R18(R19,R20,R21)
148 [-]: SETTABLE  R17 K34 R18  ; R17["Name"] := R18
149 [-]: JMP       200          ; PC := 200
150 [-]: EQ        0 R12 K43    ; if R12 ~= 15.000000 then PC := 159
151 [-]: JMP       159          ; PC := 159
152 [-]: GETGLOBAL R18 K6       ; R18 := 0xae91e43b
153 [-]: SELF      R18 R18 K35  ; R19 := R18; R18 := R18[0x42b04007]
154 [-]: LOADK     R20 K44      ; R20 := "/Lotus/Language/Labels/AVATAR_ARMOUR"
155 [-]: LOADKB    R21 0 0      ; R21 := false
156 [-]: CALL      R18 4 2      ; R18 := R18(R19,R20,R21)
157 [-]: SETTABLE  R17 K34 R18  ; R17["Name"] := R18
158 [-]: JMP       200          ; PC := 200
159 [-]: EQ        0 R12 K45    ; if R12 ~= 10.000000 then PC := 168
160 [-]: JMP       168          ; PC := 168
161 [-]: GETGLOBAL R18 K6       ; R18 := 0xae91e43b
162 [-]: SELF      R18 R18 K35  ; R19 := R18; R18 := R18[0x42b04007]
163 [-]: LOADK     R20 K46      ; R20 := "/Lotus/Language/Labels/AVATAR_ABILITY_STRENGTH"
164 [-]: LOADKB    R21 0 0      ; R21 := false
165 [-]: CALL      R18 4 2      ; R18 := R18(R19,R20,R21)
166 [-]: SETTABLE  R17 K34 R18  ; R17["Name"] := R18
167 [-]: JMP       200          ; PC := 200
168 [-]: EQ        0 R12 K47    ; if R12 ~= 49.000000 then PC := 177
169 [-]: JMP       177          ; PC := 177
170 [-]: GETGLOBAL R18 K6       ; R18 := 0xae91e43b
171 [-]: SELF      R18 R18 K35  ; R19 := R18; R18 := R18[0x42b04007]
172 [-]: LOADK     R20 K48      ; R20 := "/Lotus/Language/Labels/AVATAR_SPAWN_ENERGY"
173 [-]: LOADKB    R21 0 0      ; R21 := false
174 [-]: CALL      R18 4 2      ; R18 := R18(R19,R20,R21)
175 [-]: SETTABLE  R17 K34 R18  ; R17["Name"] := R18
176 [-]: JMP       200          ; PC := 200
177 [-]: EQ        0 R12 K49    ; if R12 ~= 159.000000 then PC := 186
178 [-]: JMP       186          ; PC := 186
179 [-]: GETTABLE  R18 R6 R10   ; R18 := R6[R10]
180 [-]: SELF      R18 R18 K50  ; R19 := R18; R18 := R18[0x8687b0d4]
181 [-]: CALL      R18 2 2      ; R18 := R18(R19)
182 [-]: EQ        0 R18 R4     ; if R18 ~= R4 then PC := 186
183 [-]: JMP       186          ; PC := 186
184 [-]: SETTABLE  R17 K34 K51  ; R17["Name"] := "/Lotus/Language/Upgrades/WeaponFactionDamageSentientsDesc"
185 [-]: JMP       200          ; PC := 200
186 [-]: EQ        0 R12 K52    ; if R12 ~= 244.000000 then PC := 200
187 [-]: JMP       200          ; PC := 200
188 [-]: GETTABLE  R18 R6 R10   ; R18 := R6[R10]
189 [-]: SELF      R18 R18 K53  ; R19 := R18; R18 := R18[0x69a951ec]
190 [-]: CONST     R20 25       ; R20 := 25.000000
191 [-]: CALL      R18 3 2      ; R18 := R18(R19,R20)
192 [-]: TEST      R18 0        ; if not R18 then PC := 200
193 [-]: JMP       200          ; PC := 200
194 [-]: GETGLOBAL R18 K6       ; R18 := 0xae91e43b
195 [-]: SELF      R18 R18 K35  ; R19 := R18; R18 := R18[0x42b04007]
196 [-]: LOADK     R20 K55      ; R20 := "/Lotus/Language/Upgrades/PT_VOID"
197 [-]: LOADKB    R21 0 0      ; R21 := false
198 [-]: CALL      R18 4 2      ; R18 := R18(R19,R20,R21)
199 [-]: SETTABLE  R17 K34 R18  ; R17["Name"] := R18
200 [-]: GETTABLE  R18 R17 K34  ; R18 := R17["Name"]
201 [-]: EQ        0 R18 K56    ; if R18 ~= nil then PC := 209
202 [-]: JMP       209          ; PC := 209
203 [-]: GETGLOBAL R18 K57      ; R18 := 0x3d106989
204 [-]: LOADK     R19 K58      ; R19 := "Undefined upgrade type: "
205 [-]: MOVE      R20 R12      ; R20 := R12
206 [-]: CONCAT    R19 R19 R20  ; R19 := R19 .. R20
207 [-]: CALL      R18 2 1      ; R18(R19)
208 [-]: JMP       214          ; PC := 214
209 [-]: GETGLOBAL R18 K59      ; R18 := 0x33bdd652
210 [-]: GETTABLE  R18 R18 K60  ; R18 := R18[0x23d5322f]
211 [-]: MOVE      R19 R5       ; R19 := R5
212 [-]: MOVE      R20 R17      ; R20 := R17
213 [-]: CALL      R18 3 1      ; R18(R19,R20)
214 [-]: FORLOOP   R7 77        ; R7 += R9; if R7 <= R8 then begin PC := 77; R10 := R7 end
215 [-]: LEN       R18 R5       ; R18 := # R5
216 [-]: EQ        0 R18 K21    ; if R18 ~= 0.000000 then PC := 225
217 [-]: JMP       225          ; PC := 225
218 [-]: GETGLOBAL R18 K6       ; R18 := 0xae91e43b
219 [-]: SELF      R18 R18 K7   ; R19 := R18; R18 := R18[0xaade900e]
220 [-]: LOADK     R20 K8       ; R20 := "LevelUpgrades"
221 [-]: CONST     R21 11       ; R21 := 11.000000
222 [-]: LOADKB    R22 0 0      ; R22 := false
223 [-]: CALL      R18 5 1      ; R18(R19,R20,R21,R22)
224 [-]: RETURN    R0 1         ; return 
225 [-]: GETGLOBAL R18 K6       ; R18 := 0xae91e43b
226 [-]: SELF      R18 R18 K61  ; R19 := R18; R18 := R18[0x20b98db3]
227 [-]: LOADK     R20 K62      ; R20 := "LevelUpgrades.Title.text"
228 [-]: LOADK     R21 K63      ; R21 := "/Lotus/Language/Menu/Upgrade_LvlUpgrades"
229 [-]: CALL      R18 4 1      ; R18(R19,R20,R21)
230 [-]: GETGLOBAL R18 K6       ; R18 := 0xae91e43b
231 [-]: SELF      R18 R18 K64  ; R19 := R18; R18 := R18[0x67bc869f]
232 [-]: LOADK     R20 K65      ; R20 := "LevelUpgrades.Title"
233 [-]: CONST     R21 36       ; R21 := 36.000000
234 [-]: GETGLOBAL R22 K66      ; R22 := mColors
235 [-]: GETTABLE  R22 R22 K67  ; R22 := R22["FloatingContent"]
236 [-]: CALL      R18 5 1      ; R18(R19,R20,R21,R22)
237 [-]: GETGLOBAL R18 K59      ; R18 := 0x33bdd652
238 [-]: GETTABLE  R18 R18 K68  ; R18 := R18[0xf21b1d8e]
239 [-]: MOVE      R19 R5       ; R19 := R5
240 [-]: CLOSURE   R20 0        ; R20 := closure(Function #69.1)
241 [-]: CALL      R18 3 1      ; R18(R19,R20)
242 [-]: GETGLOBAL R18 K4       ; R18 := 0x7b998233
243 [-]: GETGLOBAL R19 K69      ; R19 := mLvlUpgradeList
244 [-]: CALL      R18 2 2      ; R18 := R18(R19)
245 [-]: TEST      R18 0        ; if not R18 then PC := 263
246 [-]: JMP       263          ; PC := 263
247 [-]: GETGLOBAL R18 K70      ; R18 := 0x2d0fad09
248 [-]: LOADK     R19 K71      ; R19 := "EE.Interface.Components.List"
249 [-]: CALL      R18 2 2      ; R18 := R18(R19)
250 [-]: GETTABLE  R19 R18 K72  ; R19 := R18[0x9383bc56]
251 [-]: GETGLOBAL R20 K6       ; R20 := 0xae91e43b
252 [-]: LOADK     R21 K73      ; R21 := "LevelUpgrades.Upgrade"
253 [-]: CALL      R19 3 2      ; R19 := R19(R20,R21)
254 [-]: SETGLOBAL R19 K69      ; mLvlUpgradeList := R19
255 [-]: GETGLOBAL R19 K69      ; R19 := mLvlUpgradeList
256 [-]: SETTABLE  R19 K74 K21  ; R19["mForcedHorizontalSeparation"] := 0.000000
257 [-]: GETGLOBAL R19 K69      ; R19 := mLvlUpgradeList
258 [-]: SETTABLE  R19 K75 K76  ; R19["mForcedVerticalSeparation"] := 20.000000
259 [-]: GETGLOBAL R19 K69      ; R19 := mLvlUpgradeList
260 [-]: CLOSURE   R20 1        ; R20 := closure(Function #69.2)
261 [-]: GETUPVAL  R0 U1        ; R0 := U1
262 [-]: SETTABLE  R19 K77 R20  ; R19["mElementDrawCallback"] := R20
263 [-]: GETGLOBAL R19 K69      ; R19 := mLvlUpgradeList
264 [-]: SELF      R19 R19 K78  ; R20 := R19; R19 := R19[0x7c09c373]
265 [-]: LOADKB    R21 1 0      ; R21 := true
266 [-]: LOADKB    R22 1 0      ; R22 := true
267 [-]: CALL      R19 4 1      ; R19(R20,R21,R22)
268 [-]: CONST     R19 1        ; R19 := 1.000000
269 [-]: LEN       R20 R5       ; R20 := # R5
270 [-]: CONST     R21 1        ; R21 := 1.000000
271 [-]: FORPREP   R19 277      ; R19 -= R21; PC := 277
272 [-]: GETGLOBAL R23 K69      ; R23 := mLvlUpgradeList
273 [-]: SELF      R23 R23 K79  ; R24 := R23; R23 := R23[0xbad4316f]
274 [-]: GETTABLE  R25 R5 R22   ; R25 := R5[R22]
275 [-]: LOADKB    R26 1 0      ; R26 := true
276 [-]: CALL      R23 4 1      ; R23(R24,R25,R26)
277 [-]: FORLOOP   R19 272      ; R19 += R21; if R19 <= R20 then begin PC := 272; R22 := R19 end
278 [-]: GETGLOBAL R23 K69      ; R23 := mLvlUpgradeList
279 [-]: SELF      R23 R23 K80  ; R24 := R23; R23 := R23[0x71e9ac81]
280 [-]: LOADNIL   R25 R26      ; R25 := R26 := nil
281 [-]: LOADKB    R27 1 0      ; R27 := true
282 [-]: CALL      R23 5 1      ; R23(R24,R25,R26,R27)
283 [-]: RETURN    R0 1         ; return 


; Function #69.1:
;
; Name:            
; Defined at line: 3005
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["Name"]
  2 [-]: GETTABLE  R3 R1 K0     ; R3 := R1["Name"]
  3 [-]: LT        1 R2 R3      ; if R2 < R3 then PC := 6
  4 [-]: JMP       6            ; PC := 6
  5 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 6
  6 [-]: LOADKB    R2 1 0       ; R2 := true
  7 [-]: RETURN    R2 2         ; return R2
  8 [-]: RETURN    R0 1         ; return 


; Function #69.2:
;
; Name:            
; Defined at line: 3015
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  10

  1 [-]: LOADK     R1 K0        ; R1 := ""
  2 [-]: GETTABLE  R2 R0 K1     ; R2 := R0["Value"]
  3 [-]: GETTABLE  R3 R0 K2     ; R3 := R0["Type"]
  4 [-]: EQ        1 R3 K4      ; if R3 == 49.000000 then PC := 33
  5 [-]: JMP       33           ; PC := 33
  6 [-]: GETUPVAL  R3 U0        ; R3 := U0
  7 [-]: GETTABLE  R3 R3 K5     ; R3 := R3[0x06d055f9]
  8 [-]: GETTABLE  R4 R0 K1     ; R4 := R0["Value"]
  9 [-]: LT        1 K6 R4      ; if 0.000000 < R4 then PC := 12
 10 [-]: JMP       12           ; PC := 12
 11 [-]: LOADKB    R4 0 1       ; R4 := false; PC := 12
 12 [-]: LOADKB    R4 1 0       ; R4 := true
 13 [-]: LOADK     R5 K7        ; R5 := "+"
 14 [-]: LOADK     R6 K8        ; R6 := "-"
 15 [-]: CALL      R3 4 2       ; R3 := R3(R4,R5,R6)
 16 [-]: MOVE      R1 R3        ; R1 := R3
 17 [-]: GETTABLE  R3 R0 K9     ; R3 := R0["OpType"]
 18 [-]: EQ        0 R3 K11     ; if R3 ~= 3.000000 then PC := 27
 19 [-]: JMP       27           ; PC := 27
 20 [-]: GETUPVAL  R3 U0        ; R3 := U0
 21 [-]: GETTABLE  R3 R3 K12    ; R3 := R3[0x1142c7a8]
 22 [-]: MUL       R4 R2 K13    ; R4 := R2 * 100.000000
 23 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 24 [-]: LOADK     R4 K14       ; R4 := "%"
 25 [-]: CONCAT    R2 R3 R4     ; R2 := R3 .. R4
 26 [-]: JMP       39           ; PC := 39
 27 [-]: GETUPVAL  R3 U0        ; R3 := U0
 28 [-]: GETTABLE  R3 R3 K12    ; R3 := R3[0x1142c7a8]
 29 [-]: MOVE      R4 R2        ; R4 := R2
 30 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 31 [-]: MOVE      R2 R3        ; R2 := R3
 32 [-]: JMP       39           ; PC := 39
 33 [-]: GETUPVAL  R3 U0        ; R3 := U0
 34 [-]: GETTABLE  R3 R3 K12    ; R3 := R3[0x1142c7a8]
 35 [-]: MUL       R4 R2 K13    ; R4 := R2 * 100.000000
 36 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 37 [-]: LOADK     R4 K14       ; R4 := "%"
 38 [-]: CONCAT    R2 R3 R4     ; R2 := R3 .. R4
 39 [-]: GETTABLE  R3 R0 K2     ; R3 := R0["Type"]
 40 [-]: EQ        0 R3 K15     ; if R3 ~= 159.000000 then PC := 53
 41 [-]: JMP       53           ; PC := 53
 42 [-]: MOVE      R3 R1        ; R3 := R1
 43 [-]: LOADK     R4 K16       ; R4 := " "
 44 [-]: GETGLOBAL R5 K17       ; R5 := 0xae91e43b
 45 [-]: SELF      R5 R5 K18    ; R6 := R5; R5 := R5[0x42b04007]
 46 [-]: GETTABLE  R7 R0 K19    ; R7 := R0["Name"]
 47 [-]: LOADKB    R8 0 0       ; R8 := false
 48 [-]: NEWTABLE  R9 0 1       ; R9 := {}
 49 [-]: SETTABLE  R9 K20 R2    ; R9["val"] := R2
 50 [-]: CALL      R5 5 2       ; R5 := R5(R6,R7,R8,R9)
 51 [-]: CONCAT    R1 R3 R5     ; R1 := R3 .. R4 .. R5
 52 [-]: JMP       63           ; PC := 63
 53 [-]: GETTABLE  R3 R0 K2     ; R3 := R0["Type"]
 54 [-]: EQ        0 R3 K21     ; if R3 ~= 244.000000 then PC := 58
 55 [-]: JMP       58           ; PC := 58
 56 [-]: GETTABLE  R1 R0 K19    ; R1 := R0["Name"]
 57 [-]: JMP       63           ; PC := 63
 58 [-]: MOVE      R3 R1        ; R3 := R1
 59 [-]: MOVE      R4 R2        ; R4 := R2
 60 [-]: LOADK     R5 K16       ; R5 := " "
 61 [-]: GETTABLE  R6 R0 K19    ; R6 := R0["Name"]
 62 [-]: CONCAT    R1 R3 R6     ; R1 := R3 .. R4 .. R5 .. R6
 63 [-]: GETGLOBAL R3 K17       ; R3 := 0xae91e43b
 64 [-]: SELF      R3 R3 K22    ; R4 := R3; R3 := R3[0xe261aa96]
 65 [-]: GETTABLE  R5 R0 K23    ; R5 := R0["mClipName"]
 66 [-]: LOADK     R6 K24       ; R6 := "Label"
 67 [-]: CONST     R7 29        ; R7 := 29.000000
 68 [-]: MOVE      R8 R1        ; R8 := R1
 69 [-]: CALL      R3 6 1       ; R3(R4,R5,R6,R7,R8)
 70 [-]: GETGLOBAL R3 K17       ; R3 := 0xae91e43b
 71 [-]: SELF      R3 R3 K25    ; R4 := R3; R3 := R3[0xf64b7262]
 72 [-]: GETTABLE  R5 R0 K23    ; R5 := R0["mClipName"]
 73 [-]: LOADK     R6 K24       ; R6 := "Label"
 74 [-]: CONST     R7 36        ; R7 := 36.000000
 75 [-]: GETGLOBAL R8 K26       ; R8 := mColors
 76 [-]: GETTABLE  R8 R8 K27    ; R8 := R8["FloatingContent"]
 77 [-]: CALL      R3 6 1       ; R3(R4,R5,R6,R7,R8)
 78 [-]: RETURN    R0 1         ; return 


; Function #70:
;
; Name:            
; Defined at line: 3051
; #Upvalues:       4
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: GETUPVAL  R1 U0        ; R1 := U0
  2 [-]: CALL      R1 1 1       ; R1()
  3 [-]: CONST     R1 0         ; R1 := 0.000000
  4 [-]: SETGLOBAL R1 K0        ; mOmegaCount := R1
  5 [-]: GETUPVAL  R1 U1        ; R1 := U1
  6 [-]: CALL      R1 1 1       ; R1()
  7 [-]: GETUPVAL  R1 U2        ; R1 := U2
  8 [-]: CALL      R1 1 1       ; R1()
  9 [-]: TEST      R0 0         ; if not R0 then PC := 15
 10 [-]: JMP       15           ; PC := 15
 11 [-]: GETUPVAL  R1 U3        ; R1 := U3
 12 [-]: GETGLOBAL R2 K1        ; R2 := ScreenState
 13 [-]: GETTABLE  R2 R2 K2     ; R2 := R2["SELECTING_CARD"]
 14 [-]: CALL      R1 2 1       ; R1(R2)
 15 [-]: RETURN    R0 1         ; return 


; Function #71:
;
; Name:            
; Defined at line: 3062
; #Upvalues:       5
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  16

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0xae91e43b
  2 [-]: SELF      R0 R0 K1     ; R1 := R0; R0 := R0[0x42b04007]
  3 [-]: LOADK     R2 K2        ; R2 := "/Lotus/Language/Menu/Loadout_UpgradeSystemTitleRanked"
  4 [-]: LOADKB    R3 1 0       ; R3 := true
  5 [-]: CALL      R0 4 2       ; R0 := R0(R1,R2,R3)
  6 [-]: GETGLOBAL R1 K3        ; R1 := 0x7b998233
  7 [-]: GETUPVAL  R2 U0        ; R2 := U0
  8 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  9 [-]: TEST      R1 0         ; if not R1 then PC := 12
 10 [-]: JMP       12           ; PC := 12
 11 [-]: RETURN    R0 1         ; return 
 12 [-]: LOADK     R1 K4        ; R1 := ""
 13 [-]: GETUPVAL  R2 U0        ; R2 := U0
 14 [-]: GETTABLE  R2 R2 K5     ; R2 := R2["info"]
 15 [-]: GETTABLE  R2 R2 K6     ; R2 := R2["mItemName"]
 16 [-]: EQ        1 R2 K4      ; if R2 == "" then PC := 26
 17 [-]: JMP       26           ; PC := 26
 18 [-]: GETGLOBAL R2 K7        ; R2 := 0x7f5022cf
 19 [-]: GETTABLE  R2 R2 K8     ; R2 := R2[0x3f3e4d12]
 20 [-]: GETUPVAL  R3 U0        ; R3 := U0
 21 [-]: GETTABLE  R3 R3 K5     ; R3 := R3["info"]
 22 [-]: GETTABLE  R3 R3 K6     ; R3 := R3["mItemName"]
 23 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 24 [-]: MOVE      R1 R2        ; R1 := R2
 25 [-]: JMP       40           ; PC := 40
 26 [-]: GETGLOBAL R2 K7        ; R2 := 0x7f5022cf
 27 [-]: GETTABLE  R2 R2 K8     ; R2 := R2[0x3f3e4d12]
 28 [-]: GETGLOBAL R3 K0        ; R3 := 0xae91e43b
 29 [-]: SELF      R3 R3 K1     ; R4 := R3; R3 := R3[0x42b04007]
 30 [-]: GETGLOBAL R5 K9        ; R5 := 0x64fb1586
 31 [-]: GETUPVAL  R6 U0        ; R6 := U0
 32 [-]: GETTABLE  R6 R6 K10    ; R6 := R6["storeItem"]
 33 [-]: SELF      R6 R6 K11    ; R7 := R6; R6 := R6[0xd3a9d01f]
 34 [-]: CALL      R6 2 0       ; R6,... := R6(R7)
 35 [-]: CALL      R5 0 2       ; R5 := R5(R6,...)
 36 [-]: LOADKB    R6 1 0       ; R6 := true
 37 [-]: CALL      R3 4 0       ; R3,... := R3(R4,R5,R6)
 38 [-]: CALL      R2 0 2       ; R2 := R2(R3,...)
 39 [-]: MOVE      R1 R2        ; R1 := R2
 40 [-]: GETGLOBAL R2 K12       ; R2 := 0xa94df70b
 41 [-]: SELF      R2 R2 K13    ; R3 := R2; R2 := R2[0x84fb4327]
 42 [-]: GETUPVAL  R4 U0        ; R4 := U0
 43 [-]: GETTABLE  R4 R4 K5     ; R4 := R4["info"]
 44 [-]: GETTABLE  R4 R4 K14    ; R4 := R4["mItemType"]
 45 [-]: GETUPVAL  R5 U0        ; R5 := U0
 46 [-]: GETTABLE  R5 R5 K5     ; R5 := R5["info"]
 47 [-]: GETTABLE  R5 R5 K15    ; R5 := R5["mPolarized"]
 48 [-]: CALL      R2 4 2       ; R2 := R2(R3,R4,R5)
 49 [-]: GETGLOBAL R3 K16       ; R3 := 0x5bced4c4
 50 [-]: GETTABLE  R3 R3 K17    ; R3 := R3[0xac1b386a]
 51 [-]: MOVE      R4 R2        ; R4 := R2
 52 [-]: GETGLOBAL R5 K12       ; R5 := 0xa94df70b
 53 [-]: SELF      R5 R5 K18    ; R6 := R5; R5 := R5[0x8427bf69]
 54 [-]: GETUPVAL  R7 U0        ; R7 := U0
 55 [-]: GETTABLE  R7 R7 K5     ; R7 := R7["info"]
 56 [-]: GETTABLE  R7 R7 K19    ; R7 := R7["mXP"]
 57 [-]: GETUPVAL  R8 U0        ; R8 := U0
 58 [-]: GETTABLE  R8 R8 K5     ; R8 := R8["info"]
 59 [-]: GETTABLE  R8 R8 K14    ; R8 := R8["mItemType"]
 60 [-]: CALL      R5 4 0       ; R5,... := R5(R6,R7,R8)
 61 [-]: CALL      R3 0 2       ; R3 := R3(R4,...)
 62 [-]: GETUPVAL  R4 U1        ; R4 := U1
 63 [-]: CALL      R4 1 2       ; R4 := R4()
 64 [-]: TEST      R4 0         ; if not R4 then PC := 75
 65 [-]: JMP       75           ; PC := 75
 66 [-]: GETGLOBAL R4 K0        ; R4 := 0xae91e43b
 67 [-]: SELF      R4 R4 K1     ; R5 := R4; R4 := R4[0x42b04007]
 68 [-]: LOADK     R6 K20       ; R6 := "/Lotus/Language/Menu/Loadout_UpgradeSystemTitleNoRank"
 69 [-]: LOADKB    R7 0 0       ; R7 := false
 70 [-]: NEWTABLE  R8 0 1       ; R8 := {}
 71 [-]: SETTABLE  R8 K21 R1    ; R8["ITEM"] := R1
 72 [-]: CALL      R4 5 2       ; R4 := R4(R5,R6,R7,R8)
 73 [-]: MOVE      R0 R4        ; R0 := R4
 74 [-]: JMP       149          ; PC := 149
 75 [-]: EQ        0 R3 K22     ; if R3 ~= 0.000000 then PC := 92
 76 [-]: JMP       92           ; PC := 92
 77 [-]: GETGLOBAL R4 K0        ; R4 := 0xae91e43b
 78 [-]: SELF      R4 R4 K1     ; R5 := R4; R4 := R4[0x42b04007]
 79 [-]: LOADK     R6 K23       ; R6 := "/Lotus/Language/Ranks/Rank0"
 80 [-]: LOADKB    R7 0 0       ; R7 := false
 81 [-]: CALL      R4 4 2       ; R4 := R4(R5,R6,R7)
 82 [-]: GETGLOBAL R5 K0        ; R5 := 0xae91e43b
 83 [-]: SELF      R5 R5 K1     ; R6 := R5; R5 := R5[0x42b04007]
 84 [-]: LOADK     R7 K24       ; R7 := "/Lotus/Language/Menu/Loadout_UpgradeSystemTitleUnranked"
 85 [-]: LOADKB    R8 0 0       ; R8 := false
 86 [-]: NEWTABLE  R9 0 2       ; R9 := {}
 87 [-]: SETTABLE  R9 K21 R1    ; R9["ITEM"] := R1
 88 [-]: SETTABLE  R9 K25 R4    ; R9["RANK"] := R4
 89 [-]: CALL      R5 5 2       ; R5 := R5(R6,R7,R8,R9)
 90 [-]: MOVE      R0 R5        ; R0 := R5
 91 [-]: JMP       149          ; PC := 149
 92 [-]: GETGLOBAL R5 K0        ; R5 := 0xae91e43b
 93 [-]: SELF      R5 R5 K1     ; R6 := R5; R5 := R5[0x42b04007]
 94 [-]: LOADK     R7 K26       ; R7 := "/Lotus/Language/Menu/Loadout_UpgradeSFormattedRank"
 95 [-]: LOADKB    R8 0 0       ; R8 := false
 96 [-]: NEWTABLE  R9 0 1       ; R9 := {}
 97 [-]: SETTABLE  R9 K25 R3    ; R9["RANK"] := R3
 98 [-]: CALL      R5 5 2       ; R5 := R5(R6,R7,R8,R9)
 99 [-]: GETGLOBAL R6 K3        ; R6 := 0x7b998233
100 [-]: GETGLOBAL R7 K27       ; R7 := mRailjackMovie
101 [-]: CALL      R6 2 2       ; R6 := R6(R7)
102 [-]: TEST      R6 1         ; if R6 then PC := 111
103 [-]: JMP       111          ; PC := 111
104 [-]: LOADK     R6 K28       ; R6 := "["
105 [-]: GETUPVAL  R7 U2        ; R7 := U2
106 [-]: GETTABLE  R7 R7 K29    ; R7 := R7[0x1142c7a8]
107 [-]: MOVE      R8 R3        ; R8 := R3
108 [-]: CALL      R7 2 2       ; R7 := R7(R8)
109 [-]: LOADK     R8 K30       ; R8 := "]"
110 [-]: CONCAT    R5 R6 R8     ; R5 := R6 .. R7 .. R8
111 [-]: GETGLOBAL R6 K12       ; R6 := 0xa94df70b
112 [-]: SELF      R6 R6 K31    ; R7 := R6; R6 := R6[0x757f0100]
113 [-]: GETUPVAL  R8 U0        ; R8 := U0
114 [-]: GETTABLE  R8 R8 K5     ; R8 := R8["info"]
115 [-]: GETTABLE  R8 R8 K14    ; R8 := R8["mItemType"]
116 [-]: CALL      R6 3 2       ; R6 := R6(R7,R8)
117 [-]: EQ        0 R3 R6      ; if R3 ~= R6 then PC := 140
118 [-]: JMP       140          ; PC := 140
119 [-]: GETGLOBAL R6 K3        ; R6 := 0x7b998233
120 [-]: GETUPVAL  R7 U0        ; R7 := U0
121 [-]: GETTABLE  R7 R7 K5     ; R7 := R7["info"]
122 [-]: GETTABLE  R7 R7 K32    ; R7 := R7["mFocusLens"]
123 [-]: CALL      R6 2 2       ; R6 := R6(R7)
124 [-]: TEST      R6 1         ; if R6 then PC := 140
125 [-]: JMP       140          ; PC := 140
126 [-]: GETUPVAL  R6 U3        ; R6 := U3
127 [-]: GETTABLE  R6 R6 K33    ; R6 := R6[0x12afd099]
128 [-]: GETUPVAL  R7 U0        ; R7 := U0
129 [-]: GETTABLE  R7 R7 K5     ; R7 := R7["info"]
130 [-]: GETTABLE  R7 R7 K32    ; R7 := R7["mFocusLens"]
131 [-]: CALL      R6 2 2       ; R6 := R6(R7)
132 [-]: MOVE      R7 R5        ; R7 := R5
133 [-]: LOADK     R8 K34       ; R8 := " "
134 [-]: GETGLOBAL R9 K0        ; R9 := 0xae91e43b
135 [-]: SELF      R9 R9 K1     ; R10 := R9; R9 := R9[0x42b04007]
136 [-]: GETTABLE  R11 R6 K35   ; R11 := R6["LensTag"]
137 [-]: LOADKB    R12 1 0      ; R12 := true
138 [-]: CALL      R9 4 2       ; R9 := R9(R10,R11,R12)
139 [-]: CONCAT    R5 R7 R9     ; R5 := R7 .. R8 .. R9
140 [-]: GETGLOBAL R7 K0        ; R7 := 0xae91e43b
141 [-]: SELF      R7 R7 K1     ; R8 := R7; R7 := R7[0x42b04007]
142 [-]: LOADK     R9 K2        ; R9 := "/Lotus/Language/Menu/Loadout_UpgradeSystemTitleRanked"
143 [-]: LOADKB    R10 0 0      ; R10 := false
144 [-]: NEWTABLE  R11 0 2      ; R11 := {}
145 [-]: SETTABLE  R11 K21 R1   ; R11["ITEM"] := R1
146 [-]: SETTABLE  R11 K25 R5   ; R11["RANK"] := R5
147 [-]: CALL      R7 5 2       ; R7 := R7(R8,R9,R10,R11)
148 [-]: MOVE      R0 R7        ; R0 := R7
149 [-]: GETGLOBAL R7 K36       ; R7 := _T
150 [-]: GETTABLE  R7 R7 K37    ; R7 := R7["ArsenalState"]
151 [-]: EQ        1 R7 K39     ; if R7 == 2.000000 then PC := 154
152 [-]: JMP       154          ; PC := 154
153 [-]: LOADKB    R7 0 1       ; R7 := false; PC := 154
154 [-]: LOADKB    R7 1 0       ; R7 := true
155 [-]: TEST      R7 0         ; if not R7 then PC := 166
156 [-]: JMP       166          ; PC := 166
157 [-]: GETGLOBAL R8 K0        ; R8 := 0xae91e43b
158 [-]: SELF      R8 R8 K1     ; R9 := R8; R8 := R8[0x42b04007]
159 [-]: LOADK     R10 K40      ; R10 := "<CONCLAVE>"
160 [-]: LOADKB    R11 1 0      ; R11 := true
161 [-]: CALL      R8 4 2       ; R8 := R8(R9,R10,R11)
162 [-]: LOADK     R9 K34       ; R9 := " "
163 [-]: MOVE      R10 R0       ; R10 := R0
164 [-]: LOADK     R11 K34      ; R11 := " "
165 [-]: CONCAT    R0 R8 R11    ; R0 := R8 .. R9 .. R10 .. R11
166 [-]: GETGLOBAL R8 K0        ; R8 := 0xae91e43b
167 [-]: SELF      R8 R8 K41    ; R9 := R8; R8 := R8[0x5f56eeab]
168 [-]: LOADK     R10 K42      ; R10 := "ScreenTitle.Tf"
169 [-]: CONST     R11 38       ; R11 := 38.000000
170 [-]: LOADK     R12 K43      ; R12 := "center"
171 [-]: CALL      R8 5 1       ; R8(R9,R10,R11,R12)
172 [-]: GETGLOBAL R8 K0        ; R8 := 0xae91e43b
173 [-]: SELF      R8 R8 K41    ; R9 := R8; R8 := R8[0x5f56eeab]
174 [-]: LOADK     R10 K42      ; R10 := "ScreenTitle.Tf"
175 [-]: CONST     R11 29       ; R11 := 29.000000
176 [-]: GETGLOBAL R12 K7       ; R12 := 0x7f5022cf
177 [-]: GETTABLE  R12 R12 K8   ; R12 := R12[0x3f3e4d12]
178 [-]: MOVE      R13 R0       ; R13 := R0
179 [-]: CALL      R12 2 0      ; R12,... := R12(R13)
180 [-]: CALL      R8 0 1       ; R8(R9,...)
181 [-]: GETGLOBAL R8 K0        ; R8 := 0xae91e43b
182 [-]: SELF      R8 R8 K44    ; R9 := R8; R8 := R8[0xaade900e]
183 [-]: LOADK     R10 K42      ; R10 := "ScreenTitle.Tf"
184 [-]: CONST     R11 75       ; R11 := 75.000000
185 [-]: LOADKB    R12 1 0      ; R12 := true
186 [-]: CALL      R8 5 1       ; R8(R9,R10,R11,R12)
187 [-]: GETGLOBAL R8 K0        ; R8 := 0xae91e43b
188 [-]: SELF      R8 R8 K45    ; R9 := R8; R8 := R8[0x67bc869f]
189 [-]: LOADK     R10 K42      ; R10 := "ScreenTitle.Tf"
190 [-]: CONST     R11 36       ; R11 := 36.000000
191 [-]: GETGLOBAL R12 K46      ; R12 := mColors
192 [-]: GETTABLE  R12 R12 K47  ; R12 := R12["FloatingContent"]
193 [-]: CALL      R8 5 1       ; R8(R9,R10,R11,R12)
194 [-]: GETGLOBAL R8 K0        ; R8 := 0xae91e43b
195 [-]: SELF      R8 R8 K45    ; R9 := R8; R8 := R8[0x67bc869f]
196 [-]: LOADK     R10 K48      ; R10 := "ScreenTitle.LevelStatus"
197 [-]: CONST     R11 9        ; R11 := 9.000000
198 [-]: GETGLOBAL R12 K46      ; R12 := mColors
199 [-]: GETTABLE  R12 R12 K47  ; R12 := R12["FloatingContent"]
200 [-]: CALL      R8 5 1       ; R8(R9,R10,R11,R12)
201 [-]: GETGLOBAL R8 K12       ; R8 := 0xa94df70b
202 [-]: SELF      R8 R8 K31    ; R9 := R8; R8 := R8[0x757f0100]
203 [-]: GETUPVAL  R10 U0       ; R10 := U0
204 [-]: GETTABLE  R10 R10 K5   ; R10 := R10["info"]
205 [-]: GETTABLE  R10 R10 K14  ; R10 := R10["mItemType"]
206 [-]: CALL      R8 3 2       ; R8 := R8(R9,R10)
207 [-]: EQ        1 R3 R8      ; if R3 == R8 then PC := 213
208 [-]: JMP       213          ; PC := 213
209 [-]: GETGLOBAL R8 K49       ; R8 := mPolarizedCount
210 [-]: LT        1 K22 R8     ; if 0.000000 < R8 then PC := 213
211 [-]: JMP       213          ; PC := 213
212 [-]: LOADKB    R8 0 1       ; R8 := false; PC := 213
213 [-]: LOADKB    R8 1 0       ; R8 := true
214 [-]: GETGLOBAL R9 K0        ; R9 := 0xae91e43b
215 [-]: SELF      R9 R9 K44    ; R10 := R9; R9 := R9[0xaade900e]
216 [-]: LOADK     R11 K48      ; R11 := "ScreenTitle.LevelStatus"
217 [-]: CONST     R12 11       ; R12 := 11.000000
218 [-]: MOVE      R13 R8       ; R13 := R8
219 [-]: CALL      R9 5 1       ; R9(R10,R11,R12,R13)
220 [-]: TEST      R8 0         ; if not R8 then PC := 254
221 [-]: JMP       254          ; PC := 254
222 [-]: GETGLOBAL R9 K50       ; R9 := 0x38f10e85
223 [-]: GETGLOBAL R10 K0       ; R10 := 0xae91e43b
224 [-]: LOADK     R11 K51      ; R11 := "ScreenTitle.LevelStatus.gotoAndStop"
225 [-]: GETUPVAL  R12 U2       ; R12 := U2
226 [-]: GETTABLE  R12 R12 K52  ; R12 := R12[0x06d055f9]
227 [-]: GETGLOBAL R13 K49      ; R13 := mPolarizedCount
228 [-]: LT        1 K22 R13    ; if 0.000000 < R13 then PC := 231
229 [-]: JMP       231          ; PC := 231
230 [-]: LOADKB    R13 0 1      ; R13 := false; PC := 231
231 [-]: LOADKB    R13 1 0      ; R13 := true
232 [-]: LOADK     R14 K53      ; R14 := "Forma"
233 [-]: LOADK     R15 K54      ; R15 := "Max"
234 [-]: CALL      R12 4 0      ; R12,... := R12(R13,R14,R15)
235 [-]: CALL      R9 0 1       ; R9(R10,...)
236 [-]: GETGLOBAL R9 K0        ; R9 := 0xae91e43b
237 [-]: SELF      R9 R9 K55    ; R10 := R9; R9 := R9[0x91a24e4b]
238 [-]: LOADK     R11 K42      ; R11 := "ScreenTitle.Tf"
239 [-]: CONST     R12 33       ; R12 := 33.000000
240 [-]: CALL      R9 4 2       ; R9 := R9(R10,R11,R12)
241 [-]: GETGLOBAL R10 K0       ; R10 := 0xae91e43b
242 [-]: SELF      R10 R10 K45  ; R11 := R10; R10 := R10[0x67bc869f]
243 [-]: LOADK     R12 K48      ; R12 := "ScreenTitle.LevelStatus"
244 [-]: CONST     R13 0        ; R13 := 0.000000
245 [-]: DIV       R14 R9 K39   ; R14 := R9 / 2.000000
246 [-]: ADD       R14 R14 K56  ; R14 := R14 + 10.000000
247 [-]: CALL      R10 5 1      ; R10(R11,R12,R13,R14)
248 [-]: GETGLOBAL R10 K0       ; R10 := 0xae91e43b
249 [-]: SELF      R10 R10 K41  ; R11 := R10; R10 := R10[0x5f56eeab]
250 [-]: LOADK     R12 K57      ; R12 := "ScreenTitle.LevelStatus.FormaCount"
251 [-]: CONST     R13 29       ; R13 := 29.000000
252 [-]: GETGLOBAL R14 K49      ; R14 := mPolarizedCount
253 [-]: CALL      R10 5 1      ; R10(R11,R12,R13,R14)
254 [-]: GETGLOBAL R10 K0       ; R10 := 0xae91e43b
255 [-]: SELF      R10 R10 K44  ; R11 := R10; R10 := R10[0xaade900e]
256 [-]: LOADK     R12 K58      ; R12 := "ScreenTitle"
257 [-]: CONST     R13 11       ; R13 := 11.000000
258 [-]: GETGLOBAL R14 K3       ; R14 := 0x7b998233
259 [-]: GETGLOBAL R15 K27      ; R15 := mRailjackMovie
260 [-]: CALL      R14 2 0      ; R14,... := R14(R15)
261 [-]: CALL      R10 0 1      ; R10(R11,...)
262 [-]: GETGLOBAL R10 K3       ; R10 := 0x7b998233
263 [-]: GETGLOBAL R11 K27      ; R11 := mRailjackMovie
264 [-]: CALL      R10 2 2      ; R10 := R10(R11)
265 [-]: TEST      R10 1        ; if R10 then PC := 285
266 [-]: JMP       285          ; PC := 285
267 [-]: GETGLOBAL R10 K3       ; R10 := 0x7b998233
268 [-]: GETGLOBAL R11 K36      ; R11 := _T
269 [-]: GETTABLE  R11 R11 K59  ; R11 := R11["SetSquadOverlayTitle"]
270 [-]: CALL      R10 2 2      ; R10 := R10(R11)
271 [-]: TEST      R10 1        ; if R10 then PC := 285
272 [-]: JMP       285          ; PC := 285
273 [-]: GETGLOBAL R10 K36      ; R10 := _T
274 [-]: GETTABLE  R10 R10 K60  ; R10 := R10[0xdf29a9d6]
275 [-]: MOVE      R11 R0       ; R11 := R0
276 [-]: LOADK     R12 K4       ; R12 := ""
277 [-]: GETUPVAL  R13 U4       ; R13 := U4
278 [-]: CALL      R13 1 2      ; R13 := R13()
279 [-]: TEST      R13 1        ; if R13 then PC := 282
280 [-]: JMP       282          ; PC := 282
281 [-]: GETGLOBAL R13 K61      ; R13 := mSquadTitleSet
282 [-]: CALL      R10 4 1      ; R10(R11,R12,R13)
283 [-]: LOADKB    R10 1 0      ; R10 := true
284 [-]: SETGLOBAL R10 K61      ; mSquadTitleSet := R10
285 [-]: GETGLOBAL R10 K0       ; R10 := 0xae91e43b
286 [-]: SELF      R10 R10 K62  ; R11 := R10; R10 := R10[0x20b98db3]
287 [-]: LOADK     R12 K63      ; R12 := "TopMenu.ConfigLeft.Tf.text"
288 [-]: LOADK     R13 K64      ; R13 := "<MENU_LTRIGGER2>"
289 [-]: CALL      R10 4 1      ; R10(R11,R12,R13)
290 [-]: GETGLOBAL R10 K0       ; R10 := 0xae91e43b
291 [-]: SELF      R10 R10 K62  ; R11 := R10; R10 := R10[0x20b98db3]
292 [-]: LOADK     R12 K65      ; R12 := "TopMenu.ConfigRight.Tf.text"
293 [-]: LOADK     R13 K66      ; R13 := "<MENU_RTRIGGER2>"
294 [-]: CALL      R10 4 1      ; R10(R11,R12,R13)
295 [-]: GETGLOBAL R10 K0       ; R10 := 0xae91e43b
296 [-]: SELF      R10 R10 K44  ; R11 := R10; R10 := R10[0xaade900e]
297 [-]: LOADK     R12 K67      ; R12 := "TopMenu.ConfigLeft"
298 [-]: CONST     R13 11       ; R13 := 11.000000
299 [-]: GETGLOBAL R14 K68      ; R14 := 0x34291f5c
300 [-]: GETTABLE  R14 R14 K69  ; R14 := R14[0x1467d5f4]
301 [-]: CALL      R14 1 2      ; R14 := R14()
302 [-]: TEST      R14 1        ; if R14 then PC := 307
303 [-]: JMP       307          ; PC := 307
304 [-]: GETGLOBAL R14 K68      ; R14 := 0x34291f5c
305 [-]: GETTABLE  R14 R14 K70  ; R14 := R14[0x399826a5]
306 [-]: CALL      R14 1 2      ; R14 := R14()
307 [-]: CALL      R10 5 1      ; R10(R11,R12,R13,R14)
308 [-]: GETGLOBAL R10 K0       ; R10 := 0xae91e43b
309 [-]: SELF      R10 R10 K44  ; R11 := R10; R10 := R10[0xaade900e]
310 [-]: LOADK     R12 K71      ; R12 := "TopMenu.ConfigRight"
311 [-]: CONST     R13 11       ; R13 := 11.000000
312 [-]: GETGLOBAL R14 K68      ; R14 := 0x34291f5c
313 [-]: GETTABLE  R14 R14 K69  ; R14 := R14[0x1467d5f4]
314 [-]: CALL      R14 1 2      ; R14 := R14()
315 [-]: TEST      R14 1        ; if R14 then PC := 320
316 [-]: JMP       320          ; PC := 320
317 [-]: GETGLOBAL R14 K68      ; R14 := 0x34291f5c
318 [-]: GETTABLE  R14 R14 K70  ; R14 := R14[0x399826a5]
319 [-]: CALL      R14 1 2      ; R14 := R14()
320 [-]: CALL      R10 5 1      ; R10(R11,R12,R13,R14)
321 [-]: RETURN    R0 1         ; return 


; Function #72:
;
; Name:            
; Defined at line: 3135
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mUpgradeType"]
  2 [-]: EQ        0 R2 K2      ; if R2 ~= 1.000000 then PC := 25
  3 [-]: JMP       25           ; PC := 25
  4 [-]: GETTABLE  R2 R1 K0     ; R2 := R1["mUpgradeType"]
  5 [-]: EQ        0 R2 K2      ; if R2 ~= 1.000000 then PC := 25
  6 [-]: JMP       25           ; PC := 25
  7 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["mUpgradeValue"]
  8 [-]: GETTABLE  R3 R1 K3     ; R3 := R1["mUpgradeValue"]
  9 [-]: EQ        0 R2 R3      ; if R2 ~= R3 then PC := 18
 10 [-]: JMP       18           ; PC := 18
 11 [-]: GETTABLE  R2 R0 K4     ; R2 := R0["mDrain"]
 12 [-]: GETTABLE  R3 R1 K4     ; R3 := R1["mDrain"]
 13 [-]: LT        1 R2 R3      ; if R2 < R3 then PC := 16
 14 [-]: JMP       16           ; PC := 16
 15 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 16
 16 [-]: LOADKB    R2 1 0       ; R2 := true
 17 [-]: RETURN    R2 2         ; return R2
 18 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["mUpgradeValue"]
 19 [-]: GETTABLE  R3 R1 K3     ; R3 := R1["mUpgradeValue"]
 20 [-]: LT        1 R2 R3      ; if R2 < R3 then PC := 23
 21 [-]: JMP       23           ; PC := 23
 22 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 23
 23 [-]: LOADKB    R2 1 0       ; R2 := true
 24 [-]: RETURN    R2 2         ; return R2
 25 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mUpgradeType"]
 26 [-]: EQ        0 R2 K2      ; if R2 ~= 1.000000 then PC := 33
 27 [-]: JMP       33           ; PC := 33
 28 [-]: GETTABLE  R2 R1 K0     ; R2 := R1["mUpgradeType"]
 29 [-]: EQ        1 R2 K2      ; if R2 == 1.000000 then PC := 33
 30 [-]: JMP       33           ; PC := 33
 31 [-]: LOADKB    R2 1 0       ; R2 := true
 32 [-]: RETURN    R2 2         ; return R2
 33 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mUpgradeType"]
 34 [-]: EQ        1 R2 K2      ; if R2 == 1.000000 then PC := 41
 35 [-]: JMP       41           ; PC := 41
 36 [-]: GETTABLE  R2 R1 K0     ; R2 := R1["mUpgradeType"]
 37 [-]: EQ        0 R2 K2      ; if R2 ~= 1.000000 then PC := 41
 38 [-]: JMP       41           ; PC := 41
 39 [-]: LOADKB    R2 0 0       ; R2 := false
 40 [-]: RETURN    R2 2         ; return R2
 41 [-]: GETTABLE  R2 R0 K5     ; R2 := R0["mName"]
 42 [-]: GETTABLE  R3 R1 K5     ; R3 := R1["mName"]
 43 [-]: LT        1 R2 R3      ; if R2 < R3 then PC := 46
 44 [-]: JMP       46           ; PC := 46
 45 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 46
 46 [-]: LOADKB    R2 1 0       ; R2 := true
 47 [-]: RETURN    R2 2         ; return R2
 48 [-]: RETURN    R0 1         ; return 


; Function #73:
;
; Name:            
; Defined at line: 3152
; #Upvalues:       11
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  66

  1 [-]: GETGLOBAL R3 K0        ; R3 := 0x7b998233
  2 [-]: GETUPVAL  R4 U0        ; R4 := U0
  3 [-]: CALL      R3 2 2       ; R3 := R3(R4)
  4 [-]: TEST      R3 1         ; if R3 then PC := 24
  5 [-]: JMP       24           ; PC := 24
  6 [-]: GETGLOBAL R3 K0        ; R3 := 0x7b998233
  7 [-]: GETUPVAL  R4 U0        ; R4 := U0
  8 [-]: GETTABLE  R4 R4 K1     ; R4 := R4["item"]
  9 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 10 [-]: TEST      R3 1         ; if R3 then PC := 24
 11 [-]: JMP       24           ; PC := 24
 12 [-]: GETUPVAL  R3 U0        ; R3 := U0
 13 [-]: GETTABLE  R3 R3 K1     ; R3 := R3["item"]
 14 [-]: SELF      R3 R3 K2     ; R4 := R3; R3 := R3[0x53ef4cf8]
 15 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 16 [-]: MOVE      R2 R3        ; R2 := R3
 17 [-]: GETGLOBAL R3 K0        ; R3 := 0x7b998233
 18 [-]: MOVE      R4 R2        ; R4 := R2
 19 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 20 [-]: TEST      R3 0         ; if not R3 then PC := 24
 21 [-]: JMP       24           ; PC := 24
 22 [-]: GETUPVAL  R3 U0        ; R3 := U0
 23 [-]: GETTABLE  R2 R3 K1     ; R2 := R3["item"]
 24 [-]: GETGLOBAL R3 K0        ; R3 := 0x7b998233
 25 [-]: GETGLOBAL R4 K3        ; R4 := mGameData
 26 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 27 [-]: TEST      R3 0         ; if not R3 then PC := 30
 28 [-]: JMP       30           ; PC := 30
 29 [-]: RETURN    R0 1         ; return 
 30 [-]: GETGLOBAL R3 K3        ; R3 := mGameData
 31 [-]: SELF      R3 R3 K4     ; R4 := R3; R3 := R3[0x25a6e75e]
 32 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 33 [-]: NEWTABLE  R4 0 0       ; R4 := {}
 34 [-]: SETGLOBAL R4 K5        ; mCards := R4
 35 [-]: GETGLOBAL R4 K6        ; R4 := _T
 36 [-]: GETTABLE  R4 R4 K7     ; R4 := R4["ArsenalState"]
 37 [-]: EQ        1 R4 K9      ; if R4 == 2.000000 then PC := 40
 38 [-]: JMP       40           ; PC := 40
 39 [-]: LOADKB    R4 0 1       ; R4 := false; PC := 40
 40 [-]: LOADKB    R4 1 0       ; R4 := true
 41 [-]: SELF      R5 R3 K10    ; R6 := R3; R5 := R3[0x441fb861]
 42 [-]: GETGLOBAL R7 K6        ; R7 := _T
 43 [-]: GETTABLE  R7 R7 K7     ; R7 := R7["ArsenalState"]
 44 [-]: GETGLOBAL R8 K6        ; R8 := _T
 45 [-]: GETTABLE  R8 R8 K11    ; R8 := R8["upgradeItemCategory"]
 46 [-]: MOVE      R9 R2        ; R9 := R2
 47 [-]: CALL      R5 5 2       ; R5 := R5(R6,R7,R8,R9)
 48 [-]: CONST     R6 1         ; R6 := 1.000000
 49 [-]: LEN       R7 R5        ; R7 := # R5
 50 [-]: CONST     R8 1         ; R8 := 1.000000
 51 [-]: FORPREP   R6 101       ; R6 -= R8; PC := 101
 52 [-]: GETUPVAL  R10 U1       ; R10 := U1
 53 [-]: GETTABLE  R10 R10 K12  ; R10 := R10[0xfc31b69e]
 54 [-]: GETTABLE  R11 R5 R9    ; R11 := R5[R9]
 55 [-]: GETGLOBAL R12 K5       ; R12 := mCards
 56 [-]: LEN       R12 R12      ; R12 := # R12
 57 [-]: ADD       R12 R12 K13  ; R12 := R12 + 1.000000
 58 [-]: MOVE      R13 R2       ; R13 := R2
 59 [-]: CALL      R10 4 2      ; R10 := R10(R11,R12,R13)
 60 [-]: GETUPVAL  R11 U1       ; R11 := U1
 61 [-]: GETTABLE  R11 R11 K14  ; R11 := R11[0x04213f13]
 62 [-]: MOVE      R12 R10      ; R12 := R10
 63 [-]: CALL      R11 2 2      ; R11 := R11(R12)
 64 [-]: TEST      R11 0        ; if not R11 then PC := 71
 65 [-]: JMP       71           ; PC := 71
 66 [-]: GETUPVAL  R11 U1       ; R11 := U1
 67 [-]: GETTABLE  R11 R11 K15  ; R11 := R11[0xfc6369dc]
 68 [-]: MOVE      R12 R10      ; R12 := R10
 69 [-]: MOVE      R13 R2       ; R13 := R2
 70 [-]: CALL      R11 3 1      ; R11(R12,R13)
 71 [-]: GETTABLE  R11 R10 K16  ; R11 := R10["mIsHidden"]
 72 [-]: TEST      R11 1        ; if R11 then PC := 101
 73 [-]: JMP       101          ; PC := 101
 74 [-]: GETUPVAL  R11 U2       ; R11 := U2
 75 [-]: EQ        0 R11 K17    ; if R11 ~= nil then PC := 87
 76 [-]: JMP       87           ; PC := 87
 77 [-]: GETUPVAL  R11 U1       ; R11 := U1
 78 [-]: GETTABLE  R11 R11 K18  ; R11 := R11[0x6e84aadc]
 79 [-]: MOVE      R12 R3       ; R12 := R3
 80 [-]: GETUPVAL  R13 U0       ; R13 := U0
 81 [-]: GETTABLE  R13 R13 K19  ; R13 := R13["info"]
 82 [-]: MOVE      R14 R10      ; R14 := R10
 83 [-]: CONST     R15 0        ; R15 := 0.000000
 84 [-]: MOVE      R16 R4       ; R16 := R4
 85 [-]: CALL      R11 6 1      ; R11(R12,R13,R14,R15,R16)
 86 [-]: JMP       96           ; PC := 96
 87 [-]: GETUPVAL  R11 U1       ; R11 := U1
 88 [-]: GETTABLE  R11 R11 K18  ; R11 := R11[0x6e84aadc]
 89 [-]: MOVE      R12 R3       ; R12 := R3
 90 [-]: GETUPVAL  R13 U0       ; R13 := U0
 91 [-]: GETTABLE  R13 R13 K19  ; R13 := R13["info"]
 92 [-]: MOVE      R14 R10      ; R14 := R10
 93 [-]: GETUPVAL  R15 U2       ; R15 := U2
 94 [-]: MOVE      R16 R4       ; R16 := R4
 95 [-]: CALL      R11 6 1      ; R11(R12,R13,R14,R15,R16)
 96 [-]: GETGLOBAL R11 K20      ; R11 := 0x33bdd652
 97 [-]: GETTABLE  R11 R11 K21  ; R11 := R11[0x23d5322f]
 98 [-]: GETGLOBAL R12 K5       ; R12 := mCards
 99 [-]: MOVE      R13 R10      ; R13 := R10
100 [-]: CALL      R11 3 1      ; R11(R12,R13)
101 [-]: FORLOOP   R6 52        ; R6 += R8; if R6 <= R7 then begin PC := 52; R9 := R6 end
102 [-]: SELF      R11 R3 K22   ; R12 := R3; R11 := R3[0x18a87553]
103 [-]: GETGLOBAL R13 K6       ; R13 := _T
104 [-]: GETTABLE  R13 R13 K7   ; R13 := R13["ArsenalState"]
105 [-]: GETGLOBAL R14 K6       ; R14 := _T
106 [-]: GETTABLE  R14 R14 K11  ; R14 := R14["upgradeItemCategory"]
107 [-]: MOVE      R15 R2       ; R15 := R2
108 [-]: CALL      R11 5 2      ; R11 := R11(R12,R13,R14,R15)
109 [-]: CONST     R12 1        ; R12 := 1.000000
110 [-]: LEN       R13 R11      ; R13 := # R11
111 [-]: CONST     R14 1        ; R14 := 1.000000
112 [-]: FORPREP   R12 150      ; R12 -= R14; PC := 150
113 [-]: GETUPVAL  R16 U1       ; R16 := U1
114 [-]: GETTABLE  R16 R16 K12  ; R16 := R16[0xfc31b69e]
115 [-]: GETTABLE  R17 R11 R15  ; R17 := R11[R15]
116 [-]: GETGLOBAL R18 K5       ; R18 := mCards
117 [-]: LEN       R18 R18      ; R18 := # R18
118 [-]: ADD       R18 R18 K13  ; R18 := R18 + 1.000000
119 [-]: CALL      R16 3 2      ; R16 := R16(R17,R18)
120 [-]: GETTABLE  R17 R16 K16  ; R17 := R16["mIsHidden"]
121 [-]: TEST      R17 1        ; if R17 then PC := 150
122 [-]: JMP       150          ; PC := 150
123 [-]: GETUPVAL  R17 U2       ; R17 := U2
124 [-]: EQ        0 R17 K17    ; if R17 ~= nil then PC := 136
125 [-]: JMP       136          ; PC := 136
126 [-]: GETUPVAL  R17 U1       ; R17 := U1
127 [-]: GETTABLE  R17 R17 K18  ; R17 := R17[0x6e84aadc]
128 [-]: MOVE      R18 R3       ; R18 := R3
129 [-]: GETUPVAL  R19 U0       ; R19 := U0
130 [-]: GETTABLE  R19 R19 K19  ; R19 := R19["info"]
131 [-]: MOVE      R20 R16      ; R20 := R16
132 [-]: CONST     R21 0        ; R21 := 0.000000
133 [-]: MOVE      R22 R4       ; R22 := R4
134 [-]: CALL      R17 6 1      ; R17(R18,R19,R20,R21,R22)
135 [-]: JMP       145          ; PC := 145
136 [-]: GETUPVAL  R17 U1       ; R17 := U1
137 [-]: GETTABLE  R17 R17 K18  ; R17 := R17[0x6e84aadc]
138 [-]: MOVE      R18 R3       ; R18 := R3
139 [-]: GETUPVAL  R19 U0       ; R19 := U0
140 [-]: GETTABLE  R19 R19 K19  ; R19 := R19["info"]
141 [-]: MOVE      R20 R16      ; R20 := R16
142 [-]: GETUPVAL  R21 U2       ; R21 := U2
143 [-]: MOVE      R22 R4       ; R22 := R4
144 [-]: CALL      R17 6 1      ; R17(R18,R19,R20,R21,R22)
145 [-]: GETGLOBAL R17 K20      ; R17 := 0x33bdd652
146 [-]: GETTABLE  R17 R17 K21  ; R17 := R17[0x23d5322f]
147 [-]: GETGLOBAL R18 K5       ; R18 := mCards
148 [-]: MOVE      R19 R16      ; R19 := R16
149 [-]: CALL      R17 3 1      ; R17(R18,R19)
150 [-]: FORLOOP   R12 113      ; R12 += R14; if R12 <= R13 then begin PC := 113; R15 := R12 end
151 [-]: LOADNIL   R17 R17      ; R17 := nil
152 [-]: GETUPVAL  R18 U3       ; R18 := U3
153 [-]: CALL      R18 1 2      ; R18 := R18()
154 [-]: TEST      R18 0        ; if not R18 then PC := 229
155 [-]: JMP       229          ; PC := 229
156 [-]: GETUPVAL  R18 U0       ; R18 := U0
157 [-]: GETTABLE  R18 R18 K1   ; R18 := R18["item"]
158 [-]: SELF      R18 R18 K23  ; R19 := R18; R18 := R18[0x78c595ae]
159 [-]: GETGLOBAL R20 K24      ; R20 := 0x0469f296
160 [-]: LOADK     R21 K25      ; R21 := "POWER_WEAPON"
161 [-]: CALL      R20 2 0      ; R20,... := R20(R21)
162 [-]: CALL      R18 0 2      ; R18 := R18(R19,...)
163 [-]: TEST      R18 0        ; if not R18 then PC := 229
164 [-]: JMP       229          ; PC := 229
165 [-]: GETUPVAL  R18 U0       ; R18 := U0
166 [-]: GETTABLE  R18 R18 K1   ; R18 := R18["item"]
167 [-]: SELF      R18 R18 K26  ; R19 := R18; R18 := R18[0xe3ca779e]
168 [-]: CALL      R18 2 2      ; R18 := R18(R19)
169 [-]: GETGLOBAL R19 K8       ; R19 := 0x6c97a788
170 [-]: GETTABLE  R19 R19 K27  ; R19 := R19[0x1aba4d9e]
171 [-]: CALL      R19 1 2      ; R19 := R19()
172 [-]: SELF      R20 R18 K29  ; R21 := R18; R20 := R18[0xcde10c4a]
173 [-]: CALL      R20 2 2      ; R20 := R20(R21)
174 [-]: SETTABLE  R19 K28 R20  ; R19["mItemType"] := R20
175 [-]: SETTABLE  R19 K30 K13  ; R19["mItemCount"] := 1.000000
176 [-]: GETGLOBAL R20 K0       ; R20 := 0x7b998233
177 [-]: GETGLOBAL R21 K6       ; R21 := _T
178 [-]: GETTABLE  R21 R21 K31  ; R21 := R21["MenuSuitAvatar"]
179 [-]: CALL      R20 2 2      ; R20 := R20(R21)
180 [-]: TEST      R20 1        ; if R20 then PC := 216
181 [-]: JMP       216          ; PC := 216
182 [-]: GETGLOBAL R20 K6       ; R20 := _T
183 [-]: GETTABLE  R20 R20 K31  ; R20 := R20["MenuSuitAvatar"]
184 [-]: SELF      R20 R20 K32  ; R21 := R20; R20 := R20[0xde321e6f]
185 [-]: CALL      R20 2 2      ; R20 := R20(R21)
186 [-]: SELF      R20 R20 K33  ; R21 := R20; R20 := R20[0xf7d48ee0]
187 [-]: CALL      R20 2 2      ; R20 := R20(R21)
188 [-]: GETGLOBAL R21 K0       ; R21 := 0x7b998233
189 [-]: MOVE      R22 R20      ; R22 := R20
190 [-]: CALL      R21 2 2      ; R21 := R21(R22)
191 [-]: TEST      R21 1        ; if R21 then PC := 216
192 [-]: JMP       216          ; PC := 216
193 [-]: SELF      R21 R20 K34  ; R22 := R20; R21 := R20[0x4a5d8c86]
194 [-]: GETGLOBAL R23 K6       ; R23 := _T
195 [-]: GETTABLE  R23 R23 K35  ; R23 := R23["upgradeItemSlot"]
196 [-]: CALL      R21 3 2      ; R21 := R21(R22,R23)
197 [-]: GETTABLE  R22 R21 K28  ; R22 := R21["mItemType"]
198 [-]: GETUPVAL  R23 U0       ; R23 := U0
199 [-]: GETTABLE  R23 R23 K36  ; R23 := R23["type"]
200 [-]: EQ        0 R22 R23    ; if R22 ~= R23 then PC := 216
201 [-]: JMP       216          ; PC := 216
202 [-]: GETTABLE  R22 R21 K37  ; R22 := R21["mAbilityIndex"]
203 [-]: SELF      R23 R20 K38  ; R24 := R20; R23 := R20[0xd836367c]
204 [-]: CALL      R23 2 2      ; R23 := R23(R24)
205 [-]: LT        0 R22 R23    ; if R22 >= R23 then PC := 216
206 [-]: JMP       216          ; PC := 216
207 [-]: SELF      R22 R20 K39  ; R23 := R20; R22 := R20[0xa776e126]
208 [-]: GETTABLE  R24 R21 K37  ; R24 := R21["mAbilityIndex"]
209 [-]: CALL      R22 3 2      ; R22 := R22(R23,R24)
210 [-]: LT        0 K13 R22    ; if 1.000000 >= R22 then PC := 216
211 [-]: JMP       216          ; PC := 216
212 [-]: SELF      R23 R18 K41  ; R24 := R18; R23 := R18[0x86ba2663]
213 [-]: SUB       R25 R22 K13  ; R25 := R22 - 1.000000
214 [-]: CALL      R23 3 2      ; R23 := R23(R24,R25)
215 [-]: SETTABLE  R19 K40 R23  ; R19["mUpgradeFingerprint"] := R23
216 [-]: GETUPVAL  R23 U1       ; R23 := U1
217 [-]: GETTABLE  R23 R23 K12  ; R23 := R23[0xfc31b69e]
218 [-]: MOVE      R24 R19      ; R24 := R19
219 [-]: GETGLOBAL R25 K5       ; R25 := mCards
220 [-]: LEN       R25 R25      ; R25 := # R25
221 [-]: ADD       R25 R25 K13  ; R25 := R25 + 1.000000
222 [-]: CALL      R23 3 2      ; R23 := R23(R24,R25)
223 [-]: MOVE      R17 R23      ; R17 := R23
224 [-]: GETGLOBAL R23 K20      ; R23 := 0x33bdd652
225 [-]: GETTABLE  R23 R23 K21  ; R23 := R23[0x23d5322f]
226 [-]: GETGLOBAL R24 K5       ; R24 := mCards
227 [-]: MOVE      R25 R17      ; R25 := R17
228 [-]: CALL      R23 3 1      ; R23(R24,R25)
229 [-]: TEST      R1 0         ; if not R1 then PC := 233
230 [-]: JMP       233          ; PC := 233
231 [-]: NEWTABLE  R23 0 0      ; R23 := {}
232 [-]: SETGLOBAL R23 K42      ; mTypeToCard := R23
233 [-]: LOADKB    R23 0 0      ; R23 := false
234 [-]: GETGLOBAL R24 K20      ; R24 := 0x33bdd652
235 [-]: GETTABLE  R24 R24 K43  ; R24 := R24[0xf21b1d8e]
236 [-]: GETGLOBAL R25 K5       ; R25 := mCards
237 [-]: GETUPVAL  R26 U4       ; R26 := U4
238 [-]: CALL      R24 3 1      ; R24(R25,R26)
239 [-]: GETGLOBAL R24 K44      ; R24 := 0xc8802016
240 [-]: GETGLOBAL R25 K5       ; R25 := mCards
241 [-]: CALL      R24 2 4      ; R24,R25,R26 := R24(R25)
242 [-]: JMP       291          ; PC := 291
243 [-]: GETTABLE  R29 R28 K45  ; R29 := R28["mUpgrade"]
244 [-]: GETTABLE  R30 R28 K45  ; R30 := R28["mUpgrade"]
245 [-]: GETTABLE  R30 R30 K28  ; R30 := R30["mItemType"]
246 [-]: GETTABLE  R31 R29 K46  ; R31 := R29["mItemId"]
247 [-]: GETTABLE  R31 R31 K47  ; R31 := R31["mId"]
248 [-]: GETGLOBAL R32 K0       ; R32 := 0x7b998233
249 [-]: MOVE      R33 R30      ; R33 := R30
250 [-]: CALL      R32 2 2      ; R32 := R32(R33)
251 [-]: NOT       R32 R32      ; R32 :=  R32
252 [-]: TEST      R23 1        ; if R23 then PC := 263
253 [-]: JMP       263          ; PC := 263
254 [-]: TEST      R32 0        ; if not R32 then PC := 263
255 [-]: JMP       263          ; PC := 263
256 [-]: GETUPVAL  R33 U1       ; R33 := U1
257 [-]: GETTABLE  R33 R33 K48  ; R33 := R33[0x6b32352d]
258 [-]: MOVE      R34 R28      ; R34 := R28
259 [-]: CALL      R33 2 2      ; R33 := R33(R34)
260 [-]: TEST      R33 0        ; if not R33 then PC := 263
261 [-]: JMP       263          ; PC := 263
262 [-]: LOADKB    R23 1 0      ; R23 := true
263 [-]: LEN       R33 R31      ; R33 := # R31
264 [-]: LT        0 K49 R33    ; if 0.000000 >= R33 then PC := 269
265 [-]: JMP       269          ; PC := 269
266 [-]: GETGLOBAL R33 K50      ; R33 := mIdToCard
267 [-]: SETTABLE  R33 R31 R27  ; R33[R31] := R27
268 [-]: JMP       291          ; PC := 291
269 [-]: TEST      R32 0        ; if not R32 then PC := 291
270 [-]: JMP       291          ; PC := 291
271 [-]: TEST      R1 1         ; if R1 then PC := 279
272 [-]: JMP       279          ; PC := 279
273 [-]: GETGLOBAL R33 K42      ; R33 := mTypeToCard
274 [-]: SELF      R34 R30 K51  ; R35 := R30; R34 := R30[0xed4e0128]
275 [-]: CALL      R34 2 2      ; R34 := R34(R35)
276 [-]: GETTABLE  R33 R33 R34  ; R33 := R33[R34]
277 [-]: EQ        0 R33 K17    ; if R33 ~= nil then PC := 284
278 [-]: JMP       284          ; PC := 284
279 [-]: GETGLOBAL R33 K42      ; R33 := mTypeToCard
280 [-]: SELF      R34 R30 K51  ; R35 := R30; R34 := R30[0xed4e0128]
281 [-]: CALL      R34 2 2      ; R34 := R34(R35)
282 [-]: SETTABLE  R33 R34 R27  ; R33[R34] := R27
283 [-]: JMP       291          ; PC := 291
284 [-]: GETGLOBAL R33 K52      ; R33 := 0x3d106989
285 [-]: LOADK     R34 K53      ; R34 := "Multiple cards of type "
286 [-]: SELF      R35 R30 K51  ; R36 := R30; R35 := R30[0xed4e0128]
287 [-]: CALL      R35 2 2      ; R35 := R35(R36)
288 [-]: LOADK     R36 K54      ; R36 := " with the same ID."
289 [-]: CONCAT    R34 R34 R36  ; R34 := R34 .. R35 .. R36
290 [-]: CALL      R33 2 1      ; R33(R34)
291 [-]: TFORLOOP  R24 2        ; R27,R28 :=  R24(R25,R26); if R27 ~= nil then begin PC = 243; R26 := R27 end
292 [-]: JMP       243          ; PC := 243
293 [-]: GETUPVAL  R33 U0       ; R33 := U0
294 [-]: GETTABLE  R33 R33 K19  ; R33 := R33["info"]
295 [-]: GETTABLE  R33 R33 K46  ; R33 := R33["mItemId"]
296 [-]: GETTABLE  R33 R33 K47  ; R33 := R33["mId"]
297 [-]: NEWTABLE  R34 0 0      ; R34 := {}
298 [-]: CONST     R35 1        ; R35 := 1.000000
299 [-]: GETGLOBAL R36 K5       ; R36 := mCards
300 [-]: LEN       R36 R36      ; R36 := # R36
301 [-]: CONST     R37 1        ; R37 := 1.000000
302 [-]: FORPREP   R35 314      ; R35 -= R37; PC := 314
303 [-]: GETGLOBAL R39 K5       ; R39 := mCards
304 [-]: GETTABLE  R39 R39 R38  ; R39 := R39[R38]
305 [-]: GETTABLE  R40 R39 K55  ; R40 := R39["mInstalled"]
306 [-]: GETTABLE  R40 R40 R33  ; R40 := R40[R33]
307 [-]: EQ        1 R40 K17    ; if R40 == nil then PC := 314
308 [-]: JMP       314          ; PC := 314
309 [-]: GETGLOBAL R40 K20      ; R40 := 0x33bdd652
310 [-]: GETTABLE  R40 R40 K21  ; R40 := R40[0x23d5322f]
311 [-]: MOVE      R41 R34      ; R41 := R34
312 [-]: MOVE      R42 R39      ; R42 := R39
313 [-]: CALL      R40 3 1      ; R40(R41,R42)
314 [-]: FORLOOP   R35 303      ; R35 += R37; if R35 <= R36 then begin PC := 303; R38 := R35 end
315 [-]: NEWTABLE  R40 0 0      ; R40 := {}
316 [-]: SETGLOBAL R40 K56      ; mModsAdded := R40
317 [-]: NEWTABLE  R40 0 0      ; R40 := {}
318 [-]: SETGLOBAL R40 K57      ; mModsRemoved := R40
319 [-]: CONST     R40 1        ; R40 := 1.000000
320 [-]: LEN       R41 R34      ; R41 := # R34
321 [-]: CONST     R42 1        ; R42 := 1.000000
322 [-]: FORPREP   R40 398      ; R40 -= R42; PC := 398
323 [-]: GETTABLE  R44 R34 R43  ; R44 := R34[R43]
324 [-]: ADD       R45 R43 K13  ; R45 := R43 + 1.000000
325 [-]: LEN       R46 R34      ; R46 := # R34
326 [-]: CONST     R47 1        ; R47 := 1.000000
327 [-]: FORPREP   R45 397      ; R45 -= R47; PC := 397
328 [-]: GETGLOBAL R49 K58      ; R49 := 0xce225efa
329 [-]: CONST     R50 0        ; R50 := 0.000000
330 [-]: CALL      R49 2 1      ; R49(R50)
331 [-]: GETTABLE  R49 R34 R48  ; R49 := R34[R48]
332 [-]: GETTABLE  R50 R44 K45  ; R50 := R44["mUpgrade"]
333 [-]: GETTABLE  R50 R50 K28  ; R50 := R50["mItemType"]
334 [-]: GETTABLE  R51 R49 K45  ; R51 := R49["mUpgrade"]
335 [-]: GETTABLE  R51 R51 K28  ; R51 := R51["mItemType"]
336 [-]: EQ        1 R50 R51    ; if R50 == R51 then PC := 339
337 [-]: JMP       339          ; PC := 339
338 [-]: LOADKB    R50 0 1      ; R50 := false; PC := 339
339 [-]: LOADKB    R50 1 0      ; R50 := true
340 [-]: GETTABLE  R51 R44 K55  ; R51 := R44["mInstalled"]
341 [-]: GETTABLE  R51 R51 R33  ; R51 := R51[R33]
342 [-]: GETTABLE  R52 R49 K55  ; R52 := R49["mInstalled"]
343 [-]: GETTABLE  R52 R52 R33  ; R52 := R52[R33]
344 [-]: EQ        1 R51 R52    ; if R51 == R52 then PC := 347
345 [-]: JMP       347          ; PC := 347
346 [-]: LOADKB    R51 0 1      ; R51 := false; PC := 347
347 [-]: LOADKB    R51 1 0      ; R51 := true
348 [-]: GETTABLE  R52 R49 K55  ; R52 := R49["mInstalled"]
349 [-]: GETTABLE  R52 R52 R33  ; R52 := R52[R33]
350 [-]: EQ        1 R52 K17    ; if R52 == nil then PC := 397
351 [-]: JMP       397          ; PC := 397
352 [-]: TEST      R50 1        ; if R50 then PC := 356
353 [-]: JMP       356          ; PC := 356
354 [-]: TEST      R51 0        ; if not R51 then PC := 397
355 [-]: JMP       397          ; PC := 397
356 [-]: TEST      R50 0        ; if not R50 then PC := 372
357 [-]: JMP       372          ; PC := 372
358 [-]: GETGLOBAL R52 K52      ; R52 := 0x3d106989
359 [-]: LOADK     R53 K59      ; R53 := "DOUBLE INSTALL: "
360 [-]: GETTABLE  R54 R49 K45  ; R54 := R49["mUpgrade"]
361 [-]: GETTABLE  R54 R54 K28  ; R54 := R54["mItemType"]
362 [-]: SELF      R54 R54 K51  ; R55 := R54; R54 := R54[0xed4e0128]
363 [-]: CALL      R54 2 2      ; R54 := R54(R55)
364 [-]: LOADK     R55 K60      ; R55 := " "
365 [-]: GETTABLE  R56 R49 K45  ; R56 := R49["mUpgrade"]
366 [-]: GETTABLE  R56 R56 K46  ; R56 := R56["mItemId"]
367 [-]: SELF      R56 R56 K61  ; R57 := R56; R56 := R56[0xf537cfc7]
368 [-]: CALL      R56 2 2      ; R56 := R56(R57)
369 [-]: CONCAT    R53 R53 R56  ; R53 := R53 .. R54 .. R55 .. R56
370 [-]: CALL      R52 2 1      ; R52(R53)
371 [-]: JMP       390          ; PC := 390
372 [-]: TEST      R51 0        ; if not R51 then PC := 390
373 [-]: JMP       390          ; PC := 390
374 [-]: GETGLOBAL R52 K52      ; R52 := 0x3d106989
375 [-]: LOADK     R53 K62      ; R53 := "TWO CARDS ONE SLOT @ "
376 [-]: GETTABLE  R54 R44 K55  ; R54 := R44["mInstalled"]
377 [-]: GETTABLE  R54 R54 R33  ; R54 := R54[R33]
378 [-]: LOADK     R55 K63      ; R55 := ": "
379 [-]: GETTABLE  R56 R44 K45  ; R56 := R44["mUpgrade"]
380 [-]: GETTABLE  R56 R56 K46  ; R56 := R56["mItemId"]
381 [-]: SELF      R56 R56 K61  ; R57 := R56; R56 := R56[0xf537cfc7]
382 [-]: CALL      R56 2 2      ; R56 := R56(R57)
383 [-]: LOADK     R57 K64      ; R57 := " and "
384 [-]: GETTABLE  R58 R49 K45  ; R58 := R49["mUpgrade"]
385 [-]: GETTABLE  R58 R58 K46  ; R58 := R58["mItemId"]
386 [-]: SELF      R58 R58 K61  ; R59 := R58; R58 := R58[0xf537cfc7]
387 [-]: CALL      R58 2 2      ; R58 := R58(R59)
388 [-]: CONCAT    R53 R53 R58  ; R53 := R53 .. R54 .. R55 .. R56 .. R57 .. R58
389 [-]: CALL      R52 2 1      ; R52(R53)
390 [-]: LOADKB    R52 1 0      ; R52 := true
391 [-]: SETGLOBAL R52 K65      ; mChanged := R52
392 [-]: GETUPVAL  R52 U5       ; R52 := U5
393 [-]: GETTABLE  R53 R49 K45  ; R53 := R49["mUpgrade"]
394 [-]: CALL      R52 2 1      ; R52(R53)
395 [-]: GETTABLE  R52 R49 K55  ; R52 := R49["mInstalled"]
396 [-]: SETTABLE  R52 R33 K17  ; R52[R33] := nil
397 [-]: FORLOOP   R45 328      ; R45 += R47; if R45 <= R46 then begin PC := 328; R48 := R45 end
398 [-]: FORLOOP   R40 323      ; R40 += R42; if R40 <= R41 then begin PC := 323; R43 := R40 end
399 [-]: TEST      R23 1        ; if R23 then PC := 407
400 [-]: JMP       407          ; PC := 407
401 [-]: GETUPVAL  R52 U6       ; R52 := U6
402 [-]: CALL      R52 1 2      ; R52 := R52()
403 [-]: TEST      R52 0        ; if not R52 then PC := 407
404 [-]: JMP       407          ; PC := 407
405 [-]: CONST     R52 3        ; R52 := 3.000000
406 [-]: SETGLOBAL R52 K66      ; mCardSlots := R52
407 [-]: GETUPVAL  R52 U7       ; R52 := U7
408 [-]: MOVE      R53 R0       ; R53 := R0
409 [-]: CALL      R52 2 1      ; R52(R53)
410 [-]: GETUPVAL  R52 U8       ; R52 := U8
411 [-]: CALL      R52 1 1      ; R52()
412 [-]: GETUPVAL  R52 U9       ; R52 := U9
413 [-]: CALL      R52 1 1      ; R52()
414 [-]: EQ        1 R17 K17    ; if R17 == nil then PC := 458
415 [-]: JMP       458          ; PC := 458
416 [-]: GETGLOBAL R52 K67      ; R52 := mCollectionGrid
417 [-]: GETTABLE  R52 R52 K68  ; R52 := R52["mElements"]
418 [-]: LEN       R52 R52      ; R52 := # R52
419 [-]: CONST     R53 1        ; R53 := 1.000000
420 [-]: CONST     R54 -1       ; R54 := -1.000000
421 [-]: FORPREP   R52 457      ; R52 -= R54; PC := 457
422 [-]: GETGLOBAL R56 K67      ; R56 := mCollectionGrid
423 [-]: GETTABLE  R56 R56 K68  ; R56 := R56["mElements"]
424 [-]: GETTABLE  R56 R56 R55  ; R56 := R56[R55]
425 [-]: GETTABLE  R57 R56 K69  ; R57 := R56["mCardIndex"]
426 [-]: TEST      R57 0        ; if not R57 then PC := 457
427 [-]: JMP       457          ; PC := 457
428 [-]: GETTABLE  R57 R56 K69  ; R57 := R56["mCardIndex"]
429 [-]: EQ        1 R57 K70    ; if R57 == -1.000000 then PC := 457
430 [-]: JMP       457          ; PC := 457
431 [-]: GETGLOBAL R57 K5       ; R57 := mCards
432 [-]: GETTABLE  R58 R56 K69  ; R58 := R56["mCardIndex"]
433 [-]: GETTABLE  R57 R57 R58  ; R57 := R57[R58]
434 [-]: GETTABLE  R57 R57 K47  ; R57 := R57["mId"]
435 [-]: GETTABLE  R58 R17 K47  ; R58 := R17["mId"]
436 [-]: EQ        0 R57 R58    ; if R57 ~= R58 then PC := 457
437 [-]: JMP       457          ; PC := 457
438 [-]: NEWTABLE  R57 0 3      ; R57 := {}
439 [-]: SETTABLE  R57 K1 R17   ; R57["item"] := R17
440 [-]: GETGLOBAL R58 K67      ; R58 := mCollectionGrid
441 [-]: SETTABLE  R57 K71 R58  ; R57["grid"] := R58
442 [-]: SETTABLE  R57 K72 R56  ; R57["element"] := R56
443 [-]: GETGLOBAL R58 K73      ; R58 := mInstalledGrid
444 [-]: SELF      R58 R58 K74  ; R59 := R58; R58 := R58[0x5465f8f3]
445 [-]: GETGLOBAL R60 K75      ; R60 := MELEE_STANCE_SLOT
446 [-]: CALL      R58 3 2      ; R58 := R58(R59,R60)
447 [-]: GETUPVAL  R59 U10      ; R59 := U10
448 [-]: GETGLOBAL R60 K73      ; R60 := mInstalledGrid
449 [-]: MOVE      R61 R57      ; R61 := R57
450 [-]: MOVE      R62 R58      ; R62 := R58
451 [-]: LOADKB    R63 1 0      ; R63 := true
452 [-]: LOADKB    R64 1 0      ; R64 := true
453 [-]: LOADKB    R65 1 0      ; R65 := true
454 [-]: CALL      R59 7 1      ; R59(R60,R61,R62,R63,R64,R65)
455 [-]: SETTABLE  R58 K76 K77  ; R58["mCardLocked"] := true
456 [-]: JMP       458          ; PC := 458
457 [-]: FORLOOP   R52 422      ; R52 += R54; if R52 <= R53 then begin PC := 422; R55 := R52 end
458 [-]: RETURN    R0 1         ; return 


; Function #74:
;
; Name:            
; Defined at line: 3310
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x3d106989
  2 [-]: LOADK     R1 K1        ; R1 := "!!"
  3 [-]: CALL      R0 2 1       ; R0(R1)
  4 [-]: RETURN    R0 1         ; return 


; Function #75:
;
; Name:            
; Defined at line: 3314
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETGLOBAL R0 K0        ; R0 := mInputBlocked
  2 [-]: TEST      R0 0         ; if not R0 then PC := 5
  3 [-]: JMP       5            ; PC := 5
  4 [-]: RETURN    R0 1         ; return 
  5 [-]: GETGLOBAL R0 K1        ; R0 := 0x7b998233
  6 [-]: GETGLOBAL R1 K2        ; R1 := 0xcb79539e
  7 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  8 [-]: TEST      R0 1         ; if R0 then PC := 24
  9 [-]: JMP       24           ; PC := 24
 10 [-]: GETGLOBAL R0 K2        ; R0 := 0xcb79539e
 11 [-]: SELF      R0 R0 K3     ; R1 := R0; R0 := R0[0xa9188a47]
 12 [-]: GETGLOBAL R2 K4        ; R2 := 0x0469f296
 13 [-]: LOADK     R3 K5        ; R3 := "IN_SHIP_VIEW_TIME"
 14 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 15 [-]: LOADK     R3 K6        ; R3 := "EQUIPMENT_ARSENAL_MOD"
 16 [-]: CALL      R0 4 1       ; R0(R1,R2,R3)
 17 [-]: GETGLOBAL R0 K2        ; R0 := 0xcb79539e
 18 [-]: SELF      R0 R0 K7     ; R1 := R0; R0 := R0[0xa9136b2f]
 19 [-]: GETGLOBAL R2 K4        ; R2 := 0x0469f296
 20 [-]: LOADK     R3 K5        ; R3 := "IN_SHIP_VIEW_TIME"
 21 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 22 [-]: LOADK     R3 K8        ; R3 := "EQUIPMENT_ARSENAL_MAIN"
 23 [-]: CALL      R0 4 1       ; R0(R1,R2,R3)
 24 [-]: GETGLOBAL R0 K9        ; R0 := _T
 25 [-]: SETTABLE  R0 K10 K11   ; R0["gToolTip"] := nil
 26 [-]: GETGLOBAL R0 K9        ; R0 := _T
 27 [-]: GETTABLE  R0 R0 K12    ; R0 := R0[0x1c5b5b33]
 28 [-]: LOADK     R1 K13       ; R1 := "UpgradeCards"
 29 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 30 [-]: TEST      R0 0         ; if not R0 then PC := 36
 31 [-]: JMP       36           ; PC := 36
 32 [-]: GETGLOBAL R0 K9        ; R0 := _T
 33 [-]: GETTABLE  R0 R0 K14    ; R0 := R0[0x4e4e6b0c]
 34 [-]: CALL      R0 1 1       ; R0()
 35 [-]: JMP       38           ; PC := 38
 36 [-]: GETUPVAL  R0 U0        ; R0 := U0
 37 [-]: CALL      R0 1 1       ; R0()
 38 [-]: RETURN    R0 1         ; return 


; Function #76:
;
; Name:            
; Defined at line: 3335
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETUPVAL  R0 U0        ; R0 := U0
  2 [-]: CALL      R0 1 1       ; R0()
  3 [-]: RETURN    R0 1         ; return 


; Function #77:
;
; Name:            
; Defined at line: 3339
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mRailjackMovie
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 0         ; if not R1 then PC := 10
  5 [-]: JMP       10           ; PC := 10
  6 [-]: GETGLOBAL R1 K2        ; R1 := _T
  7 [-]: GETTABLE  R1 R1 K3     ; R1 := R1[0x021c8cce]
  8 [-]: CALL      R1 1 1       ; R1()
  9 [-]: JMP       21           ; PC := 21
 10 [-]: EQ        1 R0 K4      ; if R0 == nil then PC := 21
 11 [-]: JMP       21           ; PC := 21
 12 [-]: LOADKB    R1 0 0       ; R1 := false
 13 [-]: SETGLOBAL R1 K5        ; mRailjackNavOnClose := R1
 14 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
 15 [-]: GETGLOBAL R2 K1        ; R2 := mRailjackMovie
 16 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 17 [-]: TEST      R1 1         ; if R1 then PC := 21
 18 [-]: JMP       21           ; PC := 21
 19 [-]: LOADKB    R1 1 0       ; R1 := true
 20 [-]: SETGLOBAL R1 K6        ; mShouldClose := R1
 21 [-]: GETGLOBAL R1 K7        ; R1 := 0xae91e43b
 22 [-]: SELF      R1 R1 K8     ; R2 := R1; R1 := R1[0x32302b4a]
 23 [-]: CALL      R1 2 1       ; R1(R2)
 24 [-]: RETURN    R0 1         ; return 


; Function #78:
;
; Name:            
; Defined at line: 3351
; #Upvalues:       1
; #Parameters:     3
; Is_vararg:       0
; Max Stack Size:  16

  1 [-]: EQ        1 R0 K0      ; if R0 == nil then PC := 55
  2 [-]: JMP       55           ; PC := 55
  3 [-]: GETTABLE  R3 R0 K1     ; R3 := R0["mCardIndex"]
  4 [-]: TEST      R3 0         ; if not R3 then PC := 55
  5 [-]: JMP       55           ; PC := 55
  6 [-]: GETTABLE  R3 R0 K1     ; R3 := R0["mCardIndex"]
  7 [-]: EQ        1 R3 K2      ; if R3 == -1.000000 then PC := 55
  8 [-]: JMP       55           ; PC := 55
  9 [-]: GETGLOBAL R3 K3        ; R3 := 0x7b998233
 10 [-]: GETGLOBAL R4 K4        ; R4 := mGameData
 11 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 12 [-]: TEST      R3 1         ; if R3 then PC := 55
 13 [-]: JMP       55           ; PC := 55
 14 [-]: CONST     R3 1         ; R3 := 1.000000
 15 [-]: GETGLOBAL R4 K5        ; R4 := mCollectionGrid
 16 [-]: GETTABLE  R4 R4 K6     ; R4 := R4["mElements"]
 17 [-]: LEN       R4 R4        ; R4 := # R4
 18 [-]: CONST     R5 1         ; R5 := 1.000000
 19 [-]: FORPREP   R3 54        ; R3 -= R5; PC := 54
 20 [-]: GETGLOBAL R7 K7        ; R7 := 0xce225efa
 21 [-]: CONST     R8 0         ; R8 := 0.000000
 22 [-]: CALL      R7 2 1       ; R7(R8)
 23 [-]: GETGLOBAL R7 K5        ; R7 := mCollectionGrid
 24 [-]: GETTABLE  R7 R7 K6     ; R7 := R7["mElements"]
 25 [-]: GETTABLE  R7 R7 R6     ; R7 := R7[R6]
 26 [-]: GETTABLE  R7 R7 K1     ; R7 := R7["mCardIndex"]
 27 [-]: TEST      R7 0         ; if not R7 then PC := 35
 28 [-]: JMP       35           ; PC := 35
 29 [-]: GETGLOBAL R7 K5        ; R7 := mCollectionGrid
 30 [-]: GETTABLE  R7 R7 K6     ; R7 := R7["mElements"]
 31 [-]: GETTABLE  R7 R7 R6     ; R7 := R7[R6]
 32 [-]: GETTABLE  R7 R7 K1     ; R7 := R7["mCardIndex"]
 33 [-]: EQ        0 R7 K2      ; if R7 ~= -1.000000 then PC := 54
 34 [-]: JMP       54           ; PC := 54
 35 [-]: GETGLOBAL R7 K8        ; R7 := mCards
 36 [-]: GETTABLE  R8 R0 K1     ; R8 := R0["mCardIndex"]
 37 [-]: GETTABLE  R7 R7 R8     ; R7 := R7[R8]
 38 [-]: NEWTABLE  R8 0 3       ; R8 := {}
 39 [-]: SETTABLE  R8 K9 R7     ; R8["item"] := R7
 40 [-]: GETGLOBAL R9 K11       ; R9 := mInstalledGrid
 41 [-]: SETTABLE  R8 K10 R9    ; R8[0xf73486b6] := R9
 42 [-]: SETTABLE  R8 K12 R0    ; R8[0x33bdd652] := R0
 43 [-]: GETUPVAL  R9 U0        ; R9 := U0
 44 [-]: GETGLOBAL R10 K5       ; R10 := mCollectionGrid
 45 [-]: MOVE      R11 R8       ; R11 := R8
 46 [-]: GETGLOBAL R12 K5       ; R12 := mCollectionGrid
 47 [-]: GETTABLE  R12 R12 K6   ; R12 := R12["mElements"]
 48 [-]: GETTABLE  R12 R12 R6   ; R12 := R12[R6]
 49 [-]: MOVE      R13 R1       ; R13 := R1
 50 [-]: LOADKB    R14 0 0      ; R14 := false
 51 [-]: MOVE      R15 R2       ; R15 := R2
 52 [-]: CALL      R9 7 1       ; R9(R10,R11,R12,R13,R14,R15)
 53 [-]: JMP       55           ; PC := 55
 54 [-]: FORLOOP   R3 20        ; R3 += R5; if R3 <= R4 then begin PC := 20; R6 := R3 end
 55 [-]: RETURN    R0 1         ; return 


; Function #79:
;
; Name:            
; Defined at line: 3366
; #Upvalues:       2
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x03f57322
  2 [-]: MOVE      R2 R0        ; R2 := R0
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: EQ        0 R1 K2      ; if R1 ~= 4.000000 then PC := 18
  5 [-]: JMP       18           ; PC := 18
  6 [-]: GETGLOBAL R1 K3        ; R1 := mInstalledGrid
  7 [-]: SELF      R1 R1 K4     ; R2 := R1; R1 := R1[0xea061e98]
  8 [-]: CLOSURE   R3 0         ; R3 := closure(Function #79.1)
  9 [-]: GETUPVAL  R0 U0        ; R0 := U0
 10 [-]: CALL      R1 3 1       ; R1(R2,R3)
 11 [-]: GETGLOBAL R1 K5        ; R1 := _T
 12 [-]: GETTABLE  R1 R1 K6     ; R1 := R1["skipRemoveStatUpdate"]
 13 [-]: TEST      R1 1         ; if R1 then PC := 18
 14 [-]: JMP       18           ; PC := 18
 15 [-]: GETUPVAL  R1 U1        ; R1 := U1
 16 [-]: LOADKB    R2 1 0       ; R2 := true
 17 [-]: CALL      R1 2 1       ; R1(R2)
 18 [-]: GETGLOBAL R1 K5        ; R1 := _T
 19 [-]: SETTABLE  R1 K6 K7     ; R1["skipRemoveStatUpdate"] := nil
 20 [-]: RETURN    R0 1         ; return 


; Function #79.1:
;
; Name:            
; Defined at line: 3369
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETUPVAL  R1 U0        ; R1 := U0
  2 [-]: MOVE      R2 R0        ; R2 := R0
  3 [-]: LOADKB    R3 1 0       ; R3 := true
  4 [-]: LOADKB    R4 1 0       ; R4 := true
  5 [-]: CALL      R1 4 1       ; R1(R2,R3,R4)
  6 [-]: RETURN    R0 1         ; return 


; Function #80:
;
; Name:            
; Defined at line: 3380
; #Upvalues:       3
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: TEST      R1 0         ; if not R1 then PC := 14
  2 [-]: JMP       14           ; PC := 14
  3 [-]: GETGLOBAL R2 K0        ; R2 := mInstalledGrid
  4 [-]: SELF      R2 R2 K1     ; R3 := R2; R2 := R2[0xea061e98]
  5 [-]: CLOSURE   R4 0         ; R4 := closure(Function #80.1)
  6 [-]: GETUPVAL  R0 U0        ; R0 := U0
  7 [-]: CALL      R2 3 1       ; R2(R3,R4)
  8 [-]: TEST      R0 1         ; if R0 then PC := 21
  9 [-]: JMP       21           ; PC := 21
 10 [-]: GETUPVAL  R2 U1        ; R2 := U1
 11 [-]: LOADKB    R3 1 0       ; R3 := true
 12 [-]: CALL      R2 2 1       ; R2(R3)
 13 [-]: JMP       21           ; PC := 21
 14 [-]: GETGLOBAL R2 K2        ; R2 := _T
 15 [-]: SETTABLE  R2 K3 R0     ; R2["skipRemoveStatUpdate"] := R0
 16 [-]: GETUPVAL  R2 U2        ; R2 := U2
 17 [-]: GETTABLE  R2 R2 K4     ; R2 := R2[0xf616a184]
 18 [-]: LOADK     R3 K5        ; R3 := "/Lotus/Language/SystemMessages/ConfirmRemoveUpgrades"
 19 [-]: LOADK     R4 K6        ; R4 := "ConfirmRemoveAll"
 20 [-]: CALL      R2 3 1       ; R2(R3,R4)
 21 [-]: RETURN    R0 1         ; return 


; Function #80.1:
;
; Name:            
; Defined at line: 3383
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETUPVAL  R1 U0        ; R1 := U0
  2 [-]: MOVE      R2 R0        ; R2 := R0
  3 [-]: LOADKB    R3 1 0       ; R3 := true
  4 [-]: LOADKB    R4 1 0       ; R4 := true
  5 [-]: CALL      R1 4 1       ; R1(R2,R3,R4)
  6 [-]: RETURN    R0 1         ; return 


; Function #81:
;
; Name:            
; Defined at line: 3396
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETUPVAL  R0 U0        ; R0 := U0
  2 [-]: CALL      R0 1 1       ; R0()
  3 [-]: RETURN    R0 1         ; return 


; Function #82:
;
; Name:            
; Defined at line: 3402
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  11

  1 [-]: GETGLOBAL R1 K0        ; R1 := mInstalledGrid
  2 [-]: SELF      R1 R1 K1     ; R2 := R1; R1 := R1[0xf73486b6]
  3 [-]: GETGLOBAL R3 K2        ; R3 := AURA_SLOT_INDEX
  4 [-]: CALL      R1 3 2       ; R1 := R1(R2,R3)
  5 [-]: GETGLOBAL R2 K3        ; R2 := 0x33bdd652
  6 [-]: GETTABLE  R2 R2 K4     ; R2 := R2[0xf21b1d8e]
  7 [-]: MOVE      R3 R0        ; R3 := R0
  8 [-]: CLOSURE   R4 0         ; R4 := closure(Function #82.1)
  9 [-]: MOVE      R0 R1        ; R0 := R1
 10 [-]: CALL      R2 3 1       ; R2(R3,R4)
 11 [-]: GETTABLE  R2 R0 K5     ; R2 := R0[1.000000]
 12 [-]: NEWTABLE  R3 0 3       ; R3 := {}
 13 [-]: GETGLOBAL R4 K7        ; R4 := mCards
 14 [-]: GETTABLE  R5 R2 K8     ; R5 := R2["mCollectionIndex"]
 15 [-]: GETTABLE  R4 R4 R5     ; R4 := R4[R5]
 16 [-]: SETTABLE  R3 K6 R4     ; R3["item"] := R4
 17 [-]: GETGLOBAL R4 K10       ; R4 := mCollectionGrid
 18 [-]: SETTABLE  R3 K9 R4     ; R3["grid"] := R4
 19 [-]: GETGLOBAL R4 K10       ; R4 := mCollectionGrid
 20 [-]: GETTABLE  R4 R4 K12    ; R4 := R4["mUnfilteredElements"]
 21 [-]: GETTABLE  R5 R2 K8     ; R5 := R2["mCollectionIndex"]
 22 [-]: GETTABLE  R4 R4 R5     ; R4 := R4[R5]
 23 [-]: SETTABLE  R3 K11 R4    ; R3["element"] := R4
 24 [-]: GETUPVAL  R4 U0        ; R4 := U0
 25 [-]: GETGLOBAL R5 K0        ; R5 := mInstalledGrid
 26 [-]: MOVE      R6 R3        ; R6 := R3
 27 [-]: MOVE      R7 R1        ; R7 := R1
 28 [-]: LOADKB    R8 1 0       ; R8 := true
 29 [-]: LOADKB    R9 0 0       ; R9 := false
 30 [-]: LOADKB    R10 1 0      ; R10 := true
 31 [-]: CALL      R4 7 2       ; R4 := R4(R5,R6,R7,R8,R9,R10)
 32 [-]: TEST      R4 0         ; if not R4 then PC := 40
 33 [-]: JMP       40           ; PC := 40
 34 [-]: GETGLOBAL R4 K0        ; R4 := mInstalledGrid
 35 [-]: GETTABLE  R4 R4 K13    ; R4 := R4[0xd838387b]
 36 [-]: MOVE      R5 R1        ; R5 := R1
 37 [-]: CALL      R4 2 1       ; R4(R5)
 38 [-]: LOADKB    R4 1 0       ; R4 := true
 39 [-]: RETURN    R4 2         ; return R4
 40 [-]: LOADKB    R4 0 0       ; R4 := false
 41 [-]: RETURN    R4 2         ; return R4
 42 [-]: RETURN    R0 1         ; return 


; Function #82.1:
;
; Name:            
; Defined at line: 3405
; #Upvalues:       1
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mPolarity"]
  2 [-]: GETUPVAL  R3 U0        ; R3 := U0
  3 [-]: GETTABLE  R3 R3 K0     ; R3 := R3["mPolarity"]
  4 [-]: EQ        0 R2 R3      ; if R2 ~= R3 then PC := 14
  5 [-]: JMP       14           ; PC := 14
  6 [-]: GETTABLE  R2 R1 K0     ; R2 := R1["mPolarity"]
  7 [-]: GETUPVAL  R3 U0        ; R3 := U0
  8 [-]: GETTABLE  R3 R3 K0     ; R3 := R3["mPolarity"]
  9 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 14
 10 [-]: JMP       14           ; PC := 14
 11 [-]: LOADKB    R2 1 0       ; R2 := true
 12 [-]: RETURN    R2 2         ; return R2
 13 [-]: JMP       54           ; PC := 54
 14 [-]: GETTABLE  R2 R1 K0     ; R2 := R1["mPolarity"]
 15 [-]: GETUPVAL  R3 U0        ; R3 := U0
 16 [-]: GETTABLE  R3 R3 K0     ; R3 := R3["mPolarity"]
 17 [-]: EQ        0 R2 R3      ; if R2 ~= R3 then PC := 27
 18 [-]: JMP       27           ; PC := 27
 19 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mPolarity"]
 20 [-]: GETUPVAL  R3 U0        ; R3 := U0
 21 [-]: GETTABLE  R3 R3 K0     ; R3 := R3["mPolarity"]
 22 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 27
 23 [-]: JMP       27           ; PC := 27
 24 [-]: LOADKB    R2 0 0       ; R2 := false
 25 [-]: RETURN    R2 2         ; return R2
 26 [-]: JMP       54           ; PC := 54
 27 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mPolarity"]
 28 [-]: EQ        0 R2 K2      ; if R2 ~= 0.000000 then PC := 41
 29 [-]: JMP       41           ; PC := 41
 30 [-]: GETTABLE  R2 R1 K0     ; R2 := R1["mPolarity"]
 31 [-]: EQ        1 R2 K2      ; if R2 == 0.000000 then PC := 41
 32 [-]: JMP       41           ; PC := 41
 33 [-]: GETTABLE  R2 R1 K0     ; R2 := R1["mPolarity"]
 34 [-]: GETUPVAL  R3 U0        ; R3 := U0
 35 [-]: GETTABLE  R3 R3 K0     ; R3 := R3["mPolarity"]
 36 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 41
 37 [-]: JMP       41           ; PC := 41
 38 [-]: LOADKB    R2 1 0       ; R2 := true
 39 [-]: RETURN    R2 2         ; return R2
 40 [-]: JMP       54           ; PC := 54
 41 [-]: GETTABLE  R2 R1 K0     ; R2 := R1["mPolarity"]
 42 [-]: EQ        0 R2 K2      ; if R2 ~= 0.000000 then PC := 54
 43 [-]: JMP       54           ; PC := 54
 44 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mPolarity"]
 45 [-]: EQ        1 R2 K2      ; if R2 == 0.000000 then PC := 54
 46 [-]: JMP       54           ; PC := 54
 47 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mPolarity"]
 48 [-]: GETUPVAL  R3 U0        ; R3 := U0
 49 [-]: GETTABLE  R3 R3 K0     ; R3 := R3["mPolarity"]
 50 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 54
 51 [-]: JMP       54           ; PC := 54
 52 [-]: LOADKB    R2 0 0       ; R2 := false
 53 [-]: RETURN    R2 2         ; return R2
 54 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["mRating"]
 55 [-]: GETTABLE  R3 R1 K3     ; R3 := R1["mRating"]
 56 [-]: EQ        0 R2 R3      ; if R2 ~= R3 then PC := 76
 57 [-]: JMP       76           ; PC := 76
 58 [-]: GETTABLE  R2 R0 K4     ; R2 := R0["mRarity"]
 59 [-]: GETTABLE  R3 R1 K4     ; R3 := R1["mRarity"]
 60 [-]: EQ        0 R2 R3      ; if R2 ~= R3 then PC := 69
 61 [-]: JMP       69           ; PC := 69
 62 [-]: GETTABLE  R2 R0 K5     ; R2 := R0["mName"]
 63 [-]: GETTABLE  R3 R1 K5     ; R3 := R1["mName"]
 64 [-]: LT        1 R2 R3      ; if R2 < R3 then PC := 67
 65 [-]: JMP       67           ; PC := 67
 66 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 67
 67 [-]: LOADKB    R2 1 0       ; R2 := true
 68 [-]: RETURN    R2 2         ; return R2
 69 [-]: GETTABLE  R2 R0 K4     ; R2 := R0["mRarity"]
 70 [-]: GETTABLE  R3 R1 K4     ; R3 := R1["mRarity"]
 71 [-]: LT        1 R3 R2      ; if R3 < R2 then PC := 74
 72 [-]: JMP       74           ; PC := 74
 73 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 74
 74 [-]: LOADKB    R2 1 0       ; R2 := true
 75 [-]: RETURN    R2 2         ; return R2
 76 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["mRating"]
 77 [-]: GETTABLE  R3 R1 K3     ; R3 := R1["mRating"]
 78 [-]: LT        1 R3 R2      ; if R3 < R2 then PC := 81
 79 [-]: JMP       81           ; PC := 81
 80 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 81
 81 [-]: LOADKB    R2 1 0       ; R2 := true
 82 [-]: RETURN    R2 2         ; return R2
 83 [-]: RETURN    R0 1         ; return 


; Function #83:
;
; Name:            
; Defined at line: 3438
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  11

  1 [-]: GETGLOBAL R1 K0        ; R1 := mInstalledGrid
  2 [-]: SELF      R1 R1 K1     ; R2 := R1; R1 := R1[0xf73486b6]
  3 [-]: GETGLOBAL R3 K2        ; R3 := MELEE_STANCE_SLOT
  4 [-]: CALL      R1 3 2       ; R1 := R1(R2,R3)
  5 [-]: GETGLOBAL R2 K3        ; R2 := 0x33bdd652
  6 [-]: GETTABLE  R2 R2 K4     ; R2 := R2[0xf21b1d8e]
  7 [-]: MOVE      R3 R0        ; R3 := R0
  8 [-]: CLOSURE   R4 0         ; R4 := closure(Function #83.1)
  9 [-]: MOVE      R0 R1        ; R0 := R1
 10 [-]: CALL      R2 3 1       ; R2(R3,R4)
 11 [-]: GETTABLE  R2 R0 K5     ; R2 := R0[1.000000]
 12 [-]: NEWTABLE  R3 0 3       ; R3 := {}
 13 [-]: GETGLOBAL R4 K7        ; R4 := mCards
 14 [-]: GETTABLE  R5 R2 K8     ; R5 := R2["mCollectionIndex"]
 15 [-]: GETTABLE  R4 R4 R5     ; R4 := R4[R5]
 16 [-]: SETTABLE  R3 K6 R4     ; R3["item"] := R4
 17 [-]: GETGLOBAL R4 K10       ; R4 := mCollectionGrid
 18 [-]: SETTABLE  R3 K9 R4     ; R3["grid"] := R4
 19 [-]: GETGLOBAL R4 K10       ; R4 := mCollectionGrid
 20 [-]: GETTABLE  R4 R4 K12    ; R4 := R4["mUnfilteredElements"]
 21 [-]: GETTABLE  R5 R2 K8     ; R5 := R2["mCollectionIndex"]
 22 [-]: GETTABLE  R4 R4 R5     ; R4 := R4[R5]
 23 [-]: SETTABLE  R3 K11 R4    ; R3["element"] := R4
 24 [-]: GETUPVAL  R4 U0        ; R4 := U0
 25 [-]: GETGLOBAL R5 K0        ; R5 := mInstalledGrid
 26 [-]: MOVE      R6 R3        ; R6 := R3
 27 [-]: MOVE      R7 R1        ; R7 := R1
 28 [-]: LOADKB    R8 1 0       ; R8 := true
 29 [-]: LOADKB    R9 0 0       ; R9 := false
 30 [-]: LOADKB    R10 1 0      ; R10 := true
 31 [-]: CALL      R4 7 2       ; R4 := R4(R5,R6,R7,R8,R9,R10)
 32 [-]: TEST      R4 0         ; if not R4 then PC := 40
 33 [-]: JMP       40           ; PC := 40
 34 [-]: GETGLOBAL R4 K0        ; R4 := mInstalledGrid
 35 [-]: GETTABLE  R4 R4 K13    ; R4 := R4[0xd838387b]
 36 [-]: MOVE      R5 R1        ; R5 := R1
 37 [-]: CALL      R4 2 1       ; R4(R5)
 38 [-]: LOADKB    R4 1 0       ; R4 := true
 39 [-]: RETURN    R4 2         ; return R4
 40 [-]: LOADKB    R4 0 0       ; R4 := false
 41 [-]: RETURN    R4 2         ; return R4
 42 [-]: RETURN    R0 1         ; return 


; Function #83.1:
;
; Name:            
; Defined at line: 3441
; #Upvalues:       1
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mPolarity"]
  2 [-]: GETUPVAL  R3 U0        ; R3 := U0
  3 [-]: GETTABLE  R3 R3 K0     ; R3 := R3["mPolarity"]
  4 [-]: EQ        0 R2 R3      ; if R2 ~= R3 then PC := 14
  5 [-]: JMP       14           ; PC := 14
  6 [-]: GETTABLE  R2 R1 K0     ; R2 := R1["mPolarity"]
  7 [-]: GETUPVAL  R3 U0        ; R3 := U0
  8 [-]: GETTABLE  R3 R3 K0     ; R3 := R3["mPolarity"]
  9 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 14
 10 [-]: JMP       14           ; PC := 14
 11 [-]: LOADKB    R2 1 0       ; R2 := true
 12 [-]: RETURN    R2 2         ; return R2
 13 [-]: JMP       54           ; PC := 54
 14 [-]: GETTABLE  R2 R1 K0     ; R2 := R1["mPolarity"]
 15 [-]: GETUPVAL  R3 U0        ; R3 := U0
 16 [-]: GETTABLE  R3 R3 K0     ; R3 := R3["mPolarity"]
 17 [-]: EQ        0 R2 R3      ; if R2 ~= R3 then PC := 27
 18 [-]: JMP       27           ; PC := 27
 19 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mPolarity"]
 20 [-]: GETUPVAL  R3 U0        ; R3 := U0
 21 [-]: GETTABLE  R3 R3 K0     ; R3 := R3["mPolarity"]
 22 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 27
 23 [-]: JMP       27           ; PC := 27
 24 [-]: LOADKB    R2 0 0       ; R2 := false
 25 [-]: RETURN    R2 2         ; return R2
 26 [-]: JMP       54           ; PC := 54
 27 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mPolarity"]
 28 [-]: EQ        0 R2 K2      ; if R2 ~= 0.000000 then PC := 41
 29 [-]: JMP       41           ; PC := 41
 30 [-]: GETTABLE  R2 R1 K0     ; R2 := R1["mPolarity"]
 31 [-]: EQ        1 R2 K2      ; if R2 == 0.000000 then PC := 41
 32 [-]: JMP       41           ; PC := 41
 33 [-]: GETTABLE  R2 R1 K0     ; R2 := R1["mPolarity"]
 34 [-]: GETUPVAL  R3 U0        ; R3 := U0
 35 [-]: GETTABLE  R3 R3 K0     ; R3 := R3["mPolarity"]
 36 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 41
 37 [-]: JMP       41           ; PC := 41
 38 [-]: LOADKB    R2 1 0       ; R2 := true
 39 [-]: RETURN    R2 2         ; return R2
 40 [-]: JMP       54           ; PC := 54
 41 [-]: GETTABLE  R2 R1 K0     ; R2 := R1["mPolarity"]
 42 [-]: EQ        0 R2 K2      ; if R2 ~= 0.000000 then PC := 54
 43 [-]: JMP       54           ; PC := 54
 44 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mPolarity"]
 45 [-]: EQ        1 R2 K2      ; if R2 == 0.000000 then PC := 54
 46 [-]: JMP       54           ; PC := 54
 47 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mPolarity"]
 48 [-]: GETUPVAL  R3 U0        ; R3 := U0
 49 [-]: GETTABLE  R3 R3 K0     ; R3 := R3["mPolarity"]
 50 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 54
 51 [-]: JMP       54           ; PC := 54
 52 [-]: LOADKB    R2 0 0       ; R2 := false
 53 [-]: RETURN    R2 2         ; return R2
 54 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["mRating"]
 55 [-]: GETTABLE  R3 R1 K3     ; R3 := R1["mRating"]
 56 [-]: EQ        0 R2 R3      ; if R2 ~= R3 then PC := 76
 57 [-]: JMP       76           ; PC := 76
 58 [-]: GETTABLE  R2 R0 K4     ; R2 := R0["mRarity"]
 59 [-]: GETTABLE  R3 R1 K4     ; R3 := R1["mRarity"]
 60 [-]: EQ        0 R2 R3      ; if R2 ~= R3 then PC := 69
 61 [-]: JMP       69           ; PC := 69
 62 [-]: GETTABLE  R2 R0 K5     ; R2 := R0["mName"]
 63 [-]: GETTABLE  R3 R1 K5     ; R3 := R1["mName"]
 64 [-]: LT        1 R2 R3      ; if R2 < R3 then PC := 67
 65 [-]: JMP       67           ; PC := 67
 66 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 67
 67 [-]: LOADKB    R2 1 0       ; R2 := true
 68 [-]: RETURN    R2 2         ; return R2
 69 [-]: GETTABLE  R2 R0 K4     ; R2 := R0["mRarity"]
 70 [-]: GETTABLE  R3 R1 K4     ; R3 := R1["mRarity"]
 71 [-]: LT        1 R3 R2      ; if R3 < R2 then PC := 74
 72 [-]: JMP       74           ; PC := 74
 73 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 74
 74 [-]: LOADKB    R2 1 0       ; R2 := true
 75 [-]: RETURN    R2 2         ; return R2
 76 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["mRating"]
 77 [-]: GETTABLE  R3 R1 K3     ; R3 := R1["mRating"]
 78 [-]: LT        1 R3 R2      ; if R3 < R2 then PC := 81
 79 [-]: JMP       81           ; PC := 81
 80 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 81
 81 [-]: LOADKB    R2 1 0       ; R2 := true
 82 [-]: RETURN    R2 2         ; return R2
 83 [-]: RETURN    R0 1         ; return 


; Function #84:
;
; Name:            
; Defined at line: 3474
; #Upvalues:       5
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  13

  1 [-]: GETGLOBAL R2 K0        ; R2 := mCardSlots
  2 [-]: CONST     R3 1         ; R3 := 1.000000
  3 [-]: CONST     R4 -1        ; R4 := -1.000000
  4 [-]: FORPREP   R2 70        ; R2 -= R4; PC := 70
  5 [-]: GETGLOBAL R6 K1        ; R6 := AURA_SLOT_INDEX
  6 [-]: EQ        0 R5 R6      ; if R5 ~= R6 then PC := 15
  7 [-]: JMP       15           ; PC := 15
  8 [-]: GETUPVAL  R6 U0        ; R6 := U0
  9 [-]: CALL      R6 1 2       ; R6 := R6()
 10 [-]: TEST      R6 1         ; if R6 then PC := 17
 11 [-]: JMP       17           ; PC := 17
 12 [-]: GETUPVAL  R6 U1        ; R6 := U1
 13 [-]: CALL      R6 1 2       ; R6 := R6()
 14 [-]: JMP       17           ; PC := 17
 15 [-]: LOADKB    R6 0 1       ; R6 := false; PC := 16
 16 [-]: LOADKB    R6 1 0       ; R6 := true
 17 [-]: GETGLOBAL R7 K2        ; R7 := MELEE_STANCE_SLOT
 18 [-]: EQ        0 R5 R7      ; if R5 ~= R7 then PC := 23
 19 [-]: JMP       23           ; PC := 23
 20 [-]: GETUPVAL  R7 U2        ; R7 := U2
 21 [-]: CALL      R7 1 2       ; R7 := R7()
 22 [-]: JMP       25           ; PC := 25
 23 [-]: LOADKB    R7 0 1       ; R7 := false; PC := 24
 24 [-]: LOADKB    R7 1 0       ; R7 := true
 25 [-]: GETUPVAL  R8 U3        ; R8 := U3
 26 [-]: GETTABLE  R8 R8 K3     ; R8 := R8[0xba7a0a82]
 27 [-]: GETUPVAL  R9 U4        ; R9 := U4
 28 [-]: GETTABLE  R9 R9 K4     ; R9 := R9["type"]
 29 [-]: MOVE      R10 R5       ; R10 := R5
 30 [-]: CALL      R8 3 2       ; R8 := R8(R9,R10)
 31 [-]: GETGLOBAL R9 K5        ; R9 := mInstalledGrid
 32 [-]: SELF      R9 R9 K6     ; R10 := R9; R9 := R9[0xf73486b6]
 33 [-]: MOVE      R11 R5       ; R11 := R5
 34 [-]: CALL      R9 3 2       ; R9 := R9(R10,R11)
 35 [-]: GETTABLE  R10 R9 K7    ; R10 := R9["mCardIndex"]
 36 [-]: EQ        0 R10 K8     ; if R10 ~= -1.000000 then PC := 70
 37 [-]: JMP       70           ; PC := 70
 38 [-]: TEST      R6 1         ; if R6 then PC := 70
 39 [-]: JMP       70           ; PC := 70
 40 [-]: TEST      R7 1         ; if R7 then PC := 70
 41 [-]: JMP       70           ; PC := 70
 42 [-]: TEST      R8 0         ; if not R8 then PC := 54
 43 [-]: JMP       54           ; PC := 54
 44 [-]: GETUPVAL  R10 U4       ; R10 := U4
 45 [-]: GETTABLE  R10 R10 K9   ; R10 := R10["info"]
 46 [-]: SELF      R10 R10 K10  ; R11 := R10; R10 := R10[0xdbfbf6c0]
 47 [-]: CONST     R12 1        ; R12 := 1.000000
 48 [-]: CALL      R10 3 2      ; R10 := R10(R11,R12)
 49 [-]: TEST      R10 0        ; if not R10 then PC := 70
 50 [-]: JMP       70           ; PC := 70
 51 [-]: GETTABLE  R10 R0 K12   ; R10 := R0["mIsUtility"]
 52 [-]: TEST      R10 0        ; if not R10 then PC := 70
 53 [-]: JMP       70           ; PC := 70
 54 [-]: GETTABLE  R10 R0 K13   ; R10 := R0["mPolarity"]
 55 [-]: GETTABLE  R11 R9 K13   ; R11 := R9["mPolarity"]
 56 [-]: EQ        0 R10 R11    ; if R10 ~= R11 then PC := 61
 57 [-]: JMP       61           ; PC := 61
 58 [-]: MOVE      R1 R9        ; R1 := R9
 59 [-]: JMP       71           ; PC := 71
 60 [-]: JMP       70           ; PC := 70
 61 [-]: EQ        1 R1 K14     ; if R1 == nil then PC := 69
 62 [-]: JMP       69           ; PC := 69
 63 [-]: GETTABLE  R10 R9 K13   ; R10 := R9["mPolarity"]
 64 [-]: EQ        0 R10 K15    ; if R10 ~= 0.000000 then PC := 70
 65 [-]: JMP       70           ; PC := 70
 66 [-]: GETTABLE  R10 R1 K13   ; R10 := R1["mPolarity"]
 67 [-]: EQ        1 R10 K15    ; if R10 == 0.000000 then PC := 70
 68 [-]: JMP       70           ; PC := 70
 69 [-]: MOVE      R1 R9        ; R1 := R9
 70 [-]: FORLOOP   R2 5         ; R2 += R4; if R2 <= R3 then begin PC := 5; R5 := R2 end
 71 [-]: RETURN    R1 2         ; return R1
 72 [-]: RETURN    R0 1         ; return 


; Function #85:
;
; Name:            
; Defined at line: 3495
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: NEWTABLE  R1 0 11      ; R1 := {}
  2 [-]: SETTABLE  R1 K1 K2     ; R1[3.000000] := true
  3 [-]: SETTABLE  R1 K3 K2     ; R1[4.000000] := true
  4 [-]: SETTABLE  R1 K4 K2     ; R1[5.000000] := true
  5 [-]: SETTABLE  R1 K5 K2     ; R1[6.000000] := true
  6 [-]: SETTABLE  R1 K6 K2     ; R1[11.000000] := true
  7 [-]: SETTABLE  R1 K7 K2     ; R1[7.000000] := true
  8 [-]: SETTABLE  R1 K8 K2     ; R1[8.000000] := true
  9 [-]: SETTABLE  R1 K9 K2     ; R1[9.000000] := true
 10 [-]: SETTABLE  R1 K10 K2    ; R1[10.000000] := true
 11 [-]: SETTABLE  R1 K6 K2     ; R1[11.000000] := true
 12 [-]: SETTABLE  R1 K11 K2    ; R1[12.000000] := true
 13 [-]: GETTABLE  R2 R1 R0     ; R2 := R1[R0]
 14 [-]: EQ        1 R2 K12     ; if R2 == nil then PC := 19
 15 [-]: JMP       19           ; PC := 19
 16 [-]: GETTABLE  R2 R1 R0     ; R2 := R1[R0]
 17 [-]: RETURN    R2 2         ; return R2
 18 [-]: JMP       21           ; PC := 21
 19 [-]: LOADKB    R2 0 0       ; R2 := false
 20 [-]: RETURN    R2 2         ; return R2
 21 [-]: RETURN    R0 1         ; return 


; Function #86:
;
; Name:            
; Defined at line: 3517
; #Upvalues:       2
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  24

  1 [-]: CONST     R2 0         ; R2 := 0.000000
  2 [-]: NEWTABLE  R3 0 0       ; R3 := {}
  3 [-]: SELF      R4 R1 K0     ; R5 := R1; R4 := R1[0xe7f79201]
  4 [-]: CALL      R4 2 2       ; R4 := R4(R5)
  5 [-]: SELF      R5 R1 K1     ; R6 := R1; R5 := R1[0x4f0431d8]
  6 [-]: CONST     R7 0         ; R7 := 0.000000
  7 [-]: CALL      R5 3 2       ; R5 := R5(R6,R7)
  8 [-]: GETTABLE  R6 R4 K2     ; R6 := R4["criticalChance"]
  9 [-]: GETTABLE  R7 R4 K3     ; R7 := R4["baseProcChance"]
 10 [-]: SELF      R8 R5 K4     ; R9 := R5; R8 := R5[0xf2deaf69]
 11 [-]: GETGLOBAL R10 K5       ; R10 := gLotusWeaponProjectileFireBehaviorType
 12 [-]: CALL      R8 3 2       ; R8 := R8(R9,R10)
 13 [-]: TEST      R8 0         ; if not R8 then PC := 21
 14 [-]: JMP       21           ; PC := 21
 15 [-]: SELF      R8 R5 K6     ; R9 := R5; R8 := R5[0xdf2dd110]
 16 [-]: CALL      R8 2 2       ; R8 := R8(R9)
 17 [-]: MOVE      R6 R8        ; R6 := R8
 18 [-]: SELF      R8 R5 K7     ; R9 := R5; R8 := R5[0x7d589371]
 19 [-]: CALL      R8 2 2       ; R8 := R8(R9)
 20 [-]: MOVE      R7 R8        ; R7 := R8
 21 [-]: GETGLOBAL R8 K8        ; R8 := 0x42dcc9f5
 22 [-]: DIV       R9 R6 R7     ; R9 := R6 / R7
 23 [-]: CONST     R10 0        ; R10 := 0.000000
 24 [-]: CONST     R11 5        ; R11 := 5.000000
 25 [-]: CALL      R8 4 2       ; R8 := R8(R9,R10,R11)
 26 [-]: GETGLOBAL R9 K8        ; R9 := 0x42dcc9f5
 27 [-]: DIV       R10 K9 R8    ; R10 := 1.000000 / R8
 28 [-]: CONST     R11 0        ; R11 := 0.000000
 29 [-]: CONST     R12 5        ; R12 := 5.000000
 30 [-]: CALL      R9 4 2       ; R9 := R9(R10,R11,R12)
 31 [-]: NEWTABLE  R10 0 0      ; R10 := {}
 32 [-]: SETTABLE  R3 K11 K12   ; R3[223.000000] := 10.000000
 33 [-]: SETTABLE  R3 K13 K12   ; R3[239.000000] := 10.000000
 34 [-]: SETTABLE  R3 K14 K12   ; R3[282.000000] := 10.000000
 35 [-]: SETTABLE  R3 K15 R8    ; R3[216.000000] := R8
 36 [-]: SETTABLE  R3 K16 R8    ; R3[218.000000] := R8
 37 [-]: SETTABLE  R3 K17 R8    ; R3[270.000000] := R8
 38 [-]: SETTABLE  R3 K18 R8    ; R3[278.000000] := R8
 39 [-]: DIV       R11 R8 K20   ; R11 := R8 / 20.000000
 40 [-]: SETTABLE  R3 K19 R11   ; R3[272.000000] := R11
 41 [-]: MUL       R11 R8 K22   ; R11 := R8 * 5.000000
 42 [-]: SETTABLE  R3 K21 R11   ; R3[219.000000] := R11
 43 [-]: SETTABLE  R3 K23 R9    ; R3[279.000000] := R9
 44 [-]: SETTABLE  R3 K24 R9    ; R3[280.000000] := R9
 45 [-]: GETGLOBAL R11 K8       ; R11 := 0x42dcc9f5
 46 [-]: MUL       R12 R9 R9    ; R12 := R9 * R9
 47 [-]: CONST     R13 0        ; R13 := 0.000000
 48 [-]: CONST     R14 5        ; R14 := 5.000000
 49 [-]: CALL      R11 4 2      ; R11 := R11(R12,R13,R14)
 50 [-]: SETTABLE  R3 K25 R11   ; R3[313.000000] := R11
 51 [-]: SETTABLE  R3 K26 K9    ; R3[306.000000] := 1.000000
 52 [-]: SETTABLE  R3 K27 K28   ; R3[240.000000] := 1.500000
 53 [-]: SELF      R11 R4 K29   ; R12 := R4; R11 := R4[0x56b2aae2]
 54 [-]: CONST     R13 2        ; R13 := 2.000000
 55 [-]: CALL      R11 3 2      ; R11 := R11(R12,R13)
 56 [-]: SELF      R12 R4 K29   ; R13 := R4; R12 := R4[0x56b2aae2]
 57 [-]: CONST     R14 0        ; R14 := 0.000000
 58 [-]: CALL      R12 3 2      ; R12 := R12(R13,R14)
 59 [-]: SELF      R13 R4 K29   ; R14 := R4; R13 := R4[0x56b2aae2]
 60 [-]: CONST     R15 1        ; R15 := 1.000000
 61 [-]: CALL      R13 3 2      ; R13 := R13(R14,R15)
 62 [-]: GETUPVAL  R14 U0       ; R14 := U0
 63 [-]: GETTABLE  R14 R14 K32  ; R14 := R14[0x06d055f9]
 64 [-]: LT        1 K33 R11    ; if 0.500000 < R11 then PC := 67
 65 [-]: JMP       67           ; PC := 67
 66 [-]: LOADKB    R15 0 1      ; R15 := false; PC := 67
 67 [-]: LOADKB    R15 1 0      ; R15 := true
 68 [-]: CONST     R16 1        ; R16 := 1.000000
 69 [-]: CONST     R17 0        ; R17 := 0.000000
 70 [-]: CALL      R14 4 2      ; R14 := R14(R15,R16,R17)
 71 [-]: SETTABLE  R10 K31 R14  ; R10[2.000000] := R14
 72 [-]: GETUPVAL  R14 U0       ; R14 := U0
 73 [-]: GETTABLE  R14 R14 K32  ; R14 := R14[0x06d055f9]
 74 [-]: LT        1 K33 R12    ; if 0.500000 < R12 then PC := 77
 75 [-]: JMP       77           ; PC := 77
 76 [-]: LOADKB    R15 0 1      ; R15 := false; PC := 77
 77 [-]: LOADKB    R15 1 0      ; R15 := true
 78 [-]: CONST     R16 1        ; R16 := 1.000000
 79 [-]: CONST     R17 0        ; R17 := 0.000000
 80 [-]: CALL      R14 4 2      ; R14 := R14(R15,R16,R17)
 81 [-]: SETTABLE  R10 K34 R14  ; R10[0.000000] := R14
 82 [-]: GETUPVAL  R14 U0       ; R14 := U0
 83 [-]: GETTABLE  R14 R14 K32  ; R14 := R14[0x06d055f9]
 84 [-]: LT        1 K33 R13    ; if 0.500000 < R13 then PC := 87
 85 [-]: JMP       87           ; PC := 87
 86 [-]: LOADKB    R15 0 1      ; R15 := false; PC := 87
 87 [-]: LOADKB    R15 1 0      ; R15 := true
 88 [-]: CONST     R16 1        ; R16 := 1.000000
 89 [-]: CONST     R17 0        ; R17 := 0.000000
 90 [-]: CALL      R14 4 2      ; R14 := R14(R15,R16,R17)
 91 [-]: SETTABLE  R10 K9 R14   ; R10[1.000000] := R14
 92 [-]: GETTABLE  R14 R0 K35   ; R14 := R0["mUpgrade"]
 93 [-]: GETTABLE  R14 R14 K36  ; R14 := R14["mInstance"]
 94 [-]: SELF      R15 R14 K37  ; R16 := R14; R15 := R14[0x96284d62]
 95 [-]: GETTABLE  R17 R0 K35   ; R17 := R0["mUpgrade"]
 96 [-]: GETTABLE  R17 R17 K38  ; R17 := R17["mUpgradeFingerprint"]
 97 [-]: SELF      R18 R1 K39   ; R19 := R1; R18 := R1[0xcde10c4a]
 98 [-]: CALL      R18 2 0      ; R18,... := R18(R19)
 99 [-]: CALL      R15 0 2      ; R15 := R15(R16,...)
100 [-]: CONST     R16 1        ; R16 := 1.000000
101 [-]: SELF      R17 R14 K40  ; R18 := R14; R17 := R14[0x0ad758cb]
102 [-]: CALL      R17 2 2      ; R17 := R17(R18)
103 [-]: CONST     R18 1        ; R18 := 1.000000
104 [-]: FORPREP   R16 169      ; R16 -= R18; PC := 169
105 [-]: GETTABLE  R20 R15 R19  ; R20 := R15[R19]
106 [-]: SELF      R20 R20 K41  ; R21 := R20; R20 := R20[0x9f236ac2]
107 [-]: CALL      R20 2 2      ; R20 := R20(R21)
108 [-]: GETTABLE  R20 R3 R20   ; R20 := R3[R20]
109 [-]: EQ        1 R20 K42    ; if R20 == nil then PC := 169
110 [-]: JMP       169          ; PC := 169
111 [-]: GETTABLE  R20 R15 R19  ; R20 := R15[R19]
112 [-]: SELF      R20 R20 K43  ; R21 := R20; R20 := R20[0x0fbc7293]
113 [-]: CALL      R20 2 2      ; R20 := R20(R21)
114 [-]: LT        0 R20 K34    ; if R20 >= 0.000000 then PC := 124
115 [-]: JMP       124          ; PC := 124
116 [-]: GETTABLE  R21 R15 R19  ; R21 := R15[R19]
117 [-]: SELF      R21 R21 K41  ; R22 := R21; R21 := R21[0x9f236ac2]
118 [-]: CALL      R21 2 2      ; R21 := R21(R22)
119 [-]: GETTABLE  R21 R3 R21   ; R21 := R3[R21]
120 [-]: MUL       R21 R21 K44  ; R21 := R21 * 4.000000
121 [-]: MUL       R21 R21 R20  ; R21 := R21 * R20
122 [-]: ADD       R2 R2 R21    ; R2 := R2 + R21
123 [-]: JMP       169          ; PC := 169
124 [-]: GETTABLE  R21 R15 R19  ; R21 := R15[R19]
125 [-]: SELF      R21 R21 K41  ; R22 := R21; R21 := R21[0x9f236ac2]
126 [-]: CALL      R21 2 2      ; R21 := R21(R22)
127 [-]: EQ        0 R21 K26    ; if R21 ~= 306.000000 then PC := 163
128 [-]: JMP       163          ; PC := 163
129 [-]: GETUPVAL  R21 U1       ; R21 := U1
130 [-]: GETTABLE  R22 R15 R19  ; R22 := R15[R19]
131 [-]: SELF      R22 R22 K45  ; R23 := R22; R22 := R22[0x14be127f]
132 [-]: CALL      R22 2 0      ; R22,... := R22(R23)
133 [-]: CALL      R21 0 2      ; R21 := R21(R22,...)
134 [-]: TEST      R21 0        ; if not R21 then PC := 144
135 [-]: JMP       144          ; PC := 144
136 [-]: GETTABLE  R21 R15 R19  ; R21 := R15[R19]
137 [-]: SELF      R21 R21 K41  ; R22 := R21; R21 := R21[0x9f236ac2]
138 [-]: CALL      R21 2 2      ; R21 := R21(R22)
139 [-]: GETTABLE  R21 R3 R21   ; R21 := R3[R21]
140 [-]: MUL       R21 R21 R20  ; R21 := R21 * R20
141 [-]: MUL       R21 R21 R9   ; R21 := R21 * R9
142 [-]: ADD       R2 R2 R21    ; R2 := R2 + R21
143 [-]: JMP       169          ; PC := 169
144 [-]: CONST     R21 0        ; R21 := 0.000000
145 [-]: GETTABLE  R22 R15 R19  ; R22 := R15[R19]
146 [-]: SELF      R22 R22 K45  ; R23 := R22; R22 := R22[0x14be127f]
147 [-]: CALL      R22 2 2      ; R22 := R22(R23)
148 [-]: GETTABLE  R22 R10 R22  ; R22 := R10[R22]
149 [-]: EQ        1 R22 K42    ; if R22 == nil then PC := 155
150 [-]: JMP       155          ; PC := 155
151 [-]: GETTABLE  R22 R15 R19  ; R22 := R15[R19]
152 [-]: SELF      R22 R22 K45  ; R23 := R22; R22 := R22[0x14be127f]
153 [-]: CALL      R22 2 2      ; R22 := R22(R23)
154 [-]: GETTABLE  R21 R10 R22  ; R21 := R10[R22]
155 [-]: GETTABLE  R22 R15 R19  ; R22 := R15[R19]
156 [-]: SELF      R22 R22 K41  ; R23 := R22; R22 := R22[0x9f236ac2]
157 [-]: CALL      R22 2 2      ; R22 := R22(R23)
158 [-]: GETTABLE  R22 R3 R22   ; R22 := R3[R22]
159 [-]: MUL       R22 R22 R21  ; R22 := R22 * R21
160 [-]: MUL       R22 R22 R20  ; R22 := R22 * R20
161 [-]: ADD       R2 R2 R22    ; R2 := R2 + R22
162 [-]: JMP       169          ; PC := 169
163 [-]: GETTABLE  R22 R15 R19  ; R22 := R15[R19]
164 [-]: SELF      R22 R22 K41  ; R23 := R22; R22 := R22[0x9f236ac2]
165 [-]: CALL      R22 2 2      ; R22 := R22(R23)
166 [-]: GETTABLE  R22 R3 R22   ; R22 := R3[R22]
167 [-]: MUL       R22 R22 R20  ; R22 := R22 * R20
168 [-]: ADD       R2 R2 R22    ; R2 := R2 + R22
169 [-]: FORLOOP   R16 105      ; R16 += R18; if R16 <= R17 then begin PC := 105; R19 := R16 end
170 [-]: RETURN    R2 2         ; return R2
171 [-]: RETURN    R0 1         ; return 


; Function #87:
;
; Name:            
; Defined at line: 3588
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  18

  1 [-]: CONST     R1 0         ; R1 := 0.000000
  2 [-]: GETGLOBAL R2 K0        ; R2 := _T
  3 [-]: GETTABLE  R2 R2 K1     ; R2 := R2["MenuSuitAvatar"]
  4 [-]: SELF      R3 R2 K2     ; R4 := R2; R3 := R2[0x1ac1655c]
  5 [-]: CALL      R3 2 2       ; R3 := R3(R4)
  6 [-]: GETGLOBAL R4 K3        ; R4 := 0x42dcc9f5
  7 [-]: SELF      R5 R3 K4     ; R6 := R3; R5 := R3[0x76aa1e1b]
  8 [-]: LOADKB    R7 0 0       ; R7 := false
  9 [-]: CALL      R5 3 2       ; R5 := R5(R6,R7)
 10 [-]: DIV       R5 R5 K5     ; R5 := R5 / 190.000000
 11 [-]: CONST     R6 0         ; R6 := 0.000000
 12 [-]: CONST     R7 1         ; R7 := 1.000000
 13 [-]: CALL      R4 4 2       ; R4 := R4(R5,R6,R7)
 14 [-]: GETGLOBAL R5 K3        ; R5 := 0x42dcc9f5
 15 [-]: SELF      R6 R3 K6     ; R7 := R3; R6 := R3[0x86cc633f]
 16 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 17 [-]: MUL       R6 K7 R6     ; R6 := 3.000000 * R6
 18 [-]: SELF      R7 R2 K8     ; R8 := R2; R7 := R2[0xb40c191a]
 19 [-]: LOADKB    R9 0 0       ; R9 := false
 20 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
 21 [-]: DIV       R6 R6 R7     ; R6 := R6 / R7
 22 [-]: CONST     R7 0         ; R7 := 0.000000
 23 [-]: CONST     R8 1         ; R8 := 1.000000
 24 [-]: CALL      R5 4 2       ; R5 := R5(R6,R7,R8)
 25 [-]: GETUPVAL  R6 U0        ; R6 := U0
 26 [-]: GETTABLE  R6 R6 K9     ; R6 := R6[0x06d055f9]
 27 [-]: SELF      R7 R2 K8     ; R8 := R2; R7 := R2[0xb40c191a]
 28 [-]: LOADKB    R9 0 0       ; R9 := false
 29 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
 30 [-]: MUL       R7 K10 R7    ; R7 := 5.000000 * R7
 31 [-]: SELF      R8 R3 K6     ; R9 := R3; R8 := R3[0x86cc633f]
 32 [-]: CALL      R8 2 2       ; R8 := R8(R9)
 33 [-]: LT        1 R8 R7      ; if R8 < R7 then PC := 36
 34 [-]: JMP       36           ; PC := 36
 35 [-]: LOADKB    R7 0 1       ; R7 := false; PC := 36
 36 [-]: LOADKB    R7 1 0       ; R7 := true
 37 [-]: CONST     R8 1         ; R8 := 1.000000
 38 [-]: CONST     R9 0         ; R9 := 0.000000
 39 [-]: CALL      R6 4 2       ; R6 := R6(R7,R8,R9)
 40 [-]: GETGLOBAL R7 K3        ; R7 := 0x42dcc9f5
 41 [-]: SELF      R8 R2 K11    ; R9 := R2; R8 := R2[0xde321e6f]
 42 [-]: CALL      R8 2 2       ; R8 := R8(R9)
 43 [-]: SELF      R8 R8 K12    ; R9 := R8; R8 := R8[0xe85a2361]
 44 [-]: CONST     R10 3        ; R10 := 3.000000
 45 [-]: CALL      R8 3 2       ; R8 := R8(R9,R10)
 46 [-]: SELF      R8 R8 K14    ; R9 := R8; R8 := R8[0x47b9c56c]
 47 [-]: CALL      R8 2 2       ; R8 := R8(R9)
 48 [-]: CONST     R9 0         ; R9 := 0.000000
 49 [-]: CONST     R10 1        ; R10 := 1.000000
 50 [-]: CALL      R7 4 2       ; R7 := R7(R8,R9,R10)
 51 [-]: NEWTABLE  R8 0 13      ; R8 := {}
 52 [-]: SETTABLE  R8 K16 K17   ; R8[65.000000] := 1.000000
 53 [-]: SETTABLE  R8 K18 K19   ; R8[15.000000] := 4.000000
 54 [-]: SETTABLE  R8 K20 K17   ; R8[120.000000] := 1.000000
 55 [-]: SETTABLE  R8 K21 K22   ; R8[88.000000] := 1.500000
 56 [-]: SETTABLE  R8 K19 K23   ; R8[4.000000] := 13.000000
 57 [-]: SETTABLE  R8 K24 K25   ; R8[10.000000] := 9.000000
 58 [-]: SETTABLE  R8 K25 K25   ; R8[9.000000] := 9.000000
 59 [-]: SETTABLE  R8 K7 K26    ; R8[3.000000] := 7.500000
 60 [-]: SETTABLE  R8 K27 K28   ; R8[34.000000] := 0.050000
 61 [-]: SETTABLE  R8 K29 K30   ; R8[46.000000] := 0.020000
 62 [-]: SETTABLE  R8 K31 K32   ; R8[75.000000] := 0.010000
 63 [-]: SETTABLE  R8 K33 K34   ; R8[32.000000] := 0.500000
 64 [-]: SETTABLE  R8 K35 K36   ; R8[87.000000] := 0.100000
 65 [-]: GETTABLE  R9 R0 K37    ; R9 := R0["mUpgrade"]
 66 [-]: GETTABLE  R9 R9 K38    ; R9 := R9["mInstance"]
 67 [-]: SELF      R10 R9 K39   ; R11 := R9; R10 := R9[0x96284d62]
 68 [-]: GETTABLE  R12 R0 K37   ; R12 := R0["mUpgrade"]
 69 [-]: GETTABLE  R12 R12 K40  ; R12 := R12["mUpgradeFingerprint"]
 70 [-]: CALL      R10 3 2      ; R10 := R10(R11,R12)
 71 [-]: CONST     R11 1        ; R11 := 1.000000
 72 [-]: SELF      R12 R9 K41   ; R13 := R9; R12 := R9[0x0ad758cb]
 73 [-]: CALL      R12 2 2      ; R12 := R12(R13)
 74 [-]: CONST     R13 1        ; R13 := 1.000000
 75 [-]: FORPREP   R11 123      ; R11 -= R13; PC := 123
 76 [-]: GETTABLE  R15 R10 R14  ; R15 := R10[R14]
 77 [-]: SELF      R15 R15 K42  ; R16 := R15; R15 := R15[0x9f236ac2]
 78 [-]: CALL      R15 2 2      ; R15 := R15(R16)
 79 [-]: GETTABLE  R16 R8 R15   ; R16 := R8[R15]
 80 [-]: EQ        1 R16 K43    ; if R16 == nil then PC := 123
 81 [-]: JMP       123          ; PC := 123
 82 [-]: GETTABLE  R16 R10 R14  ; R16 := R10[R14]
 83 [-]: SELF      R16 R16 K44  ; R17 := R16; R16 := R16[0x0fbc7293]
 84 [-]: CALL      R16 2 2      ; R16 := R16(R17)
 85 [-]: LT        0 R16 K45    ; if R16 >= 0.000000 then PC := 92
 86 [-]: JMP       92           ; PC := 92
 87 [-]: GETTABLE  R17 R8 R15   ; R17 := R8[R15]
 88 [-]: MUL       R17 R17 K19  ; R17 := R17 * 4.000000
 89 [-]: MUL       R17 R17 R16  ; R17 := R17 * R16
 90 [-]: ADD       R1 R1 R17    ; R1 := R1 + R17
 91 [-]: JMP       123          ; PC := 123
 92 [-]: EQ        0 R15 K18    ; if R15 ~= 15.000000 then PC := 99
 93 [-]: JMP       99           ; PC := 99
 94 [-]: GETTABLE  R17 R8 R15   ; R17 := R8[R15]
 95 [-]: MUL       R17 R17 R16  ; R17 := R17 * R16
 96 [-]: MUL       R17 R17 R4   ; R17 := R17 * R4
 97 [-]: ADD       R1 R1 R17    ; R1 := R1 + R17
 98 [-]: JMP       123          ; PC := 123
 99 [-]: EQ        0 R15 K16    ; if R15 ~= 65.000000 then PC := 106
100 [-]: JMP       106          ; PC := 106
101 [-]: GETTABLE  R17 R8 R15   ; R17 := R8[R15]
102 [-]: MUL       R17 R17 R16  ; R17 := R17 * R16
103 [-]: MUL       R17 R17 R6   ; R17 := R17 * R6
104 [-]: ADD       R1 R1 R17    ; R1 := R1 + R17
105 [-]: JMP       123          ; PC := 123
106 [-]: EQ        0 R15 K20    ; if R15 ~= 120.000000 then PC := 113
107 [-]: JMP       113          ; PC := 113
108 [-]: GETTABLE  R17 R8 R15   ; R17 := R8[R15]
109 [-]: MUL       R17 R17 R16  ; R17 := R17 * R16
110 [-]: MUL       R17 R17 R5   ; R17 := R17 * R5
111 [-]: ADD       R1 R1 R17    ; R1 := R1 + R17
112 [-]: JMP       123          ; PC := 123
113 [-]: EQ        0 R15 K21    ; if R15 ~= 88.000000 then PC := 120
114 [-]: JMP       120          ; PC := 120
115 [-]: GETTABLE  R17 R8 R15   ; R17 := R8[R15]
116 [-]: MUL       R17 R17 R16  ; R17 := R17 * R16
117 [-]: MUL       R17 R17 R7   ; R17 := R17 * R7
118 [-]: ADD       R1 R1 R17    ; R1 := R1 + R17
119 [-]: JMP       123          ; PC := 123
120 [-]: GETTABLE  R17 R8 R15   ; R17 := R8[R15]
121 [-]: MUL       R17 R17 R16  ; R17 := R17 * R16
122 [-]: ADD       R1 R1 R17    ; R1 := R1 + R17
123 [-]: FORLOOP   R11 76       ; R11 += R13; if R11 <= R12 then begin PC := 76; R14 := R11 end
124 [-]: RETURN    R1 2         ; return R1
125 [-]: RETURN    R0 1         ; return 


; Function #88:
;
; Name:            
; Defined at line: 3624
; #Upvalues:       2
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R2 K0        ; R2 := _T
  2 [-]: GETTABLE  R2 R2 K1     ; R2 := R2["upgradeItemSlot"]
  3 [-]: EQ        1 R2 K3      ; if R2 == 2.000000 then PC := 13
  4 [-]: JMP       13           ; PC := 13
  5 [-]: GETGLOBAL R2 K0        ; R2 := _T
  6 [-]: GETTABLE  R2 R2 K1     ; R2 := R2["upgradeItemSlot"]
  7 [-]: EQ        1 R2 K4      ; if R2 == 1.000000 then PC := 13
  8 [-]: JMP       13           ; PC := 13
  9 [-]: GETGLOBAL R2 K0        ; R2 := _T
 10 [-]: GETTABLE  R2 R2 K1     ; R2 := R2["upgradeItemSlot"]
 11 [-]: EQ        0 R2 K5      ; if R2 ~= 3.000000 then PC := 19
 12 [-]: JMP       19           ; PC := 19
 13 [-]: GETUPVAL  R2 U0        ; R2 := U0
 14 [-]: MOVE      R3 R0        ; R3 := R0
 15 [-]: MOVE      R4 R1        ; R4 := R1
 16 [-]: TAILCALL  R2 3 0       ; R2,... := R2(R3,R4)
 17 [-]: RETURN    R2 0         ; return R2,...
 18 [-]: JMP       34           ; PC := 34
 19 [-]: GETGLOBAL R2 K0        ; R2 := _T
 20 [-]: GETTABLE  R2 R2 K1     ; R2 := R2["upgradeItemSlot"]
 21 [-]: EQ        0 R2 K6      ; if R2 ~= 0.000000 then PC := 32
 22 [-]: JMP       32           ; PC := 32
 23 [-]: GETGLOBAL R2 K0        ; R2 := _T
 24 [-]: GETTABLE  R2 R2 K7     ; R2 := R2["upgradeItemLot"]
 25 [-]: EQ        0 R2 K6      ; if R2 ~= 0.000000 then PC := 32
 26 [-]: JMP       32           ; PC := 32
 27 [-]: GETUPVAL  R2 U1        ; R2 := U1
 28 [-]: MOVE      R3 R0        ; R3 := R0
 29 [-]: TAILCALL  R2 2 0       ; R2,... := R2(R3)
 30 [-]: RETURN    R2 0         ; return R2,...
 31 [-]: JMP       34           ; PC := 34
 32 [-]: CONST     R2 0         ; R2 := 0.000000
 33 [-]: RETURN    R2 2         ; return R2
 34 [-]: RETURN    R0 1         ; return 


; Function #89:
;
; Name:            
; Defined at line: 3636
; #Upvalues:       1
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  6

  1 [-]: GETUPVAL  R2 U0        ; R2 := U0
  2 [-]: GETTABLE  R2 R2 R0     ; R2 := R2[R0]
  3 [-]: GETUPVAL  R3 U0        ; R3 := U0
  4 [-]: GETTABLE  R3 R3 R1     ; R3 := R3[R1]
  5 [-]: EQ        0 R2 R3      ; if R2 ~= R3 then PC := 58
  6 [-]: JMP       58           ; PC := 58
  7 [-]: GETTABLE  R4 R0 K0     ; R4 := R0["mPvpValue"]
  8 [-]: GETTABLE  R5 R1 K0     ; R5 := R1["mPvpValue"]
  9 [-]: EQ        0 R4 R5      ; if R4 ~= R5 then PC := 51
 10 [-]: JMP       51           ; PC := 51
 11 [-]: GETTABLE  R4 R0 K1     ; R4 := R0["mRating"]
 12 [-]: GETTABLE  R5 R1 K1     ; R5 := R1["mRating"]
 13 [-]: EQ        0 R4 R5      ; if R4 ~= R5 then PC := 44
 14 [-]: JMP       44           ; PC := 44
 15 [-]: GETTABLE  R4 R0 K2     ; R4 := R0["mLevel"]
 16 [-]: GETTABLE  R5 R1 K2     ; R5 := R1["mLevel"]
 17 [-]: EQ        0 R4 R5      ; if R4 ~= R5 then PC := 37
 18 [-]: JMP       37           ; PC := 37
 19 [-]: GETTABLE  R4 R0 K3     ; R4 := R0["mLevelLimit"]
 20 [-]: GETTABLE  R5 R1 K3     ; R5 := R1["mLevelLimit"]
 21 [-]: EQ        0 R4 R5      ; if R4 ~= R5 then PC := 30
 22 [-]: JMP       30           ; PC := 30
 23 [-]: GETTABLE  R4 R0 K4     ; R4 := R0["mName"]
 24 [-]: GETTABLE  R5 R1 K4     ; R5 := R1["mName"]
 25 [-]: LT        1 R4 R5      ; if R4 < R5 then PC := 28
 26 [-]: JMP       28           ; PC := 28
 27 [-]: LOADKB    R4 0 1       ; R4 := false; PC := 28
 28 [-]: LOADKB    R4 1 0       ; R4 := true
 29 [-]: RETURN    R4 2         ; return R4
 30 [-]: GETTABLE  R4 R0 K3     ; R4 := R0["mLevelLimit"]
 31 [-]: GETTABLE  R5 R1 K3     ; R5 := R1["mLevelLimit"]
 32 [-]: LT        1 R5 R4      ; if R5 < R4 then PC := 35
 33 [-]: JMP       35           ; PC := 35
 34 [-]: LOADKB    R4 0 1       ; R4 := false; PC := 35
 35 [-]: LOADKB    R4 1 0       ; R4 := true
 36 [-]: RETURN    R4 2         ; return R4
 37 [-]: GETTABLE  R4 R0 K2     ; R4 := R0["mLevel"]
 38 [-]: GETTABLE  R5 R1 K2     ; R5 := R1["mLevel"]
 39 [-]: LT        1 R5 R4      ; if R5 < R4 then PC := 42
 40 [-]: JMP       42           ; PC := 42
 41 [-]: LOADKB    R4 0 1       ; R4 := false; PC := 42
 42 [-]: LOADKB    R4 1 0       ; R4 := true
 43 [-]: RETURN    R4 2         ; return R4
 44 [-]: GETTABLE  R4 R0 K1     ; R4 := R0["mRating"]
 45 [-]: GETTABLE  R5 R1 K1     ; R5 := R1["mRating"]
 46 [-]: LT        1 R5 R4      ; if R5 < R4 then PC := 49
 47 [-]: JMP       49           ; PC := 49
 48 [-]: LOADKB    R4 0 1       ; R4 := false; PC := 49
 49 [-]: LOADKB    R4 1 0       ; R4 := true
 50 [-]: RETURN    R4 2         ; return R4
 51 [-]: GETTABLE  R4 R0 K0     ; R4 := R0["mPvpValue"]
 52 [-]: GETTABLE  R5 R1 K0     ; R5 := R1["mPvpValue"]
 53 [-]: LT        1 R5 R4      ; if R5 < R4 then PC := 56
 54 [-]: JMP       56           ; PC := 56
 55 [-]: LOADKB    R4 0 1       ; R4 := false; PC := 56
 56 [-]: LOADKB    R4 1 0       ; R4 := true
 57 [-]: RETURN    R4 2         ; return R4
 58 [-]: LT        1 R3 R2      ; if R3 < R2 then PC := 61
 59 [-]: JMP       61           ; PC := 61
 60 [-]: LOADKB    R4 0 1       ; R4 := false; PC := 61
 61 [-]: LOADKB    R4 1 0       ; R4 := true
 62 [-]: RETURN    R4 2         ; return R4
 63 [-]: RETURN    R0 1         ; return 


; Function #90:
;
; Name:            
; Defined at line: 3657
; #Upvalues:       12
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  52

  1 [-]: GETUPVAL  R0 U0        ; R0 := U0
  2 [-]: LOADKB    R1 1 0       ; R1 := true
  3 [-]: LOADKB    R2 1 0       ; R2 := true
  4 [-]: CALL      R0 3 1       ; R0(R1,R2)
  5 [-]: NEWTABLE  R0 0 0       ; R0 := {}
  6 [-]: CONST     R1 1         ; R1 := 1.000000
  7 [-]: NEWTABLE  R2 0 0       ; R2 := {}
  8 [-]: CONST     R3 1         ; R3 := 1.000000
  9 [-]: NEWTABLE  R4 0 0       ; R4 := {}
 10 [-]: CONST     R5 1         ; R5 := 1.000000
 11 [-]: NEWTABLE  R6 0 0       ; R6 := {}
 12 [-]: LOADNIL   R7 R8        ; R7 := R8 := nil
 13 [-]: GETGLOBAL R9 K0        ; R9 := _T
 14 [-]: GETTABLE  R9 R9 K1     ; R9 := R9["upgradeItemLot"]
 15 [-]: GETGLOBAL R10 K0       ; R10 := _T
 16 [-]: GETTABLE  R10 R10 K2   ; R10 := R10["upgradeItemSlot"]
 17 [-]: EQ        1 R9 K3      ; if R9 == nil then PC := 33
 18 [-]: JMP       33           ; PC := 33
 19 [-]: EQ        1 R10 K3     ; if R10 == nil then PC := 33
 20 [-]: JMP       33           ; PC := 33
 21 [-]: EQ        0 R9 K5      ; if R9 ~= 1.000000 then PC := 31
 22 [-]: JMP       31           ; PC := 31
 23 [-]: GETGLOBAL R11 K0       ; R11 := _T
 24 [-]: GETTABLE  R11 R11 K6   ; R11 := R11["MenuSuitAvatar"]
 25 [-]: SELF      R11 R11 K7   ; R12 := R11; R11 := R11[0xde321e6f]
 26 [-]: CALL      R11 2 2      ; R11 := R11(R12)
 27 [-]: SELF      R11 R11 K8   ; R12 := R11; R11 := R11[0x2676deee]
 28 [-]: CALL      R11 2 2      ; R11 := R11(R12)
 29 [-]: MOVE      R8 R11       ; R8 := R11
 30 [-]: JMP       33           ; PC := 33
 31 [-]: GETGLOBAL R11 K0       ; R11 := _T
 32 [-]: GETTABLE  R8 R11 K6    ; R8 := R11["MenuSuitAvatar"]
 33 [-]: EQ        0 R10 K9     ; if R10 ~= 2.000000 then PC := 77
 34 [-]: JMP       77           ; PC := 77
 35 [-]: GETGLOBAL R11 K0       ; R11 := _T
 36 [-]: GETTABLE  R11 R11 K6   ; R11 := R11["MenuSuitAvatar"]
 37 [-]: EQ        0 R8 R11     ; if R8 ~= R11 then PC := 56
 38 [-]: JMP       56           ; PC := 56
 39 [-]: CONST     R11 1        ; R11 := 1.000000
 40 [-]: EQ        0 R9 K11     ; if R9 ~= 7.000000 then PC := 43
 41 [-]: JMP       43           ; PC := 43
 42 [-]: CONST     R11 12       ; R11 := 12.000000
 43 [-]: GETGLOBAL R12 K12      ; R12 := 0xb009bbc6
 44 [-]: SELF      R13 R8 K7    ; R14 := R8; R13 := R8[0xde321e6f]
 45 [-]: CALL      R13 2 2      ; R13 := R13(R14)
 46 [-]: SELF      R13 R13 K13  ; R14 := R13; R13 := R13[0xe85a2361]
 47 [-]: MOVE      R15 R11      ; R15 := R11
 48 [-]: CALL      R13 3 2      ; R13 := R13(R14,R15)
 49 [-]: SELF      R13 R13 K14  ; R14 := R13; R13 := R13[0xcde10c4a]
 50 [-]: CALL      R13 2 2      ; R13 := R13(R14)
 51 [-]: SELF      R13 R13 K15  ; R14 := R13; R13 := R13[0xed4e0128]
 52 [-]: CALL      R13 2 0      ; R13,... := R13(R14)
 53 [-]: CALL      R12 0 2      ; R12 := R12(R13,...)
 54 [-]: MOVE      R7 R12       ; R7 := R12
 55 [-]: JMP       106          ; PC := 106
 56 [-]: GETGLOBAL R12 K0       ; R12 := _T
 57 [-]: GETTABLE  R12 R12 K6   ; R12 := R12["MenuSuitAvatar"]
 58 [-]: SELF      R12 R12 K7   ; R13 := R12; R12 := R12[0xde321e6f]
 59 [-]: CALL      R12 2 2      ; R12 := R12(R13)
 60 [-]: SELF      R12 R12 K8   ; R13 := R12; R12 := R12[0x2676deee]
 61 [-]: CALL      R12 2 2      ; R12 := R12(R13)
 62 [-]: EQ        0 R8 R12     ; if R8 ~= R12 then PC := 106
 63 [-]: JMP       106          ; PC := 106
 64 [-]: GETGLOBAL R12 K12      ; R12 := 0xb009bbc6
 65 [-]: SELF      R13 R8 K7    ; R14 := R8; R13 := R8[0xde321e6f]
 66 [-]: CALL      R13 2 2      ; R13 := R13(R14)
 67 [-]: SELF      R13 R13 K13  ; R14 := R13; R13 := R13[0xe85a2361]
 68 [-]: CONST     R15 1        ; R15 := 1.000000
 69 [-]: CALL      R13 3 2      ; R13 := R13(R14,R15)
 70 [-]: SELF      R13 R13 K14  ; R14 := R13; R13 := R13[0xcde10c4a]
 71 [-]: CALL      R13 2 2      ; R13 := R13(R14)
 72 [-]: SELF      R13 R13 K15  ; R14 := R13; R13 := R13[0xed4e0128]
 73 [-]: CALL      R13 2 0      ; R13,... := R13(R14)
 74 [-]: CALL      R12 0 2      ; R12 := R12(R13,...)
 75 [-]: MOVE      R7 R12       ; R7 := R12
 76 [-]: JMP       106          ; PC := 106
 77 [-]: EQ        0 R10 K5     ; if R10 ~= 1.000000 then PC := 92
 78 [-]: JMP       92           ; PC := 92
 79 [-]: GETGLOBAL R12 K12      ; R12 := 0xb009bbc6
 80 [-]: SELF      R13 R8 K7    ; R14 := R8; R13 := R8[0xde321e6f]
 81 [-]: CALL      R13 2 2      ; R13 := R13(R14)
 82 [-]: SELF      R13 R13 K13  ; R14 := R13; R13 := R13[0xe85a2361]
 83 [-]: CONST     R15 0        ; R15 := 0.000000
 84 [-]: CALL      R13 3 2      ; R13 := R13(R14,R15)
 85 [-]: SELF      R13 R13 K14  ; R14 := R13; R13 := R13[0xcde10c4a]
 86 [-]: CALL      R13 2 2      ; R13 := R13(R14)
 87 [-]: SELF      R13 R13 K15  ; R14 := R13; R13 := R13[0xed4e0128]
 88 [-]: CALL      R13 2 0      ; R13,... := R13(R14)
 89 [-]: CALL      R12 0 2      ; R12 := R12(R13,...)
 90 [-]: MOVE      R7 R12       ; R7 := R12
 91 [-]: JMP       106          ; PC := 106
 92 [-]: EQ        0 R10 K16    ; if R10 ~= 3.000000 then PC := 106
 93 [-]: JMP       106          ; PC := 106
 94 [-]: GETGLOBAL R12 K12      ; R12 := 0xb009bbc6
 95 [-]: SELF      R13 R8 K7    ; R14 := R8; R13 := R8[0xde321e6f]
 96 [-]: CALL      R13 2 2      ; R13 := R13(R14)
 97 [-]: SELF      R13 R13 K13  ; R14 := R13; R13 := R13[0xe85a2361]
 98 [-]: CONST     R15 5        ; R15 := 5.000000
 99 [-]: CALL      R13 3 2      ; R13 := R13(R14,R15)
100 [-]: SELF      R13 R13 K14  ; R14 := R13; R13 := R13[0xcde10c4a]
101 [-]: CALL      R13 2 2      ; R13 := R13(R14)
102 [-]: SELF      R13 R13 K15  ; R14 := R13; R13 := R13[0xed4e0128]
103 [-]: CALL      R13 2 0      ; R13,... := R13(R14)
104 [-]: CALL      R12 0 2      ; R12 := R12(R13,...)
105 [-]: MOVE      R7 R12       ; R7 := R12
106 [-]: NEWTABLE  R12 6 0      ; R12 := {}
107 [-]: GETUPVAL  R13 U1       ; R13 := U1
108 [-]: GETTABLE  R13 R13 K17  ; R13 := R13["railjackDefenseModType"]
109 [-]: GETUPVAL  R14 U1       ; R14 := U1
110 [-]: GETTABLE  R14 R14 K18  ; R14 := R14["railjackOffenseModType"]
111 [-]: GETUPVAL  R15 U1       ; R15 := U1
112 [-]: GETTABLE  R15 R15 K19  ; R15 := R15["railjackSuperModType"]
113 [-]: GETUPVAL  R16 U1       ; R16 := U1
114 [-]: GETTABLE  R16 R16 K20  ; R16 := R16["railjackTacDefModType"]
115 [-]: GETUPVAL  R17 U1       ; R17 := U1
116 [-]: GETTABLE  R17 R17 K21  ; R17 := R17["railjackTacOffModType"]
117 [-]: GETUPVAL  R18 U1       ; R18 := U1
118 [-]: GETTABLE  R18 R18 K22  ; R18 := R18["railjackTacSuperModType"]
119 [-]: SETLIST   R12 6 1      ; R12[(1-1)*FPF+i] := R(12+i), 1 <= i <= 6
120 [-]: CONST     R13 1        ; R13 := 1.000000
121 [-]: GETGLOBAL R14 K23      ; R14 := mCollectionGrid
122 [-]: GETTABLE  R14 R14 K24  ; R14 := R14["mUnfilteredElements"]
123 [-]: LEN       R14 R14      ; R14 := # R14
124 [-]: CONST     R15 1        ; R15 := 1.000000
125 [-]: FORPREP   R13 187      ; R13 -= R15; PC := 187
126 [-]: GETGLOBAL R17 K23      ; R17 := mCollectionGrid
127 [-]: GETTABLE  R17 R17 K24  ; R17 := R17["mUnfilteredElements"]
128 [-]: GETTABLE  R17 R17 R16  ; R17 := R17[R16]
129 [-]: GETTABLE  R18 R17 K25  ; R18 := R17["mCardIndex"]
130 [-]: EQ        1 R18 K26    ; if R18 == -1.000000 then PC := 187
131 [-]: JMP       187          ; PC := 187
132 [-]: GETGLOBAL R18 K27      ; R18 := mCards
133 [-]: GETTABLE  R19 R17 K25  ; R19 := R17["mCardIndex"]
134 [-]: GETTABLE  R18 R18 R19  ; R18 := R18[R19]
135 [-]: GETTABLE  R19 R18 K28  ; R19 := R18["mType"]
136 [-]: EQ        0 R19 K29    ; if R19 ~= "AURA" then PC := 143
137 [-]: JMP       143          ; PC := 143
138 [-]: SETTABLE  R0 R1 R18    ; R0[R1] := R18
139 [-]: GETTABLE  R19 R0 R1    ; R19 := R0[R1]
140 [-]: SETTABLE  R19 K30 R16  ; R19["mCollectionIndex"] := R16
141 [-]: ADD       R1 R1 K5     ; R1 := R1 + 1.000000
142 [-]: JMP       187          ; PC := 187
143 [-]: GETTABLE  R19 R18 K31  ; R19 := R18["mIsStance"]
144 [-]: TEST      R19 0        ; if not R19 then PC := 151
145 [-]: JMP       151          ; PC := 151
146 [-]: SETTABLE  R2 R3 R18    ; R2[R3] := R18
147 [-]: GETTABLE  R19 R2 R3    ; R19 := R2[R3]
148 [-]: SETTABLE  R19 K30 R16  ; R19["mCollectionIndex"] := R16
149 [-]: ADD       R3 R3 K5     ; R3 := R3 + 1.000000
150 [-]: JMP       187          ; PC := 187
151 [-]: LOADKB    R19 1 0      ; R19 := true
152 [-]: GETUPVAL  R20 U2       ; R20 := U2
153 [-]: CALL      R20 1 2      ; R20 := R20()
154 [-]: TEST      R20 0        ; if not R20 then PC := 175
155 [-]: JMP       175          ; PC := 175
156 [-]: CONST     R20 1        ; R20 := 1.000000
157 [-]: LEN       R21 R12      ; R21 := # R12
158 [-]: CONST     R22 1        ; R22 := 1.000000
159 [-]: FORPREP   R20 174      ; R20 -= R22; PC := 174
160 [-]: GETTABLE  R24 R18 K32  ; R24 := R18["mArtifactUpgrade"]
161 [-]: SELF      R24 R24 K33  ; R25 := R24; R24 := R24[0xf2deaf69]
162 [-]: GETTABLE  R26 R12 R23  ; R26 := R12[R23]
163 [-]: CALL      R24 3 2      ; R24 := R24(R25,R26)
164 [-]: TEST      R24 0        ; if not R24 then PC := 174
165 [-]: JMP       174          ; PC := 174
166 [-]: LOADKB    R19 0 0      ; R19 := false
167 [-]: GETTABLE  R24 R6 R23   ; R24 := R6[R23]
168 [-]: EQ        0 R24 K3     ; if R24 ~= nil then PC := 175
169 [-]: JMP       175          ; PC := 175
170 [-]: SETTABLE  R6 R23 R18   ; R6[R23] := R18
171 [-]: GETTABLE  R24 R6 R23   ; R24 := R6[R23]
172 [-]: SETTABLE  R24 K30 R16  ; R24["mCollectionIndex"] := R16
173 [-]: JMP       175          ; PC := 175
174 [-]: FORLOOP   R20 160      ; R20 += R22; if R20 <= R21 then begin PC := 160; R23 := R20 end
175 [-]: TEST      R19 0        ; if not R19 then PC := 187
176 [-]: JMP       187          ; PC := 187
177 [-]: SETTABLE  R4 R5 R18    ; R4[R5] := R18
178 [-]: GETTABLE  R24 R4 R5    ; R24 := R4[R5]
179 [-]: SETTABLE  R24 K30 R16  ; R24["mCollectionIndex"] := R16
180 [-]: GETUPVAL  R24 U3       ; R24 := U3
181 [-]: GETUPVAL  R25 U4       ; R25 := U4
182 [-]: MOVE      R26 R18      ; R26 := R18
183 [-]: MOVE      R27 R7       ; R27 := R7
184 [-]: CALL      R25 3 2      ; R25 := R25(R26,R27)
185 [-]: SETTABLE  R24 R18 R25  ; R24[R18] := R25
186 [-]: ADD       R5 R5 K5     ; R5 := R5 + 1.000000
187 [-]: FORLOOP   R13 126      ; R13 += R15; if R13 <= R14 then begin PC := 126; R16 := R13 end
188 [-]: GETGLOBAL R24 K34      ; R24 := 0x33bdd652
189 [-]: GETTABLE  R24 R24 K35  ; R24 := R24[0xf21b1d8e]
190 [-]: MOVE      R25 R4       ; R25 := R4
191 [-]: GETUPVAL  R26 U5       ; R26 := U5
192 [-]: CALL      R24 3 1      ; R24(R25,R26)
193 [-]: CONST     R24 0        ; R24 := 0.000000
194 [-]: LEN       R25 R0       ; R25 := # R0
195 [-]: LT        0 K36 R25    ; if 0.000000 >= R25 then PC := 207
196 [-]: JMP       207          ; PC := 207
197 [-]: GETGLOBAL R25 K37      ; R25 := mCardSlots
198 [-]: GETGLOBAL R26 K38      ; R26 := AURA_SLOT_INDEX
199 [-]: LE        0 R26 R25    ; if R26 > R25 then PC := 207
200 [-]: JMP       207          ; PC := 207
201 [-]: GETUPVAL  R25 U6       ; R25 := U6
202 [-]: MOVE      R26 R0       ; R26 := R0
203 [-]: CALL      R25 2 2      ; R25 := R25(R26)
204 [-]: TEST      R25 0        ; if not R25 then PC := 207
205 [-]: JMP       207          ; PC := 207
206 [-]: ADD       R24 R24 K5   ; R24 := R24 + 1.000000
207 [-]: LEN       R25 R2       ; R25 := # R2
208 [-]: LT        0 K36 R25    ; if 0.000000 >= R25 then PC := 220
209 [-]: JMP       220          ; PC := 220
210 [-]: GETUPVAL  R25 U7       ; R25 := U7
211 [-]: CALL      R25 1 2      ; R25 := R25()
212 [-]: TEST      R25 0        ; if not R25 then PC := 220
213 [-]: JMP       220          ; PC := 220
214 [-]: GETUPVAL  R25 U8       ; R25 := U8
215 [-]: MOVE      R26 R2       ; R26 := R2
216 [-]: CALL      R25 2 2      ; R25 := R25(R26)
217 [-]: TEST      R25 0        ; if not R25 then PC := 220
218 [-]: JMP       220          ; PC := 220
219 [-]: ADD       R24 R24 K5   ; R24 := R24 + 1.000000
220 [-]: GETUPVAL  R25 U2       ; R25 := U2
221 [-]: CALL      R25 1 2      ; R25 := R25()
222 [-]: TEST      R25 0        ; if not R25 then PC := 264
223 [-]: JMP       264          ; PC := 264
224 [-]: CONST     R25 1        ; R25 := 1.000000
225 [-]: LEN       R26 R12      ; R26 := # R12
226 [-]: CONST     R27 1        ; R27 := 1.000000
227 [-]: FORPREP   R25 263      ; R25 -= R27; PC := 263
228 [-]: GETTABLE  R29 R6 R28   ; R29 := R6[R28]
229 [-]: EQ        1 R29 K3     ; if R29 == nil then PC := 263
230 [-]: JMP       263          ; PC := 263
231 [-]: GETGLOBAL R29 K39      ; R29 := mInstalledGrid
232 [-]: SELF      R29 R29 K40  ; R30 := R29; R29 := R29[0xf73486b6]
233 [-]: MOVE      R31 R28      ; R31 := R28
234 [-]: CALL      R29 3 2      ; R29 := R29(R30,R31)
235 [-]: GETTABLE  R30 R6 R28   ; R30 := R6[R28]
236 [-]: NEWTABLE  R31 0 3      ; R31 := {}
237 [-]: GETGLOBAL R32 K27      ; R32 := mCards
238 [-]: GETTABLE  R33 R30 K30  ; R33 := R30["mCollectionIndex"]
239 [-]: GETTABLE  R32 R32 R33  ; R32 := R32[R33]
240 [-]: SETTABLE  R31 K41 R32  ; R31["item"] := R32
241 [-]: GETGLOBAL R32 K23      ; R32 := mCollectionGrid
242 [-]: SETTABLE  R31 K42 R32  ; R31["grid"] := R32
243 [-]: GETGLOBAL R32 K23      ; R32 := mCollectionGrid
244 [-]: GETTABLE  R32 R32 K24  ; R32 := R32["mUnfilteredElements"]
245 [-]: GETTABLE  R33 R30 K30  ; R33 := R30["mCollectionIndex"]
246 [-]: GETTABLE  R32 R32 R33  ; R32 := R32[R33]
247 [-]: SETTABLE  R31 K43 R32  ; R31["element"] := R32
248 [-]: GETUPVAL  R32 U9       ; R32 := U9
249 [-]: GETGLOBAL R33 K39      ; R33 := mInstalledGrid
250 [-]: MOVE      R34 R31      ; R34 := R31
251 [-]: MOVE      R35 R29      ; R35 := R29
252 [-]: LOADKB    R36 1 0      ; R36 := true
253 [-]: LOADKB    R37 0 0      ; R37 := false
254 [-]: LOADKB    R38 1 0      ; R38 := true
255 [-]: CALL      R32 7 2      ; R32 := R32(R33,R34,R35,R36,R37,R38)
256 [-]: TEST      R32 0        ; if not R32 then PC := 263
257 [-]: JMP       263          ; PC := 263
258 [-]: GETGLOBAL R32 K39      ; R32 := mInstalledGrid
259 [-]: GETTABLE  R32 R32 K44  ; R32 := R32[0xd838387b]
260 [-]: MOVE      R33 R29      ; R33 := R29
261 [-]: CALL      R32 2 1      ; R32(R33)
262 [-]: ADD       R24 R24 K5   ; R24 := R24 + 1.000000
263 [-]: FORLOOP   R25 228      ; R25 += R27; if R25 <= R26 then begin PC := 228; R28 := R25 end
264 [-]: NEWTABLE  R32 0 0      ; R32 := {}
265 [-]: CONST     R33 1        ; R33 := 1.000000
266 [-]: LEN       R34 R4       ; R34 := # R4
267 [-]: CONST     R35 1        ; R35 := 1.000000
268 [-]: FORPREP   R33 348      ; R33 -= R35; PC := 348
269 [-]: GETGLOBAL R37 K45      ; R37 := 0xce225efa
270 [-]: CONST     R38 0        ; R38 := 0.000000
271 [-]: CALL      R37 2 1      ; R37(R38)
272 [-]: GETTABLE  R37 R4 R36   ; R37 := R4[R36]
273 [-]: LOADKB    R38 1 0      ; R38 := true
274 [-]: CONST     R39 1        ; R39 := 1.000000
275 [-]: LEN       R40 R32      ; R40 := # R32
276 [-]: CONST     R41 1        ; R41 := 1.000000
277 [-]: FORPREP   R39 285      ; R39 -= R41; PC := 285
278 [-]: GETTABLE  R43 R32 R42  ; R43 := R32[R42]
279 [-]: GETTABLE  R43 R43 K46  ; R43 := R43["mName"]
280 [-]: GETTABLE  R44 R37 K46  ; R44 := R37["mName"]
281 [-]: EQ        0 R43 R44    ; if R43 ~= R44 then PC := 285
282 [-]: JMP       285          ; PC := 285
283 [-]: LOADKB    R38 0 0      ; R38 := false
284 [-]: JMP       286          ; PC := 286
285 [-]: FORLOOP   R39 278      ; R39 += R41; if R39 <= R40 then begin PC := 278; R42 := R39 end
286 [-]: TEST      R38 0        ; if not R38 then PC := 348
287 [-]: JMP       348          ; PC := 348
288 [-]: GETUPVAL  R43 U10      ; R43 := U10
289 [-]: MOVE      R44 R37      ; R44 := R37
290 [-]: CALL      R43 2 2      ; R43 := R43(R44)
291 [-]: EQ        1 R43 K3     ; if R43 == nil then PC := 300
292 [-]: JMP       300          ; PC := 300
293 [-]: GETTABLE  R44 R37 K47  ; R44 := R37["mPolarity"]
294 [-]: EQ        0 R44 K48    ; if R44 ~= 8.000000 then PC := 300
295 [-]: JMP       300          ; PC := 300
296 [-]: GETTABLE  R44 R43 K47  ; R44 := R43["mPolarity"]
297 [-]: EQ        1 R44 K48    ; if R44 == 8.000000 then PC := 300
298 [-]: JMP       300          ; PC := 300
299 [-]: LOADNIL   R43 R43      ; R43 := nil
300 [-]: EQ        1 R43 K3     ; if R43 == nil then PC := 348
301 [-]: JMP       348          ; PC := 348
302 [-]: GETUPVAL  R44 U1       ; R44 := U1
303 [-]: GETTABLE  R44 R44 K49  ; R44 := R44[0xae5b9893]
304 [-]: MOVE      R45 R43      ; R45 := R43
305 [-]: MOVE      R46 R37      ; R46 := R37
306 [-]: CALL      R44 3 2      ; R44 := R44(R45,R46)
307 [-]: GETGLOBAL R45 K50      ; R45 := mEnergyUsed
308 [-]: ADD       R44 R44 R45  ; R44 := R44 + R45
309 [-]: GETGLOBAL R45 K51      ; R45 := mEnergyTotal
310 [-]: LE        0 R44 R45    ; if R44 > R45 then PC := 348
311 [-]: JMP       348          ; PC := 348
312 [-]: NEWTABLE  R44 0 3      ; R44 := {}
313 [-]: GETGLOBAL R45 K27      ; R45 := mCards
314 [-]: GETTABLE  R46 R37 K30  ; R46 := R37["mCollectionIndex"]
315 [-]: GETTABLE  R45 R45 R46  ; R45 := R45[R46]
316 [-]: SETTABLE  R44 K41 R45  ; R44["item"] := R45
317 [-]: GETGLOBAL R45 K23      ; R45 := mCollectionGrid
318 [-]: SETTABLE  R44 K42 R45  ; R44["grid"] := R45
319 [-]: GETGLOBAL R45 K23      ; R45 := mCollectionGrid
320 [-]: GETTABLE  R45 R45 K24  ; R45 := R45["mUnfilteredElements"]
321 [-]: GETTABLE  R46 R37 K30  ; R46 := R37["mCollectionIndex"]
322 [-]: GETTABLE  R45 R45 R46  ; R45 := R45[R46]
323 [-]: SETTABLE  R44 K43 R45  ; R44["element"] := R45
324 [-]: GETUPVAL  R45 U9       ; R45 := U9
325 [-]: GETGLOBAL R46 K39      ; R46 := mInstalledGrid
326 [-]: MOVE      R47 R44      ; R47 := R44
327 [-]: MOVE      R48 R43      ; R48 := R43
328 [-]: LOADKB    R49 0 0      ; R49 := false
329 [-]: LOADKB    R50 1 0      ; R50 := true
330 [-]: LOADKB    R51 1 0      ; R51 := true
331 [-]: CALL      R45 7 2      ; R45 := R45(R46,R47,R48,R49,R50,R51)
332 [-]: TEST      R45 0        ; if not R45 then PC := 344
333 [-]: JMP       344          ; PC := 344
334 [-]: GETGLOBAL R45 K39      ; R45 := mInstalledGrid
335 [-]: GETTABLE  R45 R45 K44  ; R45 := R45[0xd838387b]
336 [-]: MOVE      R46 R43      ; R46 := R43
337 [-]: CALL      R45 2 1      ; R45(R46)
338 [-]: ADD       R24 R24 K5   ; R24 := R24 + 1.000000
339 [-]: GETGLOBAL R45 K34      ; R45 := 0x33bdd652
340 [-]: GETTABLE  R45 R45 K52  ; R45 := R45[0x23d5322f]
341 [-]: MOVE      R46 R32      ; R46 := R32
342 [-]: MOVE      R47 R37      ; R47 := R37
343 [-]: CALL      R45 3 1      ; R45(R46,R47)
344 [-]: GETGLOBAL R45 K37      ; R45 := mCardSlots
345 [-]: LE        0 R45 R24    ; if R45 > R24 then PC := 348
346 [-]: JMP       348          ; PC := 348
347 [-]: JMP       349          ; PC := 349
348 [-]: FORLOOP   R33 269      ; R33 += R35; if R33 <= R34 then begin PC := 269; R36 := R33 end
349 [-]: LT        0 K36 R24    ; if 0.000000 >= R24 then PC := 366
350 [-]: JMP       366          ; PC := 366
351 [-]: EQ        1 R7 K3      ; if R7 == nil then PC := 366
352 [-]: JMP       366          ; PC := 366
353 [-]: GETGLOBAL R45 K53      ; R45 := 0xba7dfcd2
354 [-]: SELF      R45 R45 K54  ; R46 := R45; R45 := R45[0xf056b179]
355 [-]: GETGLOBAL R47 K55      ; R47 := 0x89326c93
356 [-]: SELF      R47 R47 K56  ; R48 := R47; R47 := R47[0xfb64e76c]
357 [-]: CALL      R47 2 2      ; R47 := R47(R48)
358 [-]: GETGLOBAL R48 K57      ; R48 := 0x0469f296
359 [-]: LOADK     R49 K58      ; R49 := "WEAPON_MODS_AUTO_INSTALLED"
360 [-]: CALL      R48 2 0      ; R48,... := R48(R49)
361 [-]: CALL      R45 0 1      ; R45(R46,...)
362 [-]: GETGLOBAL R45 K59      ; R45 := 0x25d99d89
363 [-]: SELF      R45 R45 K60  ; R46 := R45; R45 := R45[0xd723c617]
364 [-]: LOADK     R47 K61      ; R47 := "OnUploadChallengeProgress"
365 [-]: CALL      R45 3 1      ; R45(R46,R47)
366 [-]: GETGLOBAL R45 K23      ; R45 := mCollectionGrid
367 [-]: SELF      R45 R45 K62  ; R46 := R45; R45 := R45[0x71e9ac81]
368 [-]: LOADNIL   R47 R47      ; R47 := nil
369 [-]: LOADKB    R48 1 0      ; R48 := true
370 [-]: LOADKB    R49 1 0      ; R49 := true
371 [-]: CALL      R45 5 1      ; R45(R46,R47,R48,R49)
372 [-]: GETUPVAL  R45 U11      ; R45 := U11
373 [-]: LOADKB    R46 1 0      ; R46 := true
374 [-]: CALL      R45 2 1      ; R45(R46)
375 [-]: RETURN    R0 1         ; return 


; Function #91:
;
; Name:            
; Defined at line: 3813
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x03f57322
  2 [-]: MOVE      R2 R0        ; R2 := R0
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: EQ        0 R1 K2      ; if R1 ~= 4.000000 then PC := 8
  5 [-]: JMP       8            ; PC := 8
  6 [-]: GETUPVAL  R1 U0        ; R1 := U0
  7 [-]: CALL      R1 1 1       ; R1()
  8 [-]: RETURN    R0 1         ; return 


; Function #92:
;
; Name:            
; Defined at line: 3819
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R1 K0        ; R1 := mInputBlocked
  2 [-]: TEST      R1 0         ; if not R1 then PC := 5
  3 [-]: JMP       5            ; PC := 5
  4 [-]: RETURN    R0 1         ; return 
  5 [-]: TEST      R0 0         ; if not R0 then PC := 9
  6 [-]: JMP       9            ; PC := 9
  7 [-]: LOADKB    R1 0 0       ; R1 := false
  8 [-]: SETGLOBAL R1 K1        ; mRailjackNavOnClose := R1
  9 [-]: GETUPVAL  R1 U0        ; R1 := U0
 10 [-]: CALL      R1 1 1       ; R1()
 11 [-]: RETURN    R0 1         ; return 


; Function #93:
;
; Name:            
; Defined at line: 3831
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: GETUPVAL  R1 U0        ; R1 := U0
  2 [-]: MOVE      R2 R0        ; R2 := R0
  3 [-]: CALL      R1 2 1       ; R1(R2)
  4 [-]: RETURN    R0 1         ; return 


; Function #94:
;
; Name:            
; Defined at line: 3835
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  14

  1 [-]: NEWTABLE  R0 0 0       ; R0 := {}
  2 [-]: GETGLOBAL R1 K0        ; R1 := 0x25d99d89
  3 [-]: SELF      R1 R1 K1     ; R2 := R1; R1 := R1[0x25a6e75e]
  4 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  5 [-]: GETGLOBAL R2 K2        ; R2 := 0x7b998233
  6 [-]: MOVE      R3 R1        ; R3 := R1
  7 [-]: CALL      R2 2 2       ; R2 := R2(R3)
  8 [-]: TEST      R2 1         ; if R2 then PC := 41
  9 [-]: JMP       41           ; PC := 41
 10 [-]: GETGLOBAL R2 K3        ; R2 := _T
 11 [-]: GETTABLE  R2 R2 K4     ; R2 := R2["upgradeItemCategory"]
 12 [-]: EQ        0 R2 K6      ; if R2 ~= 1.000000 then PC := 18
 13 [-]: JMP       18           ; PC := 18
 14 [-]: SELF      R2 R1 K7     ; R3 := R1; R2 := R1[0x57d88957]
 15 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 16 [-]: MOVE      R0 R2        ; R0 := R2
 17 [-]: JMP       41           ; PC := 41
 18 [-]: GETGLOBAL R2 K3        ; R2 := _T
 19 [-]: GETTABLE  R2 R2 K4     ; R2 := R2["upgradeItemCategory"]
 20 [-]: EQ        0 R2 K8      ; if R2 ~= 0.000000 then PC := 26
 21 [-]: JMP       26           ; PC := 26
 22 [-]: SELF      R2 R1 K9     ; R3 := R1; R2 := R1[0x215bf396]
 23 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 24 [-]: MOVE      R0 R2        ; R0 := R2
 25 [-]: JMP       41           ; PC := 41
 26 [-]: GETGLOBAL R2 K3        ; R2 := _T
 27 [-]: GETTABLE  R2 R2 K4     ; R2 := R2["upgradeItemCategory"]
 28 [-]: EQ        0 R2 K10     ; if R2 ~= 5.000000 then PC := 34
 29 [-]: JMP       34           ; PC := 34
 30 [-]: SELF      R2 R1 K11    ; R3 := R1; R2 := R1[0x0bf14f02]
 31 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 32 [-]: MOVE      R0 R2        ; R0 := R2
 33 [-]: JMP       41           ; PC := 41
 34 [-]: GETGLOBAL R2 K3        ; R2 := _T
 35 [-]: GETTABLE  R2 R2 K4     ; R2 := R2["upgradeItemCategory"]
 36 [-]: EQ        0 R2 K12     ; if R2 ~= 28.000000 then PC := 41
 37 [-]: JMP       41           ; PC := 41
 38 [-]: SELF      R2 R1 K13    ; R3 := R1; R2 := R1[0x6f7b67d7]
 39 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 40 [-]: MOVE      R0 R2        ; R0 := R2
 41 [-]: NEWTABLE  R2 0 0       ; R2 := {}
 42 [-]: GETUPVAL  R3 U0        ; R3 := U0
 43 [-]: GETTABLE  R3 R3 K14    ; R3 := R3["info"]
 44 [-]: GETTABLE  R3 R3 K15    ; R3 := R3["mItemType"]
 45 [-]: CONST     R4 1         ; R4 := 1.000000
 46 [-]: LEN       R5 R0        ; R5 := # R0
 47 [-]: CONST     R6 1         ; R6 := 1.000000
 48 [-]: FORPREP   R4 82        ; R4 -= R6; PC := 82
 49 [-]: GETTABLE  R8 R0 R7     ; R8 := R0[R7]
 50 [-]: GETTABLE  R9 R8 K15    ; R9 := R8["mItemType"]
 51 [-]: EQ        0 R9 R3      ; if R9 ~= R3 then PC := 82
 52 [-]: JMP       82           ; PC := 82
 53 [-]: GETGLOBAL R9 K2        ; R9 := 0x7b998233
 54 [-]: GETTABLE  R10 R8 K16   ; R10 := R8["mUpgradeType"]
 55 [-]: CALL      R9 2 2       ; R9 := R9(R10)
 56 [-]: TEST      R9 1         ; if R9 then PC := 82
 57 [-]: JMP       82           ; PC := 82
 58 [-]: GETGLOBAL R9 K0        ; R9 := 0x25d99d89
 59 [-]: SELF      R9 R9 K17    ; R10 := R9; R9 := R9[0x29022a8c]
 60 [-]: GETTABLE  R11 R8 K18   ; R11 := R8["mItemId"]
 61 [-]: GETTABLE  R11 R11 K19  ; R11 := R11["mId"]
 62 [-]: GETGLOBAL R12 K3       ; R12 := _T
 63 [-]: GETTABLE  R12 R12 K20  ; R12 := R12["upgradeItemLot"]
 64 [-]: GETGLOBAL R13 K3       ; R13 := _T
 65 [-]: GETTABLE  R13 R13 K21  ; R13 := R13["upgradeItemSlot"]
 66 [-]: CALL      R9 5 2       ; R9 := R9(R10,R11,R12,R13)
 67 [-]: TEST      R9 1         ; if R9 then PC := 82
 68 [-]: JMP       82           ; PC := 82
 69 [-]: GETTABLE  R9 R8 K18    ; R9 := R8["mItemId"]
 70 [-]: GETTABLE  R9 R9 K19    ; R9 := R9["mId"]
 71 [-]: GETUPVAL  R10 U0       ; R10 := U0
 72 [-]: GETTABLE  R10 R10 K14  ; R10 := R10["info"]
 73 [-]: GETTABLE  R10 R10 K18  ; R10 := R10["mItemId"]
 74 [-]: GETTABLE  R10 R10 K19  ; R10 := R10["mId"]
 75 [-]: EQ        1 R9 R10     ; if R9 == R10 then PC := 82
 76 [-]: JMP       82           ; PC := 82
 77 [-]: GETGLOBAL R9 K22       ; R9 := 0x33bdd652
 78 [-]: GETTABLE  R9 R9 K23    ; R9 := R9[0x23d5322f]
 79 [-]: MOVE      R10 R2       ; R10 := R2
 80 [-]: MOVE      R11 R8       ; R11 := R8
 81 [-]: CALL      R9 3 1       ; R9(R10,R11)
 82 [-]: FORLOOP   R4 49        ; R4 += R6; if R4 <= R5 then begin PC := 49; R7 := R4 end
 83 [-]: RETURN    R2 2         ; return R2
 84 [-]: RETURN    R0 1         ; return 


; Function #95:
;
; Name:            
; Defined at line: 3867
; #Upvalues:       10
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  2 [-]: GETGLOBAL R1 K1        ; R1 := 0x18b4058f
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: TEST      R0 0         ; if not R0 then PC := 7
  5 [-]: JMP       7            ; PC := 7
  6 [-]: RETURN    R0 1         ; return 
  7 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  8 [-]: GETGLOBAL R1 K2        ; R1 := mChildMovie
  9 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 10 [-]: TEST      R0 1         ; if R0 then PC := 15
 11 [-]: JMP       15           ; PC := 15
 12 [-]: GETGLOBAL R0 K2        ; R0 := mChildMovie
 13 [-]: SELF      R0 R0 K3     ; R1 := R0; R0 := R0[0x32302b4a]
 14 [-]: CALL      R0 2 1       ; R0(R1)
 15 [-]: GETGLOBAL R0 K4        ; R0 := 0xae91e43b
 16 [-]: SELF      R0 R0 K5     ; R1 := R0; R0 := R0[0x1fd6abd0]
 17 [-]: GETGLOBAL R2 K1        ; R2 := 0x18b4058f
 18 [-]: CALL      R0 3 2       ; R0 := R0(R1,R2)
 19 [-]: SETGLOBAL R0 K2        ; mChildMovie := R0
 20 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
 21 [-]: GETGLOBAL R1 K2        ; R1 := mChildMovie
 22 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 23 [-]: TEST      R0 1         ; if R0 then PC := 52
 24 [-]: JMP       52           ; PC := 52
 25 [-]: GETUPVAL  R0 U0        ; R0 := U0
 26 [-]: CALL      R0 1 1       ; R0()
 27 [-]: GETGLOBAL R0 K6        ; R0 := _T
 28 [-]: CLOSURE   R1 0         ; R1 := closure(Function #95.1)
 29 [-]: SETTABLE  R0 K7 R1     ; R0["ActionSelectionDone"] := R1
 30 [-]: GETGLOBAL R0 K2        ; R0 := mChildMovie
 31 [-]: SELF      R0 R0 K8     ; R1 := R0; R0 := R0[0xe4162eed]
 32 [-]: LOADK     R2 K9        ; R2 := "SetCallback"
 33 [-]: LOADK     R3 K7        ; R3 := "ActionSelectionDone"
 34 [-]: CALL      R0 4 1       ; R0(R1,R2,R3)
 35 [-]: GETGLOBAL R0 K6        ; R0 := _T
 36 [-]: CLOSURE   R1 1         ; R1 := closure(Function #95.2)
 37 [-]: GETUPVAL  R0 U1        ; R0 := U1
 38 [-]: GETUPVAL  R0 U2        ; R0 := U2
 39 [-]: GETUPVAL  R0 U3        ; R0 := U3
 40 [-]: GETUPVAL  R0 U4        ; R0 := U4
 41 [-]: GETUPVAL  R0 U5        ; R0 := U5
 42 [-]: GETUPVAL  R0 U6        ; R0 := U6
 43 [-]: GETUPVAL  R0 U7        ; R0 := U7
 44 [-]: GETUPVAL  R0 U8        ; R0 := U8
 45 [-]: GETUPVAL  R0 U9        ; R0 := U9
 46 [-]: SETTABLE  R0 K10 R1    ; R0["GetActionsInfo"] := R1
 47 [-]: GETGLOBAL R0 K2        ; R0 := mChildMovie
 48 [-]: SELF      R0 R0 K8     ; R1 := R0; R0 := R0[0xe4162eed]
 49 [-]: LOADK     R2 K11       ; R2 := "SetActionsInfoFunction"
 50 [-]: LOADK     R3 K10       ; R3 := "GetActionsInfo"
 51 [-]: CALL      R0 4 1       ; R0(R1,R2,R3)
 52 [-]: RETURN    R0 1         ; return 


; Function #95.1:
;
; Name:            
; Defined at line: 3881
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := _T
  2 [-]: SETTABLE  R1 K1 K2     ; R1["ActionSelectionDone"] := nil
  3 [-]: GETGLOBAL R1 K0        ; R1 := _T
  4 [-]: SETTABLE  R1 K3 K2     ; R1["GetActionsInfo"] := nil
  5 [-]: GETGLOBAL R1 K4        ; R1 := 0xae91e43b
  6 [-]: SELF      R1 R1 K5     ; R2 := R1; R1 := R1[0xe4162eed]
  7 [-]: LOADK     R3 K6        ; R3 := "ActionSelected"
  8 [-]: MOVE      R4 R0        ; R4 := R0
  9 [-]: CALL      R1 4 1       ; R1(R2,R3,R4)
 10 [-]: RETURN    R0 1         ; return 


; Function #95.2:
;
; Name:            
; Defined at line: 3890
; #Upvalues:       9
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  47

  1 [-]: GETUPVAL  R0 U0        ; R0 := U0
  2 [-]: CALL      R0 1 2       ; R0 := R0()
  3 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  4 [-]: GETUPVAL  R2 U1        ; R2 := U1
  5 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  6 [-]: TEST      R1 1         ; if R1 then PC := 13
  7 [-]: JMP       13           ; PC := 13
  8 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  9 [-]: MOVE      R2 R0        ; R2 := R0
 10 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 11 [-]: TEST      R1 0         ; if not R1 then PC := 14
 12 [-]: JMP       14           ; PC := 14
 13 [-]: RETURN    R0 1         ; return 
 14 [-]: NEWTABLE  R1 0 0       ; R1 := {}
 15 [-]: GETGLOBAL R2 K1        ; R2 := 0xae91e43b
 16 [-]: SELF      R2 R2 K2     ; R3 := R2; R2 := R2[0x42b04007]
 17 [-]: GETGLOBAL R4 K3        ; R4 := 0x64fb1586
 18 [-]: GETUPVAL  R5 U1        ; R5 := U1
 19 [-]: GETTABLE  R5 R5 K4     ; R5 := R5["storeItem"]
 20 [-]: SELF      R5 R5 K5     ; R6 := R5; R5 := R5[0xd3a9d01f]
 21 [-]: CALL      R5 2 0       ; R5,... := R5(R6)
 22 [-]: CALL      R4 0 2       ; R4 := R4(R5,...)
 23 [-]: LOADKB    R5 1 0       ; R5 := true
 24 [-]: CALL      R2 4 2       ; R2 := R2(R3,R4,R5)
 25 [-]: GETGLOBAL R3 K6        ; R3 := _T
 26 [-]: GETTABLE  R3 R3 K7     ; R3 := R3["upgradeItemLot"]
 27 [-]: EQ        1 R3 K9      ; if R3 == 6.000000 then PC := 37
 28 [-]: JMP       37           ; PC := 37
 29 [-]: SELF      R3 R0 K10    ; R4 := R0; R3 := R0[0x81f3a598]
 30 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 31 [-]: TEST      R3 0         ; if not R3 then PC := 39
 32 [-]: JMP       39           ; PC := 39
 33 [-]: SELF      R3 R0 K11    ; R4 := R0; R3 := R0[0x6db2bc2b]
 34 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 35 [-]: NOT       R3 R3        ; R3 :=  R3
 36 [-]: JMP       39           ; PC := 39
 37 [-]: LOADKB    R3 0 1       ; R3 := false; PC := 38
 38 [-]: LOADKB    R3 1 0       ; R3 := true
 39 [-]: LOADK     R4 K12       ; R4 := ""
 40 [-]: GETGLOBAL R5 K6        ; R5 := _T
 41 [-]: GETTABLE  R5 R5 K7     ; R5 := R5["upgradeItemLot"]
 42 [-]: EQ        0 R5 K13     ; if R5 ~= 1.000000 then PC := 60
 43 [-]: JMP       60           ; PC := 60
 44 [-]: SELF      R5 R0 K14    ; R6 := R0; R5 := R0[0xf2deaf69]
 45 [-]: GETGLOBAL R7 K15       ; R7 := gPetPowerSuitType
 46 [-]: CALL      R5 3 2       ; R5 := R5(R6,R7)
 47 [-]: TEST      R5 0         ; if not R5 then PC := 51
 48 [-]: JMP       51           ; PC := 51
 49 [-]: LOADK     R4 K16       ; R4 := "/Lotus/Language/InfestedMicroplanet/Pet_Singular"
 50 [-]: JMP       75           ; PC := 75
 51 [-]: SELF      R5 R0 K14    ; R6 := R0; R5 := R0[0xf2deaf69]
 52 [-]: GETGLOBAL R7 K17       ; R7 := 0xb506ff82
 53 [-]: CALL      R5 3 2       ; R5 := R5(R6,R7)
 54 [-]: TEST      R5 0         ; if not R5 then PC := 58
 55 [-]: JMP       58           ; PC := 58
 56 [-]: LOADK     R4 K18       ; R4 := "/Lotus/Language/Pets/ZanukaPetName"
 57 [-]: JMP       75           ; PC := 75
 58 [-]: LOADK     R4 K19       ; R4 := "/Lotus/Language/SolarisVenus/MoaPet_Singular"
 59 [-]: JMP       75           ; PC := 75
 60 [-]: GETGLOBAL R5 K6        ; R5 := _T
 61 [-]: GETTABLE  R5 R5 K20    ; R5 := R5["upgradeItemSlot"]
 62 [-]: EQ        0 R5 K21     ; if R5 ~= 3.000000 then PC := 66
 63 [-]: JMP       66           ; PC := 66
 64 [-]: LOADK     R4 K22       ; R4 := "/Lotus/Language/OstronCrafting/Zaw_Singular"
 65 [-]: JMP       75           ; PC := 75
 66 [-]: GETGLOBAL R5 K6        ; R5 := _T
 67 [-]: GETTABLE  R5 R5 K20    ; R5 := R5["upgradeItemSlot"]
 68 [-]: EQ        1 R5 K23     ; if R5 == 2.000000 then PC := 74
 69 [-]: JMP       74           ; PC := 74
 70 [-]: GETGLOBAL R5 K6        ; R5 := _T
 71 [-]: GETTABLE  R5 R5 K20    ; R5 := R5["upgradeItemSlot"]
 72 [-]: EQ        0 R5 K13     ; if R5 ~= 1.000000 then PC := 75
 73 [-]: JMP       75           ; PC := 75
 74 [-]: LOADK     R4 K24       ; R4 := "/Lotus/Language/SolarisVenus/Kitgun_Singular"
 75 [-]: GETGLOBAL R5 K1        ; R5 := 0xae91e43b
 76 [-]: SELF      R5 R5 K2     ; R6 := R5; R5 := R5[0x42b04007]
 77 [-]: MOVE      R7 R4        ; R7 := R4
 78 [-]: LOADKB    R8 0 0       ; R8 := false
 79 [-]: CALL      R5 4 2       ; R5 := R5(R6,R7,R8)
 80 [-]: MOVE      R4 R5        ; R4 := R5
 81 [-]: GETGLOBAL R5 K1        ; R5 := 0xae91e43b
 82 [-]: SELF      R5 R5 K2     ; R6 := R5; R5 := R5[0x42b04007]
 83 [-]: LOADK     R7 K25       ; R7 := "/Lotus/Language/Menu/Loadout_Polarize_UnGildedModular"
 84 [-]: LOADKB    R8 0 0       ; R8 := false
 85 [-]: NEWTABLE  R9 0 1       ; R9 := {}
 86 [-]: GETGLOBAL R10 K27      ; R10 := 0x7f5022cf
 87 [-]: GETTABLE  R10 R10 K28  ; R10 := R10[0x3f3e4d12]
 88 [-]: MOVE      R11 R4       ; R11 := R4
 89 [-]: CALL      R10 2 2      ; R10 := R10(R11)
 90 [-]: SETTABLE  R9 K26 R10   ; R9["TYPE"] := R10
 91 [-]: CALL      R5 5 2       ; R5 := R5(R6,R7,R8,R9)
 92 [-]: GETGLOBAL R6 K29       ; R6 := 0x33bdd652
 93 [-]: GETTABLE  R6 R6 K30    ; R6 := R6[0x23d5322f]
 94 [-]: MOVE      R7 R1        ; R7 := R1
 95 [-]: NEWTABLE  R8 0 6       ; R8 := {}
 96 [-]: SETTABLE  R8 K31 K32   ; R8["Enabled"] := true
 97 [-]: SETTABLE  R8 K33 K34   ; R8["Choice"] := "AUTO"
 98 [-]: SETTABLE  R8 K35 K36   ; R8["Title"] := "/Lotus/Language/Menu/Loadout_Auto_Install"
 99 [-]: SETTABLE  R8 K37 K38   ; R8["Desc"] := "/Lotus/Language/Menu/Loadout_AutoInstall_Desc"
100 [-]: SETTABLE  R8 K39 K40   ; R8["BtnDesc"] := "/Lotus/Language/Menu/Loadout_AutoInstall_Apply"
101 [-]: GETGLOBAL R9 K42       ; R9 := 0x114b73f9
102 [-]: GETTABLE  R9 R9 K13    ; R9 := R9[1.000000]
103 [-]: SETTABLE  R8 K41 R9    ; R8["Image"] := R9
104 [-]: CALL      R6 3 1       ; R6(R7,R8)
105 [-]: GETUPVAL  R6 U1        ; R6 := U1
106 [-]: GETTABLE  R6 R6 K43    ; R6 := R6["info"]
107 [-]: SELF      R6 R6 K44    ; R7 := R6; R6 := R6[0xdbfbf6c0]
108 [-]: CONST     R8 0         ; R8 := 0.000000
109 [-]: CALL      R6 3 2       ; R6 := R6(R7,R8)
110 [-]: GETUPVAL  R7 U1        ; R7 := U1
111 [-]: GETTABLE  R7 R7 K43    ; R7 := R7["info"]
112 [-]: SELF      R7 R7 K44    ; R8 := R7; R7 := R7[0xdbfbf6c0]
113 [-]: CONST     R9 2         ; R9 := 2.000000
114 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
115 [-]: LOADNIL   R8 R9        ; R8 := R9 := nil
116 [-]: TESTSET   R10 R6 0     ; if not R6 then PC := 119 else R10 := R6
117 [-]: JMP       119          ; PC := 119
118 [-]: NOT       R10 R7       ; R10 :=  R7
119 [-]: TEST      R6 1         ; if R6 then PC := 126
120 [-]: JMP       126          ; PC := 126
121 [-]: SELF      R11 R0 K45   ; R12 := R0; R11 := R0[0x25dcdce7]
122 [-]: CONST     R13 0        ; R13 := 0.000000
123 [-]: CALL      R11 3 2      ; R11 := R11(R12,R13)
124 [-]: MOVE      R8 R11       ; R8 := R11
125 [-]: JMP       141          ; PC := 141
126 [-]: TEST      R7 1         ; if R7 then PC := 137
127 [-]: JMP       137          ; PC := 137
128 [-]: SELF      R11 R0 K45   ; R12 := R0; R11 := R0[0x25dcdce7]
129 [-]: CONST     R13 0        ; R13 := 0.000000
130 [-]: CALL      R11 3 2      ; R11 := R11(R12,R13)
131 [-]: MOVE      R9 R11       ; R9 := R11
132 [-]: SELF      R11 R0 K45   ; R12 := R0; R11 := R0[0x25dcdce7]
133 [-]: CONST     R13 2        ; R13 := 2.000000
134 [-]: CALL      R11 3 2      ; R11 := R11(R12,R13)
135 [-]: MOVE      R8 R11       ; R8 := R11
136 [-]: JMP       141          ; PC := 141
137 [-]: SELF      R11 R0 K45   ; R12 := R0; R11 := R0[0x25dcdce7]
138 [-]: CONST     R13 2        ; R13 := 2.000000
139 [-]: CALL      R11 3 2      ; R11 := R11(R12,R13)
140 [-]: MOVE      R9 R11       ; R9 := R11
141 [-]: GETUPVAL  R11 U2       ; R11 := U2
142 [-]: SELF      R11 R11 K46  ; R12 := R11; R11 := R11[0x5458ba4c]
143 [-]: MOVE      R13 R8       ; R13 := R8
144 [-]: CALL      R11 3 2      ; R11 := R11(R12,R13)
145 [-]: GETUPVAL  R12 U2       ; R12 := U2
146 [-]: SELF      R12 R12 K46  ; R13 := R12; R12 := R12[0x5458ba4c]
147 [-]: MOVE      R14 R9       ; R14 := R9
148 [-]: CALL      R12 3 2      ; R12 := R12(R13,R14)
149 [-]: GETUPVAL  R13 U3       ; R13 := U3
150 [-]: MOVE      R14 R8       ; R14 := R8
151 [-]: CALL      R13 2 2      ; R13 := R13(R14)
152 [-]: GETTABLE  R14 R13 K23  ; R14 := R13[2.000000]
153 [-]: GETTABLE  R15 R13 K13  ; R15 := R13[1.000000]
154 [-]: LE        1 R15 R14    ; if R15 <= R14 then PC := 157
155 [-]: JMP       157          ; PC := 157
156 [-]: LOADKB    R14 0 1      ; R14 := false; PC := 157
157 [-]: LOADKB    R14 1 0      ; R14 := true
158 [-]: LOADNIL   R15 R15      ; R15 := nil
159 [-]: GETGLOBAL R16 K0       ; R16 := 0x7b998233
160 [-]: MOVE      R17 R8       ; R17 := R8
161 [-]: CALL      R16 2 2      ; R16 := R16(R17)
162 [-]: TEST      R16 1        ; if R16 then PC := 176
163 [-]: JMP       176          ; PC := 176
164 [-]: GETUPVAL  R16 U4       ; R16 := U4
165 [-]: GETTABLE  R16 R16 K47  ; R16 := R16[0x08681f50]
166 [-]: GETGLOBAL R17 K1       ; R17 := 0xae91e43b
167 [-]: MOVE      R18 R11      ; R18 := R11
168 [-]: NEWTABLE  R19 0 1      ; R19 := {}
169 [-]: GETGLOBAL R20 K49      ; R20 := mGameData
170 [-]: SETTABLE  R19 K48 R20  ; R19["GameData"] := R20
171 [-]: LOADNIL   R20 R21      ; R20 := R21 := nil
172 [-]: LOADKB    R22 1 0      ; R22 := true
173 [-]: CALL      R16 7 2      ; R16 := R16(R17,R18,R19,R20,R21,R22)
174 [-]: MOVE      R15 R16      ; R15 := R16
175 [-]: JMP       192          ; PC := 192
176 [-]: GETGLOBAL R16 K0       ; R16 := 0x7b998233
177 [-]: MOVE      R17 R9       ; R17 := R9
178 [-]: CALL      R16 2 2      ; R16 := R16(R17)
179 [-]: TEST      R16 1        ; if R16 then PC := 192
180 [-]: JMP       192          ; PC := 192
181 [-]: GETUPVAL  R16 U4       ; R16 := U4
182 [-]: GETTABLE  R16 R16 K47  ; R16 := R16[0x08681f50]
183 [-]: GETGLOBAL R17 K1       ; R17 := 0xae91e43b
184 [-]: MOVE      R18 R12      ; R18 := R12
185 [-]: NEWTABLE  R19 0 1      ; R19 := {}
186 [-]: GETGLOBAL R20 K49      ; R20 := mGameData
187 [-]: SETTABLE  R19 K48 R20  ; R19["GameData"] := R20
188 [-]: LOADNIL   R20 R21      ; R20 := R21 := nil
189 [-]: LOADKB    R22 1 0      ; R22 := true
190 [-]: CALL      R16 7 2      ; R16 := R16(R17,R18,R19,R20,R21,R22)
191 [-]: MOVE      R15 R16      ; R15 := R16
192 [-]: EQ        0 R15 K50    ; if R15 ~= nil then PC := 216
193 [-]: JMP       216          ; PC := 216
194 [-]: NEWTABLE  R16 0 5      ; R16 := {}
195 [-]: SETTABLE  R16 K31 K51  ; R16["Enabled"] := false
196 [-]: GETUPVAL  R17 U5       ; R17 := U5
197 [-]: GETTABLE  R17 R17 K52  ; R17 := R17[0x06d055f9]
198 [-]: MOVE      R18 R10      ; R18 := R10
199 [-]: LOADK     R19 K53      ; R19 := "UPGRADE_HEAVY"
200 [-]: LOADK     R20 K54      ; R20 := "UPGRADE"
201 [-]: CALL      R17 4 2      ; R17 := R17(R18,R19,R20)
202 [-]: SETTABLE  R16 K33 R17  ; R16["Choice"] := R17
203 [-]: SETTABLE  R16 K35 K55  ; R16["Title"] := "/Lotus/Language/Menu/Loadout_UpgradeSystemInstall"
204 [-]: SETTABLE  R16 K37 K56  ; R16["Desc"] := "/Lotus/Language/Menu/Loadout_Upgrade_Desc"
205 [-]: GETUPVAL  R17 U5       ; R17 := U5
206 [-]: GETTABLE  R17 R17 K52  ; R17 := R17[0x06d055f9]
207 [-]: MOVE      R18 R10      ; R18 := R10
208 [-]: GETGLOBAL R19 K42      ; R19 := 0x114b73f9
209 [-]: GETTABLE  R19 R19 K9   ; R19 := R19[6.000000]
210 [-]: GETGLOBAL R20 K42      ; R20 := 0x114b73f9
211 [-]: GETTABLE  R20 R20 K23  ; R20 := R20[2.000000]
212 [-]: CALL      R17 4 2      ; R17 := R17(R18,R19,R20)
213 [-]: SETTABLE  R16 K41 R17  ; R16["Image"] := R17
214 [-]: MOVE      R15 R16      ; R15 := R16
215 [-]: JMP       357          ; PC := 357
216 [-]: GETUPVAL  R16 U5       ; R16 := U5
217 [-]: GETTABLE  R16 R16 K52  ; R16 := R16[0x06d055f9]
218 [-]: MOVE      R17 R10      ; R17 := R10
219 [-]: LOADK     R18 K53      ; R18 := "UPGRADE_HEAVY"
220 [-]: LOADK     R19 K54      ; R19 := "UPGRADE"
221 [-]: CALL      R16 4 2      ; R16 := R16(R17,R18,R19)
222 [-]: SETTABLE  R15 K33 R16  ; R15["Choice"] := R16
223 [-]: SETTABLE  R15 K35 K55  ; R15["Title"] := "/Lotus/Language/Menu/Loadout_UpgradeSystemInstall"
224 [-]: GETUPVAL  R16 U5       ; R16 := U5
225 [-]: GETTABLE  R16 R16 K52  ; R16 := R16[0x06d055f9]
226 [-]: MOVE      R17 R10      ; R17 := R10
227 [-]: LOADK     R18 K57      ; R18 := "/Lotus/Language/Menu/Loadout_HeavyUpgrade_Desc"
228 [-]: LOADK     R19 K56      ; R19 := "/Lotus/Language/Menu/Loadout_Upgrade_Desc"
229 [-]: CALL      R16 4 2      ; R16 := R16(R17,R18,R19)
230 [-]: SETTABLE  R15 K37 R16  ; R15["Desc"] := R16
231 [-]: GETUPVAL  R16 U5       ; R16 := U5
232 [-]: GETTABLE  R16 R16 K52  ; R16 := R16[0x06d055f9]
233 [-]: MOVE      R17 R10      ; R17 := R10
234 [-]: GETGLOBAL R18 K42      ; R18 := 0x114b73f9
235 [-]: GETTABLE  R18 R18 K9   ; R18 := R18[6.000000]
236 [-]: GETGLOBAL R19 K42      ; R19 := 0x114b73f9
237 [-]: GETTABLE  R19 R19 K23  ; R19 := R19[2.000000]
238 [-]: CALL      R16 4 2      ; R16 := R16(R17,R18,R19)
239 [-]: SETTABLE  R15 K41 R16  ; R15["Image"] := R16
240 [-]: SETTABLE  R15 K31 K32  ; R15["Enabled"] := true
241 [-]: GETTABLE  R16 R15 K31  ; R16 := R15["Enabled"]
242 [-]: SETTABLE  R15 K58 R16  ; R15["BtnCountMode"] := R16
243 [-]: GETTABLE  R16 R13 K23  ; R16 := R13[2.000000]
244 [-]: LOADK     R17 K60      ; R17 := "/"
245 [-]: GETUPVAL  R18 U5       ; R18 := U5
246 [-]: GETTABLE  R18 R18 K61  ; R18 := R18[0x1142c7a8]
247 [-]: GETTABLE  R19 R13 K13  ; R19 := R13[1.000000]
248 [-]: CALL      R18 2 2      ; R18 := R18(R19)
249 [-]: CONCAT    R16 R16 R18  ; R16 := R16 .. R17 .. R18
250 [-]: SETTABLE  R15 K59 R16  ; R15["BtnCount"] := R16
251 [-]: SETTABLE  R15 K62 R14  ; R15["BtnCheck"] := R14
252 [-]: GETGLOBAL R16 K0       ; R16 := 0x7b998233
253 [-]: MOVE      R17 R8       ; R17 := R8
254 [-]: CALL      R16 2 2      ; R16 := R16(R17)
255 [-]: TEST      R16 0        ; if not R16 then PC := 294
256 [-]: JMP       294          ; PC := 294
257 [-]: GETGLOBAL R16 K0       ; R16 := 0x7b998233
258 [-]: MOVE      R17 R12      ; R17 := R12
259 [-]: CALL      R16 2 2      ; R16 := R16(R17)
260 [-]: TEST      R16 1        ; if R16 then PC := 291
261 [-]: JMP       291          ; PC := 291
262 [-]: SETTABLE  R15 K31 K51  ; R15["Enabled"] := false
263 [-]: SETTABLE  R15 K58 K51  ; R15["BtnCountMode"] := false
264 [-]: SETTABLE  R15 K35 K63  ; R15["Title"] := "/Lotus/Language/Menu/Loadout_Upgrade_TitleInstalled"
265 [-]: GETGLOBAL R16 K1       ; R16 := 0xae91e43b
266 [-]: SELF      R16 R16 K2   ; R17 := R16; R16 := R16[0x42b04007]
267 [-]: LOADK     R18 K64      ; R18 := "/Lotus/Language/Menu/Loadout_Upgrade_AlreadyInstalled"
268 [-]: LOADKB    R19 1 0      ; R19 := true
269 [-]: NEWTABLE  R20 0 1      ; R20 := {}
270 [-]: GETGLOBAL R21 K1       ; R21 := 0xae91e43b
271 [-]: SELF      R21 R21 K2   ; R22 := R21; R21 := R21[0x42b04007]
272 [-]: SELF      R23 R12 K5   ; R24 := R12; R23 := R12[0xd3a9d01f]
273 [-]: CALL      R23 2 2      ; R23 := R23(R24)
274 [-]: SELF      R23 R23 K65  ; R24 := R23; R23 := R23[0x6d604ba7]
275 [-]: CALL      R23 2 2      ; R23 := R23(R24)
276 [-]: LOADKB    R24 0 0      ; R24 := false
277 [-]: CALL      R21 4 2      ; R21 := R21(R22,R23,R24)
278 [-]: SETTABLE  R20 K26 R21  ; R20["TYPE"] := R21
279 [-]: CALL      R16 5 2      ; R16 := R16(R17,R18,R19,R20)
280 [-]: MOVE      R17 R16      ; R17 := R16
281 [-]: LOADK     R18 K66      ; R18 := "\r\n\r\n"
282 [-]: GETGLOBAL R19 K1       ; R19 := 0xae91e43b
283 [-]: SELF      R19 R19 K2   ; R20 := R19; R19 := R19[0x42b04007]
284 [-]: LOADK     R21 K67      ; R21 := "/Lotus/Language/Menu/Loadout_Upgrade_DescInstalled"
285 [-]: LOADKB    R22 0 0      ; R22 := false
286 [-]: CALL      R19 4 2      ; R19 := R19(R20,R21,R22)
287 [-]: CONCAT    R16 R17 R19  ; R16 := R17 .. R18 .. R19
288 [-]: SETTABLE  R15 K37 R16  ; R15["Desc"] := R16
289 [-]: SETTABLE  R15 K68 K32  ; R15["IconAsImage"] := true
290 [-]: JMP       357          ; PC := 357
291 [-]: SETTABLE  R15 K31 K51  ; R15["Enabled"] := false
292 [-]: SETTABLE  R15 K69 K70  ; R15["LockedMsg"] := "[HC] MISSING STORE ITEM"
293 [-]: JMP       357          ; PC := 357
294 [-]: TEST      R14 1        ; if R14 then PC := 357
295 [-]: JMP       357          ; PC := 357
296 [-]: GETUPVAL  R17 U6       ; R17 := U6
297 [-]: GETTABLE  R17 R17 K71  ; R17 := R17[0xe9947039]
298 [-]: MOVE      R18 R11      ; R18 := R11
299 [-]: LOADNIL   R19 R19      ; R19 := nil
300 [-]: LOADKB    R20 1 0      ; R20 := true
301 [-]: CALL      R17 4 3      ; R17,R18 := R17(R18,R19,R20)
302 [-]: EQ        1 R18 K72    ; if R18 == 0.000000 then PC := 325
303 [-]: JMP       325          ; PC := 325
304 [-]: GETGLOBAL R19 K1       ; R19 := 0xae91e43b
305 [-]: SELF      R19 R19 K2   ; R20 := R19; R19 := R19[0x42b04007]
306 [-]: LOADK     R21 K73      ; R21 := "/Lotus/Language/Menu/Loadout_Upgrade_CatalystRequired"
307 [-]: LOADKB    R22 1 0      ; R22 := true
308 [-]: NEWTABLE  R23 0 2      ; R23 := {}
309 [-]: GETGLOBAL R24 K1       ; R24 := 0xae91e43b
310 [-]: SELF      R24 R24 K2   ; R25 := R24; R24 := R24[0x42b04007]
311 [-]: SELF      R26 R11 K5   ; R27 := R11; R26 := R11[0xd3a9d01f]
312 [-]: CALL      R26 2 2      ; R26 := R26(R27)
313 [-]: SELF      R26 R26 K65  ; R27 := R26; R26 := R26[0x6d604ba7]
314 [-]: CALL      R26 2 2      ; R26 := R26(R27)
315 [-]: LOADKB    R27 0 0      ; R27 := false
316 [-]: CALL      R24 4 2      ; R24 := R24(R25,R26,R27)
317 [-]: SETTABLE  R23 K26 R24  ; R23["TYPE"] := R24
318 [-]: GETGLOBAL R24 K3       ; R24 := 0x64fb1586
319 [-]: MOVE      R25 R18      ; R25 := R18
320 [-]: CALL      R24 2 2      ; R24 := R24(R25)
321 [-]: SETTABLE  R23 K74 R24  ; R23["COST"] := R24
322 [-]: CALL      R19 5 2      ; R19 := R19(R20,R21,R22,R23)
323 [-]: SETTABLE  R15 K69 R19  ; R15["LockedMsg"] := R19
324 [-]: JMP       357          ; PC := 357
325 [-]: GETGLOBAL R19 K1       ; R19 := 0xae91e43b
326 [-]: SELF      R19 R19 K2   ; R20 := R19; R19 := R19[0x42b04007]
327 [-]: LOADK     R21 K75      ; R21 := "/Lotus/Language/Menu/Item_CannotPurchaseMissingPrerequisite"
328 [-]: LOADKB    R22 1 0      ; R22 := true
329 [-]: NEWTABLE  R23 0 1      ; R23 := {}
330 [-]: GETGLOBAL R24 K1       ; R24 := 0xae91e43b
331 [-]: SELF      R24 R24 K2   ; R25 := R24; R24 := R24[0x42b04007]
332 [-]: SELF      R26 R11 K5   ; R27 := R11; R26 := R11[0xd3a9d01f]
333 [-]: CALL      R26 2 2      ; R26 := R26(R27)
334 [-]: SELF      R26 R26 K65  ; R27 := R26; R26 := R26[0x6d604ba7]
335 [-]: CALL      R26 2 2      ; R26 := R26(R27)
336 [-]: LOADKB    R27 0 0      ; R27 := false
337 [-]: CALL      R24 4 2      ; R24 := R24(R25,R26,R27)
338 [-]: SETTABLE  R23 K76 R24  ; R23["NAME"] := R24
339 [-]: CALL      R19 5 2      ; R19 := R19(R20,R21,R22,R23)
340 [-]: SETTABLE  R15 K69 R19  ; R15["LockedMsg"] := R19
341 [-]: GETGLOBAL R19 K1       ; R19 := 0xae91e43b
342 [-]: SELF      R19 R19 K2   ; R20 := R19; R19 := R19[0x42b04007]
343 [-]: LOADK     R21 K78      ; R21 := "/Lotus/Language/Menu/UpgradeMissingReq"
344 [-]: LOADKB    R22 1 0      ; R22 := true
345 [-]: NEWTABLE  R23 0 1      ; R23 := {}
346 [-]: GETGLOBAL R24 K1       ; R24 := 0xae91e43b
347 [-]: SELF      R24 R24 K2   ; R25 := R24; R24 := R24[0x42b04007]
348 [-]: SELF      R26 R11 K5   ; R27 := R11; R26 := R11[0xd3a9d01f]
349 [-]: CALL      R26 2 2      ; R26 := R26(R27)
350 [-]: SELF      R26 R26 K65  ; R27 := R26; R26 := R26[0x6d604ba7]
351 [-]: CALL      R26 2 2      ; R26 := R26(R27)
352 [-]: LOADKB    R27 0 0      ; R27 := false
353 [-]: CALL      R24 4 2      ; R24 := R24(R25,R26,R27)
354 [-]: SETTABLE  R23 K79 R24  ; R23["REQ"] := R24
355 [-]: CALL      R19 5 2      ; R19 := R19(R20,R21,R22,R23)
356 [-]: SETTABLE  R15 K77 R19  ; R15["ErrorMsg"] := R19
357 [-]: GETGLOBAL R19 K29      ; R19 := 0x33bdd652
358 [-]: GETTABLE  R19 R19 K30  ; R19 := R19[0x23d5322f]
359 [-]: MOVE      R20 R1       ; R20 := R1
360 [-]: MOVE      R21 R15      ; R21 := R15
361 [-]: CALL      R19 3 1      ; R19(R20,R21)
362 [-]: GETUPVAL  R19 U2       ; R19 := U2
363 [-]: SELF      R19 R19 K46  ; R20 := R19; R19 := R19[0x5458ba4c]
364 [-]: GETGLOBAL R21 K80      ; R21 := 0x4f700543
365 [-]: GETTABLE  R21 R21 K13  ; R21 := R21[1.000000]
366 [-]: CALL      R19 3 2      ; R19 := R19(R20,R21)
367 [-]: MOVE      R12 R19      ; R12 := R19
368 [-]: GETGLOBAL R19 K81      ; R19 := 0xa94df70b
369 [-]: SELF      R19 R19 K82  ; R20 := R19; R19 := R19[0x84fb4327]
370 [-]: GETUPVAL  R21 U1       ; R21 := U1
371 [-]: GETTABLE  R21 R21 K43  ; R21 := R21["info"]
372 [-]: GETTABLE  R21 R21 K83  ; R21 := R21["mItemType"]
373 [-]: GETUPVAL  R22 U1       ; R22 := U1
374 [-]: GETTABLE  R22 R22 K43  ; R22 := R22["info"]
375 [-]: GETTABLE  R22 R22 K84  ; R22 := R22["mPolarized"]
376 [-]: CALL      R19 4 2      ; R19 := R19(R20,R21,R22)
377 [-]: GETGLOBAL R20 K85      ; R20 := 0x5bced4c4
378 [-]: GETTABLE  R20 R20 K86  ; R20 := R20[0xac1b386a]
379 [-]: MOVE      R21 R19      ; R21 := R19
380 [-]: GETGLOBAL R22 K81      ; R22 := 0xa94df70b
381 [-]: SELF      R22 R22 K87  ; R23 := R22; R22 := R22[0x8427bf69]
382 [-]: GETUPVAL  R24 U1       ; R24 := U1
383 [-]: GETTABLE  R24 R24 K43  ; R24 := R24["info"]
384 [-]: GETTABLE  R24 R24 K88  ; R24 := R24["mXP"]
385 [-]: GETUPVAL  R25 U1       ; R25 := U1
386 [-]: GETTABLE  R25 R25 K43  ; R25 := R25["info"]
387 [-]: GETTABLE  R25 R25 K83  ; R25 := R25["mItemType"]
388 [-]: CALL      R22 4 0      ; R22,... := R22(R23,R24,R25)
389 [-]: CALL      R20 0 2      ; R20 := R20(R21,...)
390 [-]: GETUPVAL  R21 U4       ; R21 := U4
391 [-]: GETTABLE  R21 R21 K47  ; R21 := R21[0x08681f50]
392 [-]: GETGLOBAL R22 K1       ; R22 := 0xae91e43b
393 [-]: MOVE      R23 R12      ; R23 := R12
394 [-]: NEWTABLE  R24 0 1      ; R24 := {}
395 [-]: GETGLOBAL R25 K49      ; R25 := mGameData
396 [-]: SETTABLE  R24 K48 R25  ; R24["GameData"] := R25
397 [-]: LOADNIL   R25 R26      ; R25 := R26 := nil
398 [-]: LOADKB    R27 1 0      ; R27 := true
399 [-]: CALL      R21 7 2      ; R21 := R21(R22,R23,R24,R25,R26,R27)
400 [-]: EQ        1 R21 K50    ; if R21 == nil then PC := 523
401 [-]: JMP       523          ; PC := 523
402 [-]: SETTABLE  R21 K31 K32  ; R21["Enabled"] := true
403 [-]: SETTABLE  R21 K33 K89  ; R21["Choice"] := "FORMA"
404 [-]: SETTABLE  R21 K35 K90  ; R21["Title"] := "/Lotus/Language/Menu/Loadout_Polarize_Title"
405 [-]: SETTABLE  R21 K37 K91  ; R21["Desc"] := "/Lotus/Language/Menu/Loadout_Polarize_Desc"
406 [-]: GETGLOBAL R22 K42      ; R22 := 0x114b73f9
407 [-]: GETTABLE  R22 R22 K21  ; R22 := R22[3.000000]
408 [-]: SETTABLE  R21 K41 R22  ; R21["Image"] := R22
409 [-]: GETGLOBAL R22 K92      ; R22 := 0x25d99d89
410 [-]: SELF      R22 R22 K93  ; R23 := R22; R22 := R22[0x25a6e75e]
411 [-]: CALL      R22 2 2      ; R22 := R22(R23)
412 [-]: CONST     R23 0        ; R23 := 0.000000
413 [-]: CONST     R24 1        ; R24 := 1.000000
414 [-]: GETGLOBAL R25 K80      ; R25 := 0x4f700543
415 [-]: LEN       R25 R25      ; R25 := # R25
416 [-]: CONST     R26 1        ; R26 := 1.000000
417 [-]: FORPREP   R24 429      ; R24 -= R26; PC := 429
418 [-]: GETUPVAL  R28 U7       ; R28 := U7
419 [-]: MOVE      R29 R27      ; R29 := R27
420 [-]: GETUPVAL  R30 U1       ; R30 := U1
421 [-]: CALL      R28 3 2      ; R28 := R28(R29,R30)
422 [-]: TEST      R28 0        ; if not R28 then PC := 429
423 [-]: JMP       429          ; PC := 429
424 [-]: SELF      R28 R22 K94  ; R29 := R22; R28 := R22[0x51b30e60]
425 [-]: GETGLOBAL R30 K80      ; R30 := 0x4f700543
426 [-]: GETTABLE  R30 R30 R27  ; R30 := R30[R27]
427 [-]: CALL      R28 3 2      ; R28 := R28(R29,R30)
428 [-]: ADD       R23 R23 R28  ; R23 := R23 + R28
429 [-]: FORLOOP   R24 418      ; R24 += R26; if R24 <= R25 then begin PC := 418; R27 := R24 end
430 [-]: LE        1 K13 R23    ; if 1.000000 <= R23 then PC := 433
431 [-]: JMP       433          ; PC := 433
432 [-]: LOADKB    R14 0 1      ; R14 := false; PC := 433
433 [-]: LOADKB    R14 1 0      ; R14 := true
434 [-]: LE        0 R19 R20    ; if R19 > R20 then PC := 438
435 [-]: JMP       438          ; PC := 438
436 [-]: NOT       R28 R3       ; R28 :=  R3
437 [-]: JMP       440          ; PC := 440
438 [-]: LOADKB    R28 0 1      ; R28 := false; PC := 439
439 [-]: LOADKB    R28 1 0      ; R28 := true
440 [-]: SETTABLE  R21 K58 R28  ; R21["BtnCountMode"] := R28
441 [-]: GETUPVAL  R28 U5       ; R28 := U5
442 [-]: GETTABLE  R28 R28 K61  ; R28 := R28[0x1142c7a8]
443 [-]: MOVE      R29 R23      ; R29 := R23
444 [-]: CALL      R28 2 2      ; R28 := R28(R29)
445 [-]: LOADK     R29 K95      ; R29 := "/1"
446 [-]: CONCAT    R28 R28 R29  ; R28 := R28 .. R29
447 [-]: SETTABLE  R21 K59 R28  ; R21["BtnCount"] := R28
448 [-]: SETTABLE  R21 K62 R14  ; R21["BtnCheck"] := R14
449 [-]: GETGLOBAL R28 K96      ; R28 := mItemExpires
450 [-]: TEST      R28 0        ; if not R28 then PC := 461
451 [-]: JMP       461          ; PC := 461
452 [-]: GETGLOBAL R28 K1       ; R28 := 0xae91e43b
453 [-]: SELF      R28 R28 K2   ; R29 := R28; R28 := R28[0x42b04007]
454 [-]: LOADK     R30 K97      ; R30 := "/Lotus/Language/Menu/Loadout_Polarize_WillExpireTitle"
455 [-]: LOADKB    R31 1 0      ; R31 := true
456 [-]: NEWTABLE  R32 0 1      ; R32 := {}
457 [-]: SETTABLE  R32 K98 R2   ; R32["ITEM"] := R2
458 [-]: CALL      R28 5 2      ; R28 := R28(R29,R30,R31,R32)
459 [-]: SETTABLE  R21 K69 R28  ; R21["LockedMsg"] := R28
460 [-]: JMP       518          ; PC := 518
461 [-]: GETTABLE  R28 R21 K58  ; R28 := R21["BtnCountMode"]
462 [-]: TEST      R28 0        ; if not R28 then PC := 466
463 [-]: JMP       466          ; PC := 466
464 [-]: TEST      R14 1        ; if R14 then PC := 518
465 [-]: JMP       518          ; PC := 518
466 [-]: TEST      R3 0         ; if not R3 then PC := 478
467 [-]: JMP       478          ; PC := 478
468 [-]: SETTABLE  R21 K69 R5   ; R21["LockedMsg"] := R5
469 [-]: GETGLOBAL R28 K1       ; R28 := 0xae91e43b
470 [-]: SELF      R28 R28 K2   ; R29 := R28; R28 := R28[0x42b04007]
471 [-]: LOADK     R30 K99      ; R30 := "/Lotus/Language/Menu/Loadout_Polarize_UnGildedModularDesc"
472 [-]: LOADKB    R31 0 0      ; R31 := false
473 [-]: NEWTABLE  R32 0 1      ; R32 := {}
474 [-]: SETTABLE  R32 K26 R4   ; R32["TYPE"] := R4
475 [-]: CALL      R28 5 2      ; R28 := R28(R29,R30,R31,R32)
476 [-]: SETTABLE  R21 K77 R28  ; R21["ErrorMsg"] := R28
477 [-]: JMP       518          ; PC := 518
478 [-]: GETGLOBAL R28 K1       ; R28 := 0xae91e43b
479 [-]: SELF      R28 R28 K2   ; R29 := R28; R28 := R28[0x42b04007]
480 [-]: LOADK     R30 K100     ; R30 := "/Lotus/Language/Menu/Loadout_Polarize_TooLowLevel"
481 [-]: LOADKB    R31 1 0      ; R31 := true
482 [-]: NEWTABLE  R32 0 1      ; R32 := {}
483 [-]: SETTABLE  R32 K98 R2   ; R32["ITEM"] := R2
484 [-]: CALL      R28 5 2      ; R28 := R28(R29,R30,R31,R32)
485 [-]: SETTABLE  R21 K69 R28  ; R21["LockedMsg"] := R28
486 [-]: GETTABLE  R28 R21 K58  ; R28 := R21["BtnCountMode"]
487 [-]: TEST      R28 0        ; if not R28 then PC := 516
488 [-]: JMP       516          ; PC := 516
489 [-]: GETUPVAL  R28 U6       ; R28 := U6
490 [-]: GETTABLE  R28 R28 K71  ; R28 := R28[0xe9947039]
491 [-]: MOVE      R29 R12      ; R29 := R12
492 [-]: LOADNIL   R30 R30      ; R30 := nil
493 [-]: LOADKB    R31 1 0      ; R31 := true
494 [-]: CALL      R28 4 3      ; R28,R29 := R28(R29,R30,R31)
495 [-]: GETGLOBAL R30 K1       ; R30 := 0xae91e43b
496 [-]: SELF      R30 R30 K2   ; R31 := R30; R30 := R30[0x42b04007]
497 [-]: LOADK     R32 K73      ; R32 := "/Lotus/Language/Menu/Loadout_Upgrade_CatalystRequired"
498 [-]: LOADKB    R33 1 0      ; R33 := true
499 [-]: NEWTABLE  R34 0 2      ; R34 := {}
500 [-]: GETGLOBAL R35 K1       ; R35 := 0xae91e43b
501 [-]: SELF      R35 R35 K2   ; R36 := R35; R35 := R35[0x42b04007]
502 [-]: SELF      R37 R12 K5   ; R38 := R12; R37 := R12[0xd3a9d01f]
503 [-]: CALL      R37 2 2      ; R37 := R37(R38)
504 [-]: SELF      R37 R37 K65  ; R38 := R37; R37 := R37[0x6d604ba7]
505 [-]: CALL      R37 2 2      ; R37 := R37(R38)
506 [-]: LOADKB    R38 0 0      ; R38 := false
507 [-]: CALL      R35 4 2      ; R35 := R35(R36,R37,R38)
508 [-]: SETTABLE  R34 K26 R35  ; R34["TYPE"] := R35
509 [-]: GETGLOBAL R35 K3       ; R35 := 0x64fb1586
510 [-]: MOVE      R36 R29      ; R36 := R29
511 [-]: CALL      R35 2 2      ; R35 := R35(R36)
512 [-]: SETTABLE  R34 K74 R35  ; R34["COST"] := R35
513 [-]: CALL      R30 5 2      ; R30 := R30(R31,R32,R33,R34)
514 [-]: SETTABLE  R21 K69 R30  ; R21["LockedMsg"] := R30
515 [-]: JMP       518          ; PC := 518
516 [-]: GETTABLE  R30 R21 K69  ; R30 := R21["LockedMsg"]
517 [-]: SETTABLE  R21 K77 R30  ; R21["ErrorMsg"] := R30
518 [-]: GETGLOBAL R30 K29      ; R30 := 0x33bdd652
519 [-]: GETTABLE  R30 R30 K30  ; R30 := R30[0x23d5322f]
520 [-]: MOVE      R31 R1       ; R31 := R1
521 [-]: MOVE      R32 R21      ; R32 := R21
522 [-]: CALL      R30 3 1      ; R30(R31,R32)
523 [-]: NEWTABLE  R30 0 5      ; R30 := {}
524 [-]: SETTABLE  R30 K31 K32  ; R30["Enabled"] := true
525 [-]: SETTABLE  R30 K33 K101 ; R30["Choice"] := "SWAP"
526 [-]: SETTABLE  R30 K35 K102 ; R30["Title"] := "/Lotus/Language/Menu/Loadout_SwapPolarity_Title"
527 [-]: SETTABLE  R30 K37 K103 ; R30["Desc"] := "/Lotus/Language/Menu/Loadout_SwapPolarity_Desc"
528 [-]: GETGLOBAL R31 K42      ; R31 := 0x114b73f9
529 [-]: GETTABLE  R31 R31 K104 ; R31 := R31[4.000000]
530 [-]: SETTABLE  R30 K41 R31  ; R30["Image"] := R31
531 [-]: GETUPVAL  R31 U1       ; R31 := U1
532 [-]: GETTABLE  R31 R31 K43  ; R31 := R31["info"]
533 [-]: GETTABLE  R31 R31 K84  ; R31 := R31["mPolarized"]
534 [-]: LT        1 K72 R31    ; if 0.000000 < R31 then PC := 537
535 [-]: JMP       537          ; PC := 537
536 [-]: LOADKB    R31 0 1      ; R31 := false; PC := 537
537 [-]: LOADKB    R31 1 0      ; R31 := true
538 [-]: GETGLOBAL R32 K96      ; R32 := mItemExpires
539 [-]: TEST      R32 0        ; if not R32 then PC := 550
540 [-]: JMP       550          ; PC := 550
541 [-]: GETGLOBAL R32 K1       ; R32 := 0xae91e43b
542 [-]: SELF      R32 R32 K2   ; R33 := R32; R32 := R32[0x42b04007]
543 [-]: LOADK     R34 K97      ; R34 := "/Lotus/Language/Menu/Loadout_Polarize_WillExpireTitle"
544 [-]: LOADKB    R35 1 0      ; R35 := true
545 [-]: NEWTABLE  R36 0 1      ; R36 := {}
546 [-]: SETTABLE  R36 K98 R2   ; R36["ITEM"] := R2
547 [-]: CALL      R32 5 2      ; R32 := R32(R33,R34,R35,R36)
548 [-]: SETTABLE  R30 K69 R32  ; R30["LockedMsg"] := R32
549 [-]: JMP       561          ; PC := 561
550 [-]: TEST      R31 1        ; if R31 then PC := 561
551 [-]: JMP       561          ; PC := 561
552 [-]: SETTABLE  R30 K69 K105 ; R30["LockedMsg"] := "/Lotus/Language/Menu/Loadout_SwapPolarity_ItemNotPolarized"
553 [-]: GETGLOBAL R32 K1       ; R32 := 0xae91e43b
554 [-]: SELF      R32 R32 K2   ; R33 := R32; R32 := R32[0x42b04007]
555 [-]: LOADK     R34 K106     ; R34 := "/Lotus/Language/Menu/Loadout_SwapPolarity_NotPolarizedErrorMsg"
556 [-]: LOADKB    R35 1 0      ; R35 := true
557 [-]: NEWTABLE  R36 0 1      ; R36 := {}
558 [-]: SETTABLE  R36 K98 R2   ; R36["ITEM"] := R2
559 [-]: CALL      R32 5 2      ; R32 := R32(R33,R34,R35,R36)
560 [-]: SETTABLE  R30 K77 R32  ; R30["ErrorMsg"] := R32
561 [-]: GETGLOBAL R32 K29      ; R32 := 0x33bdd652
562 [-]: GETTABLE  R32 R32 K30  ; R32 := R32[0x23d5322f]
563 [-]: MOVE      R33 R1       ; R33 := R1
564 [-]: MOVE      R34 R30      ; R34 := R30
565 [-]: CALL      R32 3 1      ; R32(R33,R34)
566 [-]: GETUPVAL  R32 U6       ; R32 := U6
567 [-]: GETTABLE  R32 R32 K107 ; R32 := R32[0x52fb05b3]
568 [-]: GETGLOBAL R33 K108     ; R33 := 0x58b09245
569 [-]: CALL      R32 2 2      ; R32 := R32(R33)
570 [-]: TEST      R32 0        ; if not R32 then PC := 598
571 [-]: JMP       598          ; PC := 598
572 [-]: GETGLOBAL R32 K6       ; R32 := _T
573 [-]: GETTABLE  R32 R32 K109 ; R32 := R32["upgradeItemCategory"]
574 [-]: EQ        1 R32 K111   ; if R32 == 24.000000 then PC := 596
575 [-]: JMP       596          ; PC := 596
576 [-]: GETGLOBAL R32 K6       ; R32 := _T
577 [-]: GETTABLE  R32 R32 K109 ; R32 := R32["upgradeItemCategory"]
578 [-]: EQ        1 R32 K112   ; if R32 == 39.000000 then PC := 596
579 [-]: JMP       596          ; PC := 596
580 [-]: GETGLOBAL R32 K6       ; R32 := _T
581 [-]: GETTABLE  R32 R32 K109 ; R32 := R32["upgradeItemCategory"]
582 [-]: EQ        1 R32 K113   ; if R32 == 15.000000 then PC := 596
583 [-]: JMP       596          ; PC := 596
584 [-]: GETGLOBAL R32 K6       ; R32 := _T
585 [-]: GETTABLE  R32 R32 K109 ; R32 := R32["upgradeItemCategory"]
586 [-]: EQ        1 R32 K114   ; if R32 == 16.000000 then PC := 596
587 [-]: JMP       596          ; PC := 596
588 [-]: GETGLOBAL R32 K6       ; R32 := _T
589 [-]: GETTABLE  R32 R32 K109 ; R32 := R32["upgradeItemCategory"]
590 [-]: EQ        1 R32 K115   ; if R32 == 38.000000 then PC := 596
591 [-]: JMP       596          ; PC := 596
592 [-]: GETGLOBAL R32 K6       ; R32 := _T
593 [-]: GETTABLE  R32 R32 K109 ; R32 := R32["upgradeItemCategory"]
594 [-]: EQ        0 R32 K116   ; if R32 ~= 49.000000 then PC := 597
595 [-]: JMP       597          ; PC := 597
596 [-]: LOADKB    R32 0 1      ; R32 := false; PC := 597
597 [-]: LOADKB    R32 1 0      ; R32 := true
598 [-]: TEST      R32 0        ; if not R32 then PC := 735
599 [-]: JMP       735          ; PC := 735
600 [-]: NEWTABLE  R33 0 5      ; R33 := {}
601 [-]: SETTABLE  R33 K31 K32  ; R33["Enabled"] := true
602 [-]: SETTABLE  R33 K33 K117 ; R33["Choice"] := "LENS"
603 [-]: SETTABLE  R33 K35 K118 ; R33["Title"] := "/Lotus/Language/Menu/Loadout_Lens"
604 [-]: SETTABLE  R33 K37 K119 ; R33["Desc"] := "/Lotus/Language/Menu/Loadout_Lens_Desc"
605 [-]: GETGLOBAL R34 K42      ; R34 := 0x114b73f9
606 [-]: GETTABLE  R34 R34 K120 ; R34 := R34[5.000000]
607 [-]: SETTABLE  R33 K41 R34  ; R33["Image"] := R34
608 [-]: GETUPVAL  R34 U3       ; R34 := U3
609 [-]: GETGLOBAL R35 K121     ; R35 := gFocusLensType
610 [-]: CALL      R34 2 2      ; R34 := R34(R35)
611 [-]: MOVE      R13 R34      ; R13 := R34
612 [-]: GETTABLE  R34 R13 K23  ; R34 := R13[2.000000]
613 [-]: LT        1 K72 R34    ; if 0.000000 < R34 then PC := 616
614 [-]: JMP       616          ; PC := 616
615 [-]: LOADKB    R14 0 1      ; R14 := false; PC := 616
616 [-]: LOADKB    R14 1 0      ; R14 := true
617 [-]: GETGLOBAL R34 K0       ; R34 := 0x7b998233
618 [-]: GETUPVAL  R35 U1       ; R35 := U1
619 [-]: GETTABLE  R35 R35 K43  ; R35 := R35["info"]
620 [-]: GETTABLE  R35 R35 K122 ; R35 := R35["mFocusLens"]
621 [-]: CALL      R34 2 2      ; R34 := R34(R35)
622 [-]: TEST      R34 1        ; if R34 then PC := 678
623 [-]: JMP       678          ; PC := 678
624 [-]: GETUPVAL  R34 U2       ; R34 := U2
625 [-]: SELF      R34 R34 K123 ; R35 := R34; R34 := R34[0x105074fb]
626 [-]: GETUPVAL  R36 U1       ; R36 := U1
627 [-]: GETTABLE  R36 R36 K43  ; R36 := R36["info"]
628 [-]: GETTABLE  R36 R36 K122 ; R36 := R36["mFocusLens"]
629 [-]: CALL      R34 3 2      ; R34 := R34(R35,R36)
630 [-]: GETGLOBAL R35 K0       ; R35 := 0x7b998233
631 [-]: MOVE      R36 R34      ; R36 := R34
632 [-]: CALL      R35 2 2      ; R35 := R35(R36)
633 [-]: TEST      R35 1        ; if R35 then PC := 659
634 [-]: JMP       659          ; PC := 659
635 [-]: GETUPVAL  R35 U4       ; R35 := U4
636 [-]: GETTABLE  R35 R35 K47  ; R35 := R35[0x08681f50]
637 [-]: GETGLOBAL R36 K1       ; R36 := 0xae91e43b
638 [-]: MOVE      R37 R34      ; R37 := R34
639 [-]: NEWTABLE  R38 0 1      ; R38 := {}
640 [-]: GETGLOBAL R39 K49      ; R39 := mGameData
641 [-]: SETTABLE  R38 K48 R39  ; R38["GameData"] := R39
642 [-]: LOADNIL   R39 R40      ; R39 := R40 := nil
643 [-]: LOADKB    R41 1 0      ; R41 := true
644 [-]: CALL      R35 7 2      ; R35 := R35(R36,R37,R38,R39,R40,R41)
645 [-]: MOVE      R33 R35      ; R33 := R35
646 [-]: SETTABLE  R33 K31 K32  ; R33["Enabled"] := true
647 [-]: SETTABLE  R33 K33 K117 ; R33["Choice"] := "LENS"
648 [-]: SELF      R35 R34 K5   ; R36 := R34; R35 := R34[0xd3a9d01f]
649 [-]: CALL      R35 2 2      ; R35 := R35(R36)
650 [-]: SELF      R35 R35 K65  ; R36 := R35; R35 := R35[0x6d604ba7]
651 [-]: CALL      R35 2 2      ; R35 := R35(R36)
652 [-]: SETTABLE  R33 K35 R35  ; R33["Title"] := R35
653 [-]: SELF      R35 R34 K124 ; R36 := R34; R35 := R34[0x5ba460ac]
654 [-]: CALL      R35 2 2      ; R35 := R35(R36)
655 [-]: SELF      R35 R35 K65  ; R36 := R35; R35 := R35[0x6d604ba7]
656 [-]: CALL      R35 2 2      ; R35 := R35(R36)
657 [-]: SETTABLE  R33 K37 R35  ; R33["Desc"] := R35
658 [-]: SETTABLE  R33 K68 K32  ; R33["IconAsImage"] := true
659 [-]: SETTABLE  R33 K39 K125 ; R33["BtnDesc"] := "/Lotus/Language/Menu/Loadout_LensReplace"
660 [-]: GETGLOBAL R35 K81      ; R35 := 0xa94df70b
661 [-]: SELF      R35 R35 K126 ; R36 := R35; R35 := R35[0x757f0100]
662 [-]: GETUPVAL  R37 U1       ; R37 := U1
663 [-]: GETTABLE  R37 R37 K43  ; R37 := R37["info"]
664 [-]: GETTABLE  R37 R37 K83  ; R37 := R37["mItemType"]
665 [-]: CALL      R35 3 2      ; R35 := R35(R36,R37)
666 [-]: EQ        1 R20 R35    ; if R20 == R35 then PC := 730
667 [-]: JMP       730          ; PC := 730
668 [-]: GETGLOBAL R35 K1       ; R35 := 0xae91e43b
669 [-]: SELF      R35 R35 K2   ; R36 := R35; R35 := R35[0x42b04007]
670 [-]: LOADK     R37 K127     ; R37 := "/Lotus/Language/Menu/Loadout_LensErrorItemNotMaxRank"
671 [-]: LOADKB    R38 1 0      ; R38 := true
672 [-]: NEWTABLE  R39 0 1      ; R39 := {}
673 [-]: SETTABLE  R39 K98 R2   ; R39["ITEM"] := R2
674 [-]: CALL      R35 5 2      ; R35 := R35(R36,R37,R38,R39)
675 [-]: SETTABLE  R33 K77 R35  ; R33["ErrorMsg"] := R35
676 [-]: SETTABLE  R33 K69 R35  ; R33["LockedMsg"] := R35
677 [-]: JMP       730          ; PC := 730
678 [-]: GETGLOBAL R36 K81      ; R36 := 0xa94df70b
679 [-]: SELF      R36 R36 K126 ; R37 := R36; R36 := R36[0x757f0100]
680 [-]: GETUPVAL  R38 U1       ; R38 := U1
681 [-]: GETTABLE  R38 R38 K43  ; R38 := R38["info"]
682 [-]: GETTABLE  R38 R38 K83  ; R38 := R38["mItemType"]
683 [-]: CALL      R36 3 2      ; R36 := R36(R37,R38)
684 [-]: EQ        1 R20 R36    ; if R20 == R36 then PC := 687
685 [-]: JMP       687          ; PC := 687
686 [-]: LOADKB    R36 0 1      ; R36 := false; PC := 687
687 [-]: LOADKB    R36 1 0      ; R36 := true
688 [-]: SETTABLE  R33 K58 R36  ; R33["BtnCountMode"] := R36
689 [-]: GETGLOBAL R36 K129     ; R36 := 0x07cecc0c
690 [-]: SETTABLE  R33 K128 R36 ; R33["Icon"] := R36
691 [-]: SETTABLE  R33 K130 K32 ; R33["BtnImgTheme"] := true
692 [-]: GETTABLE  R36 R13 K23  ; R36 := R13[2.000000]
693 [-]: LOADK     R37 K95      ; R37 := "/1"
694 [-]: CONCAT    R36 R36 R37  ; R36 := R36 .. R37
695 [-]: SETTABLE  R33 K59 R36  ; R33["BtnCount"] := R36
696 [-]: SETTABLE  R33 K62 R14  ; R33["BtnCheck"] := R14
697 [-]: GETTABLE  R36 R33 K58  ; R36 := R33["BtnCountMode"]
698 [-]: TEST      R36 0        ; if not R36 then PC := 702
699 [-]: JMP       702          ; PC := 702
700 [-]: TEST      R3 0         ; if not R3 then PC := 730
701 [-]: JMP       730          ; PC := 730
702 [-]: TEST      R3 0         ; if not R3 then PC := 714
703 [-]: JMP       714          ; PC := 714
704 [-]: SETTABLE  R33 K69 R5   ; R33["LockedMsg"] := R5
705 [-]: GETGLOBAL R36 K1       ; R36 := 0xae91e43b
706 [-]: SELF      R36 R36 K2   ; R37 := R36; R36 := R36[0x42b04007]
707 [-]: LOADK     R38 K131     ; R38 := "/Lotus/Language/Menu/Loadout_FocusLens_UnGildedModularDesc"
708 [-]: LOADKB    R39 0 0      ; R39 := false
709 [-]: NEWTABLE  R40 0 1      ; R40 := {}
710 [-]: SETTABLE  R40 K26 R4   ; R40["TYPE"] := R4
711 [-]: CALL      R36 5 2      ; R36 := R36(R37,R38,R39,R40)
712 [-]: SETTABLE  R33 K77 R36  ; R33["ErrorMsg"] := R36
713 [-]: JMP       730          ; PC := 730
714 [-]: GETGLOBAL R36 K1       ; R36 := 0xae91e43b
715 [-]: SELF      R36 R36 K2   ; R37 := R36; R36 := R36[0x42b04007]
716 [-]: LOADK     R38 K127     ; R38 := "/Lotus/Language/Menu/Loadout_LensErrorItemNotMaxRank"
717 [-]: LOADKB    R39 1 0      ; R39 := true
718 [-]: NEWTABLE  R40 0 1      ; R40 := {}
719 [-]: SETTABLE  R40 K98 R2   ; R40["ITEM"] := R2
720 [-]: CALL      R36 5 2      ; R36 := R36(R37,R38,R39,R40)
721 [-]: SETTABLE  R33 K69 R36  ; R33["LockedMsg"] := R36
722 [-]: GETGLOBAL R36 K1       ; R36 := 0xae91e43b
723 [-]: SELF      R36 R36 K2   ; R37 := R36; R36 := R36[0x42b04007]
724 [-]: LOADK     R38 K127     ; R38 := "/Lotus/Language/Menu/Loadout_LensErrorItemNotMaxRank"
725 [-]: LOADKB    R39 1 0      ; R39 := true
726 [-]: NEWTABLE  R40 0 1      ; R40 := {}
727 [-]: SETTABLE  R40 K98 R2   ; R40["ITEM"] := R2
728 [-]: CALL      R36 5 2      ; R36 := R36(R37,R38,R39,R40)
729 [-]: SETTABLE  R33 K77 R36  ; R33["ErrorMsg"] := R36
730 [-]: GETGLOBAL R36 K29      ; R36 := 0x33bdd652
731 [-]: GETTABLE  R36 R36 K30  ; R36 := R36[0x23d5322f]
732 [-]: MOVE      R37 R1       ; R37 := R1
733 [-]: MOVE      R38 R33      ; R38 := R33
734 [-]: CALL      R36 3 1      ; R36(R37,R38)
735 [-]: LOADKB    R36 0 0      ; R36 := false
736 [-]: GETGLOBAL R37 K0       ; R37 := 0x7b998233
737 [-]: GETUPVAL  R38 U1       ; R38 := U1
738 [-]: GETTABLE  R38 R38 K43  ; R38 := R38["info"]
739 [-]: GETTABLE  R38 R38 K132 ; R38 := R38["mUpgradeType"]
740 [-]: CALL      R37 2 2      ; R37 := R37(R38)
741 [-]: TEST      R37 1        ; if R37 then PC := 744
742 [-]: JMP       744          ; PC := 744
743 [-]: LOADKB    R36 1 0      ; R36 := true
744 [-]: TEST      R36 0        ; if not R36 then PC := 810
745 [-]: JMP       810          ; PC := 810
746 [-]: GETUPVAL  R37 U8       ; R37 := U8
747 [-]: CALL      R37 1 2      ; R37 := R37()
748 [-]: LEN       R38 R37      ; R38 := # R37
749 [-]: LT        1 K72 R38    ; if 0.000000 < R38 then PC := 752
750 [-]: JMP       752          ; PC := 752
751 [-]: LOADKB    R38 0 1      ; R38 := false; PC := 752
752 [-]: LOADKB    R38 1 0      ; R38 := true
753 [-]: GETGLOBAL R39 K92      ; R39 := 0x25d99d89
754 [-]: SELF      R39 R39 K133 ; R40 := R39; R39 := R39[0x29022a8c]
755 [-]: GETUPVAL  R41 U1       ; R41 := U1
756 [-]: GETTABLE  R41 R41 K43  ; R41 := R41["info"]
757 [-]: GETTABLE  R41 R41 K134 ; R41 := R41["mItemId"]
758 [-]: GETTABLE  R41 R41 K135 ; R41 := R41["mId"]
759 [-]: GETGLOBAL R42 K6       ; R42 := _T
760 [-]: GETTABLE  R42 R42 K7   ; R42 := R42["upgradeItemLot"]
761 [-]: GETGLOBAL R43 K6       ; R43 := _T
762 [-]: GETTABLE  R43 R43 K20  ; R43 := R43["upgradeItemSlot"]
763 [-]: CALL      R39 5 2      ; R39 := R39(R40,R41,R42,R43)
764 [-]: NEWTABLE  R40 0 5      ; R40 := {}
765 [-]: SETTABLE  R40 K31 K32  ; R40["Enabled"] := true
766 [-]: SETTABLE  R40 K33 K136 ; R40["Choice"] := "FUSE"
767 [-]: SETTABLE  R40 K35 K137 ; R40["Title"] := "/Lotus/Language/Kingpins/FuseName"
768 [-]: SETTABLE  R40 K37 K138 ; R40["Desc"] := "/Lotus/Language/Kingpins/FuseDesc"
769 [-]: GETGLOBAL R41 K42      ; R41 := 0x114b73f9
770 [-]: GETTABLE  R41 R41 K139 ; R41 := R41[7.000000]
771 [-]: SETTABLE  R40 K41 R41  ; R40["Image"] := R41
772 [-]: TEST      R39 1        ; if R39 then PC := 776
773 [-]: JMP       776          ; PC := 776
774 [-]: TEST      R38 1        ; if R38 then PC := 805
775 [-]: JMP       805          ; PC := 805
776 [-]: TEST      R39 0        ; if not R39 then PC := 781
777 [-]: JMP       781          ; PC := 781
778 [-]: SETTABLE  R40 K69 K140 ; R40["LockedMsg"] := "/Lotus/Language/Kingpins/FuseErrorLockedWeapon"
779 [-]: SETTABLE  R40 K77 K140 ; R40["ErrorMsg"] := "/Lotus/Language/Kingpins/FuseErrorLockedWeapon"
780 [-]: JMP       805          ; PC := 805
781 [-]: TEST      R38 1        ; if R38 then PC := 805
782 [-]: JMP       805          ; PC := 805
783 [-]: GETGLOBAL R41 K27      ; R41 := 0x7f5022cf
784 [-]: GETTABLE  R41 R41 K28  ; R41 := R41[0x3f3e4d12]
785 [-]: GETGLOBAL R42 K1       ; R42 := 0xae91e43b
786 [-]: SELF      R42 R42 K2   ; R43 := R42; R42 := R42[0x42b04007]
787 [-]: GETGLOBAL R44 K3       ; R44 := 0x64fb1586
788 [-]: GETUPVAL  R45 U1       ; R45 := U1
789 [-]: GETTABLE  R45 R45 K4   ; R45 := R45["storeItem"]
790 [-]: SELF      R45 R45 K5   ; R46 := R45; R45 := R45[0xd3a9d01f]
791 [-]: CALL      R45 2 0      ; R45,... := R45(R46)
792 [-]: CALL      R44 0 2      ; R44 := R44(R45,...)
793 [-]: LOADKB    R45 1 0      ; R45 := true
794 [-]: CALL      R42 4 0      ; R42,... := R42(R43,R44,R45)
795 [-]: CALL      R41 0 2      ; R41 := R41(R42,...)
796 [-]: GETGLOBAL R42 K1       ; R42 := 0xae91e43b
797 [-]: SELF      R42 R42 K2   ; R43 := R42; R42 := R42[0x42b04007]
798 [-]: LOADK     R44 K141     ; R44 := "/Lotus/Language/Kingpins/FuseErrorNoCompatWeapons"
799 [-]: LOADKB    R45 0 0      ; R45 := false
800 [-]: NEWTABLE  R46 0 1      ; R46 := {}
801 [-]: SETTABLE  R46 K142 R41 ; R46["WEAPON"] := R41
802 [-]: CALL      R42 5 2      ; R42 := R42(R43,R44,R45,R46)
803 [-]: SETTABLE  R40 K69 R42  ; R40["LockedMsg"] := R42
804 [-]: SETTABLE  R40 K77 R42  ; R40["ErrorMsg"] := R42
805 [-]: GETGLOBAL R43 K29      ; R43 := 0x33bdd652
806 [-]: GETTABLE  R43 R43 K30  ; R43 := R43[0x23d5322f]
807 [-]: MOVE      R44 R1       ; R44 := R1
808 [-]: MOVE      R45 R40      ; R45 := R40
809 [-]: CALL      R43 3 1      ; R43(R44,R45)
810 [-]: RETURN    R1 2         ; return R1
811 [-]: RETURN    R0 1         ; return 


; Function #96:
;
; Name:            
; Defined at line: 4130
; #Upvalues:       3
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  7

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := _T
  3 [-]: GETTABLE  R2 R2 K2     ; R2 := R2["MenuSuitAvatar"]
  4 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  5 [-]: TEST      R1 1         ; if R1 then PC := 12
  6 [-]: JMP       12           ; PC := 12
  7 [-]: GETGLOBAL R1 K1        ; R1 := _T
  8 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["MenuSuitAvatar"]
  9 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0xd1586535]
 10 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 11 [-]: MOVE      R0 R1        ; R0 := R1
 12 [-]: GETUPVAL  R1 U0        ; R1 := U0
 13 [-]: GETTABLE  R1 R1 K4     ; R1 := R1[0x2a1108a9]
 14 [-]: LOADK     R2 K5        ; R2 := "Mods"
 15 [-]: MOVE      R3 R0        ; R3 := R0
 16 [-]: CALL      R1 3 2       ; R1 := R1(R2,R3)
 17 [-]: GETGLOBAL R2 K0        ; R2 := 0x7b998233
 18 [-]: MOVE      R3 R1        ; R3 := R1
 19 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 20 [-]: TEST      R2 1         ; if R2 then PC := 65
 21 [-]: JMP       65           ; PC := 65
 22 [-]: LOADKB    R2 1 0       ; R2 := true
 23 [-]: SETGLOBAL R2 K6        ; mExitingToModScreen := R2
 24 [-]: GETGLOBAL R2 K1        ; R2 := _T
 25 [-]: SETTABLE  R2 K7 K5     ; R2["triggeredConsoleTag"] := "Mods"
 26 [-]: GETGLOBAL R2 K1        ; R2 := _T
 27 [-]: GETUPVAL  R3 U0        ; R3 := U0
 28 [-]: GETTABLE  R3 R3 K9     ; R3 := R3[0x06d055f9]
 29 [-]: GETGLOBAL R4 K0        ; R4 := 0x7b998233
 30 [-]: GETGLOBAL R5 K10       ; R5 := mRailjackMovie
 31 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 32 [-]: NOT       R4 R4        ; R4 :=  R4
 33 [-]: LOADK     R5 K11       ; R5 := "CrewshipLoadout"
 34 [-]: GETGLOBAL R6 K12       ; R6 := mArsenalConsoleTag
 35 [-]: CALL      R3 4 2       ; R3 := R3(R4,R5,R6)
 36 [-]: SETTABLE  R2 K8 R3     ; R2["previousConsoleTag"] := R3
 37 [-]: GETUPVAL  R2 U1        ; R2 := U1
 38 [-]: GETTABLE  R2 R2 K13    ; R2 := R2[0xb73d420f]
 39 [-]: CALL      R2 1 2       ; R2 := R2()
 40 [-]: GETUPVAL  R3 U1        ; R3 := U1
 41 [-]: GETTABLE  R3 R3 K14    ; R3 := R3["UI_MODE_IN_SPACE_SHIP"]
 42 [-]: EQ        0 R2 R3      ; if R2 ~= R3 then PC := 49
 43 [-]: JMP       49           ; PC := 49
 44 [-]: GETGLOBAL R2 K15       ; R2 := 0xbe190284
 45 [-]: SELF      R2 R2 K16    ; R3 := R2; R2 := R2[0x23ddc82a]
 46 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 47 [-]: TEST      R2 0         ; if not R2 then PC := 57
 48 [-]: JMP       57           ; PC := 57
 49 [-]: GETUPVAL  R2 U0        ; R2 := U0
 50 [-]: GETTABLE  R2 R2 K4     ; R2 := R2[0x2a1108a9]
 51 [-]: LOADK     R3 K17       ; R3 := "ConsoleActivate"
 52 [-]: MOVE      R4 R0        ; R4 := R0
 53 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 54 [-]: SELF      R2 R2 K18    ; R3 := R2; R2 := R2[0xd91e1179]
 55 [-]: CALL      R2 2 1       ; R2(R3)
 56 [-]: JMP       63           ; PC := 63
 57 [-]: GETUPVAL  R2 U0        ; R2 := U0
 58 [-]: GETTABLE  R2 R2 K19    ; R2 := R2[0xa9882367]
 59 [-]: LOADK     R3 K20       ; R3 := "ConsoleTeleportAndActivate"
 60 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 61 [-]: SELF      R2 R2 K18    ; R3 := R2; R2 := R2[0xd91e1179]
 62 [-]: CALL      R2 2 1       ; R2(R3)
 63 [-]: GETUPVAL  R2 U2        ; R2 := U2
 64 [-]: CALL      R2 1 1       ; R2()
 65 [-]: RETURN    R0 1         ; return 


; Function #97:
;
; Name:            
; Defined at line: 4149
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  2 [-]: GETGLOBAL R1 K1        ; R1 := mInstalledGrid
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: TEST      R0 0         ; if not R0 then PC := 7
  5 [-]: JMP       7            ; PC := 7
  6 [-]: RETURN    R0 1         ; return 
  7 [-]: GETGLOBAL R0 K1        ; R0 := mInstalledGrid
  8 [-]: SELF      R0 R0 K2     ; R1 := R0; R0 := R0[0xed1ab921]
  9 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 10 [-]: EQ        1 R0 K3      ; if R0 == nil then PC := 23
 11 [-]: JMP       23           ; PC := 23
 12 [-]: GETTABLE  R1 R0 K4     ; R1 := R0["mCardIndex"]
 13 [-]: EQ        1 R1 K5      ; if R1 == -1.000000 then PC := 23
 14 [-]: JMP       23           ; PC := 23
 15 [-]: GETUPVAL  R1 U0        ; R1 := U0
 16 [-]: MOVE      R2 R0        ; R2 := R0
 17 [-]: LOADKB    R3 0 0       ; R3 := false
 18 [-]: CALL      R1 3 1       ; R1(R2,R3)
 19 [-]: GETGLOBAL R1 K1        ; R1 := mInstalledGrid
 20 [-]: GETTABLE  R1 R1 K6     ; R1 := R1[0xaf2cb9be]
 21 [-]: MOVE      R2 R0        ; R2 := R0
 22 [-]: CALL      R1 2 1       ; R1(R2)
 23 [-]: RETURN    R0 1         ; return 


; Function #98:
;
; Name:            
; Defined at line: 4161
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETUPVAL  R0 U0        ; R0 := U0
  2 [-]: CALL      R0 1 1       ; R0()
  3 [-]: RETURN    R0 1         ; return 


; Function #99:
;
; Name:            
; Defined at line: 4165
; #Upvalues:       5
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETGLOBAL R0 K0        ; R0 := _T
  2 [-]: GETTABLE  R0 R0 K1     ; R0 := R0["BackgroundMovie"]
  3 [-]: SELF      R0 R0 K2     ; R1 := R0; R0 := R0[0xe4162eed]
  4 [-]: LOADK     R2 K3        ; R2 := "ShowBlockingMessage"
  5 [-]: LOADK     R3 K4        ; R3 := "0"
  6 [-]: CALL      R0 4 1       ; R0(R1,R2,R3)
  7 [-]: GETUPVAL  R0 U0        ; R0 := U0
  8 [-]: LOADKB    R1 1 0       ; R1 := true
  9 [-]: CALL      R0 2 1       ; R0(R1)
 10 [-]: GETUPVAL  R0 U1        ; R0 := U1
 11 [-]: CALL      R0 1 1       ; R0()
 12 [-]: GETUPVAL  R0 U2        ; R0 := U2
 13 [-]: GETGLOBAL R1 K5        ; R1 := 0xae91e43b
 14 [-]: CALL      R0 2 1       ; R0(R1)
 15 [-]: GETUPVAL  R0 U3        ; R0 := U3
 16 [-]: CALL      R0 1 1       ; R0()
 17 [-]: GETGLOBAL R0 K0        ; R0 := _T
 18 [-]: SETTABLE  R0 K6 K7     ; R0["ArsenalUpgradeOpen"] := true
 19 [-]: GETUPVAL  R0 U4        ; R0 := U4
 20 [-]: GETTABLE  R0 R0 K8     ; R0 := R0[0x9e3d3434]
 21 [-]: LOADKB    R1 1 0       ; R1 := true
 22 [-]: CALL      R0 2 1       ; R0(R1)
 23 [-]: RETURN    R0 1         ; return 


; Function #100:
;
; Name:            
; Defined at line: 4179
; #Upvalues:       11
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  27

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  2 [-]: GETGLOBAL R1 K1        ; R1 := 0xae91e43b
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: TEST      R0 0         ; if not R0 then PC := 7
  5 [-]: JMP       7            ; PC := 7
  6 [-]: RETURN    R0 1         ; return 
  7 [-]: GETGLOBAL R0 K2        ; R0 := mPreallocatingUpgrades
  8 [-]: TEST      R0 0         ; if not R0 then PC := 34
  9 [-]: JMP       34           ; PC := 34
 10 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
 11 [-]: GETGLOBAL R1 K3        ; R1 := mGameData
 12 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 13 [-]: TEST      R0 1         ; if R0 then PC := 28
 14 [-]: JMP       28           ; PC := 28
 15 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
 16 [-]: GETGLOBAL R1 K3        ; R1 := mGameData
 17 [-]: SELF      R1 R1 K4     ; R2 := R1; R1 := R1[0x25a6e75e]
 18 [-]: CALL      R1 2 0       ; R1,... := R1(R2)
 19 [-]: CALL      R0 0 2       ; R0 := R0(R1,...)
 20 [-]: TEST      R0 1         ; if R0 then PC := 28
 21 [-]: JMP       28           ; PC := 28
 22 [-]: GETGLOBAL R0 K3        ; R0 := mGameData
 23 [-]: SELF      R0 R0 K4     ; R1 := R0; R0 := R0[0x25a6e75e]
 24 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 25 [-]: SELF      R0 R0 K5     ; R1 := R0; R0 := R0[0xaa5dcf51]
 26 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 27 [-]: SETGLOBAL R0 K2        ; mPreallocatingUpgrades := R0
 28 [-]: GETGLOBAL R0 K2        ; R0 := mPreallocatingUpgrades
 29 [-]: TEST      R0 1         ; if R0 then PC := 33
 30 [-]: JMP       33           ; PC := 33
 31 [-]: GETUPVAL  R0 U0        ; R0 := U0
 32 [-]: CALL      R0 1 1       ; R0()
 33 [-]: RETURN    R0 1         ; return 
 34 [-]: GETGLOBAL R0 K6        ; R0 := mShouldClose
 35 [-]: TEST      R0 0         ; if not R0 then PC := 41
 36 [-]: JMP       41           ; PC := 41
 37 [-]: GETGLOBAL R0 K1        ; R0 := 0xae91e43b
 38 [-]: SELF      R0 R0 K7     ; R1 := R0; R0 := R0[0x32302b4a]
 39 [-]: CALL      R0 2 1       ; R0(R1)
 40 [-]: RETURN    R0 1         ; return 
 41 [-]: GETGLOBAL R0 K8        ; R0 := 0xb693b6c1
 42 [-]: CALL      R0 1 2       ; R0 := R0()
 43 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
 44 [-]: GETGLOBAL R2 K9        ; R2 := mTimerMgr
 45 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 46 [-]: TEST      R1 1         ; if R1 then PC := 52
 47 [-]: JMP       52           ; PC := 52
 48 [-]: GETGLOBAL R1 K9        ; R1 := mTimerMgr
 49 [-]: SELF      R1 R1 K10    ; R2 := R1; R1 := R1[0xfaa69527]
 50 [-]: MOVE      R3 R0        ; R3 := R0
 51 [-]: CALL      R1 3 1       ; R1(R2,R3)
 52 [-]: GETGLOBAL R1 K1        ; R1 := 0xae91e43b
 53 [-]: SELF      R1 R1 K11    ; R2 := R1; R1 := R1[0x8a8c8d5a]
 54 [-]: MOVE      R3 R0        ; R3 := R0
 55 [-]: CALL      R1 3 1       ; R1(R2,R3)
 56 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
 57 [-]: GETGLOBAL R2 K12       ; R2 := mConfigMenu
 58 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 59 [-]: TEST      R1 1         ; if R1 then PC := 65
 60 [-]: JMP       65           ; PC := 65
 61 [-]: GETGLOBAL R1 K12       ; R1 := mConfigMenu
 62 [-]: SELF      R1 R1 K10    ; R2 := R1; R1 := R1[0xfaa69527]
 63 [-]: MOVE      R3 R0        ; R3 := R0
 64 [-]: CALL      R1 3 1       ; R1(R2,R3)
 65 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
 66 [-]: GETGLOBAL R2 K13       ; R2 := _T
 67 [-]: GETTABLE  R2 R2 K14    ; R2 := R2["FusedUpgrade"]
 68 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 69 [-]: TEST      R1 1         ; if R1 then PC := 75
 70 [-]: JMP       75           ; PC := 75
 71 [-]: GETUPVAL  R1 U1        ; R1 := U1
 72 [-]: CALL      R1 1 1       ; R1()
 73 [-]: GETGLOBAL R1 K13       ; R1 := _T
 74 [-]: SETTABLE  R1 K14 K15   ; R1["FusedUpgrade"] := nil
 75 [-]: GETGLOBAL R1 K13       ; R1 := _T
 76 [-]: GETTABLE  R1 R1 K16    ; R1 := R1["InSimulacrum"]
 77 [-]: TEST      R1 0         ; if not R1 then PC := 99
 78 [-]: JMP       99           ; PC := 99
 79 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
 80 [-]: GETGLOBAL R2 K17       ; R2 := 0xbe190284
 81 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 82 [-]: TEST      R1 1         ; if R1 then PC := 99
 83 [-]: JMP       99           ; PC := 99
 84 [-]: GETGLOBAL R1 K17       ; R1 := 0xbe190284
 85 [-]: SELF      R1 R1 K18    ; R2 := R1; R1 := R1[0xf2deaf69]
 86 [-]: GETGLOBAL R3 K19       ; R3 := gLotusSandBoxGameRulesType
 87 [-]: CALL      R1 3 2       ; R1 := R1(R2,R3)
 88 [-]: TEST      R1 0         ; if not R1 then PC := 99
 89 [-]: JMP       99           ; PC := 99
 90 [-]: GETGLOBAL R1 K20       ; R1 := 0x89326c93
 91 [-]: SELF      R1 R1 K21    ; R2 := R1; R1 := R1[0x78298275]
 92 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 93 [-]: SELF      R2 R1 K22    ; R3 := R1; R2 := R1[0x2047cfe7]
 94 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 95 [-]: TEST      R2 0         ; if not R2 then PC := 99
 96 [-]: JMP       99           ; PC := 99
 97 [-]: GETUPVAL  R2 U2        ; R2 := U2
 98 [-]: CALL      R2 1 1       ; R2()
 99 [-]: GETGLOBAL R2 K23       ; R2 := mHidingRJMovie
100 [-]: TEST      R2 0         ; if not R2 then PC := 121
101 [-]: JMP       121          ; PC := 121
102 [-]: GETGLOBAL R2 K0        ; R2 := 0x7b998233
103 [-]: GETGLOBAL R3 K24       ; R3 := mChildMovie
104 [-]: CALL      R2 2 2       ; R2 := R2(R3)
105 [-]: TEST      R2 0         ; if not R2 then PC := 121
106 [-]: JMP       121          ; PC := 121
107 [-]: LOADKB    R2 0 0       ; R2 := false
108 [-]: SETGLOBAL R2 K23       ; mHidingRJMovie := R2
109 [-]: GETGLOBAL R2 K0        ; R2 := 0x7b998233
110 [-]: GETGLOBAL R3 K25       ; R3 := mRailjackMovie
111 [-]: CALL      R2 2 2       ; R2 := R2(R3)
112 [-]: TEST      R2 1         ; if R2 then PC := 121
113 [-]: JMP       121          ; PC := 121
114 [-]: GETGLOBAL R2 K13       ; R2 := _T
115 [-]: GETTABLE  R2 R2 K26    ; R2 := R2[0xdf29a9d6]
116 [-]: CALL      R2 1 1       ; R2()
117 [-]: GETGLOBAL R2 K25       ; R2 := mRailjackMovie
118 [-]: SELF      R2 R2 K27    ; R3 := R2; R2 := R2[0x368ad758]
119 [-]: LOADKB    R4 1 0       ; R4 := true
120 [-]: CALL      R2 3 1       ; R2(R3,R4)
121 [-]: GETGLOBAL R2 K28       ; R2 := mDiegeticHelper
122 [-]: EQ        1 R2 K15     ; if R2 == nil then PC := 152
123 [-]: JMP       152          ; PC := 152
124 [-]: GETGLOBAL R2 K28       ; R2 := mDiegeticHelper
125 [-]: SELF      R2 R2 K10    ; R3 := R2; R2 := R2[0xfaa69527]
126 [-]: CALL      R2 2 1       ; R2(R3)
127 [-]: GETGLOBAL R2 K28       ; R2 := mDiegeticHelper
128 [-]: GETTABLE  R2 R2 K29    ; R2 := R2["mShiftX"]
129 [-]: GETGLOBAL R3 K1        ; R3 := 0xae91e43b
130 [-]: SELF      R3 R3 K30    ; R4 := R3; R3 := R3[0x091c120e]
131 [-]: CALL      R3 2 2       ; R3 := R3(R4)
132 [-]: DIV       R2 R2 R3     ; R2 := R2 / R3
133 [-]: ADD       R2 K31 R2    ; R2 := 0.500000 + R2
134 [-]: GETGLOBAL R3 K32       ; R3 := 0x5e67ee13
135 [-]: SELF      R3 R3 K33    ; R4 := R3; R3 := R3[0x830eea67]
136 [-]: GETGLOBAL R5 K34       ; R5 := 0x6c97a788
137 [-]: GETTABLE  R5 R5 K35    ; R5 := R5["VISIBILITY_CENTER"]
138 [-]: MOVE      R6 R2        ; R6 := R2
139 [-]: CALL      R3 4 1       ; R3(R4,R5,R6)
140 [-]: GETGLOBAL R3 K36       ; R3 := 0x48ae7d1d
141 [-]: SELF      R3 R3 K33    ; R4 := R3; R3 := R3[0x830eea67]
142 [-]: GETGLOBAL R5 K34       ; R5 := 0x6c97a788
143 [-]: GETTABLE  R5 R5 K35    ; R5 := R5["VISIBILITY_CENTER"]
144 [-]: MOVE      R6 R2        ; R6 := R2
145 [-]: CALL      R3 4 1       ; R3(R4,R5,R6)
146 [-]: GETGLOBAL R3 K37       ; R3 := 0xaa394cd7
147 [-]: SELF      R3 R3 K33    ; R4 := R3; R3 := R3[0x830eea67]
148 [-]: GETGLOBAL R5 K34       ; R5 := 0x6c97a788
149 [-]: GETTABLE  R5 R5 K35    ; R5 := R5["VISIBILITY_CENTER"]
150 [-]: MOVE      R6 R2        ; R6 := R2
151 [-]: CALL      R3 4 1       ; R3(R4,R5,R6)
152 [-]: GETGLOBAL R3 K38       ; R3 := 0xcfc01047
153 [-]: GETGLOBAL R4 K39       ; R4 := mActiveFx
154 [-]: CALL      R3 2 4       ; R3,R4,R5 := R3(R4)
155 [-]: JMP       172          ; PC := 172
156 [-]: GETGLOBAL R8 K0        ; R8 := 0x7b998233
157 [-]: GETTABLE  R9 R7 K40    ; R9 := R7["mInstance"]
158 [-]: CALL      R8 2 2       ; R8 := R8(R9)
159 [-]: TEST      R8 0         ; if not R8 then PC := 164
160 [-]: JMP       164          ; PC := 164
161 [-]: GETGLOBAL R8 K39       ; R8 := mActiveFx
162 [-]: SETTABLE  R8 R6 K15    ; R8[R6] := nil
163 [-]: JMP       172          ; PC := 172
164 [-]: SELF      R8 R7 K41    ; R9 := R7; R8 := R7[0x768274d6]
165 [-]: GETGLOBAL R10 K1       ; R10 := 0xae91e43b
166 [-]: SELF      R10 R10 K42  ; R11 := R10; R10 := R10[0xd4cc05b4]
167 [-]: CALL      R10 2 0      ; R10,... := R10(R11)
168 [-]: CALL      R8 0 1       ; R8(R9,...)
169 [-]: SELF      R8 R7 K10    ; R9 := R7; R8 := R7[0xfaa69527]
170 [-]: MOVE      R10 R0       ; R10 := R0
171 [-]: CALL      R8 3 1       ; R8(R9,R10)
172 [-]: TFORLOOP  R3 2         ; R6,R7 :=  R3(R4,R5); if R6 ~= nil then begin PC = 156; R5 := R6 end
173 [-]: JMP       156          ; PC := 156
174 [-]: GETGLOBAL R8 K0        ; R8 := 0x7b998233
175 [-]: GETGLOBAL R9 K43       ; R9 := mMouseDrag
176 [-]: CALL      R8 2 2       ; R8 := R8(R9)
177 [-]: TEST      R8 1         ; if R8 then PC := 182
178 [-]: JMP       182          ; PC := 182
179 [-]: GETGLOBAL R8 K43       ; R8 := mMouseDrag
180 [-]: SELF      R8 R8 K10    ; R9 := R8; R8 := R8[0xfaa69527]
181 [-]: CALL      R8 2 1       ; R8(R9)
182 [-]: GETGLOBAL R8 K44       ; R8 := mWarningFlash
183 [-]: TEST      R8 0         ; if not R8 then PC := 246
184 [-]: JMP       246          ; PC := 246
185 [-]: GETGLOBAL R8 K44       ; R8 := mWarningFlash
186 [-]: GETGLOBAL R9 K44       ; R9 := mWarningFlash
187 [-]: GETTABLE  R9 R9 K45    ; R9 := R9[1.000000]
188 [-]: GETGLOBAL R10 K46      ; R10 := 0x67652851
189 [-]: CALL      R10 1 2      ; R10 := R10()
190 [-]: SUB       R9 R9 R10    ; R9 := R9 - R10
191 [-]: SETTABLE  R8 K45 R9    ; R8[1.000000] := R9
192 [-]: GETGLOBAL R8 K44       ; R8 := mWarningFlash
193 [-]: GETGLOBAL R9 K47       ; R9 := 0x5bced4c4
194 [-]: GETTABLE  R9 R9 K48    ; R9 := R9[0xb62ecfe0]
195 [-]: CONST     R10 0        ; R10 := 0.000000
196 [-]: GETGLOBAL R11 K44      ; R11 := mWarningFlash
197 [-]: GETTABLE  R11 R11 K45  ; R11 := R11[1.000000]
198 [-]: CALL      R9 3 2       ; R9 := R9(R10,R11)
199 [-]: SETTABLE  R8 K45 R9    ; R8[1.000000] := R9
200 [-]: GETGLOBAL R8 K49       ; R8 := 0x60130201
201 [-]: CONST     R9 255       ; R9 := 255.000000
202 [-]: CONST     R10 0        ; R10 := 0.000000
203 [-]: CONST     R11 0        ; R11 := 0.000000
204 [-]: CALL      R8 4 2       ; R8 := R8(R9,R10,R11)
205 [-]: GETGLOBAL R9 K49       ; R9 := 0x60130201
206 [-]: CONST     R10 255      ; R10 := 255.000000
207 [-]: CONST     R11 255      ; R11 := 255.000000
208 [-]: CONST     R12 255      ; R12 := 255.000000
209 [-]: CALL      R9 4 2       ; R9 := R9(R10,R11,R12)
210 [-]: GETGLOBAL R10 K47      ; R10 := 0x5bced4c4
211 [-]: GETTABLE  R10 R10 K50  ; R10 := R10[0xe4a5b3ca]
212 [-]: GETGLOBAL R11 K51      ; R11 := 0x107bf6da
213 [-]: GETGLOBAL R12 K44      ; R12 := mWarningFlash
214 [-]: GETTABLE  R12 R12 K45  ; R12 := R12[1.000000]
215 [-]: MUL       R12 R12 K52  ; R12 := R12 * 3.000000
216 [-]: CALL      R11 2 2      ; R11 := R11(R12)
217 [-]: MUL       R11 R11 K53  ; R11 := R11 * 2.000000
218 [-]: SUB       R11 R11 K45  ; R11 := R11 - 1.000000
219 [-]: CALL      R10 2 2      ; R10 := R10(R11)
220 [-]: SELF      R11 R8 K54   ; R12 := R8; R11 := R8[0x9bafffe3]
221 [-]: MOVE      R13 R9       ; R13 := R9
222 [-]: MOVE      R14 R10      ; R14 := R10
223 [-]: CALL      R11 4 2      ; R11 := R11(R12,R13,R14)
224 [-]: MOVE      R8 R11       ; R8 := R11
225 [-]: CONST     R11 2        ; R11 := 2.000000
226 [-]: GETGLOBAL R12 K44      ; R12 := mWarningFlash
227 [-]: LEN       R12 R12      ; R12 := # R12
228 [-]: CONST     R13 1        ; R13 := 1.000000
229 [-]: FORPREP   R11 239      ; R11 -= R13; PC := 239
230 [-]: GETGLOBAL R15 K44      ; R15 := mWarningFlash
231 [-]: GETTABLE  R15 R15 R14  ; R15 := R15[R14]
232 [-]: GETGLOBAL R16 K1       ; R16 := 0xae91e43b
233 [-]: SELF      R16 R16 K55  ; R17 := R16; R16 := R16[0x67bc869f]
234 [-]: MOVE      R18 R15      ; R18 := R15
235 [-]: CONST     R19 9        ; R19 := 9.000000
236 [-]: SELF      R20 R8 K56   ; R21 := R8; R20 := R8[0xa5d5c8f6]
237 [-]: CALL      R20 2 0      ; R20,... := R20(R21)
238 [-]: CALL      R16 0 1      ; R16(R17,...)
239 [-]: FORLOOP   R11 230      ; R11 += R13; if R11 <= R12 then begin PC := 230; R14 := R11 end
240 [-]: GETGLOBAL R16 K44      ; R16 := mWarningFlash
241 [-]: GETTABLE  R16 R16 K45  ; R16 := R16[1.000000]
242 [-]: LE        0 R16 K57    ; if R16 > 0.000000 then PC := 246
243 [-]: JMP       246          ; PC := 246
244 [-]: LOADNIL   R16 R16      ; R16 := nil
245 [-]: SETGLOBAL R16 K44      ; mWarningFlash := R16
246 [-]: GETGLOBAL R16 K0       ; R16 := 0x7b998233
247 [-]: GETGLOBAL R17 K58      ; R17 := mCollectionGrid
248 [-]: CALL      R16 2 2      ; R16 := R16(R17)
249 [-]: TEST      R16 1        ; if R16 then PC := 263
250 [-]: JMP       263          ; PC := 263
251 [-]: GETGLOBAL R16 K0       ; R16 := 0x7b998233
252 [-]: GETGLOBAL R17 K58      ; R17 := mCollectionGrid
253 [-]: GETTABLE  R17 R17 K59  ; R17 := R17["mScrollBar"]
254 [-]: CALL      R16 2 2      ; R16 := R16(R17)
255 [-]: TEST      R16 1        ; if R16 then PC := 263
256 [-]: JMP       263          ; PC := 263
257 [-]: GETGLOBAL R16 K58      ; R16 := mCollectionGrid
258 [-]: GETTABLE  R16 R16 K59  ; R16 := R16["mScrollBar"]
259 [-]: SELF      R16 R16 K10  ; R17 := R16; R16 := R16[0xfaa69527]
260 [-]: GETGLOBAL R18 K46      ; R18 := 0x67652851
261 [-]: CALL      R18 1 0      ; R18,... := R18()
262 [-]: CALL      R16 0 1      ; R16(R17,...)
263 [-]: GETGLOBAL R16 K58      ; R16 := mCollectionGrid
264 [-]: SELF      R16 R16 K60  ; R17 := R16; R16 := R16[0x741d078c]
265 [-]: CLOSURE   R18 0        ; R18 := closure(Function #100.1)
266 [-]: GETUPVAL  R0 U3        ; R0 := U3
267 [-]: CALL      R16 3 1      ; R16(R17,R18)
268 [-]: GETGLOBAL R16 K61      ; R16 := mInstalledGrid
269 [-]: SELF      R16 R16 K60  ; R17 := R16; R16 := R16[0x741d078c]
270 [-]: CLOSURE   R18 1        ; R18 := closure(Function #100.2)
271 [-]: GETUPVAL  R0 U3        ; R0 := U3
272 [-]: CALL      R16 3 1      ; R16(R17,R18)
273 [-]: GETGLOBAL R16 K0       ; R16 := 0x7b998233
274 [-]: GETGLOBAL R17 K13      ; R17 := _T
275 [-]: GETTABLE  R17 R17 K62  ; R17 := R17["MenuSuitAvatar"]
276 [-]: CALL      R16 2 2      ; R16 := R16(R17)
277 [-]: TEST      R16 1        ; if R16 then PC := 299
278 [-]: JMP       299          ; PC := 299
279 [-]: GETGLOBAL R16 K13      ; R16 := _T
280 [-]: GETTABLE  R16 R16 K62  ; R16 := R16["MenuSuitAvatar"]
281 [-]: SELF      R16 R16 K63  ; R17 := R16; R16 := R16[0x5e651723]
282 [-]: CALL      R16 2 2      ; R16 := R16(R17)
283 [-]: GETGLOBAL R17 K0       ; R17 := 0x7b998233
284 [-]: MOVE      R18 R16      ; R18 := R16
285 [-]: CALL      R17 2 2      ; R17 := R17(R18)
286 [-]: TEST      R17 0        ; if not R17 then PC := 292
287 [-]: JMP       292          ; PC := 292
288 [-]: GETGLOBAL R17 K20      ; R17 := 0x89326c93
289 [-]: SELF      R17 R17 K64  ; R18 := R17; R17 := R17[0xfb64e76c]
290 [-]: CALL      R17 2 2      ; R17 := R17(R18)
291 [-]: MOVE      R16 R17      ; R16 := R17
292 [-]: GETGLOBAL R17 K0       ; R17 := 0x7b998233
293 [-]: MOVE      R18 R16      ; R18 := R16
294 [-]: CALL      R17 2 2      ; R17 := R17(R18)
295 [-]: TEST      R17 1        ; if R17 then PC := 299
296 [-]: JMP       299          ; PC := 299
297 [-]: SELF      R17 R16 K65  ; R18 := R16; R17 := R16[0xb5983272]
298 [-]: CALL      R17 2 1      ; R17(R18)
299 [-]: GETGLOBAL R17 K0       ; R17 := 0x7b998233
300 [-]: GETGLOBAL R18 K66      ; R18 := mStats
301 [-]: CALL      R17 2 2      ; R17 := R17(R18)
302 [-]: TEST      R17 1        ; if R17 then PC := 355
303 [-]: JMP       355          ; PC := 355
304 [-]: GETGLOBAL R17 K66      ; R17 := mStats
305 [-]: GETTABLE  R17 R17 K59  ; R17 := R17["mScrollBar"]
306 [-]: GETTABLE  R17 R17 K67  ; R17 := R17["mEnabled"]
307 [-]: TEST      R17 0        ; if not R17 then PC := 355
308 [-]: JMP       355          ; PC := 355
309 [-]: GETGLOBAL R17 K1       ; R17 := 0xae91e43b
310 [-]: SELF      R17 R17 K68  ; R18 := R17; R17 := R17[0x91a24e4b]
311 [-]: LOADK     R19 K69      ; R19 := "_root"
312 [-]: CONST     R20 25       ; R20 := 25.000000
313 [-]: CALL      R17 4 2      ; R17 := R17(R18,R19,R20)
314 [-]: GETGLOBAL R18 K1       ; R18 := 0xae91e43b
315 [-]: SELF      R18 R18 K68  ; R19 := R18; R18 := R18[0x91a24e4b]
316 [-]: LOADK     R20 K69      ; R20 := "_root"
317 [-]: CONST     R21 26       ; R21 := 26.000000
318 [-]: CALL      R18 4 2      ; R18 := R18(R19,R20,R21)
319 [-]: GETGLOBAL R19 K66      ; R19 := mStats
320 [-]: GETTABLE  R19 R19 K70  ; R19 := R19["mActiveX"]
321 [-]: LE        0 R19 R17    ; if R19 > R17 then PC := 342
322 [-]: JMP       342          ; PC := 342
323 [-]: GETGLOBAL R19 K66      ; R19 := mStats
324 [-]: GETTABLE  R19 R19 K70  ; R19 := R19["mActiveX"]
325 [-]: GETGLOBAL R20 K66      ; R20 := mStats
326 [-]: GETTABLE  R20 R20 K71  ; R20 := R20["mWidth"]
327 [-]: ADD       R19 R19 R20  ; R19 := R19 + R20
328 [-]: ADD       R19 R19 K72  ; R19 := R19 + 20.000000
329 [-]: LE        0 R17 R19    ; if R17 > R19 then PC := 342
330 [-]: JMP       342          ; PC := 342
331 [-]: GETGLOBAL R19 K66      ; R19 := mStats
332 [-]: GETTABLE  R19 R19 K73  ; R19 := R19["mYOffset"]
333 [-]: LE        0 R19 R18    ; if R19 > R18 then PC := 342
334 [-]: JMP       342          ; PC := 342
335 [-]: GETGLOBAL R19 K66      ; R19 := mStats
336 [-]: GETTABLE  R19 R19 K73  ; R19 := R19["mYOffset"]
337 [-]: GETGLOBAL R20 K66      ; R20 := mStats
338 [-]: GETTABLE  R20 R20 K74  ; R20 := R20["mMaxHeight"]
339 [-]: ADD       R19 R19 R20  ; R19 := R19 + R20
340 [-]: LE        1 R18 R19    ; if R18 <= R19 then PC := 343
341 [-]: JMP       343          ; PC := 343
342 [-]: LOADKB    R19 0 1      ; R19 := false; PC := 343
343 [-]: LOADKB    R19 1 0      ; R19 := true
344 [-]: GETGLOBAL R20 K66      ; R20 := mStats
345 [-]: GETTABLE  R20 R20 K59  ; R20 := R20["mScrollBar"]
346 [-]: GETTABLE  R20 R20 K75  ; R20 := R20["mActive"]
347 [-]: EQ        1 R20 R19    ; if R20 == R19 then PC := 396
348 [-]: JMP       396          ; PC := 396
349 [-]: GETGLOBAL R20 K66      ; R20 := mStats
350 [-]: GETTABLE  R20 R20 K59  ; R20 := R20["mScrollBar"]
351 [-]: SELF      R20 R20 K76  ; R21 := R20; R20 := R20[0x46610c50]
352 [-]: MOVE      R22 R19      ; R22 := R19
353 [-]: CALL      R20 3 1      ; R20(R21,R22)
354 [-]: JMP       396          ; PC := 396
355 [-]: GETUPVAL  R20 U4       ; R20 := U4
356 [-]: EQ        1 R20 K15    ; if R20 == nil then PC := 396
357 [-]: JMP       396          ; PC := 396
358 [-]: GETUPVAL  R20 U4       ; R20 := U4
359 [-]: GETTABLE  R20 R20 K77  ; R20 := R20["CombGrid"]
360 [-]: GETTABLE  R20 R20 K59  ; R20 := R20["mScrollBar"]
361 [-]: GETTABLE  R20 R20 K67  ; R20 := R20["mEnabled"]
362 [-]: TEST      R20 0        ; if not R20 then PC := 396
363 [-]: JMP       396          ; PC := 396
364 [-]: GETGLOBAL R20 K1       ; R20 := 0xae91e43b
365 [-]: SELF      R20 R20 K68  ; R21 := R20; R20 := R20[0x91a24e4b]
366 [-]: LOADK     R22 K69      ; R22 := "_root"
367 [-]: CONST     R23 25       ; R23 := 25.000000
368 [-]: CALL      R20 4 2      ; R20 := R20(R21,R22,R23)
369 [-]: GETGLOBAL R21 K1       ; R21 := 0xae91e43b
370 [-]: SELF      R21 R21 K68  ; R22 := R21; R21 := R21[0x91a24e4b]
371 [-]: LOADK     R23 K69      ; R23 := "_root"
372 [-]: CONST     R24 26       ; R24 := 26.000000
373 [-]: CALL      R21 4 2      ; R21 := R21(R22,R23,R24)
374 [-]: GETUPVAL  R22 U4       ; R22 := U4
375 [-]: GETTABLE  R22 R22 K70  ; R22 := R22["mActiveX"]
376 [-]: LT        0 R20 R22    ; if R20 >= R22 then PC := 382
377 [-]: JMP       382          ; PC := 382
378 [-]: GETUPVAL  R22 U4       ; R22 := U4
379 [-]: GETTABLE  R22 R22 K78  ; R22 := R22["mActiveY"]
380 [-]: LT        1 R21 R22    ; if R21 < R22 then PC := 383
381 [-]: JMP       383          ; PC := 383
382 [-]: LOADKB    R22 0 1      ; R22 := false; PC := 383
383 [-]: LOADKB    R22 1 0      ; R22 := true
384 [-]: GETUPVAL  R23 U4       ; R23 := U4
385 [-]: GETTABLE  R23 R23 K77  ; R23 := R23["CombGrid"]
386 [-]: GETTABLE  R23 R23 K59  ; R23 := R23["mScrollBar"]
387 [-]: GETTABLE  R23 R23 K75  ; R23 := R23["mActive"]
388 [-]: EQ        1 R23 R22    ; if R23 == R22 then PC := 396
389 [-]: JMP       396          ; PC := 396
390 [-]: GETUPVAL  R23 U4       ; R23 := U4
391 [-]: GETTABLE  R23 R23 K77  ; R23 := R23["CombGrid"]
392 [-]: GETTABLE  R23 R23 K59  ; R23 := R23["mScrollBar"]
393 [-]: SELF      R23 R23 K76  ; R24 := R23; R23 := R23[0x46610c50]
394 [-]: MOVE      R25 R22      ; R25 := R22
395 [-]: CALL      R23 3 1      ; R23(R24,R25)
396 [-]: GETUPVAL  R23 U5       ; R23 := U5
397 [-]: TEST      R23 0        ; if not R23 then PC := 445
398 [-]: JMP       445          ; PC := 445
399 [-]: GETGLOBAL R23 K79      ; R23 := mCardLoader
400 [-]: SELF      R23 R23 K80  ; R24 := R23; R23 := R23[0xd2d3875a]
401 [-]: CALL      R23 2 2      ; R23 := R23(R24)
402 [-]: TEST      R23 0        ; if not R23 then PC := 445
403 [-]: JMP       445          ; PC := 445
404 [-]: LOADKB    R23 0 0      ; R23 := false
405 [-]: SETUPVAL  R23 U5       ; U82 := R5
406 [-]: GETUPVAL  R23 U6       ; R23 := U6
407 [-]: CALL      R23 1 1      ; R23()
408 [-]: GETUPVAL  R23 U7       ; R23 := U7
409 [-]: CALL      R23 1 1      ; R23()
410 [-]: GETUPVAL  R23 U8       ; R23 := U8
411 [-]: LOADKB    R24 1 0      ; R24 := true
412 [-]: CALL      R23 2 1      ; R23(R24)
413 [-]: GETGLOBAL R23 K61      ; R23 := mInstalledGrid
414 [-]: SELF      R23 R23 K81  ; R24 := R23; R23 := R23[0x71e9ac81]
415 [-]: LOADNIL   R25 R25      ; R25 := nil
416 [-]: LOADKB    R26 1 0      ; R26 := true
417 [-]: CALL      R23 4 1      ; R23(R24,R25,R26)
418 [-]: GETGLOBAL R23 K58      ; R23 := mCollectionGrid
419 [-]: SELF      R23 R23 K81  ; R24 := R23; R23 := R23[0x71e9ac81]
420 [-]: LOADNIL   R25 R25      ; R25 := nil
421 [-]: LOADKB    R26 1 0      ; R26 := true
422 [-]: CALL      R23 4 1      ; R23(R24,R25,R26)
423 [-]: GETUPVAL  R23 U9       ; R23 := U9
424 [-]: CALL      R23 1 2      ; R23 := R23()
425 [-]: TEST      R23 0        ; if not R23 then PC := 430
426 [-]: JMP       430          ; PC := 430
427 [-]: GETGLOBAL R23 K82      ; R23 := mAvionicCategories
428 [-]: SELF      R23 R23 K83  ; R24 := R23; R23 := R23[0xb52a46b7]
429 [-]: CALL      R23 2 1      ; R23(R24)
430 [-]: GETGLOBAL R23 K0       ; R23 := 0x7b998233
431 [-]: GETGLOBAL R24 K13      ; R24 := _T
432 [-]: GETTABLE  R24 R24 K84  ; R24 := R24["BackgroundMovie"]
433 [-]: CALL      R23 2 2      ; R23 := R23(R24)
434 [-]: TEST      R23 1        ; if R23 then PC := 442
435 [-]: JMP       442          ; PC := 442
436 [-]: GETGLOBAL R23 K13      ; R23 := _T
437 [-]: GETTABLE  R23 R23 K84  ; R23 := R23["BackgroundMovie"]
438 [-]: SELF      R23 R23 K85  ; R24 := R23; R23 := R23[0xe4162eed]
439 [-]: LOADK     R25 K86      ; R25 := "ShowBlockingMessage"
440 [-]: LOADK     R26 K87      ; R26 := "0"
441 [-]: CALL      R23 4 1      ; R23(R24,R25,R26)
442 [-]: LOADKB    R23 0 0      ; R23 := false
443 [-]: SETGLOBAL R23 K88      ; mInputBlocked := R23
444 [-]: JMP       472          ; PC := 472
445 [-]: GETUPVAL  R23 U10      ; R23 := U10
446 [-]: EQ        1 R23 K15    ; if R23 == nil then PC := 472
447 [-]: JMP       472          ; PC := 472
448 [-]: GETGLOBAL R23 K79      ; R23 := mCardLoader
449 [-]: SELF      R23 R23 K80  ; R24 := R23; R23 := R23[0xd2d3875a]
450 [-]: CALL      R23 2 2      ; R23 := R23(R24)
451 [-]: TEST      R23 0        ; if not R23 then PC := 472
452 [-]: JMP       472          ; PC := 472
453 [-]: GETUPVAL  R23 U8       ; R23 := U8
454 [-]: GETUPVAL  R24 U10      ; R24 := U10
455 [-]: CALL      R23 2 1      ; R23(R24)
456 [-]: GETGLOBAL R23 K0       ; R23 := 0x7b998233
457 [-]: GETGLOBAL R24 K13      ; R24 := _T
458 [-]: GETTABLE  R24 R24 K84  ; R24 := R24["BackgroundMovie"]
459 [-]: CALL      R23 2 2      ; R23 := R23(R24)
460 [-]: TEST      R23 1        ; if R23 then PC := 468
461 [-]: JMP       468          ; PC := 468
462 [-]: GETGLOBAL R23 K13      ; R23 := _T
463 [-]: GETTABLE  R23 R23 K84  ; R23 := R23["BackgroundMovie"]
464 [-]: SELF      R23 R23 K85  ; R24 := R23; R23 := R23[0xe4162eed]
465 [-]: LOADK     R25 K86      ; R25 := "ShowBlockingMessage"
466 [-]: LOADK     R26 K87      ; R26 := "0"
467 [-]: CALL      R23 4 1      ; R23(R24,R25,R26)
468 [-]: LOADKB    R23 0 0      ; R23 := false
469 [-]: SETGLOBAL R23 K88      ; mInputBlocked := R23
470 [-]: LOADNIL   R23 R23      ; R23 := nil
471 [-]: SETUPVAL  R23 U10      ; U82 := R10
472 [-]: RETURN    R0 1         ; return 


; Function #100.1:
;
; Name:            
; Defined at line: 4278
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETUPVAL  R1 U0        ; R1 := U0
  2 [-]: GETTABLE  R1 R1 K0     ; R1 := R1[0xfaa69527]
  3 [-]: MOVE      R2 R0        ; R2 := R0
  4 [-]: GETGLOBAL R3 K1        ; R3 := 0x67652851
  5 [-]: CALL      R3 1 0       ; R3,... := R3()
  6 [-]: CALL      R1 0 1       ; R1(R2,...)
  7 [-]: RETURN    R0 1         ; return 


; Function #100.2:
;
; Name:            
; Defined at line: 4283
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETUPVAL  R1 U0        ; R1 := U0
  2 [-]: GETTABLE  R1 R1 K0     ; R1 := R1[0xfaa69527]
  3 [-]: MOVE      R2 R0        ; R2 := R0
  4 [-]: GETGLOBAL R3 K1        ; R3 := 0x67652851
  5 [-]: CALL      R3 1 0       ; R3,... := R3()
  6 [-]: CALL      R1 0 1       ; R1(R2,...)
  7 [-]: RETURN    R0 1         ; return 


; Function #101:
;
; Name:            
; Defined at line: 4344
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := mCollectionGrid
  2 [-]: EQ        1 R0 K1      ; if R0 == nil then PC := 11
  3 [-]: JMP       11           ; PC := 11
  4 [-]: GETGLOBAL R0 K0        ; R0 := mCollectionGrid
  5 [-]: SELF      R0 R0 K2     ; R1 := R0; R0 := R0[0xabdfd8fe]
  6 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  7 [-]: TEST      R0 0         ; if not R0 then PC := 11
  8 [-]: JMP       11           ; PC := 11
  9 [-]: RETURN    R0 1         ; return 
 10 [-]: JMP       25           ; PC := 25
 11 [-]: GETGLOBAL R0 K3        ; R0 := 0x34291f5c
 12 [-]: GETTABLE  R0 R0 K4     ; R0 := R0[0x1467d5f4]
 13 [-]: CALL      R0 1 2       ; R0 := R0()
 14 [-]: TEST      R0 0         ; if not R0 then PC := 25
 15 [-]: JMP       25           ; PC := 25
 16 [-]: GETGLOBAL R0 K5        ; R0 := mMouseDrag
 17 [-]: SELF      R0 R0 K6     ; R1 := R0; R0 := R0[0xf37943ff]
 18 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 19 [-]: TEST      R0 0         ; if not R0 then PC := 25
 20 [-]: JMP       25           ; PC := 25
 21 [-]: GETGLOBAL R0 K5        ; R0 := mMouseDrag
 22 [-]: SELF      R0 R0 K7     ; R1 := R0; R0 := R0[0xf4e253b6]
 23 [-]: CALL      R0 2 1       ; R0(R1)
 24 [-]: RETURN    R0 1         ; return 
 25 [-]: GETUPVAL  R0 U0        ; R0 := U0
 26 [-]: CALL      R0 1 1       ; R0()
 27 [-]: RETURN    R0 1         ; return 


; Function #102:
;
; Name:            
; Defined at line: 4356
; #Upvalues:       4
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  10

  1 [-]: GETGLOBAL R2 K0        ; R2 := _T
  2 [-]: SETTABLE  R2 K1 K2     ; R2["OnArcaneSelected"] := nil
  3 [-]: GETGLOBAL R2 K3        ; R2 := mArcaneInfo
  4 [-]: GETTABLE  R2 R2 K4     ; R2 := R2["SelectedSlot"]
  5 [-]: GETUPVAL  R3 U0        ; R3 := U0
  6 [-]: CALL      R3 1 1       ; R3()
  7 [-]: TEST      R0 0         ; if not R0 then PC := 26
  8 [-]: JMP       26           ; PC := 26
  9 [-]: EQ        1 R2 K2      ; if R2 == nil then PC := 26
 10 [-]: JMP       26           ; PC := 26
 11 [-]: GETGLOBAL R3 K5        ; R3 := 0x7b998233
 12 [-]: MOVE      R4 R1        ; R4 := R1
 13 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 14 [-]: TEST      R3 0         ; if not R3 then PC := 23
 15 [-]: JMP       23           ; PC := 23
 16 [-]: GETGLOBAL R3 K3        ; R3 := mArcaneInfo
 17 [-]: GETTABLE  R3 R3 K6     ; R3 := R3["Arcanes"]
 18 [-]: GETGLOBAL R4 K7        ; R4 := 0x6c97a788
 19 [-]: GETTABLE  R4 R4 K8     ; R4 := R4[0x1aba4d9e]
 20 [-]: CALL      R4 1 2       ; R4 := R4()
 21 [-]: SETTABLE  R3 R2 R4     ; R3[R2] := R4
 22 [-]: JMP       26           ; PC := 26
 23 [-]: GETGLOBAL R3 K3        ; R3 := mArcaneInfo
 24 [-]: GETTABLE  R3 R3 K6     ; R3 := R3["Arcanes"]
 25 [-]: SETTABLE  R3 R2 R1     ; R3[R2] := R1
 26 [-]: CONST     R3 1         ; R3 := 1.000000
 27 [-]: GETGLOBAL R4 K3        ; R4 := mArcaneInfo
 28 [-]: GETTABLE  R4 R4 K9     ; R4 := R4["Slots"]
 29 [-]: CONST     R5 1         ; R5 := 1.000000
 30 [-]: FORPREP   R3 35        ; R3 -= R5; PC := 35
 31 [-]: GETUPVAL  R7 U1        ; R7 := U1
 32 [-]: MOVE      R8 R6        ; R8 := R6
 33 [-]: LOADKB    R9 0 0       ; R9 := false
 34 [-]: CALL      R7 3 1       ; R7(R8,R9)
 35 [-]: FORLOOP   R3 31        ; R3 += R5; if R3 <= R4 then begin PC := 31; R6 := R3 end
 36 [-]: GETUPVAL  R7 U2        ; R7 := U2
 37 [-]: CALL      R7 1 1       ; R7()
 38 [-]: GETUPVAL  R7 U3        ; R7 := U3
 39 [-]: CALL      R7 1 1       ; R7()
 40 [-]: RETURN    R0 1         ; return 


; Function #103:
;
; Name:            
; Defined at line: 4377
; #Upvalues:       3
; #Parameters:     3
; Is_vararg:       0
; Max Stack Size:  7

  1 [-]: GETGLOBAL R3 K0        ; R3 := 0x7f5022cf
  2 [-]: GETTABLE  R3 R3 K1     ; R3 := R3[0xa5c556b9]
  3 [-]: MOVE      R4 R1        ; R4 := R1
  4 [-]: LOADK     R5 K2        ; R5 := "MOUSE_B1"
  5 [-]: CALL      R3 3 2       ; R3 := R3(R4,R5)
  6 [-]: EQ        1 R3 K3      ; if R3 == nil then PC := 30
  7 [-]: JMP       30           ; PC := 30
  8 [-]: EQ        0 R2 K4      ; if R2 ~= "0" then PC := 30
  9 [-]: JMP       30           ; PC := 30
 10 [-]: GETGLOBAL R3 K5        ; R3 := mArcaneInfo
 11 [-]: GETTABLE  R3 R3 K6     ; R3 := R3["FocusedSlot"]
 12 [-]: EQ        1 R3 K3      ; if R3 == nil then PC := 28
 13 [-]: JMP       28           ; PC := 28
 14 [-]: GETGLOBAL R3 K5        ; R3 := mArcaneInfo
 15 [-]: GETGLOBAL R4 K5        ; R4 := mArcaneInfo
 16 [-]: GETTABLE  R4 R4 K6     ; R4 := R4["FocusedSlot"]
 17 [-]: SETTABLE  R3 K7 R4     ; R3["SelectedSlot"] := R4
 18 [-]: GETUPVAL  R3 U0        ; R3 := U0
 19 [-]: LOADKB    R4 1 0       ; R4 := true
 20 [-]: LOADNIL   R5 R5        ; R5 := nil
 21 [-]: CALL      R3 3 1       ; R3(R4,R5)
 22 [-]: GETUPVAL  R3 U1        ; R3 := U1
 23 [-]: GETTABLE  R3 R3 K8     ; R3 := R3[0x659d451f]
 24 [-]: GETGLOBAL R4 K9        ; R4 := 0x0032441c
 25 [-]: GETTABLE  R4 R4 K10    ; R4 := R4["UISound_WindowOpen"]
 26 [-]: CALL      R3 2 1       ; R3(R4)
 27 [-]: JMP       30           ; PC := 30
 28 [-]: GETUPVAL  R3 U2        ; R3 := U2
 29 [-]: CALL      R3 1 1       ; R3()
 30 [-]: GETGLOBAL R3 K0        ; R3 := 0x7f5022cf
 31 [-]: GETTABLE  R3 R3 K1     ; R3 := R3[0xa5c556b9]
 32 [-]: MOVE      R4 R1        ; R4 := R1
 33 [-]: LOADK     R5 K11       ; R5 := "MOUSE_B0"
 34 [-]: CALL      R3 3 2       ; R3 := R3(R4,R5)
 35 [-]: EQ        1 R3 K3      ; if R3 == nil then PC := 61
 36 [-]: JMP       61           ; PC := 61
 37 [-]: EQ        0 R2 K4      ; if R2 ~= "0" then PC := 61
 38 [-]: JMP       61           ; PC := 61
 39 [-]: GETGLOBAL R3 K12       ; R3 := mMouseDrag
 40 [-]: EQ        1 R3 K3      ; if R3 == nil then PC := 61
 41 [-]: JMP       61           ; PC := 61
 42 [-]: GETGLOBAL R3 K13       ; R3 := mInstalledGrid
 43 [-]: EQ        1 R3 K3      ; if R3 == nil then PC := 61
 44 [-]: JMP       61           ; PC := 61
 45 [-]: GETGLOBAL R3 K14       ; R3 := mCollectionGrid
 46 [-]: EQ        1 R3 K3      ; if R3 == nil then PC := 61
 47 [-]: JMP       61           ; PC := 61
 48 [-]: GETGLOBAL R3 K13       ; R3 := mInstalledGrid
 49 [-]: SELF      R3 R3 K15    ; R4 := R3; R3 := R3[0xed1ab921]
 50 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 51 [-]: GETGLOBAL R4 K14       ; R4 := mCollectionGrid
 52 [-]: SELF      R4 R4 K15    ; R5 := R4; R4 := R4[0xed1ab921]
 53 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 54 [-]: EQ        0 R3 K3      ; if R3 ~= nil then PC := 61
 55 [-]: JMP       61           ; PC := 61
 56 [-]: EQ        0 R4 K3      ; if R4 ~= nil then PC := 61
 57 [-]: JMP       61           ; PC := 61
 58 [-]: GETGLOBAL R5 K12       ; R5 := mMouseDrag
 59 [-]: SELF      R5 R5 K16    ; R6 := R5; R5 := R5[0xf4e253b6]
 60 [-]: CALL      R5 2 1       ; R5(R6)
 61 [-]: RETURN    R0 1         ; return 


; Function #104:
;
; Name:            
; Defined at line: 4396
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mCollectionGrid
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 19
  5 [-]: JMP       19           ; PC := 19
  6 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  7 [-]: GETGLOBAL R2 K1        ; R2 := mCollectionGrid
  8 [-]: GETTABLE  R2 R2 K2     ; R2 := R2["mCategoryMenu"]
  9 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 10 [-]: TEST      R1 1         ; if R1 then PC := 19
 11 [-]: JMP       19           ; PC := 19
 12 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
 13 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mCategoryMenu"]
 14 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0xdf42446e]
 15 [-]: GETGLOBAL R3 K4        ; R3 := 0x03f57322
 16 [-]: MOVE      R4 R0        ; R4 := R0
 17 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 18 [-]: CALL      R1 0 1       ; R1(R2,...)
 19 [-]: RETURN    R0 1         ; return 


; Function #105:
;
; Name:            
; Defined at line: 4402
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mCollectionGrid
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 19
  5 [-]: JMP       19           ; PC := 19
  6 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  7 [-]: GETGLOBAL R2 K1        ; R2 := mCollectionGrid
  8 [-]: GETTABLE  R2 R2 K2     ; R2 := R2["mCategoryMenu"]
  9 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 10 [-]: TEST      R1 1         ; if R1 then PC := 19
 11 [-]: JMP       19           ; PC := 19
 12 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
 13 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mCategoryMenu"]
 14 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0xbce5a201]
 15 [-]: GETGLOBAL R3 K4        ; R3 := 0x03f57322
 16 [-]: MOVE      R4 R0        ; R4 := R0
 17 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 18 [-]: CALL      R1 0 1       ; R1(R2,...)
 19 [-]: RETURN    R0 1         ; return 


; Function #106:
;
; Name:            
; Defined at line: 4408
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := mInputBlocked
  2 [-]: TEST      R1 1         ; if R1 then PC := 23
  3 [-]: JMP       23           ; PC := 23
  4 [-]: GETGLOBAL R1 K1        ; R1 := 0x7b998233
  5 [-]: GETGLOBAL R2 K2        ; R2 := mCollectionGrid
  6 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  7 [-]: TEST      R1 1         ; if R1 then PC := 23
  8 [-]: JMP       23           ; PC := 23
  9 [-]: GETGLOBAL R1 K1        ; R1 := 0x7b998233
 10 [-]: GETGLOBAL R2 K2        ; R2 := mCollectionGrid
 11 [-]: GETTABLE  R2 R2 K3     ; R2 := R2["mCategoryMenu"]
 12 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 13 [-]: TEST      R1 1         ; if R1 then PC := 23
 14 [-]: JMP       23           ; PC := 23
 15 [-]: GETGLOBAL R1 K2        ; R1 := mCollectionGrid
 16 [-]: GETTABLE  R1 R1 K3     ; R1 := R1["mCategoryMenu"]
 17 [-]: SELF      R1 R1 K4     ; R2 := R1; R1 := R1[0x070daa5a]
 18 [-]: GETGLOBAL R3 K5        ; R3 := 0x03f57322
 19 [-]: MOVE      R4 R0        ; R4 := R0
 20 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 21 [-]: LOADKB    R4 1 0       ; R4 := true
 22 [-]: CALL      R1 4 1       ; R1(R2,R3,R4)
 23 [-]: RETURN    R0 1         ; return 


; Function #107:
;
; Name:            
; Defined at line: 4414
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mCollectionGrid
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 19
  5 [-]: JMP       19           ; PC := 19
  6 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  7 [-]: GETGLOBAL R2 K1        ; R2 := mCollectionGrid
  8 [-]: GETTABLE  R2 R2 K2     ; R2 := R2["mSortMenu"]
  9 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 10 [-]: TEST      R1 1         ; if R1 then PC := 19
 11 [-]: JMP       19           ; PC := 19
 12 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
 13 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mSortMenu"]
 14 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0xdf42446e]
 15 [-]: GETGLOBAL R3 K4        ; R3 := 0x03f57322
 16 [-]: MOVE      R4 R0        ; R4 := R0
 17 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 18 [-]: CALL      R1 0 1       ; R1(R2,...)
 19 [-]: RETURN    R0 1         ; return 


; Function #108:
;
; Name:            
; Defined at line: 4420
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mCollectionGrid
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 19
  5 [-]: JMP       19           ; PC := 19
  6 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  7 [-]: GETGLOBAL R2 K1        ; R2 := mCollectionGrid
  8 [-]: GETTABLE  R2 R2 K2     ; R2 := R2["mSortMenu"]
  9 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 10 [-]: TEST      R1 1         ; if R1 then PC := 19
 11 [-]: JMP       19           ; PC := 19
 12 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
 13 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mSortMenu"]
 14 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0xbce5a201]
 15 [-]: GETGLOBAL R3 K4        ; R3 := 0x03f57322
 16 [-]: MOVE      R4 R0        ; R4 := R0
 17 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 18 [-]: CALL      R1 0 1       ; R1(R2,...)
 19 [-]: RETURN    R0 1         ; return 


; Function #109:
;
; Name:            
; Defined at line: 4426
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := mInputBlocked
  2 [-]: TEST      R1 1         ; if R1 then PC := 23
  3 [-]: JMP       23           ; PC := 23
  4 [-]: GETGLOBAL R1 K1        ; R1 := 0x7b998233
  5 [-]: GETGLOBAL R2 K2        ; R2 := mCollectionGrid
  6 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  7 [-]: TEST      R1 1         ; if R1 then PC := 23
  8 [-]: JMP       23           ; PC := 23
  9 [-]: GETGLOBAL R1 K1        ; R1 := 0x7b998233
 10 [-]: GETGLOBAL R2 K2        ; R2 := mCollectionGrid
 11 [-]: GETTABLE  R2 R2 K3     ; R2 := R2["mSortMenu"]
 12 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 13 [-]: TEST      R1 1         ; if R1 then PC := 23
 14 [-]: JMP       23           ; PC := 23
 15 [-]: GETGLOBAL R1 K2        ; R1 := mCollectionGrid
 16 [-]: GETTABLE  R1 R1 K3     ; R1 := R1["mSortMenu"]
 17 [-]: SELF      R1 R1 K4     ; R2 := R1; R1 := R1[0x070daa5a]
 18 [-]: GETGLOBAL R3 K5        ; R3 := 0x03f57322
 19 [-]: MOVE      R4 R0        ; R4 := R0
 20 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 21 [-]: LOADKB    R4 1 0       ; R4 := true
 22 [-]: CALL      R1 4 1       ; R1(R2,R3,R4)
 23 [-]: RETURN    R0 1         ; return 


; Function #110:
;
; Name:            
; Defined at line: 4432
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  2 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: TEST      R0 1         ; if R0 then PC := 16
  5 [-]: JMP       16           ; PC := 16
  6 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  7 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
  8 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mScrollBar"]
  9 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 10 [-]: TEST      R0 1         ; if R0 then PC := 16
 11 [-]: JMP       16           ; PC := 16
 12 [-]: GETGLOBAL R0 K1        ; R0 := mCollectionGrid
 13 [-]: GETTABLE  R0 R0 K2     ; R0 := R0["mScrollBar"]
 14 [-]: SELF      R0 R0 K3     ; R1 := R0; R0 := R0[0xd033d908]
 15 [-]: CALL      R0 2 1       ; R0(R1)
 16 [-]: RETURN    R0 1         ; return 


; Function #111:
;
; Name:            
; Defined at line: 4438
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  2 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: TEST      R0 1         ; if R0 then PC := 16
  5 [-]: JMP       16           ; PC := 16
  6 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  7 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
  8 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mScrollBar"]
  9 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 10 [-]: TEST      R0 1         ; if R0 then PC := 16
 11 [-]: JMP       16           ; PC := 16
 12 [-]: GETGLOBAL R0 K1        ; R0 := mCollectionGrid
 13 [-]: GETTABLE  R0 R0 K2     ; R0 := R0["mScrollBar"]
 14 [-]: SELF      R0 R0 K3     ; R1 := R0; R0 := R0[0xcc5f3150]
 15 [-]: CALL      R0 2 1       ; R0(R1)
 16 [-]: RETURN    R0 1         ; return 


; Function #112:
;
; Name:            
; Defined at line: 4444
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  2 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: TEST      R0 1         ; if R0 then PC := 16
  5 [-]: JMP       16           ; PC := 16
  6 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  7 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
  8 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mScrollBar"]
  9 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 10 [-]: TEST      R0 1         ; if R0 then PC := 16
 11 [-]: JMP       16           ; PC := 16
 12 [-]: GETGLOBAL R0 K1        ; R0 := mCollectionGrid
 13 [-]: GETTABLE  R0 R0 K2     ; R0 := R0["mScrollBar"]
 14 [-]: SELF      R0 R0 K3     ; R1 := R0; R0 := R0[0x87ffcf10]
 15 [-]: CALL      R0 2 1       ; R0(R1)
 16 [-]: RETURN    R0 1         ; return 


; Function #113:
;
; Name:            
; Defined at line: 4450
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  2 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: TEST      R0 1         ; if R0 then PC := 16
  5 [-]: JMP       16           ; PC := 16
  6 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  7 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
  8 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mSortMenu"]
  9 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 10 [-]: TEST      R0 1         ; if R0 then PC := 16
 11 [-]: JMP       16           ; PC := 16
 12 [-]: GETGLOBAL R0 K1        ; R0 := mCollectionGrid
 13 [-]: GETTABLE  R0 R0 K2     ; R0 := R0["mSortMenu"]
 14 [-]: SELF      R0 R0 K3     ; R1 := R0; R0 := R0[0x32b02cab]
 15 [-]: CALL      R0 2 1       ; R0(R1)
 16 [-]: RETURN    R0 1         ; return 


; Function #114:
;
; Name:            
; Defined at line: 4456
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  2 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: TEST      R0 1         ; if R0 then PC := 16
  5 [-]: JMP       16           ; PC := 16
  6 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  7 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
  8 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mSortMenu"]
  9 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 10 [-]: TEST      R0 1         ; if R0 then PC := 16
 11 [-]: JMP       16           ; PC := 16
 12 [-]: GETGLOBAL R0 K1        ; R0 := mCollectionGrid
 13 [-]: GETTABLE  R0 R0 K2     ; R0 := R0["mSortMenu"]
 14 [-]: SELF      R0 R0 K3     ; R1 := R0; R0 := R0[0xeaeb4acc]
 15 [-]: CALL      R0 2 1       ; R0(R1)
 16 [-]: RETURN    R0 1         ; return 


; Function #115:
;
; Name:            
; Defined at line: 4462
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  2 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: TEST      R0 1         ; if R0 then PC := 16
  5 [-]: JMP       16           ; PC := 16
  6 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  7 [-]: GETGLOBAL R1 K1        ; R1 := mCollectionGrid
  8 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mSortMenu"]
  9 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 10 [-]: TEST      R0 1         ; if R0 then PC := 16
 11 [-]: JMP       16           ; PC := 16
 12 [-]: GETGLOBAL R0 K1        ; R0 := mCollectionGrid
 13 [-]: GETTABLE  R0 R0 K2     ; R0 := R0["mSortMenu"]
 14 [-]: SELF      R0 R0 K3     ; R1 := R0; R0 := R0[0xcc4b959d]
 15 [-]: CALL      R0 2 1       ; R0(R1)
 16 [-]: RETURN    R0 1         ; return 


; Function #116:
;
; Name:            
; Defined at line: 4468
; #Upvalues:       2
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: GETGLOBAL R0 K0        ; R0 := mCurrentState
  2 [-]: GETGLOBAL R1 K1        ; R1 := ScreenState
  3 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["SELECTING_CARD"]
  4 [-]: EQ        0 R0 R1      ; if R0 ~= R1 then PC := 19
  5 [-]: JMP       19           ; PC := 19
  6 [-]: GETGLOBAL R0 K3        ; R0 := 0x7b998233
  7 [-]: GETGLOBAL R1 K4        ; R1 := mCollectionGrid
  8 [-]: GETTABLE  R1 R1 K5     ; R1 := R1["mSortMenu"]
  9 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 10 [-]: TEST      R0 1         ; if R0 then PC := 19
 11 [-]: JMP       19           ; PC := 19
 12 [-]: GETGLOBAL R0 K4        ; R0 := mCollectionGrid
 13 [-]: GETTABLE  R0 R0 K5     ; R0 := R0["mSortMenu"]
 14 [-]: GETTABLE  R0 R0 K6     ; R0 := R0["mMainButton"]
 15 [-]: SELF      R0 R0 K7     ; R1 := R0; R0 := R0[0x043ef82f]
 16 [-]: LOADKB    R2 1 0       ; R2 := true
 17 [-]: CALL      R0 3 1       ; R0(R1,R2)
 18 [-]: JMP       40           ; PC := 40
 19 [-]: GETGLOBAL R0 K3        ; R0 := 0x7b998233
 20 [-]: GETGLOBAL R1 K8        ; R1 := mInstalledGrid
 21 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 22 [-]: TEST      R0 1         ; if R0 then PC := 40
 23 [-]: JMP       40           ; PC := 40
 24 [-]: GETGLOBAL R0 K8        ; R0 := mInstalledGrid
 25 [-]: SELF      R0 R0 K9     ; R1 := R0; R0 := R0[0xed1ab921]
 26 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 27 [-]: GETGLOBAL R1 K3        ; R1 := 0x7b998233
 28 [-]: MOVE      R2 R0        ; R2 := R0
 29 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 30 [-]: TEST      R1 1         ; if R1 then PC := 38
 31 [-]: JMP       38           ; PC := 38
 32 [-]: GETTABLE  R1 R0 K10    ; R1 := R0["mCardIndex"]
 33 [-]: EQ        1 R1 K11     ; if R1 == -1.000000 then PC := 38
 34 [-]: JMP       38           ; PC := 38
 35 [-]: GETUPVAL  R1 U0        ; R1 := U0
 36 [-]: CALL      R1 1 1       ; R1()
 37 [-]: JMP       40           ; PC := 40
 38 [-]: GETUPVAL  R1 U1        ; R1 := U1
 39 [-]: CALL      R1 1 1       ; R1()
 40 [-]: RETURN    R0 1         ; return 


; Function #117:
;
; Name:            
; Defined at line: 4481
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETUPVAL  R0 U0        ; R0 := U0
  2 [-]: GETTABLE  R0 R0 K0     ; R0 := R0[0x659d451f]
  3 [-]: GETGLOBAL R1 K1        ; R1 := 0x0032441c
  4 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["UISound_Focus"]
  5 [-]: CALL      R0 2 1       ; R0(R1)
  6 [-]: RETURN    R0 1         ; return 


; Function #118:
;
; Name:            
; Defined at line: 4485
; #Upvalues:       8
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  61

  1 [-]: GETUPVAL  R2 U0        ; R2 := U0
  2 [-]: EQ        0 R0 R2      ; if R0 ~= R2 then PC := 7
  3 [-]: JMP       7            ; PC := 7
  4 [-]: TEST      R1 1         ; if R1 then PC := 7
  5 [-]: JMP       7            ; PC := 7
  6 [-]: RETURN    R0 1         ; return 
  7 [-]: LOADKB    R2 0 0       ; R2 := false
  8 [-]: SETGLOBAL R2 K0        ; mChanged := R2
  9 [-]: GETUPVAL  R2 U1        ; R2 := U1
 10 [-]: GETTABLE  R2 R2 K1     ; R2 := R2["info"]
 11 [-]: SELF      R2 R2 K2     ; R3 := R2; R2 := R2[0xa2bc0e10]
 12 [-]: GETUPVAL  R4 U0        ; R4 := U0
 13 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 14 [-]: GETTABLE  R2 R2 K3     ; R2 := R2["mAbility"]
 15 [-]: GETUPVAL  R3 U1        ; R3 := U1
 16 [-]: GETTABLE  R3 R3 K1     ; R3 := R3["info"]
 17 [-]: SELF      R3 R3 K2     ; R4 := R3; R3 := R3[0xa2bc0e10]
 18 [-]: MOVE      R5 R0        ; R5 := R0
 19 [-]: CALL      R3 3 2       ; R3 := R3(R4,R5)
 20 [-]: GETTABLE  R3 R3 K3     ; R3 := R3["mAbility"]
 21 [-]: SETUPVAL  R0 U0        ; U82 := R0
 22 [-]: GETGLOBAL R4 K4        ; R4 := mMouseDrag
 23 [-]: SELF      R4 R4 K5     ; R5 := R4; R4 := R4[0xf4e253b6]
 24 [-]: CALL      R4 2 1       ; R4(R5)
 25 [-]: EQ        1 R3 R2      ; if R3 == R2 then PC := 35
 26 [-]: JMP       35           ; PC := 35
 27 [-]: GETUPVAL  R4 U2        ; R4 := U2
 28 [-]: LOADKB    R5 1 0       ; R5 := true
 29 [-]: LOADKB    R6 1 0       ; R6 := true
 30 [-]: CALL      R4 3 1       ; R4(R5,R6)
 31 [-]: GETUPVAL  R4 U3        ; R4 := U3
 32 [-]: LOADNIL   R5 R5        ; R5 := nil
 33 [-]: LOADKB    R6 1 0       ; R6 := true
 34 [-]: CALL      R4 3 1       ; R4(R5,R6)
 35 [-]: NEWTABLE  R4 0 0       ; R4 := {}
 36 [-]: GETGLOBAL R5 K6        ; R5 := 0xcfc01047
 37 [-]: GETGLOBAL R6 K7        ; R6 := mCollectionGrid
 38 [-]: GETTABLE  R6 R6 K8     ; R6 := R6["mUnfilteredElements"]
 39 [-]: CALL      R5 2 4       ; R5,R6,R7 := R5(R6)
 40 [-]: JMP       52           ; PC := 52
 41 [-]: GETTABLE  R10 R9 K9    ; R10 := R9["mCardIndex"]
 42 [-]: EQ        1 R10 K10    ; if R10 == nil then PC := 47
 43 [-]: JMP       47           ; PC := 47
 44 [-]: GETTABLE  R10 R9 K9    ; R10 := R9["mCardIndex"]
 45 [-]: LT        0 R10 K11    ; if R10 >= 0.000000 then PC := 52
 46 [-]: JMP       52           ; PC := 52
 47 [-]: GETGLOBAL R10 K12      ; R10 := 0x33bdd652
 48 [-]: GETTABLE  R10 R10 K13  ; R10 := R10[0x23d5322f]
 49 [-]: MOVE      R11 R4       ; R11 := R4
 50 [-]: MOVE      R12 R9       ; R12 := R9
 51 [-]: CALL      R10 3 1      ; R10(R11,R12)
 52 [-]: TFORLOOP  R5 2         ; R8,R9 :=  R5(R6,R7); if R8 ~= nil then begin PC = 41; R7 := R8 end
 53 [-]: JMP       41           ; PC := 41
 54 [-]: GETUPVAL  R10 U1       ; R10 := U1
 55 [-]: GETTABLE  R10 R10 K1   ; R10 := R10["info"]
 56 [-]: GETTABLE  R10 R10 K14  ; R10 := R10["mItemId"]
 57 [-]: GETTABLE  R10 R10 K15  ; R10 := R10["mId"]
 58 [-]: GETGLOBAL R11 K16      ; R11 := 0xc8802016
 59 [-]: GETGLOBAL R12 K17      ; R12 := mInstalledGrid
 60 [-]: GETTABLE  R12 R12 K8   ; R12 := R12["mUnfilteredElements"]
 61 [-]: CALL      R11 2 4      ; R11,R12,R13 := R11(R12)
 62 [-]: JMP       124          ; PC := 124
 63 [-]: GETTABLE  R16 R15 K9   ; R16 := R15["mCardIndex"]
 64 [-]: EQ        1 R16 K10    ; if R16 == nil then PC := 124
 65 [-]: JMP       124          ; PC := 124
 66 [-]: GETTABLE  R16 R15 K9   ; R16 := R15["mCardIndex"]
 67 [-]: LE        0 K11 R16    ; if 0.000000 > R16 then PC := 124
 68 [-]: JMP       124          ; PC := 124
 69 [-]: GETTABLE  R16 R15 K18  ; R16 := R15["mCardLocked"]
 70 [-]: TEST      R16 1        ; if R16 then PC := 124
 71 [-]: JMP       124          ; PC := 124
 72 [-]: LOADNIL   R16 R16      ; R16 := nil
 73 [-]: GETGLOBAL R17 K6       ; R17 := 0xcfc01047
 74 [-]: MOVE      R18 R4       ; R18 := R4
 75 [-]: CALL      R17 2 4      ; R17,R18,R19 := R17(R18)
 76 [-]: JMP       80           ; PC := 80
 77 [-]: MOVE      R16 R21      ; R16 := R21
 78 [-]: SETTABLE  R4 R20 K10   ; R4[R20] := nil
 79 [-]: JMP       82           ; PC := 82
 80 [-]: TFORLOOP  R17 2        ; R20,R21 :=  R17(R18,R19); if R20 ~= nil then begin PC = 77; R19 := R20 end
 81 [-]: JMP       77           ; PC := 77
 82 [-]: EQ        0 R16 K10    ; if R16 ~= nil then PC := 88
 83 [-]: JMP       88           ; PC := 88
 84 [-]: GETGLOBAL R22 K19      ; R22 := 0x3d106989
 85 [-]: LOADK     R23 K20      ; R23 := "Failed to get an empty card."
 86 [-]: CALL      R22 2 1      ; R22(R23)
 87 [-]: RETURN    R0 1         ; return 
 88 [-]: GETTABLE  R22 R15 K9   ; R22 := R15["mCardIndex"]
 89 [-]: SETTABLE  R16 K9 R22   ; R16["mCardIndex"] := R22
 90 [-]: GETTABLE  R22 R15 K21  ; R22 := R15["mName"]
 91 [-]: SETTABLE  R16 K21 R22  ; R16["mName"] := R22
 92 [-]: GETTABLE  R22 R15 K22  ; R22 := R15["mInstalled"]
 93 [-]: SETTABLE  R16 K22 R22  ; R16["mInstalled"] := R22
 94 [-]: GETTABLE  R22 R15 K23  ; R22 := R15["mInstalledLoadOutType"]
 95 [-]: SETTABLE  R16 K23 R22  ; R16["mInstalledLoadOutType"] := R22
 96 [-]: GETTABLE  R22 R15 K24  ; R22 := R15["mInstalledType"]
 97 [-]: SETTABLE  R16 K24 R22  ; R16["mInstalledType"] := R22
 98 [-]: GETTABLE  R22 R15 K25  ; R22 := R15["mInstalledName"]
 99 [-]: SETTABLE  R16 K25 R22  ; R16["mInstalledName"] := R22
100 [-]: GETTABLE  R22 R15 K26  ; R22 := R15["mModSet"]
101 [-]: SETTABLE  R16 K26 R22  ; R16["mModSet"] := R22
102 [-]: GETGLOBAL R22 K27      ; R22 := mCards
103 [-]: GETTABLE  R23 R16 K9   ; R23 := R16["mCardIndex"]
104 [-]: GETTABLE  R22 R22 R23  ; R22 := R22[R23]
105 [-]: SETTABLE  R22 K28 R16  ; R22["mElement"] := R16
106 [-]: GETTABLE  R23 R22 K22  ; R23 := R22["mInstalled"]
107 [-]: SETTABLE  R23 R10 K10  ; R23[R10] := nil
108 [-]: GETUPVAL  R23 U4       ; R23 := U4
109 [-]: MOVE      R24 R22      ; R24 := R22
110 [-]: CALL      R23 2 2      ; R23 := R23(R24)
111 [-]: SETTABLE  R16 K29 R23  ; R16["Categories"] := R23
112 [-]: GETUPVAL  R23 U5       ; R23 := U5
113 [-]: GETTABLE  R23 R23 K31  ; R23 := R23[0x1ac299fb]
114 [-]: MOVE      R24 R22      ; R24 := R22
115 [-]: CALL      R23 2 2      ; R23 := R23(R24)
116 [-]: SETTABLE  R16 K30 R23  ; R16[0x7b998233] := R23
117 [-]: SETTABLE  R15 K9 K32   ; R15["mCardIndex"] := -1.000000
118 [-]: SETTABLE  R15 K21 K10  ; R15["mName"] := nil
119 [-]: SETTABLE  R15 K22 K10  ; R15["mInstalled"] := nil
120 [-]: SETTABLE  R15 K23 K10  ; R15["mInstalledLoadOutType"] := nil
121 [-]: SETTABLE  R15 K24 K10  ; R15["mInstalledType"] := nil
122 [-]: SETTABLE  R15 K25 K10  ; R15["mInstalledName"] := nil
123 [-]: SETTABLE  R15 K26 K10  ; R15["mModSet"] := nil
124 [-]: TFORLOOP  R11 2        ; R14,R15 :=  R11(R12,R13); if R14 ~= nil then begin PC = 63; R13 := R14 end
125 [-]: JMP       63           ; PC := 63
126 [-]: GETGLOBAL R23 K33      ; R23 := _T
127 [-]: GETTABLE  R23 R23 K34  ; R23 := R23["ArsenalState"]
128 [-]: EQ        1 R23 K36    ; if R23 == 2.000000 then PC := 131
129 [-]: JMP       131          ; PC := 131
130 [-]: LOADKB    R23 0 1      ; R23 := false; PC := 131
131 [-]: LOADKB    R23 1 0      ; R23 := true
132 [-]: GETGLOBAL R24 K37      ; R24 := mGameData
133 [-]: SELF      R24 R24 K38  ; R25 := R24; R24 := R24[0x25a6e75e]
134 [-]: CALL      R24 2 2      ; R24 := R24(R25)
135 [-]: SELF      R25 R24 K39  ; R26 := R24; R25 := R24[0x2f30b8db]
136 [-]: GETUPVAL  R27 U1       ; R27 := U1
137 [-]: GETTABLE  R27 R27 K1   ; R27 := R27["info"]
138 [-]: GETUPVAL  R28 U0       ; R28 := U0
139 [-]: MOVE      R29 R23      ; R29 := R23
140 [-]: LOADKB    R30 0 0      ; R30 := false
141 [-]: CALL      R25 6 2      ; R25 := R25(R26,R27,R28,R29,R30)
142 [-]: NEWTABLE  R26 0 0      ; R26 := {}
143 [-]: GETGLOBAL R27 K16      ; R27 := 0xc8802016
144 [-]: MOVE      R28 R25      ; R28 := R25
145 [-]: CALL      R27 2 4      ; R27,R28,R29 := R27(R28)
146 [-]: JMP       167          ; PC := 167
147 [-]: GETTABLE  R32 R31 K14  ; R32 := R31["mItemId"]
148 [-]: GETTABLE  R32 R32 K15  ; R32 := R32["mId"]
149 [-]: LEN       R33 R32      ; R33 := # R32
150 [-]: LT        0 K11 R33    ; if 0.000000 >= R33 then PC := 156
151 [-]: JMP       156          ; PC := 156
152 [-]: GETGLOBAL R33 K40      ; R33 := mIdToCard
153 [-]: GETTABLE  R33 R33 R32  ; R33 := R33[R32]
154 [-]: SETTABLE  R26 R30 R33  ; R26[R30] := R33
155 [-]: JMP       167          ; PC := 167
156 [-]: GETGLOBAL R33 K41      ; R33 := 0x7b998233
157 [-]: GETTABLE  R34 R31 K42  ; R34 := R31["mItemType"]
158 [-]: CALL      R33 2 2      ; R33 := R33(R34)
159 [-]: TEST      R33 1        ; if R33 then PC := 167
160 [-]: JMP       167          ; PC := 167
161 [-]: GETGLOBAL R33 K43      ; R33 := mTypeToCard
162 [-]: GETTABLE  R34 R31 K42  ; R34 := R31["mItemType"]
163 [-]: SELF      R34 R34 K44  ; R35 := R34; R34 := R34[0xed4e0128]
164 [-]: CALL      R34 2 2      ; R34 := R34(R35)
165 [-]: GETTABLE  R33 R33 R34  ; R33 := R33[R34]
166 [-]: SETTABLE  R26 R30 R33  ; R26[R30] := R33
167 [-]: TFORLOOP  R27 2        ; R30,R31 :=  R27(R28,R29); if R30 ~= nil then begin PC = 147; R29 := R30 end
168 [-]: JMP       147          ; PC := 147
169 [-]: NEWTABLE  R33 0 0      ; R33 := {}
170 [-]: CONST     R34 0        ; R34 := 0.000000
171 [-]: CONST     R35 9        ; R35 := 9.000000
172 [-]: CONST     R36 1        ; R36 := 1.000000
173 [-]: FORPREP   R34 181      ; R34 -= R36; PC := 181
174 [-]: SELF      R38 R24 K45  ; R39 := R24; R38 := R24[0x566259e1]
175 [-]: MOVE      R40 R37      ; R40 := R37
176 [-]: SELF      R41 R24 K46  ; R42 := R24; R41 := R24[0x4e457768]
177 [-]: MOVE      R43 R37      ; R43 := R37
178 [-]: CALL      R41 3 0      ; R41,... := R41(R42,R43)
179 [-]: CALL      R38 0 2      ; R38 := R38(R39,...)
180 [-]: SETTABLE  R33 R37 R38  ; R33[R37] := R38
181 [-]: FORLOOP   R34 174      ; R34 += R36; if R34 <= R35 then begin PC := 174; R37 := R34 end
182 [-]: GETGLOBAL R38 K6       ; R38 := 0xcfc01047
183 [-]: MOVE      R39 R26      ; R39 := R26
184 [-]: CALL      R38 2 4      ; R38,R39,R40 := R38(R39)
185 [-]: JMP       234          ; PC := 234
186 [-]: GETGLOBAL R43 K17      ; R43 := mInstalledGrid
187 [-]: SELF      R43 R43 K47  ; R44 := R43; R43 := R43[0xf73486b6]
188 [-]: MOVE      R45 R41      ; R45 := R41
189 [-]: CALL      R43 3 2      ; R43 := R43(R44,R45)
190 [-]: GETGLOBAL R44 K41      ; R44 := 0x7b998233
191 [-]: MOVE      R45 R43      ; R45 := R43
192 [-]: CALL      R44 2 2      ; R44 := R44(R45)
193 [-]: TEST      R44 1        ; if R44 then PC := 234
194 [-]: JMP       234          ; PC := 234
195 [-]: GETGLOBAL R44 K27      ; R44 := mCards
196 [-]: GETTABLE  R44 R44 R42  ; R44 := R44[R42]
197 [-]: GETTABLE  R45 R44 K28  ; R45 := R44["mElement"]
198 [-]: SETTABLE  R44 K28 R43  ; R44["mElement"] := R43
199 [-]: EQ        0 R45 K10    ; if R45 ~= nil then PC := 210
200 [-]: JMP       210          ; PC := 210
201 [-]: GETGLOBAL R46 K19      ; R46 := 0x3d106989
202 [-]: LOADK     R47 K48      ; R47 := "Install Failed: "
203 [-]: GETTABLE  R48 R44 K21  ; R48 := R44["mName"]
204 [-]: LOADK     R49 K49      ; R49 := " NULL=>"
205 [-]: GETGLOBAL R50 K50      ; R50 := 0x64fb1586
206 [-]: GETTABLE  R51 R43 K51  ; R51 := R43["Id"]
207 [-]: CALL      R50 2 2      ; R50 := R50(R51)
208 [-]: CONCAT    R47 R47 R50  ; R47 := R47 .. R48 .. R49 .. R50
209 [-]: CALL      R46 2 1      ; R46(R47)
210 [-]: SETTABLE  R43 K9 R42   ; R43["mCardIndex"] := R42
211 [-]: GETUPVAL  R46 U6       ; R46 := U6
212 [-]: MOVE      R47 R44      ; R47 := R44
213 [-]: MOVE      R48 R33      ; R48 := R33
214 [-]: CALL      R46 3 5      ; R46,R47,R48,R49 := R46(R47,R48)
215 [-]: GETTABLE  R50 R44 K21  ; R50 := R44["mName"]
216 [-]: SETTABLE  R43 K21 R50  ; R43["mName"] := R50
217 [-]: SETTABLE  R43 K22 R46  ; R43["mInstalled"] := R46
218 [-]: SETTABLE  R43 K23 R47  ; R43["mInstalledLoadOutType"] := R47
219 [-]: SETTABLE  R43 K24 R48  ; R43["mInstalledType"] := R48
220 [-]: SETTABLE  R43 K25 R49  ; R43["mInstalledName"] := R49
221 [-]: GETTABLE  R50 R44 K26  ; R50 := R44["mModSet"]
222 [-]: SETTABLE  R43 K26 R50  ; R43["mModSet"] := R50
223 [-]: EQ        1 R45 K10    ; if R45 == nil then PC := 232
224 [-]: JMP       232          ; PC := 232
225 [-]: SETTABLE  R45 K9 K32   ; R45["mCardIndex"] := -1.000000
226 [-]: SETTABLE  R45 K21 K10  ; R45["mName"] := nil
227 [-]: SETTABLE  R45 K22 K10  ; R45["mInstalled"] := nil
228 [-]: SETTABLE  R45 K23 K10  ; R45["mInstalledLoadOutType"] := nil
229 [-]: SETTABLE  R45 K24 K10  ; R45["mInstalledType"] := nil
230 [-]: SETTABLE  R45 K25 K10  ; R45["mInstalledName"] := nil
231 [-]: SETTABLE  R45 K26 K10  ; R45["mModSet"] := nil
232 [-]: GETTABLE  R50 R44 K22  ; R50 := R44["mInstalled"]
233 [-]: SETTABLE  R50 R10 R41  ; R50[R10] := R41
234 [-]: TFORLOOP  R38 2        ; R41,R42 :=  R38(R39,R40); if R41 ~= nil then begin PC = 186; R40 := R41 end
235 [-]: JMP       186          ; PC := 186
236 [-]: NEWTABLE  R50 0 0      ; R50 := {}
237 [-]: GETGLOBAL R51 K6       ; R51 := 0xcfc01047
238 [-]: MOVE      R52 R26      ; R52 := R26
239 [-]: CALL      R51 2 4      ; R51,R52,R53 := R51(R52)
240 [-]: JMP       250          ; PC := 250
241 [-]: GETGLOBAL R56 K27      ; R56 := mCards
242 [-]: GETTABLE  R56 R56 R55  ; R56 := R56[R55]
243 [-]: GETGLOBAL R57 K12      ; R57 := 0x33bdd652
244 [-]: GETTABLE  R57 R57 K13  ; R57 := R57[0x23d5322f]
245 [-]: MOVE      R58 R50      ; R58 := R50
246 [-]: GETTABLE  R59 R56 K52  ; R59 := R56["mUpgradeItemType"]
247 [-]: SELF      R59 R59 K44  ; R60 := R59; R59 := R59[0xed4e0128]
248 [-]: CALL      R59 2 0      ; R59,... := R59(R60)
249 [-]: CALL      R57 0 1      ; R57(R58,...)
250 [-]: TFORLOOP  R51 2        ; R54,R55 :=  R51(R52,R53); if R54 ~= nil then begin PC = 241; R53 := R54 end
251 [-]: JMP       241          ; PC := 241
252 [-]: GETGLOBAL R57 K54      ; R57 := 0xbd496aa1
253 [-]: GETTABLE  R57 R57 K55  ; R57 := R57[0x42645da3]
254 [-]: MOVE      R58 R50      ; R58 := R50
255 [-]: LOADKB    R59 1 0      ; R59 := true
256 [-]: CALL      R57 3 2      ; R57 := R57(R58,R59)
257 [-]: SETGLOBAL R57 K53      ; mCardLoader := R57
258 [-]: LOADKB    R57 1 0      ; R57 := true
259 [-]: SETUPVAL  R57 U7       ; U82 := R7
260 [-]: GETGLOBAL R57 K41      ; R57 := 0x7b998233
261 [-]: GETGLOBAL R58 K33      ; R58 := _T
262 [-]: GETTABLE  R58 R58 K56  ; R58 := R58["BackgroundMovie"]
263 [-]: CALL      R57 2 2      ; R57 := R57(R58)
264 [-]: TEST      R57 1        ; if R57 then PC := 272
265 [-]: JMP       272          ; PC := 272
266 [-]: GETGLOBAL R57 K33      ; R57 := _T
267 [-]: GETTABLE  R57 R57 K56  ; R57 := R57["BackgroundMovie"]
268 [-]: SELF      R57 R57 K57  ; R58 := R57; R57 := R57[0xe4162eed]
269 [-]: LOADK     R59 K58      ; R59 := "ShowBlockingMessage"
270 [-]: LOADK     R60 K59      ; R60 := "2"
271 [-]: CALL      R57 4 1      ; R57(R58,R59,R60)
272 [-]: LOADKB    R57 1 0      ; R57 := true
273 [-]: SETGLOBAL R57 K60      ; mInputBlocked := R57
274 [-]: RETURN    R0 1         ; return 


; Function #119:
;
; Name:            
; Defined at line: 4625
; #Upvalues:       2
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  6

  1 [-]: GETUPVAL  R1 U0        ; R1 := U0
  2 [-]: EQ        1 R1 K0      ; if R1 == nil then PC := 35
  3 [-]: JMP       35           ; PC := 35
  4 [-]: GETGLOBAL R1 K1        ; R1 := 0x7b998233
  5 [-]: GETGLOBAL R2 K2        ; R2 := mConfigMenu
  6 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  7 [-]: TEST      R1 1         ; if R1 then PC := 35
  8 [-]: JMP       35           ; PC := 35
  9 [-]: CONST     R1 3         ; R1 := 3.000000
 10 [-]: GETGLOBAL R2 K1        ; R2 := 0x7b998233
 11 [-]: GETUPVAL  R3 U1        ; R3 := U1
 12 [-]: GETTABLE  R3 R3 K3     ; R3 := R3["info"]
 13 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 14 [-]: TEST      R2 1         ; if R2 then PC := 21
 15 [-]: JMP       21           ; PC := 21
 16 [-]: GETUPVAL  R2 U1        ; R2 := U1
 17 [-]: GETTABLE  R2 R2 K3     ; R2 := R2["info"]
 18 [-]: SELF      R2 R2 K4     ; R3 := R2; R2 := R2[0x6ca03a93]
 19 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 20 [-]: MOVE      R1 R2        ; R1 := R2
 21 [-]: GETUPVAL  R2 U0        ; R2 := U0
 22 [-]: ADD       R2 R2 R0     ; R2 := R2 + R0
 23 [-]: SUB       R3 R1 K5     ; R3 := R1 - 1.000000
 24 [-]: LT        0 R3 R2      ; if R3 >= R2 then PC := 28
 25 [-]: JMP       28           ; PC := 28
 26 [-]: CONST     R2 0         ; R2 := 0.000000
 27 [-]: JMP       31           ; PC := 31
 28 [-]: LT        0 R2 K6      ; if R2 >= 0.000000 then PC := 31
 29 [-]: JMP       31           ; PC := 31
 30 [-]: SUB       R2 R1 K5     ; R2 := R1 - 1.000000
 31 [-]: GETGLOBAL R3 K2        ; R3 := mConfigMenu
 32 [-]: SELF      R3 R3 K7     ; R4 := R3; R3 := R3[0x070daa5a]
 33 [-]: MOVE      R5 R2        ; R5 := R2
 34 [-]: CALL      R3 3 1       ; R3(R4,R5)
 35 [-]: RETURN    R0 1         ; return 


; Function #120:
;
; Name:            
; Defined at line: 4642
; #Upvalues:       1
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  7

  1 [-]: GETGLOBAL R2 K0        ; R2 := mInputBlocked
  2 [-]: TEST      R2 1         ; if R2 then PC := 46
  3 [-]: JMP       46           ; PC := 46
  4 [-]: GETGLOBAL R2 K1        ; R2 := 0x7b998233
  5 [-]: GETGLOBAL R3 K2        ; R3 := mCollectionGrid
  6 [-]: CALL      R2 2 2       ; R2 := R2(R3)
  7 [-]: TEST      R2 1         ; if R2 then PC := 46
  8 [-]: JMP       46           ; PC := 46
  9 [-]: GETGLOBAL R2 K2        ; R2 := mCollectionGrid
 10 [-]: GETTABLE  R2 R2 K3     ; R2 := R2["mScrollBar"]
 11 [-]: GETGLOBAL R3 K4        ; R3 := mStats
 12 [-]: EQ        1 R3 K5      ; if R3 == nil then PC := 22
 13 [-]: JMP       22           ; PC := 22
 14 [-]: GETGLOBAL R3 K4        ; R3 := mStats
 15 [-]: GETTABLE  R3 R3 K3     ; R3 := R3["mScrollBar"]
 16 [-]: GETTABLE  R3 R3 K6     ; R3 := R3["mActive"]
 17 [-]: TEST      R3 0         ; if not R3 then PC := 22
 18 [-]: JMP       22           ; PC := 22
 19 [-]: GETGLOBAL R3 K4        ; R3 := mStats
 20 [-]: GETTABLE  R2 R3 K3     ; R2 := R3["mScrollBar"]
 21 [-]: JMP       34           ; PC := 34
 22 [-]: GETUPVAL  R3 U0        ; R3 := U0
 23 [-]: EQ        1 R3 K5      ; if R3 == nil then PC := 34
 24 [-]: JMP       34           ; PC := 34
 25 [-]: GETUPVAL  R3 U0        ; R3 := U0
 26 [-]: GETTABLE  R3 R3 K7     ; R3 := R3["CombGrid"]
 27 [-]: GETTABLE  R3 R3 K3     ; R3 := R3["mScrollBar"]
 28 [-]: GETTABLE  R3 R3 K6     ; R3 := R3["mActive"]
 29 [-]: TEST      R3 0         ; if not R3 then PC := 34
 30 [-]: JMP       34           ; PC := 34
 31 [-]: GETUPVAL  R3 U0        ; R3 := U0
 32 [-]: GETTABLE  R3 R3 K7     ; R3 := R3["CombGrid"]
 33 [-]: GETTABLE  R2 R3 K3     ; R2 := R3["mScrollBar"]
 34 [-]: GETGLOBAL R3 K1        ; R3 := 0x7b998233
 35 [-]: MOVE      R4 R2        ; R4 := R2
 36 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 37 [-]: TEST      R3 1         ; if R3 then PC := 46
 38 [-]: JMP       46           ; PC := 46
 39 [-]: SELF      R3 R2 K8     ; R4 := R2; R3 := R2[0x30456f58]
 40 [-]: GETGLOBAL R5 K9        ; R5 := 0x03f57322
 41 [-]: MOVE      R6 R1        ; R6 := R1
 42 [-]: CALL      R5 2 2       ; R5 := R5(R6)
 43 [-]: GETGLOBAL R6 K10       ; R6 := 0x0032441c
 44 [-]: GETTABLE  R6 R6 K11    ; R6 := R6["UISound_Scroll"]
 45 [-]: CALL      R3 4 1       ; R3(R4,R5,R6)
 46 [-]: RETURN    R0 1         ; return 


; Function #121:
;
; Name:            
; Defined at line: 4656
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0xae91e43b
  2 [-]: SELF      R0 R0 K1     ; R1 := R0; R0 := R0[0x91a24e4b]
  3 [-]: LOADK     R2 K2        ; R2 := "_root"
  4 [-]: CONST     R3 26        ; R3 := 26.000000
  5 [-]: CALL      R0 4 2       ; R0 := R0(R1,R2,R3)
  6 [-]: GETGLOBAL R1 K3        ; R1 := mCurrentState
  7 [-]: GETGLOBAL R2 K4        ; R2 := ScreenState
  8 [-]: GETTABLE  R2 R2 K5     ; R2 := R2["SELECTING_CARD"]
  9 [-]: EQ        1 R1 R2      ; if R1 == R2 then PC := 14
 10 [-]: JMP       14           ; PC := 14
 11 [-]: GETGLOBAL R1 K3        ; R1 := mCurrentState
 12 [-]: EQ        0 R1 K6      ; if R1 ~= nil then PC := 22
 13 [-]: JMP       22           ; PC := 22
 14 [-]: GETGLOBAL R1 K7        ; R1 := mMiddleMenuY
 15 [-]: LT        0 R0 R1      ; if R0 >= R1 then PC := 22
 16 [-]: JMP       22           ; PC := 22
 17 [-]: GETUPVAL  R1 U0        ; R1 := U0
 18 [-]: GETGLOBAL R2 K4        ; R2 := ScreenState
 19 [-]: GETTABLE  R2 R2 K8     ; R2 := R2["SELECTING_SLOT"]
 20 [-]: CALL      R1 2 1       ; R1(R2)
 21 [-]: JMP       37           ; PC := 37
 22 [-]: GETGLOBAL R1 K3        ; R1 := mCurrentState
 23 [-]: GETGLOBAL R2 K4        ; R2 := ScreenState
 24 [-]: GETTABLE  R2 R2 K8     ; R2 := R2["SELECTING_SLOT"]
 25 [-]: EQ        1 R1 R2      ; if R1 == R2 then PC := 30
 26 [-]: JMP       30           ; PC := 30
 27 [-]: GETGLOBAL R1 K3        ; R1 := mCurrentState
 28 [-]: EQ        0 R1 K6      ; if R1 ~= nil then PC := 37
 29 [-]: JMP       37           ; PC := 37
 30 [-]: GETGLOBAL R1 K7        ; R1 := mMiddleMenuY
 31 [-]: LE        0 R1 R0      ; if R1 > R0 then PC := 37
 32 [-]: JMP       37           ; PC := 37
 33 [-]: GETUPVAL  R1 U0        ; R1 := U0
 34 [-]: GETGLOBAL R2 K4        ; R2 := ScreenState
 35 [-]: GETTABLE  R2 R2 K5     ; R2 := R2["SELECTING_CARD"]
 36 [-]: CALL      R1 2 1       ; R1(R2)
 37 [-]: RETURN    R0 1         ; return 


; Function #122:
;
; Name:            
; Defined at line: 4665
; #Upvalues:       1
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: GETGLOBAL R2 K0        ; R2 := 0x34291f5c
  2 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x399826a5]
  3 [-]: CALL      R2 1 2       ; R2 := R2()
  4 [-]: TEST      R2 0         ; if not R2 then PC := 8
  5 [-]: JMP       8            ; PC := 8
  6 [-]: GETUPVAL  R2 U0        ; R2 := U0
  7 [-]: CALL      R2 1 1       ; R2()
  8 [-]: RETURN    R0 1         ; return 


; Function #123:
;
; Name:            
; Defined at line: 4670
; #Upvalues:       1
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: GETGLOBAL R2 K0        ; R2 := 0x34291f5c
  2 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0x399826a5]
  3 [-]: CALL      R2 1 2       ; R2 := R2()
  4 [-]: TEST      R2 0         ; if not R2 then PC := 8
  5 [-]: JMP       8            ; PC := 8
  6 [-]: GETUPVAL  R2 U0        ; R2 := U0
  7 [-]: CALL      R2 1 1       ; R2()
  8 [-]: RETURN    R0 1         ; return 


; Function #124:
;
; Name:            
; Defined at line: 4676
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x34291f5c
  2 [-]: GETTABLE  R0 R0 K1     ; R0 := R0[0x399826a5]
  3 [-]: CALL      R0 1 2       ; R0 := R0()
  4 [-]: TEST      R0 0         ; if not R0 then PC := 8
  5 [-]: JMP       8            ; PC := 8
  6 [-]: GETUPVAL  R0 U0        ; R0 := U0
  7 [-]: CALL      R0 1 1       ; R0()
  8 [-]: LOADKB    R0 0 0       ; R0 := false
  9 [-]: RETURN    R0 2         ; return R0
 10 [-]: RETURN    R0 1         ; return 


; Function #125:
;
; Name:            
; Defined at line: 4682
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x34291f5c
  2 [-]: GETTABLE  R0 R0 K1     ; R0 := R0[0x399826a5]
  3 [-]: CALL      R0 1 2       ; R0 := R0()
  4 [-]: TEST      R0 0         ; if not R0 then PC := 8
  5 [-]: JMP       8            ; PC := 8
  6 [-]: GETUPVAL  R0 U0        ; R0 := U0
  7 [-]: CALL      R0 1 1       ; R0()
  8 [-]: LOADKB    R0 0 0       ; R0 := false
  9 [-]: RETURN    R0 2         ; return R0
 10 [-]: RETURN    R0 1         ; return 


; Function #126:
;
; Name:            
; Defined at line: 4689
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x34291f5c
  2 [-]: GETTABLE  R0 R0 K1     ; R0 := R0[0x399826a5]
  3 [-]: CALL      R0 1 2       ; R0 := R0()
  4 [-]: TEST      R0 0         ; if not R0 then PC := 8
  5 [-]: JMP       8            ; PC := 8
  6 [-]: GETUPVAL  R0 U0        ; R0 := U0
  7 [-]: CALL      R0 1 1       ; R0()
  8 [-]: LOADKB    R0 0 0       ; R0 := false
  9 [-]: RETURN    R0 2         ; return R0
 10 [-]: RETURN    R0 1         ; return 


; Function #127:
;
; Name:            
; Defined at line: 4695
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x34291f5c
  2 [-]: GETTABLE  R0 R0 K1     ; R0 := R0[0x399826a5]
  3 [-]: CALL      R0 1 2       ; R0 := R0()
  4 [-]: TEST      R0 0         ; if not R0 then PC := 8
  5 [-]: JMP       8            ; PC := 8
  6 [-]: GETUPVAL  R0 U0        ; R0 := U0
  7 [-]: CALL      R0 1 1       ; R0()
  8 [-]: LOADKB    R0 0 0       ; R0 := false
  9 [-]: RETURN    R0 2         ; return R0
 10 [-]: RETURN    R0 1         ; return 


; Function #128:
;
; Name:            
; Defined at line: 4702
; #Upvalues:       2
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R0 K0        ; R0 := mInputBlocked
  2 [-]: TEST      R0 1         ; if R0 then PC := 44
  3 [-]: JMP       44           ; PC := 44
  4 [-]: GETGLOBAL R0 K1        ; R0 := mCurrentState
  5 [-]: GETGLOBAL R1 K2        ; R1 := ScreenState
  6 [-]: GETTABLE  R1 R1 K3     ; R1 := R1["SELECTING_SLOT"]
  7 [-]: EQ        0 R0 R1      ; if R0 ~= R1 then PC := 20
  8 [-]: JMP       20           ; PC := 20
  9 [-]: GETUPVAL  R0 U0        ; R0 := U0
 10 [-]: LOADK     R1 K4        ; R1 := "TopMenu.ConfigLeft"
 11 [-]: GETGLOBAL R2 K5        ; R2 := 0x0032441c
 12 [-]: GETTABLE  R2 R2 K6     ; R2 := R2["UIFx_LeftBumperPress3d"]
 13 [-]: CONST     R3 0         ; R3 := 0.000000
 14 [-]: CONST     R4 0         ; R4 := 0.000000
 15 [-]: CALL      R0 5 1       ; R0(R1,R2,R3,R4)
 16 [-]: GETUPVAL  R0 U1        ; R0 := U1
 17 [-]: CONST     R1 -1        ; R1 := -1.000000
 18 [-]: CALL      R0 2 1       ; R0(R1)
 19 [-]: JMP       44           ; PC := 44
 20 [-]: GETGLOBAL R0 K7        ; R0 := 0x7b998233
 21 [-]: GETGLOBAL R1 K8        ; R1 := mCollectionGrid
 22 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 23 [-]: TEST      R0 1         ; if R0 then PC := 44
 24 [-]: JMP       44           ; PC := 44
 25 [-]: GETGLOBAL R0 K8        ; R0 := mCollectionGrid
 26 [-]: GETTABLE  R0 R0 K9     ; R0 := R0["mCategoryMenu"]
 27 [-]: SELF      R0 R0 K10    ; R1 := R0; R0 := R0[0x5fbddc1a]
 28 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 29 [-]: LT        0 K11 R0     ; if 1.000000 >= R0 then PC := 44
 30 [-]: JMP       44           ; PC := 44
 31 [-]: GETGLOBAL R0 K8        ; R0 := mCollectionGrid
 32 [-]: SELF      R0 R0 K12    ; R1 := R0; R0 := R0[0xfd154057]
 33 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 34 [-]: GETGLOBAL R1 K7        ; R1 := 0x7b998233
 35 [-]: MOVE      R2 R0        ; R2 := R0
 36 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 37 [-]: TEST      R1 1         ; if R1 then PC := 44
 38 [-]: JMP       44           ; PC := 44
 39 [-]: GETGLOBAL R1 K13       ; R1 := 0x33bdd652
 40 [-]: GETTABLE  R1 R1 K14    ; R1 := R1[0x23d5322f]
 41 [-]: GETGLOBAL R2 K15       ; R2 := mActiveFx
 42 [-]: MOVE      R3 R0        ; R3 := R0
 43 [-]: CALL      R1 3 1       ; R1(R2,R3)
 44 [-]: LOADKB    R1 1 0       ; R1 := true
 45 [-]: RETURN    R1 2         ; return R1
 46 [-]: RETURN    R0 1         ; return 


; Function #129:
;
; Name:            
; Defined at line: 4717
; #Upvalues:       2
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R0 K0        ; R0 := mInputBlocked
  2 [-]: TEST      R0 1         ; if R0 then PC := 44
  3 [-]: JMP       44           ; PC := 44
  4 [-]: GETGLOBAL R0 K1        ; R0 := mCurrentState
  5 [-]: GETGLOBAL R1 K2        ; R1 := ScreenState
  6 [-]: GETTABLE  R1 R1 K3     ; R1 := R1["SELECTING_SLOT"]
  7 [-]: EQ        0 R0 R1      ; if R0 ~= R1 then PC := 20
  8 [-]: JMP       20           ; PC := 20
  9 [-]: GETUPVAL  R0 U0        ; R0 := U0
 10 [-]: CONST     R1 1         ; R1 := 1.000000
 11 [-]: CALL      R0 2 1       ; R0(R1)
 12 [-]: GETUPVAL  R0 U1        ; R0 := U1
 13 [-]: LOADK     R1 K4        ; R1 := "TopMenu.ConfigRight"
 14 [-]: GETGLOBAL R2 K5        ; R2 := 0x0032441c
 15 [-]: GETTABLE  R2 R2 K6     ; R2 := R2["UIFx_RightBumperPress3d"]
 16 [-]: CONST     R3 0         ; R3 := 0.000000
 17 [-]: CONST     R4 0         ; R4 := 0.000000
 18 [-]: CALL      R0 5 1       ; R0(R1,R2,R3,R4)
 19 [-]: JMP       44           ; PC := 44
 20 [-]: GETGLOBAL R0 K7        ; R0 := 0x7b998233
 21 [-]: GETGLOBAL R1 K8        ; R1 := mCollectionGrid
 22 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 23 [-]: TEST      R0 1         ; if R0 then PC := 44
 24 [-]: JMP       44           ; PC := 44
 25 [-]: GETGLOBAL R0 K8        ; R0 := mCollectionGrid
 26 [-]: GETTABLE  R0 R0 K9     ; R0 := R0["mCategoryMenu"]
 27 [-]: SELF      R0 R0 K10    ; R1 := R0; R0 := R0[0x5fbddc1a]
 28 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 29 [-]: LT        0 K11 R0     ; if 1.000000 >= R0 then PC := 44
 30 [-]: JMP       44           ; PC := 44
 31 [-]: GETGLOBAL R0 K8        ; R0 := mCollectionGrid
 32 [-]: SELF      R0 R0 K12    ; R1 := R0; R0 := R0[0x8e31ce77]
 33 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 34 [-]: GETGLOBAL R1 K7        ; R1 := 0x7b998233
 35 [-]: MOVE      R2 R0        ; R2 := R0
 36 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 37 [-]: TEST      R1 1         ; if R1 then PC := 44
 38 [-]: JMP       44           ; PC := 44
 39 [-]: GETGLOBAL R1 K13       ; R1 := 0x33bdd652
 40 [-]: GETTABLE  R1 R1 K14    ; R1 := R1[0x23d5322f]
 41 [-]: GETGLOBAL R2 K15       ; R2 := mActiveFx
 42 [-]: MOVE      R3 R0        ; R3 := R0
 43 [-]: CALL      R1 3 1       ; R1(R2,R3)
 44 [-]: LOADKB    R1 1 0       ; R1 := true
 45 [-]: RETURN    R1 2         ; return R1
 46 [-]: RETURN    R0 1         ; return 


; Function #130:
;
; Name:            
; Defined at line: 4732
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETUPVAL  R0 U0        ; R0 := U0
  2 [-]: CALL      R0 1 1       ; R0()
  3 [-]: RETURN    R0 1         ; return 


; Function #131:
;
; Name:            
; Defined at line: 4736
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: RETURN    R0 1         ; return 


; Function #132:
;
; Name:            
; Defined at line: 4739
; #Upvalues:       1
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: TEST      R0 1         ; if R0 then PC := 3
  2 [-]: JMP       3            ; PC := 3
  3 [-]: GETUPVAL  R2 U0        ; R2 := U0
  4 [-]: GETTABLE  R2 R2 K0     ; R2 := R2[0x8fbd62e4]
  5 [-]: LOADK     R3 K1        ; R3 := "OnUpdateSessionSettings"
  6 [-]: CALL      R2 2 1       ; R2(R3)
  7 [-]: GETGLOBAL R2 K2        ; R2 := mHandleCanBeClosedCallback
  8 [-]: EQ        1 R2 K3      ; if R2 == nil then PC := 17
  9 [-]: JMP       17           ; PC := 17
 10 [-]: GETGLOBAL R2 K4        ; R2 := _T
 11 [-]: GETGLOBAL R3 K2        ; R3 := mHandleCanBeClosedCallback
 12 [-]: GETTABLE  R2 R2 R3     ; R2 := R2[R3]
 13 [-]: LOADKB    R3 1 0       ; R3 := true
 14 [-]: CALL      R2 2 1       ; R2(R3)
 15 [-]: LOADNIL   R2 R2        ; R2 := nil
 16 [-]: SETGLOBAL R2 K2        ; mHandleCanBeClosedCallback := R2
 17 [-]: RETURN    R0 1         ; return 


; Function #133:
;
; Name:            
; Defined at line: 4752
; #Upvalues:       1
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETUPVAL  R2 U0        ; R2 := U0
  2 [-]: MOVE      R3 R0        ; R3 := R0
  3 [-]: MOVE      R4 R1        ; R4 := R1
  4 [-]: CALL      R2 3 1       ; R2(R3,R4)
  5 [-]: RETURN    R0 1         ; return 


; Function #134:
;
; Name:            
; Defined at line: 4756
; #Upvalues:       2
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x03f57322
  2 [-]: MOVE      R2 R0        ; R2 := R0
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: EQ        0 R1 K2      ; if R1 ~= 4.000000 then PC := 36
  5 [-]: JMP       36           ; PC := 36
  6 [-]: GETUPVAL  R1 U0        ; R1 := U0
  7 [-]: GETTABLE  R1 R1 K3     ; R1 := R1[0xb73d420f]
  8 [-]: CALL      R1 1 2       ; R1 := R1()
  9 [-]: GETUPVAL  R2 U0        ; R2 := U0
 10 [-]: GETTABLE  R2 R2 K4     ; R2 := R2["UI_MODE_IN_SPACE_SHIP"]
 11 [-]: EQ        0 R1 R2      ; if R1 ~= R2 then PC := 16
 12 [-]: JMP       16           ; PC := 16
 13 [-]: GETUPVAL  R1 U0        ; R1 := U0
 14 [-]: GETTABLE  R1 R1 K5     ; R1 := R1[0xf3f90800]
 15 [-]: CALL      R1 1 1       ; R1()
 16 [-]: GETGLOBAL R1 K6        ; R1 := _T
 17 [-]: GETTABLE  R1 R1 K7     ; R1 := R1["LoadoutSaveRequired"]
 18 [-]: TEST      R1 0         ; if not R1 then PC := 27
 19 [-]: JMP       27           ; PC := 27
 20 [-]: GETGLOBAL R1 K6        ; R1 := _T
 21 [-]: GETTABLE  R1 R1 K8     ; R1 := R1["loadoutInProgress"]
 22 [-]: EQ        1 R1 K9      ; if R1 == nil then PC := 27
 23 [-]: JMP       27           ; PC := 27
 24 [-]: GETUPVAL  R1 U1        ; R1 := U1
 25 [-]: CALL      R1 1 1       ; R1()
 26 [-]: JMP       44           ; PC := 44
 27 [-]: GETGLOBAL R1 K10       ; R1 := mHandleCanBeClosedCallback
 28 [-]: EQ        1 R1 K9      ; if R1 == nil then PC := 44
 29 [-]: JMP       44           ; PC := 44
 30 [-]: GETGLOBAL R1 K6        ; R1 := _T
 31 [-]: GETGLOBAL R2 K10       ; R2 := mHandleCanBeClosedCallback
 32 [-]: GETTABLE  R1 R1 R2     ; R1 := R1[R2]
 33 [-]: LOADKB    R2 1 0       ; R2 := true
 34 [-]: CALL      R1 2 1       ; R1(R2)
 35 [-]: JMP       44           ; PC := 44
 36 [-]: GETGLOBAL R1 K10       ; R1 := mHandleCanBeClosedCallback
 37 [-]: EQ        1 R1 K9      ; if R1 == nil then PC := 44
 38 [-]: JMP       44           ; PC := 44
 39 [-]: GETGLOBAL R1 K6        ; R1 := _T
 40 [-]: GETGLOBAL R2 K10       ; R2 := mHandleCanBeClosedCallback
 41 [-]: GETTABLE  R1 R1 R2     ; R1 := R1[R2]
 42 [-]: LOADKB    R2 0 0       ; R2 := false
 43 [-]: CALL      R1 2 1       ; R1(R2)
 44 [-]: RETURN    R0 1         ; return 


; Function #135:
;
; Name:            
; Defined at line: 4773
; #Upvalues:       2
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: SETGLOBAL R0 K0        ; mHandleCanBeClosedCallback := R0
  2 [-]: GETGLOBAL R1 K1        ; R1 := mChanged
  3 [-]: TEST      R1 0         ; if not R1 then PC := 13
  4 [-]: JMP       13           ; PC := 13
  5 [-]: GETUPVAL  R1 U0        ; R1 := U0
  6 [-]: GETTABLE  R1 R1 K2     ; R1 := R1[0xf616a184]
  7 [-]: LOADK     R2 K3        ; R2 := "/Lotus/Language/Menu/ConfirmUpgradeCancel"
  8 [-]: LOADK     R3 K4        ; R3 := "ConfirmLeaveScreen"
  9 [-]: CALL      R1 3 1       ; R1(R2,R3)
 10 [-]: LOADKB    R1 1 0       ; R1 := true
 11 [-]: RETURN    R1 2         ; return R1
 12 [-]: JMP       25           ; PC := 25
 13 [-]: GETGLOBAL R1 K5        ; R1 := _T
 14 [-]: GETTABLE  R1 R1 K6     ; R1 := R1["LoadoutSaveRequired"]
 15 [-]: TEST      R1 0         ; if not R1 then PC := 25
 16 [-]: JMP       25           ; PC := 25
 17 [-]: GETGLOBAL R1 K5        ; R1 := _T
 18 [-]: GETTABLE  R1 R1 K7     ; R1 := R1["loadoutInProgress"]
 19 [-]: EQ        1 R1 K8      ; if R1 == nil then PC := 25
 20 [-]: JMP       25           ; PC := 25
 21 [-]: GETUPVAL  R1 U1        ; R1 := U1
 22 [-]: CALL      R1 1 1       ; R1()
 23 [-]: LOADKB    R1 1 0       ; R1 := true
 24 [-]: RETURN    R1 2         ; return R1
 25 [-]: RETURN    R0 1         ; return 


; Function #136:
;
; Name:            
; Defined at line: 4786
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := _T
  2 [-]: SETTABLE  R1 K1 R0     ; R1["mTrigger"] := R0
  3 [-]: GETUPVAL  R1 U0        ; R1 := U0
  4 [-]: GETTABLE  R1 R1 K2     ; R1 := R1[0x2a1108a9]
  5 [-]: GETGLOBAL R2 K3        ; R2 := mArsenalConsoleTag
  6 [-]: SELF      R3 R0 K4     ; R4 := R0; R3 := R0[0xd1586535]
  7 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
  8 [-]: CALL      R1 0 2       ; R1 := R1(R2,...)
  9 [-]: GETGLOBAL R2 K5        ; R2 := 0x7b998233
 10 [-]: MOVE      R3 R1        ; R3 := R1
 11 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 12 [-]: TEST      R2 1         ; if R2 then PC := 21
 13 [-]: JMP       21           ; PC := 21
 14 [-]: SELF      R2 R1 K6     ; R3 := R1; R2 := R1[0xfe3be07a]
 15 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 16 [-]: TEST      R2 0         ; if not R2 then PC := 21
 17 [-]: JMP       21           ; PC := 21
 18 [-]: SELF      R2 R1 K7     ; R3 := R1; R2 := R1[0x19368051]
 19 [-]: LOADNIL   R4 R4        ; R4 := nil
 20 [-]: CALL      R2 3 1       ; R2(R3,R4)
 21 [-]: GETGLOBAL R2 K0        ; R2 := _T
 22 [-]: GETTABLE  R2 R2 K8     ; R2 := R2[0x6b810d92]
 23 [-]: LOADK     R3 K9        ; R3 := "UpgradeCards"
 24 [-]: CALL      R2 2 1       ; R2(R3)
 25 [-]: GETGLOBAL R2 K0        ; R2 := _T
 26 [-]: GETTABLE  R2 R2 K10    ; R2 := R2[0x194aa42b]
 27 [-]: LOADK     R3 K9        ; R3 := "UpgradeCards"
 28 [-]: CALL      R2 2 1       ; R2(R3)
 29 [-]: LOADKB    R2 1 0       ; R2 := true
 30 [-]: RETURN    R2 2         ; return R2
 31 [-]: RETURN    R0 1         ; return 


; Function #137:
;
; Name:            
; Defined at line: 4800
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := _T
  2 [-]: GETTABLE  R0 R0 K1     ; R0 := R0["QuickSelectTutorialName"]
  3 [-]: EQ        0 R0 K2      ; if R0 ~= nil then PC := 10
  4 [-]: JMP       10           ; PC := 10
  5 [-]: GETGLOBAL R0 K3        ; R0 := 0x7b998233
  6 [-]: GETGLOBAL R1 K4        ; R1 := mRailjackMovie
  7 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  8 [-]: TEST      R0 1         ; if R0 then PC := 11
  9 [-]: JMP       11           ; PC := 11
 10 [-]: RETURN    R0 1         ; return 
 11 [-]: GETGLOBAL R0 K0        ; R0 := _T
 12 [-]: SETTABLE  R0 K1 K5     ; R0["QuickSelectTutorialName"] := "ModsTraining"
 13 [-]: GETGLOBAL R0 K3        ; R0 := 0x7b998233
 14 [-]: GETGLOBAL R1 K6        ; R1 := mChildMovie
 15 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 16 [-]: TEST      R0 1         ; if R0 then PC := 21
 17 [-]: JMP       21           ; PC := 21
 18 [-]: GETGLOBAL R0 K6        ; R0 := mChildMovie
 19 [-]: SELF      R0 R0 K7     ; R1 := R0; R0 := R0[0x32302b4a]
 20 [-]: CALL      R0 2 1       ; R0(R1)
 21 [-]: GETGLOBAL R0 K0        ; R0 := _T
 22 [-]: GETTABLE  R0 R0 K8     ; R0 := R0[0x67f7bf32]
 23 [-]: LOADK     R1 K9        ; R1 := "Intel"
 24 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 25 [-]: SETGLOBAL R0 K6        ; mChildMovie := R0
 26 [-]: GETUPVAL  R0 U0        ; R0 := U0
 27 [-]: CALL      R0 1 1       ; R0()
 28 [-]: RETURN    R0 1         ; return 


; Function #138:
;
; Name:            
; Defined at line: 4814
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  9

  1 [-]: EQ        0 R0 K0      ; if R0 ~= nil then PC := 9
  2 [-]: JMP       9            ; PC := 9
  3 [-]: GETGLOBAL R1 K1        ; R1 := 0xae91e43b
  4 [-]: SELF      R1 R1 K2     ; R2 := R1; R1 := R1[0x42b04007]
  5 [-]: LOADK     R3 K3        ; R3 := "/Lotus/Language/Menu/Loadout_InvalidName"
  6 [-]: LOADKB    R4 0 0       ; R4 := false
  7 [-]: TAILCALL  R1 4 0       ; R1,... := R1(R2,R3,R4)
  8 [-]: RETURN    R1 0         ; return R1,...
  9 [-]: GETUPVAL  R1 U0        ; R1 := U0
 10 [-]: GETTABLE  R1 R1 K4     ; R1 := R1[0xa8ff37e9]
 11 [-]: CALL      R1 1 2       ; R1 := R1()
 12 [-]: GETUPVAL  R2 U0        ; R2 := U0
 13 [-]: GETTABLE  R2 R2 K5     ; R2 := R2[0x26ed5bea]
 14 [-]: CALL      R2 1 2       ; R2 := R2()
 15 [-]: LOADK     R3 K6        ; R3 := " "
 16 [-]: CONCAT    R1 R1 R3     ; R1 := R1 .. R2 .. R3
 17 [-]: GETGLOBAL R2 K7        ; R2 := 0xeb8fddd7
 18 [-]: CALL      R2 1 2       ; R2 := R2()
 19 [-]: TEST      R2 0         ; if not R2 then PC := 26
 20 [-]: JMP       26           ; PC := 26
 21 [-]: MOVE      R2 R1        ; R2 := R1
 22 [-]: GETUPVAL  R3 U0        ; R3 := U0
 23 [-]: GETTABLE  R3 R3 K8     ; R3 := R3[0x3cdcfcd3]
 24 [-]: CALL      R3 1 2       ; R3 := R3()
 25 [-]: CONCAT    R1 R2 R3     ; R1 := R2 .. R3
 26 [-]: GETGLOBAL R2 K9        ; R2 := 0x09c87793
 27 [-]: MOVE      R3 R0        ; R3 := R0
 28 [-]: MOVE      R4 R1        ; R4 := R1
 29 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 30 [-]: LT        0 K10 R2     ; if 0.000000 >= R2 then PC := 44
 31 [-]: JMP       44           ; PC := 44
 32 [-]: GETGLOBAL R3 K1        ; R3 := 0xae91e43b
 33 [-]: SELF      R3 R3 K2     ; R4 := R3; R3 := R3[0x42b04007]
 34 [-]: LOADK     R5 K11       ; R5 := "/Lotus/Language/Menu/SocialOverlay_InvalidCharacter"
 35 [-]: LOADKB    R6 0 0       ; R6 := false
 36 [-]: CALL      R3 4 2       ; R3 := R3(R4,R5,R6)
 37 [-]: GETGLOBAL R4 K12       ; R4 := 0x68b0afb4
 38 [-]: MOVE      R5 R0        ; R5 := R0
 39 [-]: MOVE      R6 R2        ; R6 := R2
 40 [-]: MOVE      R7 R2        ; R7 := R2
 41 [-]: CALL      R4 4 2       ; R4 := R4(R5,R6,R7)
 42 [-]: CONCAT    R3 R3 R4     ; R3 := R3 .. R4
 43 [-]: RETURN    R3 2         ; return R3
 44 [-]: GETGLOBAL R3 K13       ; R3 := 0x7f5022cf
 45 [-]: GETTABLE  R3 R3 K14    ; R3 := R3[0x41e2ae25]
 46 [-]: MOVE      R4 R0        ; R4 := R0
 47 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 48 [-]: LT        0 K15 R3     ; if 32.000000 >= R3 then PC := 56
 49 [-]: JMP       56           ; PC := 56
 50 [-]: GETGLOBAL R3 K1        ; R3 := 0xae91e43b
 51 [-]: SELF      R3 R3 K2     ; R4 := R3; R3 := R3[0x42b04007]
 52 [-]: LOADK     R5 K16       ; R5 := "/Lotus/Language/Menu/SocialOverlay_TooLong"
 53 [-]: LOADKB    R6 0 0       ; R6 := false
 54 [-]: TAILCALL  R3 4 0       ; R3,... := R3(R4,R5,R6)
 55 [-]: RETURN    R3 0         ; return R3,...
 56 [-]: GETGLOBAL R3 K17       ; R3 := 0x7db5f856
 57 [-]: MOVE      R4 R0        ; R4 := R0
 58 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 59 [-]: GETGLOBAL R4 K7        ; R4 := 0xeb8fddd7
 60 [-]: CALL      R4 1 2       ; R4 := R4()
 61 [-]: TEST      R4 0         ; if not R4 then PC := 75
 62 [-]: JMP       75           ; PC := 75
 63 [-]: GETGLOBAL R4 K18       ; R4 := 0x09423272
 64 [-]: MOVE      R5 R3        ; R5 := R3
 65 [-]: CONST     R6 1         ; R6 := 1.000000
 66 [-]: CALL      R4 3 2       ; R4 := R4(R5,R6)
 67 [-]: EQ        1 R4 R3      ; if R4 == R3 then PC := 75
 68 [-]: JMP       75           ; PC := 75
 69 [-]: GETGLOBAL R5 K1        ; R5 := 0xae91e43b
 70 [-]: SELF      R5 R5 K2     ; R6 := R5; R5 := R5[0x42b04007]
 71 [-]: LOADK     R7 K20       ; R7 := "/Lotus/Language/Menu/Generic_Name_CENSORED"
 72 [-]: LOADKB    R8 0 0       ; R8 := false
 73 [-]: TAILCALL  R5 4 0       ; R5,... := R5(R6,R7,R8)
 74 [-]: RETURN    R5 0         ; return R5,...
 75 [-]: LOADNIL   R5 R5        ; R5 := nil
 76 [-]: MOVE      R6 R3        ; R6 := R3
 77 [-]: RETURN    R5 3         ; return R5,R6
 78 [-]: RETURN    R0 1         ; return 


; Function #139:
;
; Name:            
; Defined at line: 4845
; #Upvalues:       3
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  13

  1 [-]: GETUPVAL  R2 U0        ; R2 := U0
  2 [-]: MOVE      R3 R0        ; R3 := R0
  3 [-]: CALL      R2 2 3       ; R2,R3 := R2(R3)
  4 [-]: EQ        1 R2 K0      ; if R2 == nil then PC := 7
  5 [-]: JMP       7            ; PC := 7
  6 [-]: RETURN    R2 2         ; return R2
  7 [-]: GETGLOBAL R4 K1        ; R4 := _T
  8 [-]: GETTABLE  R4 R4 K2     ; R4 := R4["ArsenalState"]
  9 [-]: EQ        1 R4 K4      ; if R4 == 2.000000 then PC := 12
 10 [-]: JMP       12           ; PC := 12
 11 [-]: LOADKB    R4 0 1       ; R4 := false; PC := 12
 12 [-]: LOADKB    R4 1 0       ; R4 := true
 13 [-]: GETGLOBAL R5 K5        ; R5 := mConfigMenu
 14 [-]: SELF      R5 R5 K6     ; R6 := R5; R5 := R5[0xca30dfb6]
 15 [-]: MOVE      R7 R1        ; R7 := R1
 16 [-]: CALL      R5 3 2       ; R5 := R5(R6,R7)
 17 [-]: EQ        0 R3 K8      ; if R3 ~= "" then PC := 20
 18 [-]: JMP       20           ; PC := 20
 19 [-]: LOADKB    R6 0 1       ; R6 := false; PC := 20
 20 [-]: LOADKB    R6 1 0       ; R6 := true
 21 [-]: SETTABLE  R5 K7 R6     ; R5["CustomName"] := R6
 22 [-]: EQ        0 R3 K8      ; if R3 ~= "" then PC := 37
 23 [-]: JMP       37           ; PC := 37
 24 [-]: GETGLOBAL R6 K10       ; R6 := 0xae91e43b
 25 [-]: SELF      R6 R6 K11    ; R7 := R6; R6 := R6[0x42b04007]
 26 [-]: LOADK     R8 K12       ; R8 := "/Lotus/Language/Menu/Loadout_Config"
 27 [-]: LOADKB    R9 0 0       ; R9 := false
 28 [-]: NEWTABLE  R10 0 1      ; R10 := {}
 29 [-]: GETUPVAL  R11 U1       ; R11 := U1
 30 [-]: GETTABLE  R11 R11 K14  ; R11 := R11["CONFIG_TYPES"]
 31 [-]: ADD       R12 R1 K15   ; R12 := R1 + 1.000000
 32 [-]: GETTABLE  R11 R11 R12  ; R11 := R11[R12]
 33 [-]: SETTABLE  R10 K13 R11  ; R10["TYPE"] := R11
 34 [-]: CALL      R6 5 2       ; R6 := R6(R7,R8,R9,R10)
 35 [-]: SETTABLE  R5 K9 R6     ; R5[0x00000030] := R6
 36 [-]: JMP       38           ; PC := 38
 37 [-]: SETTABLE  R5 K9 R3     ; R5[0x00000030] := R3
 38 [-]: GETGLOBAL R6 K5        ; R6 := mConfigMenu
 39 [-]: SELF      R6 R6 K16    ; R7 := R6; R6 := R6[0x434f6055]
 40 [-]: MOVE      R8 R5        ; R8 := R5
 41 [-]: LOADKB    R9 1 0       ; R9 := true
 42 [-]: CALL      R6 4 1       ; R6(R7,R8,R9)
 43 [-]: GETGLOBAL R6 K5        ; R6 := mConfigMenu
 44 [-]: SELF      R6 R6 K17    ; R7 := R6; R6 := R6[0x7d81f6e1]
 45 [-]: CALL      R6 2 1       ; R6(R7)
 46 [-]: GETUPVAL  R6 U2        ; R6 := U2
 47 [-]: GETTABLE  R6 R6 K18    ; R6 := R6["info"]
 48 [-]: SELF      R6 R6 K19    ; R7 := R6; R6 := R6[0x1d538fc3]
 49 [-]: MOVE      R8 R3        ; R8 := R3
 50 [-]: MOVE      R9 R1        ; R9 := R1
 51 [-]: MOVE      R10 R4       ; R10 := R4
 52 [-]: CALL      R6 5 1       ; R6(R7,R8,R9,R10)
 53 [-]: GETGLOBAL R6 K20       ; R6 := mGameData
 54 [-]: SELF      R6 R6 K21    ; R7 := R6; R6 := R6[0x25a6e75e]
 55 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 56 [-]: SELF      R7 R6 K19    ; R8 := R6; R7 := R6[0x1d538fc3]
 57 [-]: GETUPVAL  R9 U2        ; R9 := U2
 58 [-]: GETTABLE  R9 R9 K18    ; R9 := R9["info"]
 59 [-]: GETTABLE  R9 R9 K22    ; R9 := R9["mItemId"]
 60 [-]: GETTABLE  R9 R9 K23    ; R9 := R9["mId"]
 61 [-]: MOVE      R10 R1       ; R10 := R1
 62 [-]: MOVE      R11 R4       ; R11 := R4
 63 [-]: MOVE      R12 R3       ; R12 := R3
 64 [-]: CALL      R7 6 1       ; R7(R8,R9,R10,R11,R12)
 65 [-]: LOADNIL   R7 R7        ; R7 := nil
 66 [-]: RETURN    R7 2         ; return R7
 67 [-]: RETURN    R0 1         ; return 


; Function #140:
;
; Name:            
; Defined at line: 4871
; #Upvalues:       5
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  7

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  2 [-]: GETGLOBAL R1 K1        ; R1 := 0x4baca03a
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: TEST      R0 0         ; if not R0 then PC := 7
  5 [-]: JMP       7            ; PC := 7
  6 [-]: RETURN    R0 1         ; return 
  7 [-]: GETGLOBAL R0 K0        ; R0 := 0x7b998233
  8 [-]: GETGLOBAL R1 K2        ; R1 := mChildMovie
  9 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 10 [-]: TEST      R0 1         ; if R0 then PC := 15
 11 [-]: JMP       15           ; PC := 15
 12 [-]: GETGLOBAL R0 K2        ; R0 := mChildMovie
 13 [-]: SELF      R0 R0 K3     ; R1 := R0; R0 := R0[0x32302b4a]
 14 [-]: CALL      R0 2 1       ; R0(R1)
 15 [-]: GETGLOBAL R0 K4        ; R0 := _T
 16 [-]: GETTABLE  R0 R0 K5     ; R0 := R0[0x67f7bf32]
 17 [-]: LOADK     R1 K6        ; R1 := "GenericSettings"
 18 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 19 [-]: SETGLOBAL R0 K2        ; mChildMovie := R0
 20 [-]: GETGLOBAL R0 K2        ; R0 := mChildMovie
 21 [-]: SELF      R0 R0 K7     ; R1 := R0; R0 := R0[0xe4162eed]
 22 [-]: LOADK     R2 K8        ; R2 := "SetTitle"
 23 [-]: GETGLOBAL R3 K9        ; R3 := 0xae91e43b
 24 [-]: SELF      R3 R3 K10    ; R4 := R3; R3 := R3[0x42b04007]
 25 [-]: LOADK     R5 K11       ; R5 := "/Lotus/Language/Menu/RenameConfigs"
 26 [-]: LOADKB    R6 1 0       ; R6 := true
 27 [-]: CALL      R3 4 0       ; R3,... := R3(R4,R5,R6)
 28 [-]: CALL      R0 0 1       ; R0(R1,...)
 29 [-]: GETUPVAL  R0 U0        ; R0 := U0
 30 [-]: GETTABLE  R0 R0 K12    ; R0 := R0["info"]
 31 [-]: SELF      R0 R0 K13    ; R1 := R0; R0 := R0[0x6ca03a93]
 32 [-]: CALL      R0 2 2       ; R0 := R0(R1)
 33 [-]: GETGLOBAL R1 K4        ; R1 := _T
 34 [-]: GETTABLE  R1 R1 K14    ; R1 := R1["ArsenalState"]
 35 [-]: EQ        1 R1 K16     ; if R1 == 2.000000 then PC := 38
 36 [-]: JMP       38           ; PC := 38
 37 [-]: LOADKB    R1 0 1       ; R1 := false; PC := 38
 38 [-]: LOADKB    R1 1 0       ; R1 := true
 39 [-]: GETGLOBAL R2 K4        ; R2 := _T
 40 [-]: CLOSURE   R3 0         ; R3 := closure(Function #140.1)
 41 [-]: GETUPVAL  R0 U1        ; R0 := U1
 42 [-]: SETTABLE  R2 K17 R3    ; R2["RenamesDone"] := R3
 43 [-]: GETGLOBAL R2 K2        ; R2 := mChildMovie
 44 [-]: SELF      R2 R2 K7     ; R3 := R2; R2 := R2[0xe4162eed]
 45 [-]: LOADK     R4 K18       ; R4 := "SetCallBack"
 46 [-]: LOADK     R5 K17       ; R5 := "RenamesDone"
 47 [-]: CALL      R2 4 1       ; R2(R3,R4,R5)
 48 [-]: GETGLOBAL R2 K4        ; R2 := _T
 49 [-]: CLOSURE   R3 1         ; R3 := closure(Function #140.2)
 50 [-]: MOVE      R0 R0        ; R0 := R0
 51 [-]: GETUPVAL  R0 U2        ; R0 := U2
 52 [-]: GETUPVAL  R0 U3        ; R0 := U3
 53 [-]: GETUPVAL  R0 U0        ; R0 := U0
 54 [-]: MOVE      R0 R1        ; R0 := R1
 55 [-]: GETUPVAL  R0 U4        ; R0 := U4
 56 [-]: SETTABLE  R2 K19 R3    ; R2["GetConfigNames"] := R3
 57 [-]: GETGLOBAL R2 K2        ; R2 := mChildMovie
 58 [-]: SELF      R2 R2 K7     ; R3 := R2; R2 := R2[0xe4162eed]
 59 [-]: LOADK     R4 K20       ; R4 := "SetElementsFunction"
 60 [-]: LOADK     R5 K19       ; R5 := "GetConfigNames"
 61 [-]: CALL      R2 4 1       ; R2(R3,R4,R5)
 62 [-]: RETURN    R0 1         ; return 


; Function #140.1:
;
; Name:            
; Defined at line: 4888
; #Upvalues:       1
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  16

  1 [-]: GETGLOBAL R2 K0        ; R2 := _T
  2 [-]: SETTABLE  R2 K1 K2     ; R2["RenamesDone"] := nil
  3 [-]: GETGLOBAL R2 K0        ; R2 := _T
  4 [-]: SETTABLE  R2 K3 K2     ; R2["GetConfigNames"] := nil
  5 [-]: GETGLOBAL R2 K4        ; R2 := 0x7b998233
  6 [-]: MOVE      R3 R1        ; R3 := R1
  7 [-]: CALL      R2 2 2       ; R2 := R2(R3)
  8 [-]: TEST      R2 1         ; if R2 then PC := 11
  9 [-]: JMP       11           ; PC := 11
 10 [-]: RETURN    R0 1         ; return 
 11 [-]: LOADK     R2 K5        ; R2 := ""
 12 [-]: LOADKB    R3 0 0       ; R3 := false
 13 [-]: GETGLOBAL R4 K6        ; R4 := 0xc8802016
 14 [-]: MOVE      R5 R0        ; R5 := R0
 15 [-]: CALL      R4 2 4       ; R4,R5,R6 := R4(R5)
 16 [-]: JMP       35           ; PC := 35
 17 [-]: GETTABLE  R9 R8 K7     ; R9 := R8["mChanged"]
 18 [-]: TEST      R9 0         ; if not R9 then PC := 35
 19 [-]: JMP       35           ; PC := 35
 20 [-]: GETTABLE  R9 R8 K8     ; R9 := R8[0x7ca0d7fa]
 21 [-]: GETTABLE  R10 R8 K9    ; R10 := R8["mContent"]
 22 [-]: CALL      R9 2 2       ; R9 := R9(R10)
 23 [-]: GETGLOBAL R10 K4       ; R10 := 0x7b998233
 24 [-]: MOVE      R11 R9       ; R11 := R9
 25 [-]: CALL      R10 2 2      ; R10 := R10(R11)
 26 [-]: TEST      R10 1        ; if R10 then PC := 35
 27 [-]: JMP       35           ; PC := 35
 28 [-]: LOADKB    R3 1 0       ; R3 := true
 29 [-]: MOVE      R10 R2       ; R10 := R2
 30 [-]: GETTABLE  R11 R8 K10   ; R11 := R8["mLabel"]
 31 [-]: LOADK     R12 K11      ; R12 := ":\r\n"
 32 [-]: MOVE      R13 R9       ; R13 := R9
 33 [-]: LOADK     R14 K12      ; R14 := "\r\n\r\n"
 34 [-]: CONCAT    R2 R10 R14   ; R2 := R10 .. R11 .. R12 .. R13 .. R14
 35 [-]: TFORLOOP  R4 2         ; R7,R8 :=  R4(R5,R6); if R7 ~= nil then begin PC = 17; R6 := R7 end
 36 [-]: JMP       17           ; PC := 17
 37 [-]: TEST      R3 0         ; if not R3 then PC := 49
 38 [-]: JMP       49           ; PC := 49
 39 [-]: GETUPVAL  R10 U0       ; R10 := U0
 40 [-]: GETTABLE  R10 R10 K13  ; R10 := R10[0xe0cba3ca]
 41 [-]: GETGLOBAL R11 K14      ; R11 := 0xae91e43b
 42 [-]: SELF      R11 R11 K15  ; R12 := R11; R11 := R11[0x42b04007]
 43 [-]: LOADK     R13 K16      ; R13 := "/Lotus/Language/Menu/Loadout_ConfigRenameErrorList"
 44 [-]: LOADKB    R14 0 0      ; R14 := false
 45 [-]: NEWTABLE  R15 0 1      ; R15 := {}
 46 [-]: SETTABLE  R15 K17 R2   ; R15["ERRORLIST"] := R2
 47 [-]: CALL      R11 5 0      ; R11,... := R11(R12,R13,R14,R15)
 48 [-]: CALL      R10 0 1      ; R10(R11,...)
 49 [-]: RETURN    R0 1         ; return 


; Function #140.2:
;
; Name:            
; Defined at line: 4917
; #Upvalues:       6
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  13

  1 [-]: NEWTABLE  R0 0 0       ; R0 := {}
  2 [-]: CONST     R1 0         ; R1 := 0.000000
  3 [-]: GETUPVAL  R2 U0        ; R2 := U0
  4 [-]: SUB       R2 R2 K0     ; R2 := R2 - 1.000000
  5 [-]: CONST     R3 1         ; R3 := 1.000000
  6 [-]: FORPREP   R1 46        ; R1 -= R3; PC := 46
  7 [-]: NEWTABLE  R5 0 4       ; R5 := {}
  8 [-]: SETTABLE  R5 K1 R4     ; R5["mConfigId"] := R4
  9 [-]: GETGLOBAL R6 K3        ; R6 := 0xae91e43b
 10 [-]: SELF      R6 R6 K4     ; R7 := R6; R6 := R6[0x42b04007]
 11 [-]: LOADK     R8 K5        ; R8 := "/Lotus/Language/Menu/Loadout_Config"
 12 [-]: LOADKB    R9 0 0       ; R9 := false
 13 [-]: NEWTABLE  R10 0 1      ; R10 := {}
 14 [-]: GETUPVAL  R11 U1       ; R11 := U1
 15 [-]: GETTABLE  R11 R11 K7   ; R11 := R11["CONFIG_TYPES"]
 16 [-]: ADD       R12 R4 K0    ; R12 := R4 + 1.000000
 17 [-]: GETTABLE  R11 R11 R12  ; R11 := R11[R12]
 18 [-]: SETTABLE  R10 K6 R11   ; R10["TYPE"] := R11
 19 [-]: CALL      R6 5 2       ; R6 := R6(R7,R8,R9,R10)
 20 [-]: SETTABLE  R5 K2 R6     ; R5["mLabel"] := R6
 21 [-]: GETUPVAL  R6 U2        ; R6 := U2
 22 [-]: GETTABLE  R6 R6 K9     ; R6 := R6["INPUTBOX"]
 23 [-]: SETTABLE  R5 K8 R6     ; R5["mType"] := R6
 24 [-]: SETTABLE  R5 K10 K11   ; R5["mMaxChars"] := 16.000000
 25 [-]: GETUPVAL  R6 U3        ; R6 := U3
 26 [-]: GETTABLE  R6 R6 K13    ; R6 := R6["info"]
 27 [-]: SELF      R6 R6 K14    ; R7 := R6; R6 := R6[0xcd65463f]
 28 [-]: MOVE      R8 R4        ; R8 := R4
 29 [-]: GETUPVAL  R9 U4        ; R9 := U4
 30 [-]: CALL      R6 4 2       ; R6 := R6(R7,R8,R9)
 31 [-]: SETTABLE  R5 K12 R6    ; R5["mContent"] := R6
 32 [-]: GETTABLE  R6 R5 K12    ; R6 := R5["mContent"]
 33 [-]: SETTABLE  R5 K15 R6    ; R5[0x00000000] := R6
 34 [-]: SETTABLE  R5 K16 K17   ; R5["mWidth"] := 400.000000
 35 [-]: SETTABLE  R5 K18 K19   ; R5["mMultiLine"] := false
 36 [-]: CLOSURE   R6 0         ; R6 := closure(Function #140.2.1)
 37 [-]: MOVE      R0 R5        ; R0 := R5
 38 [-]: GETUPVAL  R0 U5        ; R0 := U5
 39 [-]: SETTABLE  R5 K20 R6    ; R5[0xfce74610] := R6
 40 [-]: GETGLOBAL R6 K21       ; R6 := 0x33bdd652
 41 [-]: GETTABLE  R6 R6 K22    ; R6 := R6[0x23d5322f]
 42 [-]: MOVE      R7 R0        ; R7 := R0
 43 [-]: MOVE      R8 R5        ; R8 := R5
 44 [-]: CALL      R6 3 1       ; R6(R7,R8)
 45 [-]: CLOSE     R5           ; SAVE R5,...
 46 [-]: FORLOOP   R1 7         ; R1 += R3; if R1 <= R2 then begin PC := 7; R4 := R1 end
 47 [-]: RETURN    R0 2         ; return R0
 48 [-]: RETURN    R0 1         ; return 


; Function #140.2.1:
;
; Name:            
; Defined at line: 4928
; #Upvalues:       2
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  4

  1 [-]: GETUPVAL  R1 U0        ; R1 := U0
  2 [-]: GETTABLE  R1 R1 K0     ; R1 := R1["mOrigContent"]
  3 [-]: EQ        1 R0 R1      ; if R0 == R1 then PC := 11
  4 [-]: JMP       11           ; PC := 11
  5 [-]: GETUPVAL  R1 U1        ; R1 := U1
  6 [-]: MOVE      R2 R0        ; R2 := R0
  7 [-]: GETUPVAL  R3 U0        ; R3 := U0
  8 [-]: GETTABLE  R3 R3 K1     ; R3 := R3["mConfigId"]
  9 [-]: CALL      R1 3 2       ; R1 := R1(R2,R3)
 10 [-]: RETURN    R1 2         ; return R1
 11 [-]: LOADNIL   R2 R2        ; R2 := nil
 12 [-]: RETURN    R2 2         ; return R2
 13 [-]: RETURN    R0 1         ; return 


; Function #141:
;
; Name:            
; Defined at line: 4946
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mConfigMenu
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 12
  5 [-]: JMP       12           ; PC := 12
  6 [-]: GETGLOBAL R1 K1        ; R1 := mConfigMenu
  7 [-]: SELF      R1 R1 K2     ; R2 := R1; R1 := R1[0xdf42446e]
  8 [-]: GETGLOBAL R3 K3        ; R3 := 0x03f57322
  9 [-]: MOVE      R4 R0        ; R4 := R0
 10 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 11 [-]: CALL      R1 0 1       ; R1(R2,...)
 12 [-]: RETURN    R0 1         ; return 


; Function #142:
;
; Name:            
; Defined at line: 4952
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mConfigMenu
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 12
  5 [-]: JMP       12           ; PC := 12
  6 [-]: GETGLOBAL R1 K1        ; R1 := mConfigMenu
  7 [-]: SELF      R1 R1 K2     ; R2 := R1; R1 := R1[0xbce5a201]
  8 [-]: GETGLOBAL R3 K3        ; R3 := 0x03f57322
  9 [-]: MOVE      R4 R0        ; R4 := R0
 10 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 11 [-]: CALL      R1 0 1       ; R1(R2,...)
 12 [-]: RETURN    R0 1         ; return 


; Function #143:
;
; Name:            
; Defined at line: 4958
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := mInputBlocked
  2 [-]: TEST      R1 1         ; if R1 then PC := 15
  3 [-]: JMP       15           ; PC := 15
  4 [-]: GETGLOBAL R1 K1        ; R1 := 0x7b998233
  5 [-]: GETGLOBAL R2 K2        ; R2 := mConfigMenu
  6 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  7 [-]: TEST      R1 1         ; if R1 then PC := 15
  8 [-]: JMP       15           ; PC := 15
  9 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 10 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0xaf5319dc]
 11 [-]: GETGLOBAL R3 K4        ; R3 := 0x03f57322
 12 [-]: MOVE      R4 R0        ; R4 := R0
 13 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 14 [-]: CALL      R1 0 1       ; R1(R2,...)
 15 [-]: RETURN    R0 1         ; return 


; Function #144:
;
; Name:            
; Defined at line: 4964
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

  1 [-]: GETGLOBAL R1 K0        ; R1 := mInputBlocked
  2 [-]: TEST      R1 1         ; if R1 then PC := 20
  3 [-]: JMP       20           ; PC := 20
  4 [-]: GETGLOBAL R1 K1        ; R1 := 0x7b998233
  5 [-]: GETGLOBAL R2 K2        ; R2 := mConfigMenu
  6 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  7 [-]: TEST      R1 1         ; if R1 then PC := 20
  8 [-]: JMP       20           ; PC := 20
  9 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 10 [-]: SELF      R1 R1 K3     ; R2 := R1; R1 := R1[0x070daa5a]
 11 [-]: GETGLOBAL R3 K4        ; R3 := 0x03f57322
 12 [-]: MOVE      R4 R0        ; R4 := R0
 13 [-]: CALL      R3 2 0       ; R3,... := R3(R4)
 14 [-]: CALL      R1 0 1       ; R1(R2,...)
 15 [-]: GETUPVAL  R1 U0        ; R1 := U0
 16 [-]: GETTABLE  R1 R1 K5     ; R1 := R1[0x659d451f]
 17 [-]: GETGLOBAL R2 K6        ; R2 := 0x0032441c
 18 [-]: GETTABLE  R2 R2 K7     ; R2 := R2["UISound_DialogOpen"]
 19 [-]: CALL      R1 2 1       ; R1(R2)
 20 [-]: RETURN    R0 1         ; return 


; Function #145:
;
; Name:            
; Defined at line: 4971
; #Upvalues:       3
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  16

  1 [-]: GETGLOBAL R0 K0        ; R0 := mConfigMenu
  2 [-]: SELF      R0 R0 K1     ; R1 := R0; R0 := R0[0x7c09c373]
  3 [-]: LOADKB    R2 1 0       ; R2 := true
  4 [-]: LOADKB    R3 1 0       ; R3 := true
  5 [-]: CALL      R0 4 1       ; R0(R1,R2,R3)
  6 [-]: GETGLOBAL R0 K2        ; R0 := _T
  7 [-]: GETTABLE  R0 R0 K3     ; R0 := R0["ArsenalState"]
  8 [-]: EQ        1 R0 K5      ; if R0 == 2.000000 then PC := 11
  9 [-]: JMP       11           ; PC := 11
 10 [-]: LOADKB    R0 0 1       ; R0 := false; PC := 11
 11 [-]: LOADKB    R0 1 0       ; R0 := true
 12 [-]: GETUPVAL  R1 U0        ; R1 := U0
 13 [-]: GETTABLE  R1 R1 K6     ; R1 := R1["info"]
 14 [-]: SELF      R1 R1 K7     ; R2 := R1; R1 := R1[0x6ca03a93]
 15 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 16 [-]: CONST     R2 0         ; R2 := 0.000000
 17 [-]: SUB       R3 R1 K8     ; R3 := R1 - 1.000000
 18 [-]: CONST     R4 1         ; R4 := 1.000000
 19 [-]: FORPREP   R2 50        ; R2 -= R4; PC := 50
 20 [-]: LOADKB    R6 1 0       ; R6 := true
 21 [-]: GETUPVAL  R7 U0        ; R7 := U0
 22 [-]: GETTABLE  R7 R7 K6     ; R7 := R7["info"]
 23 [-]: SELF      R7 R7 K9     ; R8 := R7; R7 := R7[0xcd65463f]
 24 [-]: MOVE      R9 R5        ; R9 := R5
 25 [-]: MOVE      R10 R0       ; R10 := R0
 26 [-]: CALL      R7 4 2       ; R7 := R7(R8,R9,R10)
 27 [-]: EQ        0 R7 K10     ; if R7 ~= "" then PC := 42
 28 [-]: JMP       42           ; PC := 42
 29 [-]: LOADKB    R6 0 0       ; R6 := false
 30 [-]: GETGLOBAL R8 K11       ; R8 := 0xae91e43b
 31 [-]: SELF      R8 R8 K12    ; R9 := R8; R8 := R8[0x42b04007]
 32 [-]: LOADK     R10 K13      ; R10 := "/Lotus/Language/Menu/Loadout_Config"
 33 [-]: LOADKB    R11 0 0      ; R11 := false
 34 [-]: NEWTABLE  R12 0 1      ; R12 := {}
 35 [-]: GETUPVAL  R13 U1       ; R13 := U1
 36 [-]: GETTABLE  R13 R13 K15  ; R13 := R13["CONFIG_TYPES"]
 37 [-]: ADD       R14 R5 K8    ; R14 := R5 + 1.000000
 38 [-]: GETTABLE  R13 R13 R14  ; R13 := R13[R14]
 39 [-]: SETTABLE  R12 K14 R13  ; R12["TYPE"] := R13
 40 [-]: CALL      R8 5 2       ; R8 := R8(R9,R10,R11,R12)
 41 [-]: MOVE      R7 R8        ; R7 := R8
 42 [-]: GETGLOBAL R8 K0        ; R8 := mConfigMenu
 43 [-]: SELF      R8 R8 K16    ; R9 := R8; R8 := R8[0xbad4316f]
 44 [-]: NEWTABLE  R10 0 3      ; R10 := {}
 45 [-]: SETTABLE  R10 K17 R6   ; R10["CustomName"] := R6
 46 [-]: SETTABLE  R10 K18 R7   ; R10["Name"] := R7
 47 [-]: SETTABLE  R10 K19 R5   ; R10["Id"] := R5
 48 [-]: LOADKB    R11 1 0      ; R11 := true
 49 [-]: CALL      R8 4 1       ; R8(R9,R10,R11)
 50 [-]: FORLOOP   R2 20        ; R2 += R4; if R2 <= R3 then begin PC := 20; R5 := R2 end
 51 [-]: GETGLOBAL R8 K20       ; R8 := 0x25d99d89
 52 [-]: SELF      R8 R8 K21    ; R9 := R8; R8 := R8[0xefee6c91]
 53 [-]: CALL      R8 2 2       ; R8 := R8(R9)
 54 [-]: LE        0 K22 R8     ; if 10.000000 > R8 then PC := 76
 55 [-]: JMP       76           ; PC := 76
 56 [-]: GETGLOBAL R9 K4        ; R9 := 0x6c97a788
 57 [-]: GETTABLE  R9 R9 K23    ; R9 := R9["WeaponInfo_DEFAULT_NUM_SLOTS"]
 58 [-]: GETGLOBAL R10 K4       ; R10 := 0x6c97a788
 59 [-]: GETTABLE  R10 R10 K24  ; R10 := R10["WeaponInfo_MAX_SLOT_PURCHASES"]
 60 [-]: ADD       R9 R9 R10    ; R9 := R9 + R10
 61 [-]: LT        0 R1 R9      ; if R1 >= R9 then PC := 76
 62 [-]: JMP       76           ; PC := 76
 63 [-]: GETGLOBAL R9 K0        ; R9 := mConfigMenu
 64 [-]: SELF      R9 R9 K16    ; R10 := R9; R9 := R9[0xbad4316f]
 65 [-]: NEWTABLE  R11 0 3      ; R11 := {}
 66 [-]: GETGLOBAL R12 K11      ; R12 := 0xae91e43b
 67 [-]: SELF      R12 R12 K12  ; R13 := R12; R12 := R12[0x42b04007]
 68 [-]: LOADK     R14 K25      ; R14 := "<PLUS>"
 69 [-]: LOADKB    R15 1 0      ; R15 := true
 70 [-]: CALL      R12 4 2      ; R12 := R12(R13,R14,R15)
 71 [-]: SETTABLE  R11 K18 R12  ; R11["Name"] := R12
 72 [-]: SETTABLE  R11 K26 K27  ; R11["IsAdd"] := true
 73 [-]: SETTABLE  R11 K28 K27  ; R11["DisableDrag"] := true
 74 [-]: LOADKB    R12 1 0      ; R12 := true
 75 [-]: CALL      R9 4 1       ; R9(R10,R11,R12)
 76 [-]: GETGLOBAL R9 K11       ; R9 := 0xae91e43b
 77 [-]: SELF      R9 R9 K29    ; R10 := R9; R9 := R9[0x5f56eeab]
 78 [-]: LOADK     R11 K30      ; R11 := "TopMenu.SwapLabel"
 79 [-]: CONST     R12 29       ; R12 := 29.000000
 80 [-]: LOADK     R13 K10      ; R13 := ""
 81 [-]: CALL      R9 5 1       ; R9(R10,R11,R12,R13)
 82 [-]: GETGLOBAL R9 K0        ; R9 := mConfigMenu
 83 [-]: SELF      R9 R9 K31    ; R10 := R9; R9 := R9[0x71e9ac81]
 84 [-]: LOADNIL   R11 R11      ; R11 := nil
 85 [-]: LOADKB    R12 0 0      ; R12 := false
 86 [-]: LOADKB    R13 1 0      ; R13 := true
 87 [-]: CALL      R9 5 1       ; R9(R10,R11,R12,R13)
 88 [-]: GETGLOBAL R9 K0        ; R9 := mConfigMenu
 89 [-]: SELF      R9 R9 K32    ; R10 := R9; R9 := R9[0x7d81f6e1]
 90 [-]: CALL      R9 2 1       ; R9(R10)
 91 [-]: GETGLOBAL R9 K0        ; R9 := mConfigMenu
 92 [-]: SELF      R9 R9 K33    ; R10 := R9; R9 := R9[0x070daa5a]
 93 [-]: GETUPVAL  R11 U2       ; R11 := U2
 94 [-]: CALL      R9 3 1       ; R9(R10,R11)
 95 [-]: RETURN    R0 1         ; return 


; Function #146:
;
; Name:            
; Defined at line: 4998
; #Upvalues:       8
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  10

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x2d0fad09
  2 [-]: LOADK     R1 K1        ; R1 := "EE.Interface.Components.List"
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: GETTABLE  R1 R0 K3     ; R1 := R0[0x9383bc56]
  5 [-]: GETGLOBAL R2 K4        ; R2 := 0xae91e43b
  6 [-]: LOADK     R3 K5        ; R3 := "TopMenu.ConfigMenu.Entry"
  7 [-]: CALL      R1 3 2       ; R1 := R1(R2,R3)
  8 [-]: SETGLOBAL R1 K2        ; mConfigMenu := R1
  9 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 10 [-]: SETTABLE  R1 K6 K7     ; R1["mForcedHorizontalSeparation"] := 150.000000
 11 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 12 [-]: SETTABLE  R1 K8 K9     ; R1["mForcedVerticalSeparation"] := 0.000000
 13 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 14 [-]: SELF      R1 R1 K10    ; R2 := R1; R1 := R1[0x1e5b5cfe]
 15 [-]: LOADK     R3 K11       ; R3 := "ConfigSelected"
 16 [-]: LOADK     R4 K12       ; R4 := "ConfigFocused"
 17 [-]: LOADK     R5 K13       ; R5 := "ConfigUnfocused"
 18 [-]: LOADK     R6 K14       ; R6 := "ConfigPressed"
 19 [-]: LOADNIL   R7 R8        ; R7 := R8 := nil
 20 [-]: LOADK     R9 K11       ; R9 := "ConfigSelected"
 21 [-]: CALL      R1 9 1       ; R1(R2,R3,R4,R5,R6,R7,R8,R9)
 22 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 23 [-]: SETTABLE  R1 K15 K16   ; R1["mCurrSelectedClipName"] := nil
 24 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 25 [-]: SETTABLE  R1 K17 K16   ; R1["mCurrSelectedId"] := nil
 26 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 27 [-]: SELF      R1 R1 K18    ; R2 := R1; R1 := R1[0xb0e9af9b]
 28 [-]: CALL      R1 2 1       ; R1(R2)
 29 [-]: GETGLOBAL R1 K4        ; R1 := 0xae91e43b
 30 [-]: SELF      R1 R1 K19    ; R2 := R1; R1 := R1[0x67bc869f]
 31 [-]: LOADK     R3 K20       ; R3 := "TopMenu.Highlight"
 32 [-]: CONST     R4 10        ; R4 := 10.000000
 33 [-]: CONST     R5 0         ; R5 := 0.000000
 34 [-]: CALL      R1 5 1       ; R1(R2,R3,R4,R5)
 35 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 36 [-]: CLOSURE   R2 0         ; R2 := closure(Function #146.1)
 37 [-]: SETTABLE  R1 K21 R2    ; R1["mGetElementCenter"] := R2
 38 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 39 [-]: CLOSURE   R2 1         ; R2 := closure(Function #146.2)
 40 [-]: GETUPVAL  R0 U0        ; R0 := U0
 41 [-]: SETTABLE  R1 K22 R2    ; R1[0x42b04007] := R2
 42 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 43 [-]: CLOSURE   R2 2         ; R2 := closure(Function #146.3)
 44 [-]: GETUPVAL  R0 U0        ; R0 := U0
 45 [-]: GETUPVAL  R0 U1        ; R0 := U1
 46 [-]: SETTABLE  R1 K23 R2    ; R1["mOnFocusedCallback"] := R2
 47 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 48 [-]: CLOSURE   R2 3         ; R2 := closure(Function #146.4)
 49 [-]: SETTABLE  R1 K24 R2    ; R1["mOnUnfocusedCallback"] := R2
 50 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 51 [-]: CLOSURE   R2 4         ; R2 := closure(Function #146.5)
 52 [-]: GETUPVAL  R0 U2        ; R0 := U2
 53 [-]: GETUPVAL  R0 U3        ; R0 := U3
 54 [-]: SETTABLE  R1 K25 R2    ; R1["mOnSelectedCallback"] := R2
 55 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 56 [-]: CLOSURE   R2 5         ; R2 := closure(Function #146.6)
 57 [-]: SETTABLE  R1 K26 R2    ; R1[0x0f164e09] := R2
 58 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 59 [-]: CLOSURE   R2 6         ; R2 := closure(Function #146.7)
 60 [-]: SETTABLE  R1 K27 R2    ; R1["mOnDragFocusedCallback"] := R2
 61 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 62 [-]: CLOSURE   R2 7         ; R2 := closure(Function #146.8)
 63 [-]: SETTABLE  R1 K28 R2    ; R1["mOnDragUnfocusedCallback"] := R2
 64 [-]: GETGLOBAL R1 K2        ; R1 := mConfigMenu
 65 [-]: CLOSURE   R2 8         ; R2 := closure(Function #146.9)
 66 [-]: GETUPVAL  R0 U0        ; R0 := U0
 67 [-]: GETUPVAL  R0 U4        ; R0 := U4
 68 [-]: GETUPVAL  R0 U5        ; R0 := U5
 69 [-]: GETUPVAL  R0 U6        ; R0 := U6
 70 [-]: GETUPVAL  R0 U3        ; R0 := U3
 71 [-]: SETTABLE  R1 K29 R2    ; R1["mOnDraggedCallback"] := R2
 72 [-]: GETUPVAL  R1 U7        ; R1 := U7
 73 [-]: CALL      R1 1 1       ; R1()
 74 [-]: RETURN    R0 1         ; return 


; Function #146.1:
;
; Name:            
; Defined at line: 5010
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  6

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0xae91e43b
  2 [-]: SELF      R1 R1 K1     ; R2 := R1; R1 := R1[0x91a24e4b]
  3 [-]: GETTABLE  R3 R0 K2     ; R3 := R0["mClipName"]
  4 [-]: CONST     R4 0         ; R4 := 0.000000
  5 [-]: CALL      R1 4 2       ; R1 := R1(R2,R3,R4)
  6 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["BgWidth"]
  7 [-]: DIV       R2 R2 K4     ; R2 := R2 / 2.000000
  8 [-]: ADD       R1 R1 R2     ; R1 := R1 + R2
  9 [-]: GETGLOBAL R2 K0        ; R2 := 0xae91e43b
 10 [-]: SELF      R2 R2 K1     ; R3 := R2; R2 := R2[0x91a24e4b]
 11 [-]: GETTABLE  R4 R0 K2     ; R4 := R0["mClipName"]
 12 [-]: CONST     R5 1         ; R5 := 1.000000
 13 [-]: CALL      R2 4 0       ; R2,... := R2(R3,R4,R5)
 14 [-]: RETURN    R1 0         ; return R1,...
 15 [-]: RETURN    R0 1         ; return 


; Function #146.2:
;
; Name:            
; Defined at line: 5014
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  14

  1 [-]: GETGLOBAL R1 K0        ; R1 := mConfigMenu
  2 [-]: SELF      R1 R1 K1     ; R2 := R1; R1 := R1[0xed1ab921]
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: GETGLOBAL R2 K2        ; R2 := 0x7b998233
  5 [-]: MOVE      R3 R1        ; R3 := R1
  6 [-]: CALL      R2 2 2       ; R2 := R2(R3)
  7 [-]: TEST      R2 1         ; if R2 then PC := 13
  8 [-]: JMP       13           ; PC := 13
  9 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["Id"]
 10 [-]: GETTABLE  R3 R1 K3     ; R3 := R1["Id"]
 11 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 14
 12 [-]: JMP       14           ; PC := 14
 13 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 14
 14 [-]: LOADKB    R2 1 0       ; R2 := true
 15 [-]: GETGLOBAL R3 K2        ; R3 := 0x7b998233
 16 [-]: GETGLOBAL R4 K0        ; R4 := mConfigMenu
 17 [-]: GETTABLE  R4 R4 K4     ; R4 := R4["mSelectedElement"]
 18 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 19 [-]: TEST      R3 1         ; if R3 then PC := 27
 20 [-]: JMP       27           ; PC := 27
 21 [-]: GETTABLE  R3 R0 K3     ; R3 := R0["Id"]
 22 [-]: GETGLOBAL R4 K0        ; R4 := mConfigMenu
 23 [-]: GETTABLE  R4 R4 K4     ; R4 := R4["mSelectedElement"]
 24 [-]: GETTABLE  R4 R4 K3     ; R4 := R4["Id"]
 25 [-]: EQ        1 R3 R4      ; if R3 == R4 then PC := 28
 26 [-]: JMP       28           ; PC := 28
 27 [-]: LOADKB    R3 0 1       ; R3 := false; PC := 28
 28 [-]: LOADKB    R3 1 0       ; R3 := true
 29 [-]: GETGLOBAL R4 K5        ; R4 := mWeGame
 30 [-]: TEST      R4 0         ; if not R4 then PC := 39
 31 [-]: JMP       39           ; PC := 39
 32 [-]: GETGLOBAL R4 K6        ; R4 := 0xae91e43b
 33 [-]: SELF      R4 R4 K7     ; R5 := R4; R4 := R4[0xe261aa96]
 34 [-]: GETTABLE  R6 R0 K8     ; R6 := R0["mClipName"]
 35 [-]: LOADK     R7 K9        ; R7 := "Label"
 36 [-]: CONST     R8 41        ; R8 := 41.000000
 37 [-]: LOADK     R9 K10       ; R9 := "Arial Unicode MS"
 38 [-]: CALL      R4 6 1       ; R4(R5,R6,R7,R8,R9)
 39 [-]: GETGLOBAL R4 K6        ; R4 := 0xae91e43b
 40 [-]: SELF      R4 R4 K11    ; R5 := R4; R4 := R4[0x20b98db3]
 41 [-]: GETTABLE  R6 R0 K8     ; R6 := R0["mClipName"]
 42 [-]: LOADK     R7 K12       ; R7 := ".Label.text"
 43 [-]: CONCAT    R6 R6 R7     ; R6 := R6 .. R7
 44 [-]: GETTABLE  R7 R0 K13    ; R7 := R0["Name"]
 45 [-]: CALL      R4 4 1       ; R4(R5,R6,R7)
 46 [-]: GETGLOBAL R4 K6        ; R4 := 0xae91e43b
 47 [-]: SELF      R4 R4 K14    ; R5 := R4; R4 := R4[0xf64b7262]
 48 [-]: GETTABLE  R6 R0 K8     ; R6 := R0["mClipName"]
 49 [-]: LOADK     R7 K9        ; R7 := "Label"
 50 [-]: CONST     R8 36        ; R8 := 36.000000
 51 [-]: GETGLOBAL R9 K15       ; R9 := mColors
 52 [-]: GETTABLE  R9 R9 K16    ; R9 := R9["FloatingContent"]
 53 [-]: CALL      R4 6 1       ; R4(R5,R6,R7,R8,R9)
 54 [-]: GETGLOBAL R4 K6        ; R4 := 0xae91e43b
 55 [-]: SELF      R4 R4 K14    ; R5 := R4; R4 := R4[0xf64b7262]
 56 [-]: GETTABLE  R6 R0 K8     ; R6 := R0["mClipName"]
 57 [-]: LOADK     R7 K9        ; R7 := "Label"
 58 [-]: CONST     R8 10        ; R8 := 10.000000
 59 [-]: GETUPVAL  R9 U0        ; R9 := U0
 60 [-]: GETTABLE  R9 R9 K17    ; R9 := R9[0x06d055f9]
 61 [-]: TEST      R2 1         ; if R2 then PC := 65
 62 [-]: JMP       65           ; PC := 65
 63 [-]: GETTABLE  R10 R0 K18   ; R10 := R0["IsAdd"]
 64 [-]: JMP       67           ; PC := 67
 65 [-]: LOADKB    R10 0 1      ; R10 := false; PC := 66
 66 [-]: LOADKB    R10 1 0      ; R10 := true
 67 [-]: CONST     R11 50       ; R11 := 50.000000
 68 [-]: CONST     R12 100      ; R12 := 100.000000
 69 [-]: CALL      R9 4 0       ; R9,... := R9(R10,R11,R12)
 70 [-]: CALL      R4 0 1       ; R4(R5,...)
 71 [-]: GETUPVAL  R4 U0        ; R4 := U0
 72 [-]: GETTABLE  R4 R4 K17    ; R4 := R4[0x06d055f9]
 73 [-]: GETGLOBAL R5 K19       ; R5 := mIsDiegetic
 74 [-]: GETGLOBAL R6 K20       ; R6 := 0x0032441c
 75 [-]: GETTABLE  R6 R6 K21    ; R6 := R6["UIMaterial_SmoothEdge"]
 76 [-]: GETGLOBAL R7 K20       ; R7 := 0x0032441c
 77 [-]: GETTABLE  R7 R7 K22    ; R7 := R7["UIMaterial_SmoothEdgeNoDepthTest"]
 78 [-]: CALL      R4 4 2       ; R4 := R4(R5,R6,R7)
 79 [-]: GETGLOBAL R5 K6        ; R5 := 0xae91e43b
 80 [-]: SELF      R5 R5 K23    ; R6 := R5; R5 := R5[0xd5181643]
 81 [-]: GETTABLE  R7 R0 K8     ; R7 := R0["mClipName"]
 82 [-]: LOADK     R8 K24       ; R8 := ".Bg.Back"
 83 [-]: CONCAT    R7 R7 R8     ; R7 := R7 .. R8
 84 [-]: MOVE      R8 R4        ; R8 := R4
 85 [-]: CALL      R5 4 1       ; R5(R6,R7,R8)
 86 [-]: GETGLOBAL R5 K6        ; R5 := 0xae91e43b
 87 [-]: SELF      R5 R5 K23    ; R6 := R5; R5 := R5[0xd5181643]
 88 [-]: GETTABLE  R7 R0 K8     ; R7 := R0["mClipName"]
 89 [-]: LOADK     R8 K25       ; R8 := ".Bg.SubLine"
 90 [-]: CONCAT    R7 R7 R8     ; R7 := R7 .. R8
 91 [-]: MOVE      R8 R4        ; R8 := R4
 92 [-]: CALL      R5 4 1       ; R5(R6,R7,R8)
 93 [-]: GETGLOBAL R5 K6        ; R5 := 0xae91e43b
 94 [-]: SELF      R5 R5 K14    ; R6 := R5; R5 := R5[0xf64b7262]
 95 [-]: GETTABLE  R7 R0 K8     ; R7 := R0["mClipName"]
 96 [-]: LOADK     R8 K26       ; R8 := "Bg.SubLine"
 97 [-]: CONST     R9 9         ; R9 := 9.000000
 98 [-]: GETGLOBAL R10 K15      ; R10 := mColors
 99 [-]: GETTABLE  R10 R10 K27  ; R10 := R10["FloatingContentHighlight"]
100 [-]: CALL      R5 6 1       ; R5(R6,R7,R8,R9,R10)
101 [-]: GETGLOBAL R5 K6        ; R5 := 0xae91e43b
102 [-]: SELF      R5 R5 K14    ; R6 := R5; R5 := R5[0xf64b7262]
103 [-]: GETTABLE  R7 R0 K8     ; R7 := R0["mClipName"]
104 [-]: LOADK     R8 K28       ; R8 := "Bg.Back"
105 [-]: CONST     R9 9         ; R9 := 9.000000
106 [-]: GETGLOBAL R10 K15      ; R10 := mColors
107 [-]: GETTABLE  R10 R10 K29  ; R10 := R10["Background1"]
108 [-]: CALL      R5 6 1       ; R5(R6,R7,R8,R9,R10)
109 [-]: GETGLOBAL R5 K6        ; R5 := 0xae91e43b
110 [-]: SELF      R5 R5 K14    ; R6 := R5; R5 := R5[0xf64b7262]
111 [-]: GETTABLE  R7 R0 K8     ; R7 := R0["mClipName"]
112 [-]: LOADK     R8 K28       ; R8 := "Bg.Back"
113 [-]: CONST     R9 10        ; R9 := 10.000000
114 [-]: CONST     R10 90       ; R10 := 90.000000
115 [-]: CALL      R5 6 1       ; R5(R6,R7,R8,R9,R10)
116 [-]: GETGLOBAL R5 K6        ; R5 := 0xae91e43b
117 [-]: SELF      R5 R5 K14    ; R6 := R5; R5 := R5[0xf64b7262]
118 [-]: GETTABLE  R7 R0 K8     ; R7 := R0["mClipName"]
119 [-]: LOADK     R8 K30       ; R8 := "Bg"
120 [-]: CONST     R9 10        ; R9 := 10.000000
121 [-]: GETUPVAL  R10 U0       ; R10 := U0
122 [-]: GETTABLE  R10 R10 K17  ; R10 := R10[0x06d055f9]
123 [-]: MOVE      R11 R3       ; R11 := R3
124 [-]: CONST     R12 100      ; R12 := 100.000000
125 [-]: CONST     R13 0        ; R13 := 0.000000
126 [-]: CALL      R10 4 0      ; R10,... := R10(R11,R12,R13)
127 [-]: CALL      R5 0 1       ; R5(R6,...)
128 [-]: GETGLOBAL R5 K6        ; R5 := 0xae91e43b
129 [-]: SELF      R5 R5 K14    ; R6 := R5; R5 := R5[0xf64b7262]
130 [-]: GETTABLE  R7 R0 K8     ; R7 := R0["mClipName"]
131 [-]: LOADK     R8 K26       ; R8 := "Bg.SubLine"
132 [-]: CONST     R9 13        ; R9 := 13.000000
133 [-]: GETUPVAL  R10 U0       ; R10 := U0
134 [-]: GETTABLE  R10 R10 K17  ; R10 := R10[0x06d055f9]
135 [-]: MOVE      R11 R3       ; R11 := R3
136 [-]: CONST     R12 4        ; R12 := 4.000000
137 [-]: LOADK     R13 K31      ; R13 := 0.010000
138 [-]: CALL      R10 4 0      ; R10,... := R10(R11,R12,R13)
139 [-]: CALL      R5 0 1       ; R5(R6,...)
140 [-]: RETURN    R0 1         ; return 


; Function #146.3:
;
; Name:            
; Defined at line: 5038
; #Upvalues:       2
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  7

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mConfigMenu
  3 [-]: GETTABLE  R2 R2 K2     ; R2 := R2["mCurrSelectedClipName"]
  4 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  5 [-]: TEST      R1 1         ; if R1 then PC := 12
  6 [-]: JMP       12           ; PC := 12
  7 [-]: GETGLOBAL R1 K1        ; R1 := mConfigMenu
  8 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mCurrSelectedClipName"]
  9 [-]: GETTABLE  R2 R0 K3     ; R2 := R0["mClipName"]
 10 [-]: EQ        1 R1 R2      ; if R1 == R2 then PC := 61
 11 [-]: JMP       61           ; PC := 61
 12 [-]: GETUPVAL  R1 U0        ; R1 := U0
 13 [-]: GETTABLE  R1 R1 K4     ; R1 := R1[0x659d451f]
 14 [-]: GETGLOBAL R2 K5        ; R2 := 0x0032441c
 15 [-]: GETTABLE  R2 R2 K6     ; R2 := R2["UISound_Focus"]
 16 [-]: CALL      R1 2 1       ; R1(R2)
 17 [-]: GETGLOBAL R1 K7        ; R1 := 0xae91e43b
 18 [-]: SELF      R1 R1 K8     ; R2 := R1; R1 := R1[0xf64b7262]
 19 [-]: GETTABLE  R3 R0 K3     ; R3 := R0["mClipName"]
 20 [-]: LOADK     R4 K9        ; R4 := "Label"
 21 [-]: CONST     R5 36        ; R5 := 36.000000
 22 [-]: GETGLOBAL R6 K10       ; R6 := mColors
 23 [-]: GETTABLE  R6 R6 K11    ; R6 := R6["FloatingContentHighlight"]
 24 [-]: CALL      R1 6 1       ; R1(R2,R3,R4,R5,R6)
 25 [-]: GETTABLE  R1 R0 K12    ; R1 := R0["IsAdd"]
 26 [-]: TEST      R1 0         ; if not R1 then PC := 61
 27 [-]: JMP       61           ; PC := 61
 28 [-]: GETGLOBAL R1 K7        ; R1 := 0xae91e43b
 29 [-]: SELF      R1 R1 K8     ; R2 := R1; R1 := R1[0xf64b7262]
 30 [-]: GETTABLE  R3 R0 K3     ; R3 := R0["mClipName"]
 31 [-]: LOADK     R4 K9        ; R4 := "Label"
 32 [-]: CONST     R5 10        ; R5 := 10.000000
 33 [-]: CONST     R6 100       ; R6 := 100.000000
 34 [-]: CALL      R1 6 1       ; R1(R2,R3,R4,R5,R6)
 35 [-]: NEWTABLE  R1 0 3       ; R1 := {}
 36 [-]: SETTABLE  R1 K13 K14   ; R1["CustomEntry"] := true
 37 [-]: GETGLOBAL R2 K7        ; R2 := 0xae91e43b
 38 [-]: SELF      R2 R2 K16    ; R3 := R2; R2 := R2[0x42b04007]
 39 [-]: LOADK     R4 K17       ; R4 := "/Lotus/Language/Items/SlotUnlockerGeneric"
 40 [-]: LOADKB    R5 0 0       ; R5 := false
 41 [-]: CALL      R2 4 2       ; R2 := R2(R3,R4,R5)
 42 [-]: SETTABLE  R1 K15 R2    ; R1["Name"] := R2
 43 [-]: SETTABLE  R1 K18 K19   ; R1["Description"] := "/Lotus/Language/Items/ModSlotUnlockerDesc"
 44 [-]: GETUPVAL  R2 U1        ; R2 := U1
 45 [-]: GETTABLE  R2 R2 K20    ; R2 := R2[0x0f164e09]
 46 [-]: GETUPVAL  R3 U1        ; R3 := U1
 47 [-]: GETTABLE  R3 R3 K21    ; R3 := R3["LABEL_TYPE_PLATINUM"]
 48 [-]: LOADK     R4 K22       ; R4 := "10"
 49 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 50 [-]: NEWTABLE  R3 1 0       ; R3 := {}
 51 [-]: MOVE      R4 R2        ; R4 := R2
 52 [-]: SETLIST   R3 1 1       ; R3[(1-1)*FPF+i] := R(3+i), 1 <= i <= 1
 53 [-]: SETTABLE  R1 K23 R3    ; R1["Tags"] := R3
 54 [-]: NEWTABLE  R3 0 3       ; R3 := {}
 55 [-]: SETTABLE  R3 K25 K14   ; R3["UseCursor"] := true
 56 [-]: SETTABLE  R3 K26 K27   ; R3["W"] := 20.000000
 57 [-]: SETTABLE  R3 K28 K29   ; R3["H"] := 30.000000
 58 [-]: SETTABLE  R1 K24 R3    ; R1["Rect"] := R3
 59 [-]: GETGLOBAL R3 K30       ; R3 := _T
 60 [-]: SETTABLE  R3 K31 R1    ; R3["InfoPopup_Data"] := R1
 61 [-]: RETURN    R0 1         ; return 


; Function #146.4:
;
; Name:            
; Defined at line: 5060
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  7

  1 [-]: GETGLOBAL R1 K0        ; R1 := mConfigMenu
  2 [-]: GETTABLE  R1 R1 K1     ; R1 := R1["mCurrSelectedClipName"]
  3 [-]: GETTABLE  R2 R0 K2     ; R2 := R0["mClipName"]
  4 [-]: EQ        1 R1 R2      ; if R1 == R2 then PC := 26
  5 [-]: JMP       26           ; PC := 26
  6 [-]: GETGLOBAL R1 K3        ; R1 := 0xae91e43b
  7 [-]: SELF      R1 R1 K4     ; R2 := R1; R1 := R1[0xf64b7262]
  8 [-]: GETTABLE  R3 R0 K2     ; R3 := R0["mClipName"]
  9 [-]: LOADK     R4 K5        ; R4 := "Label"
 10 [-]: CONST     R5 36        ; R5 := 36.000000
 11 [-]: GETGLOBAL R6 K6        ; R6 := mColors
 12 [-]: GETTABLE  R6 R6 K7     ; R6 := R6["FloatingContent"]
 13 [-]: CALL      R1 6 1       ; R1(R2,R3,R4,R5,R6)
 14 [-]: GETTABLE  R1 R0 K8     ; R1 := R0["IsAdd"]
 15 [-]: TEST      R1 0         ; if not R1 then PC := 26
 16 [-]: JMP       26           ; PC := 26
 17 [-]: GETGLOBAL R1 K3        ; R1 := 0xae91e43b
 18 [-]: SELF      R1 R1 K4     ; R2 := R1; R1 := R1[0xf64b7262]
 19 [-]: GETTABLE  R3 R0 K2     ; R3 := R0["mClipName"]
 20 [-]: LOADK     R4 K5        ; R4 := "Label"
 21 [-]: CONST     R5 10        ; R5 := 10.000000
 22 [-]: CONST     R6 50        ; R6 := 50.000000
 23 [-]: CALL      R1 6 1       ; R1(R2,R3,R4,R5,R6)
 24 [-]: GETGLOBAL R1 K9        ; R1 := _T
 25 [-]: SETTABLE  R1 K10 K11   ; R1["InfoPopup_Data"] := nil
 26 [-]: RETURN    R0 1         ; return 


; Function #146.5:
;
; Name:            
; Defined at line: 5070
; #Upvalues:       2
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  8

  1 [-]: GETTABLE  R1 R0 K0     ; R1 := R0["IsAdd"]
  2 [-]: TEST      R1 0         ; if not R1 then PC := 22
  3 [-]: JMP       22           ; PC := 22
  4 [-]: GETGLOBAL R1 K1        ; R1 := mConfigMenu
  5 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mCurrSelectedId"]
  6 [-]: EQ        1 R1 K3      ; if R1 == nil then PC := 16
  7 [-]: JMP       16           ; PC := 16
  8 [-]: GETGLOBAL R1 K1        ; R1 := mConfigMenu
  9 [-]: GETGLOBAL R2 K1        ; R2 := mConfigMenu
 10 [-]: SELF      R2 R2 K5     ; R3 := R2; R2 := R2[0xca30dfb6]
 11 [-]: GETGLOBAL R4 K1        ; R4 := mConfigMenu
 12 [-]: GETTABLE  R4 R4 K2     ; R4 := R4["mCurrSelectedId"]
 13 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 14 [-]: SETTABLE  R1 K4 R2     ; R1["mSelectedElement"] := R2
 15 [-]: JMP       18           ; PC := 18
 16 [-]: GETGLOBAL R1 K1        ; R1 := mConfigMenu
 17 [-]: SETTABLE  R1 K4 K3     ; R1["mSelectedElement"] := nil
 18 [-]: GETUPVAL  R1 U0        ; R1 := U0
 19 [-]: CONST     R2 8         ; R2 := 8.000000
 20 [-]: CALL      R1 2 1       ; R1(R2)
 21 [-]: RETURN    R0 1         ; return 
 22 [-]: GETGLOBAL R1 K7        ; R1 := 0x7b998233
 23 [-]: GETGLOBAL R2 K1        ; R2 := mConfigMenu
 24 [-]: GETTABLE  R2 R2 K8     ; R2 := R2["mCurrSelectedClipName"]
 25 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 26 [-]: TEST      R1 1         ; if R1 then PC := 67
 27 [-]: JMP       67           ; PC := 67
 28 [-]: GETGLOBAL R1 K9        ; R1 := 0xae91e43b
 29 [-]: SELF      R1 R1 K10    ; R2 := R1; R1 := R1[0xf64b7262]
 30 [-]: GETGLOBAL R3 K1        ; R3 := mConfigMenu
 31 [-]: GETTABLE  R3 R3 K8     ; R3 := R3["mCurrSelectedClipName"]
 32 [-]: LOADK     R4 K11       ; R4 := "Label"
 33 [-]: CONST     R5 36        ; R5 := 36.000000
 34 [-]: GETGLOBAL R6 K12       ; R6 := mColors
 35 [-]: GETTABLE  R6 R6 K13    ; R6 := R6["FloatingContent"]
 36 [-]: CALL      R1 6 1       ; R1(R2,R3,R4,R5,R6)
 37 [-]: GETGLOBAL R1 K14       ; R1 := 0x25312c9b
 38 [-]: GETGLOBAL R2 K9        ; R2 := 0xae91e43b
 39 [-]: GETGLOBAL R3 K1        ; R3 := mConfigMenu
 40 [-]: GETTABLE  R3 R3 K8     ; R3 := R3["mCurrSelectedClipName"]
 41 [-]: LOADK     R4 K15       ; R4 := ".Bg"
 42 [-]: CONCAT    R3 R3 R4     ; R3 := R3 .. R4
 43 [-]: CONST     R4 8         ; R4 := 8.000000
 44 [-]: NEWTABLE  R5 1 0       ; R5 := {}
 45 [-]: CONST     R6 10        ; R6 := 10.000000
 46 [-]: SETLIST   R5 1 1       ; R5[(1-1)*FPF+i] := R(5+i), 1 <= i <= 1
 47 [-]: NEWTABLE  R6 1 0       ; R6 := {}
 48 [-]: CONST     R7 0         ; R7 := 0.000000
 49 [-]: SETLIST   R6 1 1       ; R6[(1-1)*FPF+i] := R(6+i), 1 <= i <= 1
 50 [-]: LOADK     R7 K17       ; R7 := 0.150000
 51 [-]: CALL      R1 7 1       ; R1(R2,R3,R4,R5,R6,R7)
 52 [-]: GETGLOBAL R1 K14       ; R1 := 0x25312c9b
 53 [-]: GETGLOBAL R2 K9        ; R2 := 0xae91e43b
 54 [-]: GETGLOBAL R3 K1        ; R3 := mConfigMenu
 55 [-]: GETTABLE  R3 R3 K8     ; R3 := R3["mCurrSelectedClipName"]
 56 [-]: LOADK     R4 K18       ; R4 := ".Bg.SubLine"
 57 [-]: CONCAT    R3 R3 R4     ; R3 := R3 .. R4
 58 [-]: CONST     R4 8         ; R4 := 8.000000
 59 [-]: NEWTABLE  R5 1 0       ; R5 := {}
 60 [-]: CONST     R6 13        ; R6 := 13.000000
 61 [-]: SETLIST   R5 1 1       ; R5[(1-1)*FPF+i] := R(5+i), 1 <= i <= 1
 62 [-]: NEWTABLE  R6 1 0       ; R6 := {}
 63 [-]: LOADK     R7 K19       ; R7 := 0.010000
 64 [-]: SETLIST   R6 1 1       ; R6[(1-1)*FPF+i] := R(6+i), 1 <= i <= 1
 65 [-]: LOADK     R7 K17       ; R7 := 0.150000
 66 [-]: CALL      R1 7 1       ; R1(R2,R3,R4,R5,R6,R7)
 67 [-]: GETGLOBAL R1 K1        ; R1 := mConfigMenu
 68 [-]: GETTABLE  R2 R0 K20    ; R2 := R0["Id"]
 69 [-]: SETTABLE  R1 K2 R2     ; R1["mCurrSelectedId"] := R2
 70 [-]: GETGLOBAL R1 K1        ; R1 := mConfigMenu
 71 [-]: GETTABLE  R2 R0 K21    ; R2 := R0["mClipName"]
 72 [-]: SETTABLE  R1 K8 R2     ; R1["mCurrSelectedClipName"] := R2
 73 [-]: GETGLOBAL R1 K9        ; R1 := 0xae91e43b
 74 [-]: SELF      R1 R1 K10    ; R2 := R1; R1 := R1[0xf64b7262]
 75 [-]: GETGLOBAL R3 K1        ; R3 := mConfigMenu
 76 [-]: GETTABLE  R3 R3 K8     ; R3 := R3["mCurrSelectedClipName"]
 77 [-]: LOADK     R4 K11       ; R4 := "Label"
 78 [-]: CONST     R5 36        ; R5 := 36.000000
 79 [-]: GETGLOBAL R6 K12       ; R6 := mColors
 80 [-]: GETTABLE  R6 R6 K22    ; R6 := R6["FloatingContentHighlight"]
 81 [-]: CALL      R1 6 1       ; R1(R2,R3,R4,R5,R6)
 82 [-]: GETGLOBAL R1 K14       ; R1 := 0x25312c9b
 83 [-]: GETGLOBAL R2 K9        ; R2 := 0xae91e43b
 84 [-]: GETGLOBAL R3 K1        ; R3 := mConfigMenu
 85 [-]: GETTABLE  R3 R3 K8     ; R3 := R3["mCurrSelectedClipName"]
 86 [-]: LOADK     R4 K15       ; R4 := ".Bg"
 87 [-]: CONCAT    R3 R3 R4     ; R3 := R3 .. R4
 88 [-]: CONST     R4 8         ; R4 := 8.000000
 89 [-]: NEWTABLE  R5 1 0       ; R5 := {}
 90 [-]: CONST     R6 10        ; R6 := 10.000000
 91 [-]: SETLIST   R5 1 1       ; R5[(1-1)*FPF+i] := R(5+i), 1 <= i <= 1
 92 [-]: NEWTABLE  R6 1 0       ; R6 := {}
 93 [-]: CONST     R7 100       ; R7 := 100.000000
 94 [-]: SETLIST   R6 1 1       ; R6[(1-1)*FPF+i] := R(6+i), 1 <= i <= 1
 95 [-]: CONST     R7 0         ; R7 := 0.250000
 96 [-]: CALL      R1 7 1       ; R1(R2,R3,R4,R5,R6,R7)
 97 [-]: GETGLOBAL R1 K14       ; R1 := 0x25312c9b
 98 [-]: GETGLOBAL R2 K9        ; R2 := 0xae91e43b
 99 [-]: GETGLOBAL R3 K1        ; R3 := mConfigMenu
100 [-]: GETTABLE  R3 R3 K8     ; R3 := R3["mCurrSelectedClipName"]
101 [-]: LOADK     R4 K18       ; R4 := ".Bg.SubLine"
102 [-]: CONCAT    R3 R3 R4     ; R3 := R3 .. R4
103 [-]: CONST     R4 8         ; R4 := 8.000000
104 [-]: NEWTABLE  R5 1 0       ; R5 := {}
105 [-]: CONST     R6 13        ; R6 := 13.000000
106 [-]: SETLIST   R5 1 1       ; R5[(1-1)*FPF+i] := R(5+i), 1 <= i <= 1
107 [-]: NEWTABLE  R6 1 0       ; R6 := {}
108 [-]: CONST     R7 4         ; R7 := 4.000000
109 [-]: SETLIST   R6 1 1       ; R6[(1-1)*FPF+i] := R(6+i), 1 <= i <= 1
110 [-]: CONST     R7 0         ; R7 := 0.250000
111 [-]: CALL      R1 7 1       ; R1(R2,R3,R4,R5,R6,R7)
112 [-]: GETUPVAL  R1 U1        ; R1 := U1
113 [-]: GETTABLE  R2 R0 K20    ; R2 := R0["Id"]
114 [-]: CALL      R1 2 1       ; R1(R2)
115 [-]: RETURN    R0 1         ; return 


; Function #146.6:
;
; Name:            
; Defined at line: 5099
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  25

  1 [-]: CONST     R1 0         ; R1 := 0.000000
  2 [-]: SELF      R2 R0 K0     ; R3 := R0; R2 := R0[0x5fbddc1a]
  3 [-]: CALL      R2 2 2       ; R2 := R2(R3)
  4 [-]: CONST     R3 20        ; R3 := 20.000000
  5 [-]: CONST     R4 1         ; R4 := 1.000000
  6 [-]: MOVE      R5 R2        ; R5 := R2
  7 [-]: CONST     R6 1         ; R6 := 1.000000
  8 [-]: FORPREP   R4 40        ; R4 -= R6; PC := 40
  9 [-]: SELF      R8 R0 K1     ; R9 := R0; R8 := R0[0x5465f8f3]
 10 [-]: MOVE      R10 R7       ; R10 := R7
 11 [-]: CALL      R8 3 2       ; R8 := R8(R9,R10)
 12 [-]: GETTABLE  R9 R8 K2     ; R9 := R8["mClipName"]
 13 [-]: SETTABLE  R8 K3 R1     ; R8["NewX"] := R1
 14 [-]: GETGLOBAL R10 K5       ; R10 := 0xae91e43b
 15 [-]: SELF      R10 R10 K6   ; R11 := R10; R10 := R10[0x91a24e4b]
 16 [-]: MOVE      R12 R9       ; R12 := R9
 17 [-]: LOADK     R13 K7       ; R13 := ".Label"
 18 [-]: CONCAT    R12 R12 R13  ; R12 := R12 .. R13
 19 [-]: CONST     R13 33       ; R13 := 33.000000
 20 [-]: CALL      R10 4 2      ; R10 := R10(R11,R12,R13)
 21 [-]: ADD       R10 R10 K8   ; R10 := R10 + 20.000000
 22 [-]: SETTABLE  R8 K4 R10    ; R8["BgWidth"] := R10
 23 [-]: GETTABLE  R10 R8 K4    ; R10 := R8["BgWidth"]
 24 [-]: ADD       R10 R1 R10   ; R10 := R1 + R10
 25 [-]: ADD       R1 R10 R3    ; R1 := R10 + R3
 26 [-]: GETGLOBAL R10 K5       ; R10 := 0xae91e43b
 27 [-]: SELF      R10 R10 K9   ; R11 := R10; R10 := R10[0xf64b7262]
 28 [-]: MOVE      R12 R9       ; R12 := R9
 29 [-]: LOADK     R13 K10      ; R13 := "Btn"
 30 [-]: CONST     R14 12       ; R14 := 12.000000
 31 [-]: GETTABLE  R15 R8 K4    ; R15 := R8["BgWidth"]
 32 [-]: CALL      R10 6 1      ; R10(R11,R12,R13,R14,R15)
 33 [-]: GETGLOBAL R10 K5       ; R10 := 0xae91e43b
 34 [-]: SELF      R10 R10 K9   ; R11 := R10; R10 := R10[0xf64b7262]
 35 [-]: MOVE      R12 R9       ; R12 := R9
 36 [-]: LOADK     R13 K11      ; R13 := "Bg"
 37 [-]: CONST     R14 12       ; R14 := 12.000000
 38 [-]: GETTABLE  R15 R8 K4    ; R15 := R8["BgWidth"]
 39 [-]: CALL      R10 6 1      ; R10(R11,R12,R13,R14,R15)
 40 [-]: FORLOOP   R4 9         ; R4 += R6; if R4 <= R5 then begin PC := 9; R7 := R4 end
 41 [-]: GETGLOBAL R10 K12      ; R10 := mConfigMenu
 42 [-]: GETTABLE  R10 R10 K13  ; R10 := R10["mInitialX"]
 43 [-]: DIV       R11 R1 K14   ; R11 := R1 / 2.000000
 44 [-]: SUB       R10 R10 R11  ; R10 := R10 - R11
 45 [-]: CONST     R11 1        ; R11 := 1.000000
 46 [-]: MOVE      R12 R2       ; R12 := R2
 47 [-]: CONST     R13 1        ; R13 := 1.000000
 48 [-]: FORPREP   R11 60       ; R11 -= R13; PC := 60
 49 [-]: SELF      R15 R0 K1    ; R16 := R0; R15 := R0[0x5465f8f3]
 50 [-]: MOVE      R17 R14      ; R17 := R14
 51 [-]: CALL      R15 3 2      ; R15 := R15(R16,R17)
 52 [-]: GETTABLE  R16 R15 K2   ; R16 := R15["mClipName"]
 53 [-]: GETGLOBAL R17 K5       ; R17 := 0xae91e43b
 54 [-]: SELF      R17 R17 K15  ; R18 := R17; R17 := R17[0x67bc869f]
 55 [-]: MOVE      R19 R16      ; R19 := R16
 56 [-]: CONST     R20 0        ; R20 := 0.000000
 57 [-]: GETTABLE  R21 R15 K3   ; R21 := R15["NewX"]
 58 [-]: ADD       R21 R10 R21  ; R21 := R10 + R21
 59 [-]: CALL      R17 5 1      ; R17(R18,R19,R20,R21)
 60 [-]: FORLOOP   R11 49       ; R11 += R13; if R11 <= R12 then begin PC := 49; R14 := R11 end
 61 [-]: GETGLOBAL R17 K5       ; R17 := 0xae91e43b
 62 [-]: SELF      R17 R17 K6   ; R18 := R17; R17 := R17[0x91a24e4b]
 63 [-]: LOADK     R19 K16      ; R19 := "TopMenu.ConfigMenu"
 64 [-]: CONST     R20 0        ; R20 := 0.000000
 65 [-]: CALL      R17 4 2      ; R17 := R17(R18,R19,R20)
 66 [-]: GETGLOBAL R18 K5       ; R18 := 0xae91e43b
 67 [-]: SELF      R18 R18 K15  ; R19 := R18; R18 := R18[0x67bc869f]
 68 [-]: LOADK     R20 K17      ; R20 := "TopMenu.ConfigLeft"
 69 [-]: CONST     R21 0        ; R21 := 0.000000
 70 [-]: ADD       R22 R17 R10  ; R22 := R17 + R10
 71 [-]: SUB       R22 R22 K18  ; R22 := R22 - 50.000000
 72 [-]: CALL      R18 5 1      ; R18(R19,R20,R21,R22)
 73 [-]: SELF      R18 R0 K1    ; R19 := R0; R18 := R0[0x5465f8f3]
 74 [-]: MOVE      R20 R2       ; R20 := R2
 75 [-]: CALL      R18 3 2      ; R18 := R18(R19,R20)
 76 [-]: GETGLOBAL R19 K5       ; R19 := 0xae91e43b
 77 [-]: SELF      R19 R19 K15  ; R20 := R19; R19 := R19[0x67bc869f]
 78 [-]: LOADK     R21 K19      ; R21 := "TopMenu.ConfigRight"
 79 [-]: CONST     R22 0        ; R22 := 0.000000
 80 [-]: ADD       R23 R17 R10  ; R23 := R17 + R10
 81 [-]: GETTABLE  R24 R18 K3   ; R24 := R18["NewX"]
 82 [-]: ADD       R23 R23 R24  ; R23 := R23 + R24
 83 [-]: GETTABLE  R24 R18 K4   ; R24 := R18["BgWidth"]
 84 [-]: ADD       R23 R23 R24  ; R23 := R23 + R24
 85 [-]: ADD       R23 R23 K18  ; R23 := R23 + 50.000000
 86 [-]: CALL      R19 5 1      ; R19(R20,R21,R22,R23)
 87 [-]: RETURN    R0 1         ; return 


; Function #146.7:
;
; Name:            
; Defined at line: 5125
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  9

  1 [-]: GETGLOBAL R1 K0        ; R1 := mConfigMenu
  2 [-]: SELF      R1 R1 K1     ; R2 := R1; R1 := R1[0xca30dfb6]
  3 [-]: GETGLOBAL R3 K0        ; R3 := mConfigMenu
  4 [-]: GETTABLE  R3 R3 K2     ; R3 := R3["mClickDrag"]
  5 [-]: GETTABLE  R3 R3 K3     ; R3 := R3["DragId"]
  6 [-]: CALL      R1 3 2       ; R1 := R1(R2,R3)
  7 [-]: GETTABLE  R2 R0 K4     ; R2 := R0["IsAdd"]
  8 [-]: TEST      R2 0         ; if not R2 then PC := 16
  9 [-]: JMP       16           ; PC := 16
 10 [-]: GETGLOBAL R2 K5        ; R2 := 0xae91e43b
 11 [-]: SELF      R2 R2 K6     ; R3 := R2; R2 := R2[0x20b98db3]
 12 [-]: LOADK     R4 K7        ; R4 := "TopMenu.SwapLabel.text"
 13 [-]: LOADK     R5 K8        ; R5 := "/Lotus/Language/Menu/Arsenal_ConfigSwapError"
 14 [-]: CALL      R2 4 1       ; R2(R3,R4,R5)
 15 [-]: JMP       30           ; PC := 30
 16 [-]: GETGLOBAL R2 K5        ; R2 := 0xae91e43b
 17 [-]: SELF      R2 R2 K6     ; R3 := R2; R2 := R2[0x20b98db3]
 18 [-]: LOADK     R4 K7        ; R4 := "TopMenu.SwapLabel.text"
 19 [-]: LOADK     R5 K9        ; R5 := "/Lotus/Language/Menu/Arsenal_ConfigSwap"
 20 [-]: NEWTABLE  R6 0 2       ; R6 := {}
 21 [-]: LOADK     R7 K11       ; R7 := " "
 22 [-]: GETTABLE  R8 R0 K12    ; R8 := R0["Name"]
 23 [-]: CONCAT    R7 R7 R8     ; R7 := R7 .. R8
 24 [-]: SETTABLE  R6 K10 R7    ; R6["FIRST"] := R7
 25 [-]: LOADK     R7 K11       ; R7 := " "
 26 [-]: GETTABLE  R8 R1 K12    ; R8 := R1["Name"]
 27 [-]: CONCAT    R7 R7 R8     ; R7 := R7 .. R8
 28 [-]: SETTABLE  R6 K13 R7    ; R6["SECOND"] := R7
 29 [-]: CALL      R2 5 1       ; R2(R3,R4,R5,R6)
 30 [-]: RETURN    R0 1         ; return 


; Function #146.8:
;
; Name:            
; Defined at line: 5134
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  6

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0xae91e43b
  2 [-]: SELF      R1 R1 K1     ; R2 := R1; R1 := R1[0x5f56eeab]
  3 [-]: LOADK     R3 K2        ; R3 := "TopMenu.SwapLabel"
  4 [-]: CONST     R4 29        ; R4 := 29.000000
  5 [-]: LOADK     R5 K3        ; R5 := ""
  6 [-]: CALL      R1 5 1       ; R1(R2,R3,R4,R5)
  7 [-]: RETURN    R0 1         ; return 


; Function #146.9:
;
; Name:            
; Defined at line: 5138
; #Upvalues:       5
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  16

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0xae91e43b
  2 [-]: SELF      R1 R1 K1     ; R2 := R1; R1 := R1[0x5f56eeab]
  3 [-]: LOADK     R3 K2        ; R3 := "TopMenu.SwapLabel"
  4 [-]: CONST     R4 29        ; R4 := 29.000000
  5 [-]: LOADK     R5 K3        ; R5 := ""
  6 [-]: CALL      R1 5 1       ; R1(R2,R3,R4,R5)
  7 [-]: GETGLOBAL R1 K4        ; R1 := mConfigMenu
  8 [-]: SELF      R1 R1 K5     ; R2 := R1; R1 := R1[0x5465f8f3]
  9 [-]: GETGLOBAL R3 K4        ; R3 := mConfigMenu
 10 [-]: GETTABLE  R3 R3 K6     ; R3 := R3["mClickDrag"]
 11 [-]: GETTABLE  R3 R3 K7     ; R3 := R3["DragIndex"]
 12 [-]: CALL      R1 3 2       ; R1 := R1(R2,R3)
 13 [-]: GETGLOBAL R2 K4        ; R2 := mConfigMenu
 14 [-]: SELF      R2 R2 K5     ; R3 := R2; R2 := R2[0x5465f8f3]
 15 [-]: GETGLOBAL R4 K4        ; R4 := mConfigMenu
 16 [-]: GETTABLE  R4 R4 K6     ; R4 := R4["mClickDrag"]
 17 [-]: GETTABLE  R4 R4 K8     ; R4 := R4["FocusedIndex"]
 18 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 19 [-]: GETTABLE  R3 R1 K9     ; R3 := R1["IsAdd"]
 20 [-]: TEST      R3 1         ; if R3 then PC := 25
 21 [-]: JMP       25           ; PC := 25
 22 [-]: GETTABLE  R3 R2 K9     ; R3 := R2["IsAdd"]
 23 [-]: TEST      R3 0         ; if not R3 then PC := 31
 24 [-]: JMP       31           ; PC := 31
 25 [-]: GETUPVAL  R3 U0        ; R3 := U0
 26 [-]: GETTABLE  R3 R3 K10    ; R3 := R3[0x659d451f]
 27 [-]: GETGLOBAL R4 K11       ; R4 := 0x0032441c
 28 [-]: GETTABLE  R4 R4 K12    ; R4 := R4["UISound_Error"]
 29 [-]: CALL      R3 2 1       ; R3(R4)
 30 [-]: RETURN    R0 1         ; return 
 31 [-]: GETGLOBAL R3 K13       ; R3 := 0x7b998233
 32 [-]: GETGLOBAL R4 K14       ; R4 := 0x25d99d89
 33 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 34 [-]: TEST      R3 1         ; if R3 then PC := 140
 35 [-]: JMP       140          ; PC := 140
 36 [-]: GETGLOBAL R3 K14       ; R3 := 0x25d99d89
 37 [-]: SELF      R3 R3 K15    ; R4 := R3; R3 := R3[0x25a6e75e]
 38 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 39 [-]: GETUPVAL  R4 U1        ; R4 := U1
 40 [-]: GETTABLE  R4 R4 K16    ; R4 := R4["info"]
 41 [-]: GETTABLE  R4 R4 K17    ; R4 := R4["mItemId"]
 42 [-]: GETTABLE  R4 R4 K18    ; R4 := R4["mId"]
 43 [-]: SELF      R5 R3 K19    ; R6 := R3; R5 := R3[0xf193d12d]
 44 [-]: MOVE      R7 R4        ; R7 := R4
 45 [-]: GETTABLE  R8 R1 K20    ; R8 := R1["Id"]
 46 [-]: GETTABLE  R9 R2 K20    ; R9 := R2["Id"]
 47 [-]: LOADKB    R10 1 0      ; R10 := true
 48 [-]: GETGLOBAL R11 K21      ; R11 := _T
 49 [-]: GETTABLE  R11 R11 K22  ; R11 := R11["ArsenalState"]
 50 [-]: EQ        1 R11 K24    ; if R11 == 2.000000 then PC := 53
 51 [-]: JMP       53           ; PC := 53
 52 [-]: LOADKB    R11 0 1      ; R11 := false; PC := 53
 53 [-]: LOADKB    R11 1 0      ; R11 := true
 54 [-]: CALL      R5 7 2       ; R5 := R5(R6,R7,R8,R9,R10,R11)
 55 [-]: TEST      R5 1         ; if R5 then PC := 62
 56 [-]: JMP       62           ; PC := 62
 57 [-]: GETUPVAL  R6 U0        ; R6 := U0
 58 [-]: GETTABLE  R6 R6 K25    ; R6 := R6[0xa53f5e12]
 59 [-]: LOADK     R7 K26       ; R7 := "/Lotus/Language/Loadout/Loadout_IllegalSwapConfig"
 60 [-]: CALL      R6 2 1       ; R6(R7)
 61 [-]: RETURN    R0 1         ; return 
 62 [-]: GETUPVAL  R6 U2        ; R6 := U2
 63 [-]: CALL      R6 1 1       ; R6()
 64 [-]: GETTABLE  R6 R1 K27    ; R6 := R1["Name"]
 65 [-]: LOADKB    R7 0 0       ; R7 := false
 66 [-]: LOADKB    R8 0 0       ; R8 := false
 67 [-]: GETTABLE  R9 R2 K28    ; R9 := R2["CustomName"]
 68 [-]: TEST      R9 0         ; if not R9 then PC := 74
 69 [-]: JMP       74           ; PC := 74
 70 [-]: GETTABLE  R9 R2 K27    ; R9 := R2["Name"]
 71 [-]: SETTABLE  R1 K27 R9    ; R1[0x0469f296] := R9
 72 [-]: LOADKB    R7 1 0       ; R7 := true
 73 [-]: JMP       86           ; PC := 86
 74 [-]: GETGLOBAL R9 K0        ; R9 := 0xae91e43b
 75 [-]: SELF      R9 R9 K29    ; R10 := R9; R9 := R9[0x42b04007]
 76 [-]: LOADK     R11 K30      ; R11 := "/Lotus/Language/Menu/Loadout_Config"
 77 [-]: LOADKB    R12 0 0      ; R12 := false
 78 [-]: NEWTABLE  R13 0 1      ; R13 := {}
 79 [-]: GETUPVAL  R14 U3       ; R14 := U3
 80 [-]: GETTABLE  R14 R14 K32  ; R14 := R14["CONFIG_TYPES"]
 81 [-]: GETTABLE  R15 R1 K33   ; R15 := R1["mIndex"]
 82 [-]: GETTABLE  R14 R14 R15  ; R14 := R14[R15]
 83 [-]: SETTABLE  R13 K31 R14  ; R13["TYPE"] := R14
 84 [-]: CALL      R9 5 2       ; R9 := R9(R10,R11,R12,R13)
 85 [-]: SETTABLE  R1 K27 R9    ; R1[0x0469f296] := R9
 86 [-]: GETTABLE  R9 R1 K28    ; R9 := R1["CustomName"]
 87 [-]: TEST      R9 0         ; if not R9 then PC := 92
 88 [-]: JMP       92           ; PC := 92
 89 [-]: SETTABLE  R2 K27 R6    ; R2[0x0469f296] := R6
 90 [-]: LOADKB    R8 1 0       ; R8 := true
 91 [-]: JMP       104          ; PC := 104
 92 [-]: GETGLOBAL R9 K0        ; R9 := 0xae91e43b
 93 [-]: SELF      R9 R9 K29    ; R10 := R9; R9 := R9[0x42b04007]
 94 [-]: LOADK     R11 K30      ; R11 := "/Lotus/Language/Menu/Loadout_Config"
 95 [-]: LOADKB    R12 0 0      ; R12 := false
 96 [-]: NEWTABLE  R13 0 1      ; R13 := {}
 97 [-]: GETUPVAL  R14 U3       ; R14 := U3
 98 [-]: GETTABLE  R14 R14 K32  ; R14 := R14["CONFIG_TYPES"]
 99 [-]: GETTABLE  R15 R2 K33   ; R15 := R2["mIndex"]
100 [-]: GETTABLE  R14 R14 R15  ; R14 := R14[R15]
101 [-]: SETTABLE  R13 K31 R14  ; R13["TYPE"] := R14
102 [-]: CALL      R9 5 2       ; R9 := R9(R10,R11,R12,R13)
103 [-]: SETTABLE  R2 K27 R9    ; R2[0x0469f296] := R9
104 [-]: SETTABLE  R1 K28 R7    ; R1["CustomName"] := R7
105 [-]: SETTABLE  R2 K28 R8    ; R2["CustomName"] := R8
106 [-]: GETGLOBAL R9 K4        ; R9 := mConfigMenu
107 [-]: GETTABLE  R9 R9 K34    ; R9 := R9[0xb15e6aca]
108 [-]: MOVE      R10 R1       ; R10 := R1
109 [-]: CALL      R9 2 1       ; R9(R10)
110 [-]: GETGLOBAL R9 K4        ; R9 := mConfigMenu
111 [-]: GETTABLE  R9 R9 K34    ; R9 := R9[0xb15e6aca]
112 [-]: MOVE      R10 R2       ; R10 := R2
113 [-]: CALL      R9 2 1       ; R9(R10)
114 [-]: GETGLOBAL R9 K4        ; R9 := mConfigMenu
115 [-]: SELF      R9 R9 K35    ; R10 := R9; R9 := R9[0x7d81f6e1]
116 [-]: CALL      R9 2 1       ; R9(R10)
117 [-]: GETGLOBAL R9 K4        ; R9 := mConfigMenu
118 [-]: GETTABLE  R9 R9 K36    ; R9 := R9["mSelectedElement"]
119 [-]: EQ        1 R9 K37     ; if R9 == nil then PC := 127
120 [-]: JMP       127          ; PC := 127
121 [-]: GETTABLE  R9 R2 K20    ; R9 := R2["Id"]
122 [-]: GETGLOBAL R10 K4       ; R10 := mConfigMenu
123 [-]: GETTABLE  R10 R10 K36  ; R10 := R10["mSelectedElement"]
124 [-]: GETTABLE  R10 R10 K20  ; R10 := R10["Id"]
125 [-]: EQ        1 R9 R10     ; if R9 == R10 then PC := 134
126 [-]: JMP       134          ; PC := 134
127 [-]: GETGLOBAL R9 K4        ; R9 := mConfigMenu
128 [-]: SELF      R9 R9 K38    ; R10 := R9; R9 := R9[0x77de11fe]
129 [-]: GETGLOBAL R11 K4       ; R11 := mConfigMenu
130 [-]: GETTABLE  R11 R11 K6   ; R11 := R11["mClickDrag"]
131 [-]: GETTABLE  R11 R11 K8   ; R11 := R11["FocusedIndex"]
132 [-]: CALL      R9 3 1       ; R9(R10,R11)
133 [-]: JMP       140          ; PC := 140
134 [-]: GETUPVAL  R9 U4        ; R9 := U4
135 [-]: GETGLOBAL R10 K4       ; R10 := mConfigMenu
136 [-]: GETTABLE  R10 R10 K36  ; R10 := R10["mSelectedElement"]
137 [-]: GETTABLE  R10 R10 K20  ; R10 := R10["Id"]
138 [-]: LOADKB    R11 1 0      ; R11 := true
139 [-]: CALL      R9 3 1       ; R9(R10,R11)
140 [-]: RETURN    R0 1         ; return 


; Function #147:
;
; Name:            
; Defined at line: 5195
; #Upvalues:       0
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

  1 [-]: GETGLOBAL R0 K0        ; R0 := mIsHeavyWeapon
  2 [-]: TEST      R0 0         ; if not R0 then PC := 8
  3 [-]: JMP       8            ; PC := 8
  4 [-]: GETGLOBAL R0 K1        ; R0 := _T
  5 [-]: GETTABLE  R0 R0 K2     ; R0 := R0["upgradeItemLot"]
  6 [-]: EQ        0 R0 K4      ; if R0 ~= 8.000000 then PC := 12
  7 [-]: JMP       12           ; PC := 12
  8 [-]: GETGLOBAL R0 K1        ; R0 := _T
  9 [-]: GETTABLE  R0 R0 K5     ; R0 := R0["ArsenalState"]
 10 [-]: EQ        1 R0 K6      ; if R0 == 3.000000 then PC := 13
 11 [-]: JMP       13           ; PC := 13
 12 [-]: LOADKB    R0 0 1       ; R0 := false; PC := 13
 13 [-]: LOADKB    R0 1 0       ; R0 := true
 14 [-]: RETURN    R0 2         ; return R0
 15 [-]: RETURN    R0 1         ; return 


; Function #148:
;
; Name:            
; Defined at line: 5199
; #Upvalues:       4
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  16

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETUPVAL  R2 U0        ; R2 := U0
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: TEST      R1 1         ; if R1 then PC := 12
  5 [-]: JMP       12           ; PC := 12
  6 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  7 [-]: GETGLOBAL R2 K1        ; R2 := mRailjackMovie
  8 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  9 [-]: TEST      R1 1         ; if R1 then PC := 12
 10 [-]: JMP       12           ; PC := 12
 11 [-]: RETURN    R0 1         ; return 
 12 [-]: LOADNIL   R1 R1        ; R1 := nil
 13 [-]: GETGLOBAL R2 K0        ; R2 := 0x7b998233
 14 [-]: GETGLOBAL R3 K2        ; R3 := _T
 15 [-]: GETTABLE  R3 R3 K3     ; R3 := R3["MenuSuitAvatar"]
 16 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 17 [-]: TEST      R2 1         ; if R2 then PC := 24
 18 [-]: JMP       24           ; PC := 24
 19 [-]: GETGLOBAL R2 K2        ; R2 := _T
 20 [-]: GETTABLE  R2 R2 K3     ; R2 := R2["MenuSuitAvatar"]
 21 [-]: SELF      R2 R2 K4     ; R3 := R2; R2 := R2[0xd1586535]
 22 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 23 [-]: MOVE      R1 R2        ; R1 := R2
 24 [-]: GETGLOBAL R2 K5        ; R2 := 0x89326c93
 25 [-]: SELF      R2 R2 K6     ; R3 := R2; R2 := R2[0x462c251c]
 26 [-]: GETGLOBAL R4 K7        ; R4 := mArsenalDeviceTag
 27 [-]: MOVE      R5 R1        ; R5 := R1
 28 [-]: CONST     R6 0         ; R6 := 0.000000
 29 [-]: CONST     R7 200       ; R7 := 200.000000
 30 [-]: CALL      R2 6 2       ; R2 := R2(R3,R4,R5,R6,R7)
 31 [-]: GETGLOBAL R3 K0        ; R3 := 0x7b998233
 32 [-]: GETGLOBAL R4 K8        ; R4 := 0x2d2cd2d5
 33 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 34 [-]: TEST      R3 1         ; if R3 then PC := 182
 35 [-]: JMP       182          ; PC := 182
 36 [-]: GETGLOBAL R3 K0        ; R3 := 0x7b998233
 37 [-]: GETGLOBAL R4 K2        ; R4 := _T
 38 [-]: GETTABLE  R4 R4 K3     ; R4 := R4["MenuSuitAvatar"]
 39 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 40 [-]: TEST      R3 1         ; if R3 then PC := 182
 41 [-]: JMP       182          ; PC := 182
 42 [-]: GETUPVAL  R3 U1        ; R3 := U1
 43 [-]: CALL      R3 1 2       ; R3 := R3()
 44 [-]: GETGLOBAL R4 K0        ; R4 := 0x7b998233
 45 [-]: MOVE      R5 R3        ; R5 := R3
 46 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 47 [-]: TEST      R4 1         ; if R4 then PC := 182
 48 [-]: JMP       182          ; PC := 182
 49 [-]: SELF      R4 R3 K10    ; R5 := R3; R4 := R3[0x02bb4ff1]
 50 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 51 [-]: SETGLOBAL R4 K9        ; mOldCameraSpot := R4
 52 [-]: GETGLOBAL R4 K0        ; R4 := 0x7b998233
 53 [-]: GETGLOBAL R5 K9        ; R5 := mOldCameraSpot
 54 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 55 [-]: TEST      R4 1         ; if R4 then PC := 61
 56 [-]: JMP       61           ; PC := 61
 57 [-]: SELF      R4 R3 K11    ; R5 := R3; R4 := R3[0x14c7f7dd]
 58 [-]: LOADNIL   R6 R6        ; R6 := nil
 59 [-]: CONST     R7 0         ; R7 := 0.000000
 60 [-]: CALL      R4 4 1       ; R4(R5,R6,R7)
 61 [-]: GETUPVAL  R4 U2        ; R4 := U2
 62 [-]: CALL      R4 1 2       ; R4 := R4()
 63 [-]: GETUPVAL  R5 U3        ; R5 := U3
 64 [-]: GETTABLE  R5 R5 K12    ; R5 := R5[0x06d055f9]
 65 [-]: MOVE      R6 R4        ; R6 := R4
 66 [-]: GETGLOBAL R7 K13       ; R7 := 0xa421af95
 67 [-]: CONST     R8 0         ; R8 := 0.000000
 68 [-]: CONST     R9 3         ; R9 := 3.000000
 69 [-]: CONST     R10 -2       ; R10 := -2.000000
 70 [-]: CALL      R7 4 2       ; R7 := R7(R8,R9,R10)
 71 [-]: GETGLOBAL R8 K13       ; R8 := 0xa421af95
 72 [-]: CONST     R9 1         ; R9 := 1.500000
 73 [-]: LOADK     R10 K14      ; R10 := 1.650000
 74 [-]: LOADK     R11 K15      ; R11 := -0.990000
 75 [-]: CALL      R8 4 0       ; R8,... := R8(R9,R10,R11)
 76 [-]: CALL      R5 0 2       ; R5 := R5(R6,...)
 77 [-]: GETUPVAL  R6 U3        ; R6 := U3
 78 [-]: GETTABLE  R6 R6 K12    ; R6 := R6[0x06d055f9]
 79 [-]: MOVE      R7 R4        ; R7 := R4
 80 [-]: GETGLOBAL R8 K16       ; R8 := 0x00046924
 81 [-]: CALL      R8 1 2       ; R8 := R8()
 82 [-]: GETGLOBAL R9 K16       ; R9 := 0x00046924
 83 [-]: CONST     R10 -23      ; R10 := -23.000000
 84 [-]: CONST     R11 0        ; R11 := 0.000000
 85 [-]: CONST     R12 0        ; R12 := 0.000000
 86 [-]: CALL      R9 4 0       ; R9,... := R9(R10,R11,R12)
 87 [-]: CALL      R6 0 2       ; R6 := R6(R7,...)
 88 [-]: GETGLOBAL R7 K0        ; R7 := 0x7b998233
 89 [-]: MOVE      R8 R2        ; R8 := R2
 90 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 91 [-]: TEST      R7 1         ; if R7 then PC := 121
 92 [-]: JMP       121          ; PC := 121
 93 [-]: GETGLOBAL R7 K0        ; R7 := 0x7b998233
 94 [-]: GETGLOBAL R8 K2        ; R8 := _T
 95 [-]: GETTABLE  R8 R8 K17    ; R8 := R8["KDriveAvatar"]
 96 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 97 [-]: TEST      R7 1         ; if R7 then PC := 111
 98 [-]: JMP       111          ; PC := 111
 99 [-]: GETGLOBAL R7 K2        ; R7 := _T
100 [-]: GETTABLE  R7 R7 K17    ; R7 := R7["KDriveAvatar"]
101 [-]: SELF      R7 R7 K18    ; R8 := R7; R7 := R7[0xd4cc05b4]
102 [-]: CALL      R7 2 2       ; R7 := R7(R8)
103 [-]: TEST      R7 0         ; if not R7 then PC := 111
104 [-]: JMP       111          ; PC := 111
105 [-]: GETGLOBAL R7 K13       ; R7 := 0xa421af95
106 [-]: CONST     R8 0         ; R8 := 0.000000
107 [-]: LOADK     R9 K19       ; R9 := 0.050000
108 [-]: CONST     R10 0        ; R10 := 0.000000
109 [-]: CALL      R7 4 2       ; R7 := R7(R8,R9,R10)
110 [-]: ADD       R5 R5 R7     ; R5 := R5 + R7
111 [-]: SELF      R7 R2 K21    ; R8 := R2; R7 := R2[0x47901f07]
112 [-]: GETGLOBAL R9 K8        ; R9 := 0x2d2cd2d5
113 [-]: GETGLOBAL R10 K22      ; R10 := 0x0469f296
114 [-]: LOADK     R11 K23      ; R11 := "GAME_C1_ROOT"
115 [-]: CALL      R10 2 2      ; R10 := R10(R11)
116 [-]: MOVE      R11 R5       ; R11 := R5
117 [-]: MOVE      R12 R6       ; R12 := R6
118 [-]: CALL      R7 6 2       ; R7 := R7(R8,R9,R10,R11,R12)
119 [-]: SETGLOBAL R7 K20       ; mCameraSpot := R7
120 [-]: JMP       168          ; PC := 168
121 [-]: GETGLOBAL R7 K2        ; R7 := _T
122 [-]: GETTABLE  R7 R7 K24    ; R7 := R7["upgradeItemLot"]
123 [-]: EQ        0 R7 K26     ; if R7 ~= 8.000000 then PC := 151
124 [-]: JMP       151          ; PC := 151
125 [-]: GETGLOBAL R7 K0        ; R7 := 0x7b998233
126 [-]: GETGLOBAL R8 K2        ; R8 := _T
127 [-]: GETTABLE  R8 R8 K27    ; R8 := R8["MechAvatar"]
128 [-]: CALL      R7 2 2       ; R7 := R7(R8)
129 [-]: TEST      R7 1         ; if R7 then PC := 151
130 [-]: JMP       151          ; PC := 151
131 [-]: GETGLOBAL R7 K2        ; R7 := _T
132 [-]: GETTABLE  R7 R7 K27    ; R7 := R7["MechAvatar"]
133 [-]: SELF      R7 R7 K21    ; R8 := R7; R7 := R7[0x47901f07]
134 [-]: GETGLOBAL R9 K8        ; R9 := 0x2d2cd2d5
135 [-]: GETGLOBAL R10 K22      ; R10 := 0x0469f296
136 [-]: LOADK     R11 K23      ; R11 := "GAME_C1_ROOT"
137 [-]: CALL      R10 2 2      ; R10 := R10(R11)
138 [-]: GETGLOBAL R11 K13      ; R11 := 0xa421af95
139 [-]: CONST     R12 0        ; R12 := 0.000000
140 [-]: CONST     R13 2        ; R13 := 2.750000
141 [-]: CONST     R14 8        ; R14 := 8.000000
142 [-]: CALL      R11 4 2      ; R11 := R11(R12,R13,R14)
143 [-]: GETGLOBAL R12 K16      ; R12 := 0x00046924
144 [-]: CONST     R13 180      ; R13 := 180.000000
145 [-]: CONST     R14 0        ; R14 := 0.000000
146 [-]: CONST     R15 0        ; R15 := 0.000000
147 [-]: CALL      R12 4 0      ; R12,... := R12(R13,R14,R15)
148 [-]: CALL      R7 0 2       ; R7 := R7(R8,...)
149 [-]: SETGLOBAL R7 K20       ; mCameraSpot := R7
150 [-]: JMP       168          ; PC := 168
151 [-]: GETGLOBAL R7 K13       ; R7 := 0xa421af95
152 [-]: LOADK     R8 K19       ; R8 := 0.050000
153 [-]: CONST     R9 0         ; R9 := -0.250000
154 [-]: CONST     R10 0        ; R10 := 0.000000
155 [-]: CALL      R7 4 2       ; R7 := R7(R8,R9,R10)
156 [-]: ADD       R5 R5 R7     ; R5 := R5 + R7
157 [-]: GETGLOBAL R7 K2        ; R7 := _T
158 [-]: GETTABLE  R7 R7 K3     ; R7 := R7["MenuSuitAvatar"]
159 [-]: SELF      R7 R7 K21    ; R8 := R7; R7 := R7[0x47901f07]
160 [-]: GETGLOBAL R9 K8        ; R9 := 0x2d2cd2d5
161 [-]: GETGLOBAL R10 K22      ; R10 := 0x0469f296
162 [-]: LOADK     R11 K23      ; R11 := "GAME_C1_ROOT"
163 [-]: CALL      R10 2 2      ; R10 := R10(R11)
164 [-]: MOVE      R11 R5       ; R11 := R5
165 [-]: MOVE      R12 R6       ; R12 := R6
166 [-]: CALL      R7 6 2       ; R7 := R7(R8,R9,R10,R11,R12)
167 [-]: SETGLOBAL R7 K20       ; mCameraSpot := R7
168 [-]: SELF      R7 R3 K11    ; R8 := R3; R7 := R3[0x14c7f7dd]
169 [-]: GETGLOBAL R9 K20       ; R9 := mCameraSpot
170 [-]: GETUPVAL  R10 U3       ; R10 := U3
171 [-]: GETTABLE  R10 R10 K12  ; R10 := R10[0x06d055f9]
172 [-]: MOVE      R11 R0       ; R11 := R0
173 [-]: LOADK     R12 K28      ; R12 := 0.010000
174 [-]: LOADK     R13 K29      ; R13 := 0.150000
175 [-]: CALL      R10 4 0      ; R10,... := R10(R11,R12,R13)
176 [-]: CALL      R7 0 1       ; R7(R8,...)
177 [-]: GETGLOBAL R7 K30       ; R7 := mDiegeticHelper
178 [-]: EQ        1 R7 K31     ; if R7 == nil then PC := 182
179 [-]: JMP       182          ; PC := 182
180 [-]: GETGLOBAL R7 K30       ; R7 := mDiegeticHelper
181 [-]: SETTABLE  R7 K20 K31   ; R7["mCameraSpot"] := nil
182 [-]: RETURN    R0 1         ; return 


; Function #149:
;
; Name:            
; Defined at line: 5243
; #Upvalues:       4
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  12

  1 [-]: NEWTABLE  R1 0 0       ; R1 := {}
  2 [-]: CLOSURE   R2 0         ; R2 := closure(Function #149.1)
  3 [-]: MOVE      R0 R1        ; R0 := R1
  4 [-]: GETGLOBAL R3 K0        ; R3 := _T
  5 [-]: GETTABLE  R3 R3 K1     ; R3 := R3["upgradeItemSlot"]
  6 [-]: GETGLOBAL R4 K0        ; R4 := _T
  7 [-]: GETTABLE  R4 R4 K2     ; R4 := R4["upgradeItemLot"]
  8 [-]: MOVE      R5 R2        ; R5 := R2
  9 [-]: LOADK     R6 K3        ; R6 := "/Lotus/Language/Menu/InstallingExplanation_Windows"
 10 [-]: CALL      R5 2 1       ; R5(R6)
 11 [-]: GETUPVAL  R5 U0        ; R5 := U0
 12 [-]: CALL      R5 1 2       ; R5 := R5()
 13 [-]: TEST      R5 1         ; if R5 then PC := 36
 14 [-]: JMP       36           ; PC := 36
 15 [-]: GETUPVAL  R5 U1        ; R5 := U1
 16 [-]: CALL      R5 1 2       ; R5 := R5()
 17 [-]: TEST      R5 1         ; if R5 then PC := 26
 18 [-]: JMP       26           ; PC := 26
 19 [-]: MOVE      R5 R2        ; R5 := R2
 20 [-]: LOADK     R6 K4        ; R6 := "/Lotus/Language/GameTips/Upgrades_ElementalDamageCombinations"
 21 [-]: CALL      R5 2 1       ; R5(R6)
 22 [-]: MOVE      R5 R2        ; R5 := R2
 23 [-]: LOADK     R6 K5        ; R6 := "/Lotus/Language/GameTips/Upgrades_CapacityMath"
 24 [-]: CALL      R5 2 1       ; R5(R6)
 25 [-]: JMP       33           ; PC := 33
 26 [-]: GETUPVAL  R5 U2        ; R5 := U2
 27 [-]: GETTABLE  R5 R5 K6     ; R5 := R5[0xf7682c88]
 28 [-]: GETGLOBAL R6 K7        ; R6 := 0xae91e43b
 29 [-]: MOVE      R7 R1        ; R7 := R1
 30 [-]: LOADK     R8 K8        ; R8 := "/Lotus/Language/RailjackHints/Avionics_"
 31 [-]: CALL      R5 4 2       ; R5 := R5(R6,R7,R8)
 32 [-]: MOVE      R1 R5        ; R1 := R5
 33 [-]: MOVE      R5 R2        ; R5 := R2
 34 [-]: LOADK     R6 K9        ; R6 := "/Lotus/Language/GameTips/Upgrades_MatchPolarity"
 35 [-]: CALL      R5 2 1       ; R5(R6)
 36 [-]: GETGLOBAL R5 K10       ; R5 := 0x34291f5c
 37 [-]: GETTABLE  R5 R5 K11    ; R5 := R5[0x1467d5f4]
 38 [-]: CALL      R5 1 2       ; R5 := R5()
 39 [-]: TEST      R5 0         ; if not R5 then PC := 48
 40 [-]: JMP       48           ; PC := 48
 41 [-]: GETUPVAL  R5 U1        ; R5 := U1
 42 [-]: CALL      R5 1 2       ; R5 := R5()
 43 [-]: TEST      R5 1         ; if R5 then PC := 48
 44 [-]: JMP       48           ; PC := 48
 45 [-]: MOVE      R5 R2        ; R5 := R2
 46 [-]: LOADK     R6 K12       ; R6 := "/Lotus/Language/GameTips/Upgrades_ModTutorial"
 47 [-]: CALL      R5 2 1       ; R5(R6)
 48 [-]: EQ        0 R4 K14     ; if R4 ~= 1.000000 then PC := 56
 49 [-]: JMP       56           ; PC := 56
 50 [-]: EQ        0 R3 K15     ; if R3 ~= 0.000000 then PC := 56
 51 [-]: JMP       56           ; PC := 56
 52 [-]: MOVE      R5 R2        ; R5 := R2
 53 [-]: LOADK     R6 K16       ; R6 := "/Lotus/Language/GameTips/Upgrades_OrderOfPrecepts"
 54 [-]: CALL      R5 2 1       ; R5(R6)
 55 [-]: JMP       149          ; PC := 149
 56 [-]: GETUPVAL  R5 U0        ; R5 := U0
 57 [-]: CALL      R5 1 2       ; R5 := R5()
 58 [-]: TEST      R5 0         ; if not R5 then PC := 98
 59 [-]: JMP       98           ; PC := 98
 60 [-]: GETGLOBAL R5 K17       ; R5 := 0x7b998233
 61 [-]: GETGLOBAL R6 K18       ; R6 := mCollectionGrid
 62 [-]: CALL      R5 2 2       ; R5 := R5(R6)
 63 [-]: TEST      R5 1         ; if R5 then PC := 88
 64 [-]: JMP       88           ; PC := 88
 65 [-]: GETGLOBAL R5 K18       ; R5 := mCollectionGrid
 66 [-]: GETTABLE  R5 R5 K19    ; R5 := R5["mCategoriesCount"]
 67 [-]: GETUPVAL  R6 U3        ; R6 := U3
 68 [-]: GETTABLE  R6 R6 K20    ; R6 := R6["CategoryId_IMMORTAL"]
 69 [-]: GETTABLE  R5 R5 R6     ; R5 := R5[R6]
 70 [-]: EQ        1 R5 K21     ; if R5 == nil then PC := 88
 71 [-]: JMP       88           ; PC := 88
 72 [-]: GETGLOBAL R5 K18       ; R5 := mCollectionGrid
 73 [-]: GETTABLE  R5 R5 K19    ; R5 := R5["mCategoriesCount"]
 74 [-]: GETUPVAL  R6 U3        ; R6 := U3
 75 [-]: GETTABLE  R6 R6 K20    ; R6 := R6["CategoryId_IMMORTAL"]
 76 [-]: GETTABLE  R5 R5 R6     ; R5 := R5[R6]
 77 [-]: LT        0 K15 R5     ; if 0.000000 >= R5 then PC := 88
 78 [-]: JMP       88           ; PC := 88
 79 [-]: MOVE      R5 R2        ; R5 := R2
 80 [-]: LOADK     R6 K22       ; R6 := "/Lotus/Language/GameTips/Upgrades_ImmortalSlot"
 81 [-]: CALL      R5 2 1       ; R5(R6)
 82 [-]: MOVE      R5 R2        ; R5 := R2
 83 [-]: LOADK     R6 K23       ; R6 := "/Lotus/Language/GameTips/Upgrades_ImmortalCode"
 84 [-]: CALL      R5 2 1       ; R5(R6)
 85 [-]: MOVE      R5 R2        ; R5 := R2
 86 [-]: LOADK     R6 K24       ; R6 := "/Lotus/Language/GameTips/Upgrades_ImmortalDamage"
 87 [-]: CALL      R5 2 1       ; R5(R6)
 88 [-]: MOVE      R5 R2        ; R5 := R2
 89 [-]: LOADK     R6 K25       ; R6 := "/Lotus/Language/GameTips/Upgrades_KnifePurpose"
 90 [-]: CALL      R5 2 1       ; R5(R6)
 91 [-]: MOVE      R5 R2        ; R5 := R2
 92 [-]: LOADK     R6 K26       ; R6 := "/Lotus/Language/GameTips/Upgrades_KnifeMercy"
 93 [-]: CALL      R5 2 1       ; R5(R6)
 94 [-]: MOVE      R5 R2        ; R5 := R2
 95 [-]: LOADK     R6 K27       ; R6 := "/Lotus/Language/GameTips/Upgrades_KnifeHack"
 96 [-]: CALL      R5 2 1       ; R5(R6)
 97 [-]: JMP       149          ; PC := 149
 98 [-]: EQ        0 R3 K15     ; if R3 ~= 0.000000 then PC := 104
 99 [-]: JMP       104          ; PC := 104
100 [-]: MOVE      R5 R2        ; R5 := R2
101 [-]: LOADK     R6 K28       ; R6 := "/Lotus/Language/GameTips/Upgrades_AurasAddCapacity"
102 [-]: CALL      R5 2 1       ; R5(R6)
103 [-]: JMP       149          ; PC := 149
104 [-]: GETUPVAL  R5 U1        ; R5 := U1
105 [-]: CALL      R5 1 2       ; R5 := R5()
106 [-]: TEST      R5 1         ; if R5 then PC := 149
107 [-]: JMP       149          ; PC := 149
108 [-]: EQ        0 R3 K29     ; if R3 ~= 3.000000 then PC := 116
109 [-]: JMP       116          ; PC := 116
110 [-]: MOVE      R5 R2        ; R5 := R2
111 [-]: LOADK     R6 K30       ; R6 := "/Lotus/Language/GameTips/Upgrades_StanceAddCapacity"
112 [-]: CALL      R5 2 1       ; R5(R6)
113 [-]: MOVE      R5 R2        ; R5 := R2
114 [-]: LOADK     R6 K31       ; R6 := "/Lotus/Language/GameTips/Upgrades_Stance"
115 [-]: CALL      R5 2 1       ; R5(R6)
116 [-]: MOVE      R5 R2        ; R5 := R2
117 [-]: LOADK     R6 K32       ; R6 := "/Lotus/Language/GameTips/Upgrades_DifferentDamageDifferentEnemies"
118 [-]: CALL      R5 2 1       ; R5(R6)
119 [-]: MOVE      R5 R2        ; R5 := R2
120 [-]: LOADK     R6 K33       ; R6 := "/Lotus/Language/GameTips/Upgrades_FireDamage"
121 [-]: CALL      R5 2 1       ; R5(R6)
122 [-]: MOVE      R5 R2        ; R5 := R2
123 [-]: LOADK     R6 K34       ; R6 := "/Lotus/Language/GameTips/Upgrades_Electricity"
124 [-]: CALL      R5 2 1       ; R5(R6)
125 [-]: MOVE      R5 R2        ; R5 := R2
126 [-]: LOADK     R6 K35       ; R6 := "/Lotus/Language/GameTips/Upgrades_ColdDamage"
127 [-]: CALL      R5 2 1       ; R5(R6)
128 [-]: MOVE      R5 R2        ; R5 := R2
129 [-]: LOADK     R6 K36       ; R6 := "/Lotus/Language/GameTips/Upgrades_oxinDamage"
130 [-]: CALL      R5 2 1       ; R5(R6)
131 [-]: MOVE      R5 R2        ; R5 := R2
132 [-]: LOADK     R6 K37       ; R6 := "/Lotus/Language/GameTips/Upgrades_BlastCombination"
133 [-]: CALL      R5 2 1       ; R5(R6)
134 [-]: MOVE      R5 R2        ; R5 := R2
135 [-]: LOADK     R6 K38       ; R6 := "/Lotus/Language/GameTips/Upgrades_RadiationCombination"
136 [-]: CALL      R5 2 1       ; R5(R6)
137 [-]: MOVE      R5 R2        ; R5 := R2
138 [-]: LOADK     R6 K39       ; R6 := "/Lotus/Language/GameTips/Upgrades_GasCombination"
139 [-]: CALL      R5 2 1       ; R5(R6)
140 [-]: MOVE      R5 R2        ; R5 := R2
141 [-]: LOADK     R6 K40       ; R6 := "/Lotus/Language/GameTips/Upgrades_MagneticCombination"
142 [-]: CALL      R5 2 1       ; R5(R6)
143 [-]: MOVE      R5 R2        ; R5 := R2
144 [-]: LOADK     R6 K41       ; R6 := "/Lotus/Language/GameTips/Upgrades_ViralCombination"
145 [-]: CALL      R5 2 1       ; R5(R6)
146 [-]: MOVE      R5 R2        ; R5 := R2
147 [-]: LOADK     R6 K42       ; R6 := "/Lotus/Language/GameTips/Upgrades_CorrosiveCombination"
148 [-]: CALL      R5 2 1       ; R5(R6)
149 [-]: GETGLOBAL R5 K43       ; R5 := 0x33bdd652
150 [-]: GETTABLE  R5 R5 K44    ; R5 := R5[0x23d5322f]
151 [-]: MOVE      R6 R0        ; R6 := R0
152 [-]: NEWTABLE  R7 0 3       ; R7 := {}
153 [-]: GETGLOBAL R8 K7        ; R8 := 0xae91e43b
154 [-]: SELF      R8 R8 K46    ; R9 := R8; R8 := R8[0x42b04007]
155 [-]: LOADK     R10 K47      ; R10 := "<WARNING>"
156 [-]: LOADKB    R11 1 0      ; R11 := true
157 [-]: CALL      R8 4 2       ; R8 := R8(R9,R10,R11)
158 [-]: SETTABLE  R7 K45 R8    ; R7["Label"] := R8
159 [-]: SETTABLE  R7 K48 R1    ; R7["Tips"] := R1
160 [-]: SETTABLE  R7 K49 K50   ; R7["Padding"] := -10.000000
161 [-]: CALL      R5 3 1       ; R5(R6,R7)
162 [-]: RETURN    R0 1         ; return 


; Function #149.1:
;
; Name:            
; Defined at line: 5247
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  7

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x33bdd652
  2 [-]: GETTABLE  R1 R1 K1     ; R1 := R1[0x23d5322f]
  3 [-]: GETUPVAL  R2 U0        ; R2 := U0
  4 [-]: GETGLOBAL R3 K2        ; R3 := 0xae91e43b
  5 [-]: SELF      R3 R3 K3     ; R4 := R3; R3 := R3[0x42b04007]
  6 [-]: MOVE      R5 R0        ; R5 := R0
  7 [-]: LOADKB    R6 1 0       ; R6 := true
  8 [-]: CALL      R3 4 0       ; R3,... := R3(R4,R5,R6)
  9 [-]: CALL      R1 0 1       ; R1(R2,...)
 10 [-]: RETURN    R0 1         ; return 


; Function #150:
;
; Name:            
; Defined at line: 5305
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  8

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0xae91e43b
  2 [-]: SELF      R0 R0 K1     ; R1 := R0; R0 := R0[0x42b04007]
  3 [-]: LOADK     R2 K2        ; R2 := "/Lotus/Language/Menu/SearchPrompt"
  4 [-]: LOADKB    R3 0 0       ; R3 := false
  5 [-]: CALL      R0 4 2       ; R0 := R0(R1,R2,R3)
  6 [-]: GETGLOBAL R1 K3        ; R1 := 0x2d0fad09
  7 [-]: LOADK     R2 K4        ; R2 := "Lotus.Interface.Components.ThemedInputField"
  8 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  9 [-]: GETTABLE  R2 R1 K6     ; R2 := R1[0xae6791ba]
 10 [-]: GETGLOBAL R3 K0        ; R3 := 0xae91e43b
 11 [-]: LOADK     R4 K7        ; R4 := "MiddleMenu.SearchBox"
 12 [-]: LOADNIL   R5 R6        ; R5 := R6 := nil
 13 [-]: LOADK     R7 K8        ; R7 := "<MENU_LTHUMB>"
 14 [-]: CALL      R2 6 2       ; R2 := R2(R3,R4,R5,R6,R7)
 15 [-]: SETGLOBAL R2 K5        ; mSearchBox := R2
 16 [-]: GETGLOBAL R2 K5        ; R2 := mSearchBox
 17 [-]: SELF      R2 R2 K9     ; R3 := R2; R2 := R2[0xf87811f6]
 18 [-]: GETGLOBAL R4 K5        ; R4 := mSearchBox
 19 [-]: GETTABLE  R4 R4 K10    ; R4 := R4["TYPE"]
 20 [-]: GETTABLE  R4 R4 K11    ; R4 := R4["PLAIN"]
 21 [-]: MOVE      R5 R0        ; R5 := R0
 22 [-]: MOVE      R6 R0        ; R6 := R0
 23 [-]: CALL      R2 5 1       ; R2(R3,R4,R5,R6)
 24 [-]: GETGLOBAL R2 K5        ; R2 := mSearchBox
 25 [-]: SETTABLE  R2 K12 K13   ; R2["mMinSize"] := 333.000000
 26 [-]: GETGLOBAL R2 K5        ; R2 := mSearchBox
 27 [-]: SETTABLE  R2 K14 K13   ; R2["mMaxSize"] := 333.000000
 28 [-]: GETGLOBAL R2 K5        ; R2 := mSearchBox
 29 [-]: SETTABLE  R2 K15 K16   ; R2["mTextBuffer"] := 4.000000
 30 [-]: GETGLOBAL R2 K5        ; R2 := mSearchBox
 31 [-]: GETGLOBAL R3 K18       ; R3 := 0x0032441c
 32 [-]: GETTABLE  R3 R3 K19    ; R3 := R3["UITexture_Search"]
 33 [-]: SETTABLE  R2 K17 R3    ; R2["mAltButtonIcon"] := R3
 34 [-]: GETGLOBAL R2 K5        ; R2 := mSearchBox
 35 [-]: SETTABLE  R2 K20 K21   ; R2["mAltButtonVisible"] := true
 36 [-]: GETGLOBAL R2 K5        ; R2 := mSearchBox
 37 [-]: SETTABLE  R2 K22 K23   ; R2["mUnfocusedUnderlineColorOverride"] := nil
 38 [-]: GETGLOBAL R2 K5        ; R2 := mSearchBox
 39 [-]: GETGLOBAL R3 K5        ; R3 := mSearchBox
 40 [-]: GETTABLE  R3 R3 K25    ; R3 := R3["InputFieldTextChanged"]
 41 [-]: SETTABLE  R2 K24 R3    ; R2["BaseInputFieldTextChanged"] := R3
 42 [-]: GETGLOBAL R2 K5        ; R2 := mSearchBox
 43 [-]: CLOSURE   R3 0         ; R3 := closure(Function #150.1)
 44 [-]: SETTABLE  R2 K25 R3    ; R2["InputFieldTextChanged"] := R3
 45 [-]: GETGLOBAL R2 K5        ; R2 := mSearchBox
 46 [-]: GETGLOBAL R3 K5        ; R3 := mSearchBox
 47 [-]: GETTABLE  R3 R3 K27    ; R3 := R3["OnGamepadTransition"]
 48 [-]: SETTABLE  R2 K26 R3    ; R2["BaseOnGamepadTransition"] := R3
 49 [-]: GETGLOBAL R2 K5        ; R2 := mSearchBox
 50 [-]: CLOSURE   R3 1         ; R3 := closure(Function #150.2)
 51 [-]: SETTABLE  R2 K27 R3    ; R2["OnGamepadTransition"] := R3
 52 [-]: GETGLOBAL R2 K5        ; R2 := mSearchBox
 53 [-]: GETGLOBAL R3 K5        ; R3 := mSearchBox
 54 [-]: GETTABLE  R3 R3 K29    ; R3 := R3["SetClearHintVisible"]
 55 [-]: SETTABLE  R2 K28 R3    ; R2["BaseSetClearHintVisible"] := R3
 56 [-]: GETGLOBAL R2 K5        ; R2 := mSearchBox
 57 [-]: CLOSURE   R3 2         ; R3 := closure(Function #150.3)
 58 [-]: SETTABLE  R2 K29 R3    ; R2["SetClearHintVisible"] := R3
 59 [-]: GETGLOBAL R2 K5        ; R2 := mSearchBox
 60 [-]: SELF      R2 R2 K30    ; R3 := R2; R2 := R2[0x6e6721d3]
 61 [-]: LOADK     R4 K2        ; R4 := "/Lotus/Language/Menu/SearchPrompt"
 62 [-]: CALL      R2 3 1       ; R2(R3,R4)
 63 [-]: GETUPVAL  R2 U0        ; R2 := U0
 64 [-]: GETTABLE  R2 R2 K31    ; R2 := R2[0x06d055f9]
 65 [-]: GETGLOBAL R3 K32       ; R3 := mIsDiegetic
 66 [-]: GETGLOBAL R4 K18       ; R4 := 0x0032441c
 67 [-]: GETTABLE  R4 R4 K33    ; R4 := R4["UIMaterial_SmoothEdge"]
 68 [-]: GETGLOBAL R5 K18       ; R5 := 0x0032441c
 69 [-]: GETTABLE  R5 R5 K34    ; R5 := R5["UIMaterial_SmoothEdgeNoDepthTest"]
 70 [-]: CALL      R2 4 2       ; R2 := R2(R3,R4,R5)
 71 [-]: GETGLOBAL R3 K0        ; R3 := 0xae91e43b
 72 [-]: SELF      R3 R3 K35    ; R4 := R3; R3 := R3[0xd5181643]
 73 [-]: LOADK     R5 K36       ; R5 := "MiddleMenu.SearchBox.Underline"
 74 [-]: MOVE      R6 R2        ; R6 := R2
 75 [-]: CALL      R3 4 1       ; R3(R4,R5,R6)
 76 [-]: GETGLOBAL R3 K0        ; R3 := 0xae91e43b
 77 [-]: SELF      R3 R3 K35    ; R4 := R3; R3 := R3[0xd5181643]
 78 [-]: LOADK     R5 K37       ; R5 := "MiddleMenu.SearchBox.Underline2"
 79 [-]: MOVE      R6 R2        ; R6 := R2
 80 [-]: CALL      R3 4 1       ; R3(R4,R5,R6)
 81 [-]: GETGLOBAL R3 K5        ; R3 := mSearchBox
 82 [-]: SELF      R3 R3 K38    ; R4 := R3; R3 := R3[0x71e9ac81]
 83 [-]: CALL      R3 2 1       ; R3(R4)
 84 [-]: RETURN    R0 1         ; return 


; Function #150.1:
;
; Name:            
; Defined at line: 5318
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  11

  1 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["mLabel"]
  2 [-]: SELF      R3 R0 K1     ; R4 := R0; R3 := R0[0x0ebd9e58]
  3 [-]: MOVE      R5 R1        ; R5 := R1
  4 [-]: CALL      R3 3 1       ; R3(R4,R5)
  5 [-]: GETTABLE  R3 R0 K0     ; R3 := R0["mLabel"]
  6 [-]: EQ        0 R3 K2      ; if R3 ~= "" then PC := 12
  7 [-]: JMP       12           ; PC := 12
  8 [-]: GETGLOBAL R3 K3        ; R3 := 0x0032441c
  9 [-]: GETTABLE  R3 R3 K4     ; R3 := R3["UITexture_Search"]
 10 [-]: TEST      R3 1         ; if R3 then PC := 14
 11 [-]: JMP       14           ; PC := 14
 12 [-]: GETGLOBAL R3 K3        ; R3 := 0x0032441c
 13 [-]: GETTABLE  R3 R3 K5     ; R3 := R3["UITexture_ClearSearch"]
 14 [-]: GETTABLE  R4 R0 K6     ; R4 := R0["mAltButtonicon"]
 15 [-]: EQ        1 R4 R3      ; if R4 == R3 then PC := 25
 16 [-]: JMP       25           ; PC := 25
 17 [-]: SETTABLE  R0 K6 R3     ; R0["mAltButtonicon"] := R3
 18 [-]: GETTABLE  R4 R0 K7     ; R4 := R0["mMovie"]
 19 [-]: SELF      R4 R4 K8     ; R5 := R4; R4 := R4[0x1cb415c1]
 20 [-]: GETTABLE  R6 R0 K9     ; R6 := R0["mClipName"]
 21 [-]: LOADK     R7 K10       ; R7 := ".BtnAlt"
 22 [-]: CONCAT    R6 R6 R7     ; R6 := R6 .. R7
 23 [-]: MOVE      R7 R3        ; R7 := R3
 24 [-]: CALL      R4 4 1       ; R4(R5,R6,R7)
 25 [-]: GETTABLE  R4 R0 K0     ; R4 := R0["mLabel"]
 26 [-]: EQ        1 R2 R4      ; if R2 == R4 then PC := 47
 27 [-]: JMP       47           ; PC := 47
 28 [-]: GETGLOBAL R4 K11       ; R4 := mCollectionGrid
 29 [-]: EQ        1 R4 K12     ; if R4 == nil then PC := 47
 30 [-]: JMP       47           ; PC := 47
 31 [-]: GETGLOBAL R4 K11       ; R4 := mCollectionGrid
 32 [-]: GETTABLE  R4 R4 K13    ; R4 := R4["mSavedScroll"]
 33 [-]: EQ        0 R4 K12     ; if R4 ~= nil then PC := 47
 34 [-]: JMP       47           ; PC := 47
 35 [-]: GETGLOBAL R4 K11       ; R4 := mCollectionGrid
 36 [-]: SETTABLE  R4 K14 K15   ; R4["mMuteGridOpenSound"] := true
 37 [-]: GETGLOBAL R4 K11       ; R4 := mCollectionGrid
 38 [-]: SELF      R4 R4 K16    ; R5 := R4; R4 := R4[0x71e9ac81]
 39 [-]: LOADNIL   R6 R6        ; R6 := nil
 40 [-]: LOADKB    R7 1 0       ; R7 := true
 41 [-]: LOADKB    R8 1 0       ; R8 := true
 42 [-]: LOADNIL   R9 R9        ; R9 := nil
 43 [-]: LOADKB    R10 1 0      ; R10 := true
 44 [-]: CALL      R4 7 1       ; R4(R5,R6,R7,R8,R9,R10)
 45 [-]: GETGLOBAL R4 K11       ; R4 := mCollectionGrid
 46 [-]: SETTABLE  R4 K14 K17   ; R4["mMuteGridOpenSound"] := false
 47 [-]: RETURN    R0 1         ; return 


; Function #150.2:
;
; Name:            
; Defined at line: 5334
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  8

  1 [-]: SELF      R1 R0 K0     ; R2 := R0; R1 := R0[0x7e4d43ce]
  2 [-]: CALL      R1 2 1       ; R1(R2)
  3 [-]: GETGLOBAL R1 K1        ; R1 := 0x34291f5c
  4 [-]: GETTABLE  R1 R1 K2     ; R1 := R1[0x1467d5f4]
  5 [-]: CALL      R1 1 2       ; R1 := R1()
  6 [-]: NOT       R1 R1        ; R1 :=  R1
  7 [-]: SETTABLE  R0 K3 R1     ; R0["mAltButtonVisible"] := R1
  8 [-]: GETGLOBAL R2 K4        ; R2 := 0xae91e43b
  9 [-]: SELF      R2 R2 K5     ; R3 := R2; R2 := R2[0xc0a3774b]
 10 [-]: GETTABLE  R4 R0 K6     ; R4 := R0["mClipName"]
 11 [-]: LOADK     R5 K7        ; R5 := "BtnAlt"
 12 [-]: CONST     R6 11        ; R6 := 11.000000
 13 [-]: MOVE      R7 R1        ; R7 := R1
 14 [-]: CALL      R2 6 1       ; R2(R3,R4,R5,R6,R7)
 15 [-]: RETURN    R0 1         ; return 


; Function #150.3:
;
; Name:            
; Defined at line: 5342
; #Upvalues:       0
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  7

  1 [-]: SELF      R2 R0 K0     ; R3 := R0; R2 := R0[0x464b3347]
  2 [-]: MOVE      R4 R1        ; R4 := R1
  3 [-]: CALL      R2 3 1       ; R2(R3,R4)
  4 [-]: GETGLOBAL R2 K1        ; R2 := 0xae91e43b
  5 [-]: SELF      R2 R2 K2     ; R3 := R2; R2 := R2[0xaade900e]
  6 [-]: LOADK     R4 K3        ; R4 := "InventorySelector.Stats"
  7 [-]: CONST     R5 11        ; R5 := 11.000000
  8 [-]: NOT       R6 R1        ; R6 :=  R1
  9 [-]: CALL      R2 5 1       ; R2(R3,R4,R5,R6)
 10 [-]: RETURN    R0 1         ; return 


; Function #151:
;
; Name:            
; Defined at line: 5353
; #Upvalues:       1
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  18

  1 [-]: GETGLOBAL R4 K0        ; R4 := 0x7b998233
  2 [-]: GETUPVAL  R5 U0        ; R5 := U0
  3 [-]: CALL      R4 2 2       ; R4 := R4(R5)
  4 [-]: TEST      R4 1         ; if R4 then PC := 12
  5 [-]: JMP       12           ; PC := 12
  6 [-]: GETGLOBAL R4 K0        ; R4 := 0x7b998233
  7 [-]: GETUPVAL  R5 U0        ; R5 := U0
  8 [-]: GETTABLE  R5 R5 K1     ; R5 := R5["item"]
  9 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 10 [-]: NOT       R4 R4        ; R4 :=  R4
 11 [-]: JMP       14           ; PC := 14
 12 [-]: LOADKB    R4 0 1       ; R4 := false; PC := 13
 13 [-]: LOADKB    R4 1 0       ; R4 := true
 14 [-]: TEST      R4 0         ; if not R4 then PC := 80
 15 [-]: JMP       80           ; PC := 80
 16 [-]: GETGLOBAL R5 K0        ; R5 := 0x7b998233
 17 [-]: GETUPVAL  R6 U0        ; R6 := U0
 18 [-]: GETTABLE  R6 R6 K1     ; R6 := R6["item"]
 19 [-]: SELF      R6 R6 K2     ; R7 := R6; R6 := R6[0xd17bf72c]
 20 [-]: CALL      R6 2 0       ; R6,... := R6(R7)
 21 [-]: CALL      R5 0 2       ; R5 := R5(R6,...)
 22 [-]: TEST      R5 1         ; if R5 then PC := 80
 23 [-]: JMP       80           ; PC := 80
 24 [-]: GETUPVAL  R5 U0        ; R5 := U0
 25 [-]: GETTABLE  R5 R5 K1     ; R5 := R5["item"]
 26 [-]: SELF      R5 R5 K3     ; R6 := R5; R5 := R5[0xdbfbf6c0]
 27 [-]: CONST     R7 5         ; R7 := 5.000000
 28 [-]: CALL      R5 3 2       ; R5 := R5(R6,R7)
 29 [-]: TEST      R5 1         ; if R5 then PC := 80
 30 [-]: JMP       80           ; PC := 80
 31 [-]: EQ        0 R0 K5      ; if R0 ~= 2.000000 then PC := 37
 32 [-]: JMP       37           ; PC := 37
 33 [-]: GETGLOBAL R5 K6        ; R5 := mArcaneInfo
 34 [-]: GETTABLE  R5 R5 K7     ; R5 := R5["HasGildArcaneSlot"]
 35 [-]: TEST      R5 1         ; if R5 then PC := 43
 36 [-]: JMP       43           ; PC := 43
 37 [-]: EQ        0 R0 K8      ; if R0 ~= 1.000000 then PC := 80
 38 [-]: JMP       80           ; PC := 80
 39 [-]: GETGLOBAL R5 K6        ; R5 := mArcaneInfo
 40 [-]: GETTABLE  R5 R5 K7     ; R5 := R5["HasGildArcaneSlot"]
 41 [-]: TEST      R5 1         ; if R5 then PC := 80
 42 [-]: JMP       80           ; PC := 80
 43 [-]: LOADK     R2 K9        ; R2 := "/Lotus/Language/Menu/ArcaneSlot_RequiresAperture"
 44 [-]: GETGLOBAL R5 K10       ; R5 := _T
 45 [-]: GETTABLE  R5 R5 K11    ; R5 := R5["upgradeItemSlot"]
 46 [-]: EQ        1 R5 K12     ; if R5 == nil then PC := 180
 47 [-]: JMP       180          ; PC := 180
 48 [-]: EQ        0 R5 K5      ; if R5 ~= 2.000000 then PC := 64
 49 [-]: JMP       64           ; PC := 64
 50 [-]: GETGLOBAL R6 K13       ; R6 := 0xae91e43b
 51 [-]: SELF      R6 R6 K14    ; R7 := R6; R6 := R6[0x42b04007]
 52 [-]: LOADK     R8 K15       ; R8 := "/Lotus/Language/Categories/RIFLE"
 53 [-]: LOADKB    R9 0 0       ; R9 := false
 54 [-]: CALL      R6 4 2       ; R6 := R6(R7,R8,R9)
 55 [-]: GETGLOBAL R7 K13       ; R7 := 0xae91e43b
 56 [-]: SELF      R7 R7 K14    ; R8 := R7; R7 := R7[0x42b04007]
 57 [-]: LOADK     R9 K16       ; R9 := "/Lotus/Language/Menu/ArcaneSlot_ItemName"
 58 [-]: LOADKB    R10 0 0      ; R10 := false
 59 [-]: NEWTABLE  R11 0 1      ; R11 := {}
 60 [-]: SETTABLE  R11 K17 R6   ; R11["ITEM"] := R6
 61 [-]: CALL      R7 5 2       ; R7 := R7(R8,R9,R10,R11)
 62 [-]: MOVE      R3 R7        ; R3 := R7
 63 [-]: JMP       180          ; PC := 180
 64 [-]: EQ        0 R5 K8      ; if R5 ~= 1.000000 then PC := 180
 65 [-]: JMP       180          ; PC := 180
 66 [-]: GETGLOBAL R7 K13       ; R7 := 0xae91e43b
 67 [-]: SELF      R7 R7 K14    ; R8 := R7; R7 := R7[0x42b04007]
 68 [-]: LOADK     R9 K18       ; R9 := "/Lotus/Language/Categories/HAND_GUN"
 69 [-]: LOADKB    R10 0 0      ; R10 := false
 70 [-]: CALL      R7 4 2       ; R7 := R7(R8,R9,R10)
 71 [-]: GETGLOBAL R8 K13       ; R8 := 0xae91e43b
 72 [-]: SELF      R8 R8 K14    ; R9 := R8; R8 := R8[0x42b04007]
 73 [-]: LOADK     R10 K16      ; R10 := "/Lotus/Language/Menu/ArcaneSlot_ItemName"
 74 [-]: LOADKB    R11 0 0      ; R11 := false
 75 [-]: NEWTABLE  R12 0 1      ; R12 := {}
 76 [-]: SETTABLE  R12 K17 R7   ; R12["ITEM"] := R7
 77 [-]: CALL      R8 5 2       ; R8 := R8(R9,R10,R11,R12)
 78 [-]: MOVE      R3 R8        ; R3 := R8
 79 [-]: JMP       180          ; PC := 180
 80 [-]: EQ        0 R0 K8      ; if R0 ~= 1.000000 then PC := 119
 81 [-]: JMP       119          ; PC := 119
 82 [-]: TEST      R4 0         ; if not R4 then PC := 119
 83 [-]: JMP       119          ; PC := 119
 84 [-]: GETUPVAL  R8 U0        ; R8 := U0
 85 [-]: GETTABLE  R8 R8 K1     ; R8 := R8["item"]
 86 [-]: SELF      R8 R8 K19    ; R9 := R8; R8 := R8[0x81f3a598]
 87 [-]: CALL      R8 2 2       ; R8 := R8(R9)
 88 [-]: TEST      R8 0         ; if not R8 then PC := 119
 89 [-]: JMP       119          ; PC := 119
 90 [-]: GETUPVAL  R8 U0        ; R8 := U0
 91 [-]: GETTABLE  R8 R8 K1     ; R8 := R8["item"]
 92 [-]: SELF      R8 R8 K20    ; R9 := R8; R8 := R8[0x6db2bc2b]
 93 [-]: CALL      R8 2 2       ; R8 := R8(R9)
 94 [-]: TEST      R8 1         ; if R8 then PC := 119
 95 [-]: JMP       119          ; PC := 119
 96 [-]: LOADK     R2 K21       ; R2 := "/Lotus/Language/Menu/ArcaneSlot_UngildedZaw"
 97 [-]: LOADK     R8 K22       ; R8 := ""
 98 [-]: GETGLOBAL R9 K10       ; R9 := _T
 99 [-]: GETTABLE  R9 R9 K11    ; R9 := R9["upgradeItemSlot"]
100 [-]: EQ        0 R9 K23     ; if R9 ~= 3.000000 then PC := 104
101 [-]: JMP       104          ; PC := 104
102 [-]: LOADK     R8 K24       ; R8 := "/Lotus/Language/OstronCrafting/Zaw_Singular"
103 [-]: JMP       105          ; PC := 105
104 [-]: LOADK     R8 K25       ; R8 := "/Lotus/Language/SolarisVenus/Kitgun_Singular"
105 [-]: GETGLOBAL R9 K13       ; R9 := 0xae91e43b
106 [-]: SELF      R9 R9 K14    ; R10 := R9; R9 := R9[0x42b04007]
107 [-]: LOADK     R11 K21      ; R11 := "/Lotus/Language/Menu/ArcaneSlot_UngildedZaw"
108 [-]: LOADKB    R12 0 0      ; R12 := false
109 [-]: NEWTABLE  R13 0 1      ; R13 := {}
110 [-]: GETGLOBAL R14 K13      ; R14 := 0xae91e43b
111 [-]: SELF      R14 R14 K14  ; R15 := R14; R14 := R14[0x42b04007]
112 [-]: MOVE      R16 R8       ; R16 := R8
113 [-]: LOADKB    R17 0 0      ; R17 := false
114 [-]: CALL      R14 4 2      ; R14 := R14(R15,R16,R17)
115 [-]: SETTABLE  R13 K26 R14  ; R13["TYPE"] := R14
116 [-]: CALL      R9 5 2       ; R9 := R9(R10,R11,R12,R13)
117 [-]: MOVE      R2 R9        ; R2 := R9
118 [-]: JMP       180          ; PC := 180
119 [-]: GETGLOBAL R9 K6        ; R9 := mArcaneInfo
120 [-]: GETTABLE  R9 R9 K27    ; R9 := R9["HasValidArcane"]
121 [-]: TEST      R9 1         ; if R9 then PC := 171
122 [-]: JMP       171          ; PC := 171
123 [-]: TEST      R1 0         ; if not R1 then PC := 127
124 [-]: JMP       127          ; PC := 127
125 [-]: LOADK     R2 K28       ; R2 := "/Lotus/Language/Menu/NoAmps"
126 [-]: JMP       180          ; PC := 180
127 [-]: LOADK     R9 K22       ; R9 := ""
128 [-]: TEST      R4 0         ; if not R4 then PC := 160
129 [-]: JMP       160          ; PC := 160
130 [-]: GETUPVAL  R10 U0       ; R10 := U0
131 [-]: GETTABLE  R10 R10 K1   ; R10 := R10["item"]
132 [-]: SELF      R10 R10 K19  ; R11 := R10; R10 := R10[0x81f3a598]
133 [-]: CALL      R10 2 2      ; R10 := R10(R11)
134 [-]: TEST      R10 1        ; if R10 then PC := 160
135 [-]: JMP       160          ; PC := 160
136 [-]: GETGLOBAL R10 K10      ; R10 := _T
137 [-]: GETTABLE  R10 R10 K11  ; R10 := R10["upgradeItemSlot"]
138 [-]: EQ        0 R10 K29    ; if R10 ~= 0.000000 then PC := 142
139 [-]: JMP       142          ; PC := 142
140 [-]: LOADK     R9 K30       ; R9 := "NoAmpSuit"
141 [-]: JMP       167          ; PC := 167
142 [-]: GETGLOBAL R10 K10      ; R10 := _T
143 [-]: GETTABLE  R10 R10 K11  ; R10 := R10["upgradeItemSlot"]
144 [-]: EQ        0 R10 K23    ; if R10 ~= 3.000000 then PC := 148
145 [-]: JMP       148          ; PC := 148
146 [-]: LOADK     R9 K31       ; R9 := "NoMeleeArcane"
147 [-]: JMP       167          ; PC := 167
148 [-]: GETGLOBAL R10 K10      ; R10 := _T
149 [-]: GETTABLE  R10 R10 K11  ; R10 := R10["upgradeItemSlot"]
150 [-]: EQ        0 R10 K5     ; if R10 ~= 2.000000 then PC := 154
151 [-]: JMP       154          ; PC := 154
152 [-]: LOADK     R9 K32       ; R9 := "NoRifleArcane"
153 [-]: JMP       167          ; PC := 167
154 [-]: GETGLOBAL R10 K10      ; R10 := _T
155 [-]: GETTABLE  R10 R10 K11  ; R10 := R10["upgradeItemSlot"]
156 [-]: EQ        0 R10 K8     ; if R10 ~= 1.000000 then PC := 167
157 [-]: JMP       167          ; PC := 167
158 [-]: LOADK     R9 K33       ; R9 := "NoPistolArcane"
159 [-]: JMP       167          ; PC := 167
160 [-]: GETGLOBAL R10 K10      ; R10 := _T
161 [-]: GETTABLE  R10 R10 K11  ; R10 := R10["upgradeItemSlot"]
162 [-]: EQ        0 R10 K23    ; if R10 ~= 3.000000 then PC := 166
163 [-]: JMP       166          ; PC := 166
164 [-]: LOADK     R9 K34       ; R9 := "NoAmpZaw"
165 [-]: JMP       167          ; PC := 167
166 [-]: LOADK     R9 K35       ; R9 := "NoAmpKitgun"
167 [-]: LOADK     R10 K36      ; R10 := "/Lotus/Language/Menu/"
168 [-]: MOVE      R11 R9       ; R11 := R9
169 [-]: CONCAT    R2 R10 R11   ; R2 := R10 .. R11
170 [-]: JMP       180          ; PC := 180
171 [-]: GETGLOBAL R10 K6       ; R10 := mArcaneInfo
172 [-]: GETTABLE  R10 R10 K37  ; R10 := R10["HasArcaneHelmet"]
173 [-]: TEST      R10 0        ; if not R10 then PC := 180
174 [-]: JMP       180          ; PC := 180
175 [-]: EQ        0 R0 K5      ; if R0 ~= 2.000000 then PC := 180
176 [-]: JMP       180          ; PC := 180
177 [-]: TEST      R1 0         ; if not R1 then PC := 180
178 [-]: JMP       180          ; PC := 180
179 [-]: LOADK     R2 K38       ; R2 := "/Lotus/Language/Menu/ArcaneSlot_EquipError_Short"
180 [-]: MOVE      R10 R2       ; R10 := R2
181 [-]: MOVE      R11 R3       ; R11 := R3
182 [-]: RETURN    R10 3        ; return R10,R11
183 [-]: RETURN    R0 1         ; return 


; Function #152:
;
; Name:            
; Defined at line: 5415
; #Upvalues:       6
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  26

  1 [-]: EQ        0 R0 K0      ; if R0 ~= nil then PC := 4
  2 [-]: JMP       4            ; PC := 4
  3 [-]: RETURN    R0 1         ; return 
  4 [-]: LOADK     R2 K1        ; R2 := "Installed.ArcaneSlot"
  5 [-]: GETGLOBAL R3 K2        ; R3 := 0x64fb1586
  6 [-]: MOVE      R4 R0        ; R4 := R0
  7 [-]: CALL      R3 2 2       ; R3 := R3(R4)
  8 [-]: CONCAT    R2 R2 R3     ; R2 := R2 .. R3
  9 [-]: GETGLOBAL R3 K3        ; R3 := mArcaneInfo
 10 [-]: GETTABLE  R3 R3 K4     ; R3 := R3["HiddenSlot"]
 11 [-]: EQ        1 R3 K0      ; if R3 == nil then PC := 17
 12 [-]: JMP       17           ; PC := 17
 13 [-]: GETGLOBAL R3 K3        ; R3 := mArcaneInfo
 14 [-]: GETTABLE  R3 R3 K4     ; R3 := R3["HiddenSlot"]
 15 [-]: EQ        1 R3 R0      ; if R3 == R0 then PC := 18
 16 [-]: JMP       18           ; PC := 18
 17 [-]: LOADKB    R3 0 1       ; R3 := false; PC := 18
 18 [-]: LOADKB    R3 1 0       ; R3 := true
 19 [-]: GETGLOBAL R4 K5        ; R4 := 0xae91e43b
 20 [-]: SELF      R4 R4 K6     ; R5 := R4; R4 := R4[0xaade900e]
 21 [-]: MOVE      R6 R2        ; R6 := R2
 22 [-]: CONST     R7 11        ; R7 := 11.000000
 23 [-]: NOT       R8 R3        ; R8 :=  R3
 24 [-]: CALL      R4 5 1       ; R4(R5,R6,R7,R8)
 25 [-]: TEST      R3 0         ; if not R3 then PC := 28
 26 [-]: JMP       28           ; PC := 28
 27 [-]: RETURN    R0 1         ; return 
 28 [-]: TEST      R1 0         ; if not R1 then PC := 33
 29 [-]: JMP       33           ; PC := 33
 30 [-]: GETGLOBAL R4 K3        ; R4 := mArcaneInfo
 31 [-]: SETTABLE  R4 K7 R0     ; R4["FocusedSlot"] := R0
 32 [-]: JMP       39           ; PC := 39
 33 [-]: GETGLOBAL R4 K3        ; R4 := mArcaneInfo
 34 [-]: GETTABLE  R4 R4 K7     ; R4 := R4["FocusedSlot"]
 35 [-]: EQ        0 R4 R0      ; if R4 ~= R0 then PC := 39
 36 [-]: JMP       39           ; PC := 39
 37 [-]: GETGLOBAL R4 K3        ; R4 := mArcaneInfo
 38 [-]: SETTABLE  R4 K7 K0     ; R4["FocusedSlot"] := nil
 39 [-]: GETGLOBAL R4 K8        ; R4 := _T
 40 [-]: SETTABLE  R4 K9 K0     ; R4["InfoPopup_Data"] := nil
 41 [-]: GETGLOBAL R4 K8        ; R4 := _T
 42 [-]: SETTABLE  R4 K10 K0    ; R4["InfoPopup_Grid"] := nil
 43 [-]: GETGLOBAL R4 K3        ; R4 := mArcaneInfo
 44 [-]: GETTABLE  R4 R4 K11    ; R4 := R4["Arcanes"]
 45 [-]: GETTABLE  R4 R4 R0     ; R4 := R4[R0]
 46 [-]: GETGLOBAL R5 K12       ; R5 := 0x7b998233
 47 [-]: GETTABLE  R6 R4 K13    ; R6 := R4["mItemType"]
 48 [-]: CALL      R5 2 2       ; R5 := R5(R6)
 49 [-]: LOADNIL   R6 R6        ; R6 := nil
 50 [-]: LOADK     R7 K14       ; R7 := ""
 51 [-]: GETUPVAL  R8 U0        ; R8 := U0
 52 [-]: GETTABLE  R8 R8 K15    ; R8 := R8[0x06d055f9]
 53 [-]: MOVE      R9 R5        ; R9 := R5
 54 [-]: CONST     R10 50       ; R10 := 50.000000
 55 [-]: CONST     R11 100      ; R11 := 100.000000
 56 [-]: CALL      R8 4 2       ; R8 := R8(R9,R10,R11)
 57 [-]: GETUPVAL  R9 U0        ; R9 := U0
 58 [-]: GETTABLE  R9 R9 K16    ; R9 := R9[0x9f57dd7d]
 59 [-]: GETGLOBAL R10 K17      ; R10 := mColors
 60 [-]: GETTABLE  R10 R10 K18  ; R10 := R10["FloatingContent"]
 61 [-]: CALL      R9 2 2       ; R9 := R9(R10)
 62 [-]: TEST      R5 0         ; if not R5 then PC := 91
 63 [-]: JMP       91           ; PC := 91
 64 [-]: GETGLOBAL R10 K5       ; R10 := 0xae91e43b
 65 [-]: SELF      R10 R10 K19  ; R11 := R10; R10 := R10[0xef99134f]
 66 [-]: MOVE      R12 R2       ; R12 := R2
 67 [-]: LOADK     R13 K20      ; R13 := ".Image"
 68 [-]: CONCAT    R12 R12 R13  ; R12 := R12 .. R13
 69 [-]: GETGLOBAL R13 K21      ; R13 := 0xcf770dcf
 70 [-]: LOADNIL   R14 R14      ; R14 := nil
 71 [-]: CALL      R10 5 1      ; R10(R11,R12,R13,R14)
 72 [-]: GETUPVAL  R10 U0       ; R10 := U0
 73 [-]: GETTABLE  R10 R10 K15  ; R10 := R10[0x06d055f9]
 74 [-]: MOVE      R11 R1       ; R11 := R1
 75 [-]: GETGLOBAL R12 K22      ; R12 := 0x2028950c
 76 [-]: GETTABLE  R12 R12 K23  ; R12 := R12[1.000000]
 77 [-]: LOADNIL   R13 R13      ; R13 := nil
 78 [-]: CALL      R10 4 2      ; R10 := R10(R11,R12,R13)
 79 [-]: MOVE      R6 R10       ; R6 := R10
 80 [-]: LOADK     R10 K24      ; R10 := "<font color=\""
 81 [-]: MOVE      R11 R9       ; R11 := R9
 82 [-]: LOADK     R12 K25      ; R12 := "\"><b>"
 83 [-]: GETGLOBAL R13 K5       ; R13 := 0xae91e43b
 84 [-]: SELF      R13 R13 K26  ; R14 := R13; R13 := R13[0x42b04007]
 85 [-]: LOADK     R15 K27      ; R15 := "/Lotus/Language/Menu/ArcaneManager_EmptySlot"
 86 [-]: LOADKB    R16 0 0      ; R16 := false
 87 [-]: CALL      R13 4 2      ; R13 := R13(R14,R15,R16)
 88 [-]: LOADK     R14 K28      ; R14 := "</b></font>"
 89 [-]: CONCAT    R7 R10 R14   ; R7 := R10 .. R11 .. R12 .. R13 .. R14
 90 [-]: JMP       188          ; PC := 188
 91 [-]: GETUPVAL  R10 U1       ; R10 := U1
 92 [-]: SELF      R10 R10 K29  ; R11 := R10; R10 := R10[0x105074fb]
 93 [-]: GETTABLE  R12 R4 K13   ; R12 := R4["mItemType"]
 94 [-]: CALL      R10 3 2      ; R10 := R10(R11,R12)
 95 [-]: GETGLOBAL R11 K12      ; R11 := 0x7b998233
 96 [-]: MOVE      R12 R10      ; R12 := R10
 97 [-]: CALL      R11 2 2      ; R11 := R11(R12)
 98 [-]: TEST      R11 1        ; if R11 then PC := 188
 99 [-]: JMP       188          ; PC := 188
100 [-]: TEST      R1 0         ; if not R1 then PC := 108
101 [-]: JMP       108          ; PC := 108
102 [-]: GETTABLE  R11 R4 K30   ; R11 := R4["mInstance"]
103 [-]: SELF      R11 R11 K31  ; R12 := R11; R11 := R11[0xb24acced]
104 [-]: CALL      R11 2 2      ; R11 := R11(R12)
105 [-]: ADD       R11 R11 K32  ; R11 := R11 + 2.000000
106 [-]: GETGLOBAL R12 K22      ; R12 := 0x2028950c
107 [-]: GETTABLE  R6 R12 R11   ; R6 := R12[R11]
108 [-]: GETGLOBAL R12 K5       ; R12 := 0xae91e43b
109 [-]: SELF      R12 R12 K26  ; R13 := R12; R12 := R12[0x42b04007]
110 [-]: SELF      R14 R10 K33  ; R15 := R10; R14 := R10[0xd3a9d01f]
111 [-]: CALL      R14 2 2      ; R14 := R14(R15)
112 [-]: SELF      R14 R14 K34  ; R15 := R14; R14 := R14[0x6d604ba7]
113 [-]: CALL      R14 2 2      ; R14 := R14(R15)
114 [-]: LOADKB    R15 0 0      ; R15 := false
115 [-]: CALL      R12 4 2      ; R12 := R12(R13,R14,R15)
116 [-]: GETUPVAL  R13 U2       ; R13 := U2
117 [-]: GETTABLE  R13 R13 K35  ; R13 := R13[0xc6305b1a]
118 [-]: MOVE      R14 R4       ; R14 := R4
119 [-]: CALL      R13 2 3      ; R13,R14 := R13(R14)
120 [-]: LOADK     R15 K24      ; R15 := "<font color=\""
121 [-]: MOVE      R16 R9       ; R16 := R9
122 [-]: LOADK     R17 K25      ; R17 := "\"><b>"
123 [-]: GETUPVAL  R18 U3       ; R18 := U3
124 [-]: GETTABLE  R18 R18 K36  ; R18 := R18[0x82d378f3]
125 [-]: MOVE      R19 R12      ; R19 := R12
126 [-]: MOVE      R20 R13      ; R20 := R13
127 [-]: MOVE      R21 R14      ; R21 := R14
128 [-]: GETGLOBAL R22 K5       ; R22 := 0xae91e43b
129 [-]: NEWTABLE  R23 0 0      ; R23 := {}
130 [-]: CALL      R18 6 2      ; R18 := R18(R19,R20,R21,R22,R23)
131 [-]: LOADK     R19 K28      ; R19 := "</b></font>"
132 [-]: CONCAT    R7 R15 R19   ; R7 := R15 .. R16 .. R17 .. R18 .. R19
133 [-]: GETUPVAL  R15 U4       ; R15 := U4
134 [-]: GETTABLE  R15 R15 K37  ; R15 := R15[0x08681f50]
135 [-]: GETGLOBAL R16 K5       ; R16 := 0xae91e43b
136 [-]: MOVE      R17 R10      ; R17 := R10
137 [-]: NEWTABLE  R18 0 2      ; R18 := {}
138 [-]: SETTABLE  R18 K38 R4   ; R18["ItemInfo"] := R4
139 [-]: NEWTABLE  R19 0 3      ; R19 := {}
140 [-]: SETTABLE  R19 K40 R4   ; R19["Arcane"] := R4
141 [-]: SETTABLE  R19 K41 R13  ; R19["ArcaneRank"] := R13
142 [-]: SETTABLE  R19 K42 R14  ; R19["ArcaneMaxRank"] := R14
143 [-]: SETTABLE  R18 K39 R19  ; R18["AppendInfo"] := R19
144 [-]: CALL      R15 4 2      ; R15 := R15(R16,R17,R18)
145 [-]: GETUPVAL  R16 U4       ; R16 := U4
146 [-]: GETTABLE  R16 R16 K43  ; R16 := R16[0x4ffc42f7]
147 [-]: GETGLOBAL R17 K5       ; R17 := 0xae91e43b
148 [-]: MOVE      R18 R2       ; R18 := R2
149 [-]: MOVE      R19 R15      ; R19 := R15
150 [-]: CALL      R16 4 1      ; R16(R17,R18,R19)
151 [-]: TEST      R1 0         ; if not R1 then PC := 188
152 [-]: JMP       188          ; PC := 188
153 [-]: GETUPVAL  R16 U3       ; R16 := U3
154 [-]: GETTABLE  R16 R16 K44  ; R16 := R16[0xfc3fed1f]
155 [-]: GETGLOBAL R17 K5       ; R17 := 0xae91e43b
156 [-]: MOVE      R18 R15      ; R18 := R15
157 [-]: GETGLOBAL R19 K5       ; R19 := 0xae91e43b
158 [-]: SELF      R19 R19 K45  ; R20 := R19; R19 := R19[0x91a24e4b]
159 [-]: MOVE      R21 R2       ; R21 := R2
160 [-]: CONST     R22 2        ; R22 := 2.000000
161 [-]: CALL      R19 4 2      ; R19 := R19(R20,R21,R22)
162 [-]: GETGLOBAL R20 K5       ; R20 := 0xae91e43b
163 [-]: SELF      R20 R20 K45  ; R21 := R20; R20 := R20[0x91a24e4b]
164 [-]: MOVE      R22 R2       ; R22 := R2
165 [-]: CONST     R23 3        ; R23 := 3.000000
166 [-]: CALL      R20 4 2      ; R20 := R20(R21,R22,R23)
167 [-]: GETGLOBAL R21 K5       ; R21 := 0xae91e43b
168 [-]: SELF      R21 R21 K45  ; R22 := R21; R21 := R21[0x91a24e4b]
169 [-]: MOVE      R23 R2       ; R23 := R2
170 [-]: LOADK     R24 K20      ; R24 := ".Image"
171 [-]: CONCAT    R23 R23 R24  ; R23 := R23 .. R24
172 [-]: CONST     R24 12       ; R24 := 12.000000
173 [-]: CALL      R21 4 2      ; R21 := R21(R22,R23,R24)
174 [-]: ADD       R21 R21 K46  ; R21 := R21 + 100.000000
175 [-]: GETGLOBAL R22 K5       ; R22 := 0xae91e43b
176 [-]: SELF      R22 R22 K45  ; R23 := R22; R22 := R22[0x91a24e4b]
177 [-]: MOVE      R24 R2       ; R24 := R2
178 [-]: LOADK     R25 K20      ; R25 := ".Image"
179 [-]: CONCAT    R24 R24 R25  ; R24 := R24 .. R25
180 [-]: CONST     R25 13       ; R25 := 13.000000
181 [-]: CALL      R22 4 0      ; R22,... := R22(R23,R24,R25)
182 [-]: CALL      R16 0 1      ; R16(R17,...)
183 [-]: GETGLOBAL R16 K8       ; R16 := _T
184 [-]: SETTABLE  R16 K9 R15   ; R16["InfoPopup_Data"] := R15
185 [-]: GETGLOBAL R16 K8       ; R16 := _T
186 [-]: NEWTABLE  R17 0 0      ; R17 := {}
187 [-]: SETTABLE  R16 K10 R17  ; R16["InfoPopup_Grid"] := R17
188 [-]: GETUPVAL  R16 U5       ; R16 := U5
189 [-]: MOVE      R17 R0       ; R17 := R0
190 [-]: LOADKB    R18 1 0      ; R18 := true
191 [-]: CALL      R16 3 3      ; R16,R17 := R16(R17,R18)
192 [-]: GETGLOBAL R18 K5       ; R18 := 0xae91e43b
193 [-]: SELF      R18 R18 K47  ; R19 := R18; R18 := R18[0xf64b7262]
194 [-]: MOVE      R20 R2       ; R20 := R2
195 [-]: LOADK     R21 K48      ; R21 := "Lock"
196 [-]: CONST     R22 1        ; R22 := 1.000000
197 [-]: CONST     R23 -17      ; R23 := -17.000000
198 [-]: CALL      R18 6 1      ; R18(R19,R20,R21,R22,R23)
199 [-]: GETGLOBAL R18 K5       ; R18 := 0xae91e43b
200 [-]: SELF      R18 R18 K49  ; R19 := R18; R18 := R18[0xc0a3774b]
201 [-]: MOVE      R20 R2       ; R20 := R2
202 [-]: LOADK     R21 K48      ; R21 := "Lock"
203 [-]: CONST     R22 11       ; R22 := 11.000000
204 [-]: EQ        0 R16 K0     ; if R16 ~= nil then PC := 207
205 [-]: JMP       207          ; PC := 207
206 [-]: LOADKB    R23 0 1      ; R23 := false; PC := 207
207 [-]: LOADKB    R23 1 0      ; R23 := true
208 [-]: CALL      R18 6 1      ; R18(R19,R20,R21,R22,R23)
209 [-]: EQ        1 R16 K0     ; if R16 == nil then PC := 234
210 [-]: JMP       234          ; PC := 234
211 [-]: EQ        1 R17 K0     ; if R17 == nil then PC := 222
212 [-]: JMP       222          ; PC := 222
213 [-]: GETGLOBAL R18 K5       ; R18 := 0xae91e43b
214 [-]: SELF      R18 R18 K26  ; R19 := R18; R18 := R18[0x42b04007]
215 [-]: MOVE      R20 R16      ; R20 := R16
216 [-]: LOADKB    R21 0 0      ; R21 := false
217 [-]: NEWTABLE  R22 0 1      ; R22 := {}
218 [-]: SETTABLE  R22 K50 R17  ; R22["ITEM"] := R17
219 [-]: CALL      R18 5 2      ; R18 := R18(R19,R20,R21,R22)
220 [-]: MOVE      R16 R18      ; R16 := R18
221 [-]: JMP       228          ; PC := 228
222 [-]: GETGLOBAL R18 K5       ; R18 := 0xae91e43b
223 [-]: SELF      R18 R18 K26  ; R19 := R18; R18 := R18[0x42b04007]
224 [-]: MOVE      R20 R16      ; R20 := R16
225 [-]: LOADKB    R21 0 0      ; R21 := false
226 [-]: CALL      R18 4 2      ; R18 := R18(R19,R20,R21)
227 [-]: MOVE      R16 R18      ; R16 := R18
228 [-]: LOADK     R18 K24      ; R18 := "<font color=\""
229 [-]: MOVE      R19 R9       ; R19 := R9
230 [-]: LOADK     R20 K51      ; R20 := "\">"
231 [-]: MOVE      R21 R16      ; R21 := R16
232 [-]: LOADK     R22 K52      ; R22 := "</font>"
233 [-]: CONCAT    R7 R18 R22   ; R7 := R18 .. R19 .. R20 .. R21 .. R22
234 [-]: GETGLOBAL R18 K5       ; R18 := 0xae91e43b
235 [-]: SELF      R18 R18 K49  ; R19 := R18; R18 := R18[0xc0a3774b]
236 [-]: MOVE      R20 R2       ; R20 := R2
237 [-]: LOADK     R21 K53      ; R21 := "Bg"
238 [-]: CONST     R22 11       ; R22 := 11.000000
239 [-]: GETGLOBAL R23 K12      ; R23 := 0x7b998233
240 [-]: MOVE      R24 R6       ; R24 := R6
241 [-]: CALL      R23 2 2      ; R23 := R23(R24)
242 [-]: NOT       R23 R23      ; R23 :=  R23
243 [-]: CALL      R18 6 1      ; R18(R19,R20,R21,R22,R23)
244 [-]: GETGLOBAL R18 K5       ; R18 := 0xae91e43b
245 [-]: SELF      R18 R18 K54  ; R19 := R18; R18 := R18[0x1cb415c1]
246 [-]: MOVE      R20 R2       ; R20 := R2
247 [-]: LOADK     R21 K55      ; R21 := ".Bg"
248 [-]: CONCAT    R20 R20 R21  ; R20 := R20 .. R21
249 [-]: MOVE      R21 R6       ; R21 := R6
250 [-]: CALL      R18 4 1      ; R18(R19,R20,R21)
251 [-]: GETGLOBAL R18 K5       ; R18 := 0xae91e43b
252 [-]: SELF      R18 R18 K56  ; R19 := R18; R18 := R18[0xe261aa96]
253 [-]: MOVE      R20 R2       ; R20 := R2
254 [-]: LOADK     R21 K57      ; R21 := "Label"
255 [-]: CONST     R22 29       ; R22 := 29.000000
256 [-]: LOADK     R23 K58      ; R23 := "<p>"
257 [-]: MOVE      R24 R7       ; R24 := R7
258 [-]: LOADK     R25 K59      ; R25 := "</p>"
259 [-]: CONCAT    R23 R23 R25  ; R23 := R23 .. R24 .. R25
260 [-]: CALL      R18 6 1      ; R18(R19,R20,R21,R22,R23)
261 [-]: GETGLOBAL R18 K5       ; R18 := 0xae91e43b
262 [-]: SELF      R18 R18 K47  ; R19 := R18; R18 := R18[0xf64b7262]
263 [-]: MOVE      R20 R2       ; R20 := R2
264 [-]: LOADK     R21 K57      ; R21 := "Label"
265 [-]: CONST     R22 10       ; R22 := 10.000000
266 [-]: MOVE      R23 R8       ; R23 := R8
267 [-]: CALL      R18 6 1      ; R18(R19,R20,R21,R22,R23)
268 [-]: GETGLOBAL R18 K5       ; R18 := 0xae91e43b
269 [-]: SELF      R18 R18 K47  ; R19 := R18; R18 := R18[0xf64b7262]
270 [-]: MOVE      R20 R2       ; R20 := R2
271 [-]: LOADK     R21 K57      ; R21 := "Label"
272 [-]: CONST     R22 1        ; R22 := 1.000000
273 [-]: CONST     R23 23       ; R23 := 23.000000
274 [-]: CALL      R18 6 1      ; R18(R19,R20,R21,R22,R23)
275 [-]: GETGLOBAL R18 K5       ; R18 := 0xae91e43b
276 [-]: SELF      R18 R18 K60  ; R19 := R18; R18 := R18[0x67bc869f]
277 [-]: MOVE      R20 R2       ; R20 := R2
278 [-]: CONST     R21 10       ; R21 := 10.000000
279 [-]: GETUPVAL  R22 U0       ; R22 := U0
280 [-]: GETTABLE  R22 R22 K15  ; R22 := R22[0x06d055f9]
281 [-]: GETGLOBAL R23 K3       ; R23 := mArcaneInfo
282 [-]: GETTABLE  R23 R23 K61  ; R23 := R23["HasArcaneHelmet"]
283 [-]: TEST      R23 0        ; if not R23 then PC := 289
284 [-]: JMP       289          ; PC := 289
285 [-]: EQ        1 R0 K32     ; if R0 == 2.000000 then PC := 288
286 [-]: JMP       288          ; PC := 288
287 [-]: LOADKB    R23 0 1      ; R23 := false; PC := 288
288 [-]: LOADKB    R23 1 0      ; R23 := true
289 [-]: CONST     R24 50       ; R24 := 50.000000
290 [-]: CONST     R25 100      ; R25 := 100.000000
291 [-]: CALL      R22 4 0      ; R22,... := R22(R23,R24,R25)
292 [-]: CALL      R18 0 1      ; R18(R19,...)
293 [-]: RETURN    R0 1         ; return 


; Function #153:
;
; Name:            
; Defined at line: 5493
; #Upvalues:       4
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  25

  1 [-]: GETGLOBAL R0 K0        ; R0 := mGameData
  2 [-]: SELF      R0 R0 K1     ; R1 := R0; R0 := R0[0x25a6e75e]
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: GETGLOBAL R1 K2        ; R1 := _T
  5 [-]: GETTABLE  R1 R1 K3     ; R1 := R1["ArsenalState"]
  6 [-]: EQ        1 R1 K5      ; if R1 == 2.000000 then PC := 9
  7 [-]: JMP       9            ; PC := 9
  8 [-]: LOADKB    R1 0 1       ; R1 := false; PC := 9
  9 [-]: LOADKB    R1 1 0       ; R1 := true
 10 [-]: SELF      R2 R0 K6     ; R3 := R0; R2 := R0[0x2f30b8db]
 11 [-]: GETUPVAL  R4 U0        ; R4 := U0
 12 [-]: GETTABLE  R4 R4 K7     ; R4 := R4["info"]
 13 [-]: GETUPVAL  R5 U1        ; R5 := U1
 14 [-]: MOVE      R6 R1        ; R6 := R1
 15 [-]: CALL      R2 5 2       ; R2 := R2(R3,R4,R5,R6)
 16 [-]: GETGLOBAL R3 K8        ; R3 := mCardSlots
 17 [-]: GETGLOBAL R4 K2        ; R4 := _T
 18 [-]: GETTABLE  R4 R4 K9     ; R4 := R4["upgradeItemCategory"]
 19 [-]: EQ        1 R4 K11     ; if R4 == 1.000000 then PC := 26
 20 [-]: JMP       26           ; PC := 26
 21 [-]: GETGLOBAL R4 K2        ; R4 := _T
 22 [-]: GETTABLE  R4 R4 K9     ; R4 := R4["upgradeItemCategory"]
 23 [-]: EQ        1 R4 K12     ; if R4 == 0.000000 then PC := 26
 24 [-]: JMP       26           ; PC := 26
 25 [-]: LOADKB    R4 0 1       ; R4 := false; PC := 26
 26 [-]: LOADKB    R4 1 0       ; R4 := true
 27 [-]: GETGLOBAL R5 K13       ; R5 := mArcaneInfo
 28 [-]: SETTABLE  R5 K14 K15   ; R5["SelectedSlot"] := nil
 29 [-]: GETGLOBAL R5 K13       ; R5 := mArcaneInfo
 30 [-]: GETTABLE  R5 R5 K16    ; R5 := R5["Slots"]
 31 [-]: LT        0 K12 R5     ; if 0.000000 >= R5 then PC := 79
 32 [-]: JMP       79           ; PC := 79
 33 [-]: GETGLOBAL R5 K2        ; R5 := _T
 34 [-]: GETTABLE  R5 R5 K17    ; R5 := R5["upgradeItemSlot"]
 35 [-]: EQ        0 R5 K12     ; if R5 ~= 0.000000 then PC := 79
 36 [-]: JMP       79           ; PC := 79
 37 [-]: GETGLOBAL R5 K18       ; R5 := 0x7b998233
 38 [-]: GETUPVAL  R6 U0        ; R6 := U0
 39 [-]: CALL      R5 2 2       ; R5 := R5(R6)
 40 [-]: TEST      R5 1         ; if R5 then PC := 79
 41 [-]: JMP       79           ; PC := 79
 42 [-]: GETGLOBAL R5 K18       ; R5 := 0x7b998233
 43 [-]: GETUPVAL  R6 U0        ; R6 := U0
 44 [-]: GETTABLE  R6 R6 K19    ; R6 := R6["item"]
 45 [-]: CALL      R5 2 2       ; R5 := R5(R6)
 46 [-]: TEST      R5 1         ; if R5 then PC := 79
 47 [-]: JMP       79           ; PC := 79
 48 [-]: GETUPVAL  R5 U0        ; R5 := U0
 49 [-]: GETTABLE  R5 R5 K19    ; R5 := R5["item"]
 50 [-]: SELF      R5 R5 K20    ; R6 := R5; R5 := R5[0x68d708a7]
 51 [-]: CALL      R5 2 2       ; R5 := R5(R6)
 52 [-]: GETGLOBAL R6 K18       ; R6 := 0x7b998233
 53 [-]: MOVE      R7 R5        ; R7 := R5
 54 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 55 [-]: TEST      R6 1         ; if R6 then PC := 79
 56 [-]: JMP       79           ; PC := 79
 57 [-]: SELF      R6 R5 K21    ; R7 := R5; R6 := R5[0x5ef3783b]
 58 [-]: CONST     R8 0         ; R8 := 0.000000
 59 [-]: CALL      R6 3 2       ; R6 := R6(R7,R8)
 60 [-]: GETGLOBAL R7 K18       ; R7 := 0x7b998233
 61 [-]: MOVE      R8 R6        ; R8 := R6
 62 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 63 [-]: TEST      R7 1         ; if R7 then PC := 79
 64 [-]: JMP       79           ; PC := 79
 65 [-]: GETGLOBAL R7 K18       ; R7 := 0x7b998233
 66 [-]: GETTABLE  R8 R6 K22    ; R8 := R6["mInstance"]
 67 [-]: CALL      R7 2 2       ; R7 := R7(R8)
 68 [-]: TEST      R7 1         ; if R7 then PC := 79
 69 [-]: JMP       79           ; PC := 79
 70 [-]: GETGLOBAL R7 K13       ; R7 := mArcaneInfo
 71 [-]: GETTABLE  R8 R6 K22    ; R8 := R6["mInstance"]
 72 [-]: SELF      R8 R8 K24    ; R9 := R8; R8 := R8[0x0ad758cb]
 73 [-]: CALL      R8 2 2       ; R8 := R8(R9)
 74 [-]: LT        1 K12 R8     ; if 0.000000 < R8 then PC := 77
 75 [-]: JMP       77           ; PC := 77
 76 [-]: LOADKB    R8 0 1       ; R8 := false; PC := 77
 77 [-]: LOADKB    R8 1 0       ; R8 := true
 78 [-]: SETTABLE  R7 K23 R8    ; R7["HasArcaneHelmet"] := R8
 79 [-]: CONST     R7 0         ; R7 := 0.000000
 80 [-]: GETUPVAL  R8 U2        ; R8 := U2
 81 [-]: GETTABLE  R8 R8 K25    ; R8 := R8[0x06d055f9]
 82 [-]: GETGLOBAL R9 K18       ; R9 := 0x7b998233
 83 [-]: GETGLOBAL R10 K26      ; R10 := mRailjackMovie
 84 [-]: CALL      R9 2 2       ; R9 := R9(R10)
 85 [-]: NOT       R9 R9        ; R9 :=  R9
 86 [-]: CONST     R10 150      ; R10 := 150.000000
 87 [-]: CONST     R11 0        ; R11 := 0.000000
 88 [-]: CALL      R8 4 2       ; R8 := R8(R9,R10,R11)
 89 [-]: CONST     R9 1         ; R9 := 1.000000
 90 [-]: CONST     R10 2        ; R10 := 2.000000
 91 [-]: CONST     R11 1        ; R11 := 1.000000
 92 [-]: FORPREP   R9 189       ; R9 -= R11; PC := 189
 93 [-]: LOADK     R13 K27      ; R13 := "Installed.ArcaneSlot"
 94 [-]: GETGLOBAL R14 K28      ; R14 := 0x64fb1586
 95 [-]: MOVE      R15 R12      ; R15 := R12
 96 [-]: CALL      R14 2 2      ; R14 := R14(R15)
 97 [-]: CONCAT    R13 R13 R14  ; R13 := R13 .. R14
 98 [-]: GETGLOBAL R14 K13      ; R14 := mArcaneInfo
 99 [-]: GETTABLE  R14 R14 K16  ; R14 := R14["Slots"]
100 [-]: LE        1 R12 R14    ; if R12 <= R14 then PC := 103
101 [-]: JMP       103          ; PC := 103
102 [-]: LOADKB    R14 0 1      ; R14 := false; PC := 103
103 [-]: LOADKB    R14 1 0      ; R14 := true
104 [-]: GETGLOBAL R15 K29      ; R15 := 0xae91e43b
105 [-]: SELF      R15 R15 K30  ; R16 := R15; R15 := R15[0xaade900e]
106 [-]: MOVE      R17 R13      ; R17 := R13
107 [-]: CONST     R18 11       ; R18 := 11.000000
108 [-]: MOVE      R19 R14      ; R19 := R14
109 [-]: CALL      R15 5 1      ; R15(R16,R17,R18,R19)
110 [-]: TEST      R14 0        ; if not R14 then PC := 189
111 [-]: JMP       189          ; PC := 189
112 [-]: GETGLOBAL R15 K29      ; R15 := 0xae91e43b
113 [-]: SELF      R15 R15 K31  ; R16 := R15; R15 := R15[0xf64b7262]
114 [-]: MOVE      R17 R13      ; R17 := R13
115 [-]: LOADK     R18 K32      ; R18 := "Btn"
116 [-]: CONST     R19 85       ; R19 := 85.000000
117 [-]: MOVE      R20 R12      ; R20 := R12
118 [-]: CALL      R15 6 1      ; R15(R16,R17,R18,R19,R20)
119 [-]: GETGLOBAL R15 K29      ; R15 := 0xae91e43b
120 [-]: SELF      R15 R15 K33  ; R16 := R15; R15 := R15[0x1e5b5cfe]
121 [-]: MOVE      R17 R13      ; R17 := R13
122 [-]: LOADK     R18 K34      ; R18 := ".Btn"
123 [-]: CONCAT    R17 R17 R18  ; R17 := R17 .. R18
124 [-]: LOADK     R18 K35      ; R18 := "OnArcaneSlotFocused"
125 [-]: LOADK     R19 K36      ; R19 := "OnArcaneSlotUnfocused"
126 [-]: LOADK     R20 K37      ; R20 := "OnArcaneSlotPressed"
127 [-]: LOADK     R21 K38      ; R21 := ""
128 [-]: CALL      R15 7 1      ; R15(R16,R17,R18,R19,R20,R21)
129 [-]: TEST      R4 0         ; if not R4 then PC := 152
130 [-]: JMP       152          ; PC := 152
131 [-]: GETGLOBAL R15 K29      ; R15 := 0xae91e43b
132 [-]: SELF      R15 R15 K39  ; R16 := R15; R15 := R15[0x67bc869f]
133 [-]: MOVE      R17 R13      ; R17 := R13
134 [-]: CONST     R18 0        ; R18 := 0.000000
135 [-]: CONST     R19 135      ; R19 := 135.000000
136 [-]: CALL      R15 5 1      ; R15(R16,R17,R18,R19)
137 [-]: GETGLOBAL R15 K29      ; R15 := 0xae91e43b
138 [-]: SELF      R15 R15 K39  ; R16 := R15; R15 := R15[0x67bc869f]
139 [-]: MOVE      R17 R13      ; R17 := R13
140 [-]: CONST     R18 1        ; R18 := 1.000000
141 [-]: GETUPVAL  R19 U2       ; R19 := U2
142 [-]: GETTABLE  R19 R19 K25  ; R19 := R19[0x06d055f9]
143 [-]: EQ        1 R12 K11    ; if R12 == 1.000000 then PC := 146
144 [-]: JMP       146          ; PC := 146
145 [-]: LOADKB    R20 0 1      ; R20 := false; PC := 146
146 [-]: LOADKB    R20 1 0      ; R20 := true
147 [-]: CONST     R21 -300     ; R21 := -300.000000
148 [-]: CONST     R22 0        ; R22 := 0.000000
149 [-]: CALL      R19 4 2      ; R19 := R19(R20,R21,R22)
150 [-]: ADD       R19 R19 R8   ; R19 := R19 + R8
151 [-]: CALL      R15 5 1      ; R15(R16,R17,R18,R19)
152 [-]: GETGLOBAL R15 K4       ; R15 := 0x6c97a788
153 [-]: GETTABLE  R15 R15 K40  ; R15 := R15[0x1aba4d9e]
154 [-]: CALL      R15 1 2      ; R15 := R15()
155 [-]: ADD       R16 R3 R12   ; R16 := R3 + R12
156 [-]: GETGLOBAL R17 K18      ; R17 := 0x7b998233
157 [-]: MOVE      R18 R2       ; R18 := R2
158 [-]: CALL      R17 2 2      ; R17 := R17(R18)
159 [-]: TEST      R17 1        ; if R17 then PC := 186
160 [-]: JMP       186          ; PC := 186
161 [-]: GETGLOBAL R17 K18      ; R17 := 0x7b998233
162 [-]: GETTABLE  R18 R2 R16   ; R18 := R2[R16]
163 [-]: CALL      R17 2 2      ; R17 := R17(R18)
164 [-]: TEST      R17 1        ; if R17 then PC := 186
165 [-]: JMP       186          ; PC := 186
166 [-]: GETTABLE  R17 R2 R16   ; R17 := R2[R16]
167 [-]: GETTABLE  R18 R17 K41  ; R18 := R17["mItemType"]
168 [-]: SETTABLE  R15 K41 R18  ; R15["mItemType"] := R18
169 [-]: GETGLOBAL R18 K43      ; R18 := 0x8650181f
170 [-]: GETTABLE  R19 R17 K42  ; R19 := R17["mItemId"]
171 [-]: GETTABLE  R19 R19 K44  ; R19 := R19["mId"]
172 [-]: CALL      R18 2 2      ; R18 := R18(R19)
173 [-]: SETTABLE  R15 K42 R18  ; R15["mItemId"] := R18
174 [-]: GETTABLE  R18 R17 K45  ; R18 := R17["mUpgradeFingerprint"]
175 [-]: SETTABLE  R15 K45 R18  ; R15["mUpgradeFingerprint"] := R18
176 [-]: GETGLOBAL R18 K18      ; R18 := 0x7b998233
177 [-]: GETTABLE  R19 R15 K41  ; R19 := R15["mItemType"]
178 [-]: CALL      R18 2 2      ; R18 := R18(R19)
179 [-]: TEST      R18 0        ; if not R18 then PC := 185
180 [-]: JMP       185          ; PC := 185
181 [-]: GETTABLE  R18 R15 K42  ; R18 := R15["mItemId"]
182 [-]: GETTABLE  R18 R18 K44  ; R18 := R18["mId"]
183 [-]: EQ        1 R18 K38    ; if R18 == "" then PC := 186
184 [-]: JMP       186          ; PC := 186
185 [-]: ADD       R7 R7 K11    ; R7 := R7 + 1.000000
186 [-]: GETGLOBAL R18 K13      ; R18 := mArcaneInfo
187 [-]: GETTABLE  R18 R18 K46  ; R18 := R18["Arcanes"]
188 [-]: SETTABLE  R18 R12 R15  ; R18[R12] := R15
189 [-]: FORLOOP   R9 93        ; R9 += R11; if R9 <= R10 then begin PC := 93; R12 := R9 end
190 [-]: CONST     R18 1        ; R18 := 1.000000
191 [-]: GETGLOBAL R19 K13      ; R19 := mArcaneInfo
192 [-]: GETTABLE  R19 R19 K16  ; R19 := R19["Slots"]
193 [-]: CONST     R20 1        ; R20 := 1.000000
194 [-]: FORPREP   R18 199      ; R18 -= R20; PC := 199
195 [-]: GETUPVAL  R22 U3       ; R22 := U3
196 [-]: MOVE      R23 R21      ; R23 := R21
197 [-]: LOADKB    R24 0 0      ; R24 := false
198 [-]: CALL      R22 3 1      ; R22(R23,R24)
199 [-]: FORLOOP   R18 195      ; R18 += R20; if R18 <= R19 then begin PC := 195; R21 := R18 end
200 [-]: RETURN    R0 1         ; return 


; Function #154:
;
; Name:            
; Defined at line: 5552
; #Upvalues:       2
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  8

  1 [-]: GETUPVAL  R0 U0        ; R0 := U0
  2 [-]: GETTABLE  R0 R0 K0     ; R0 := R0[0xa9882367]
  3 [-]: GETGLOBAL R1 K1        ; R1 := mArsenalConsoleTag
  4 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  5 [-]: GETGLOBAL R1 K2        ; R1 := 0x7b998233
  6 [-]: MOVE      R2 R0        ; R2 := R0
  7 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  8 [-]: TEST      R1 1         ; if R1 then PC := 16
  9 [-]: JMP       16           ; PC := 16
 10 [-]: SELF      R1 R0 K3     ; R2 := R0; R1 := R0[0xfe3be07a]
 11 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 12 [-]: TEST      R1 0         ; if not R1 then PC := 16
 13 [-]: JMP       16           ; PC := 16
 14 [-]: SELF      R1 R0 K4     ; R2 := R0; R1 := R0[0x94336249]
 15 [-]: CALL      R1 2 1       ; R1(R2)
 16 [-]: GETGLOBAL R1 K5        ; R1 := _T
 17 [-]: GETTABLE  R1 R1 K6     ; R1 := R1["MenuSuitAvatar"]
 18 [-]: GETGLOBAL R2 K2        ; R2 := 0x7b998233
 19 [-]: MOVE      R3 R1        ; R3 := R1
 20 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 21 [-]: TEST      R2 1         ; if R2 then PC := 70
 22 [-]: JMP       70           ; PC := 70
 23 [-]: GETGLOBAL R2 K7        ; R2 := 0x89326c93
 24 [-]: SELF      R2 R2 K8     ; R3 := R2; R2 := R2[0x46a0ebf5]
 25 [-]: GETGLOBAL R4 K9        ; R4 := ARCHWING_WAYPOINT_TAG
 26 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 27 [-]: GETGLOBAL R3 K2        ; R3 := 0x7b998233
 28 [-]: MOVE      R4 R2        ; R4 := R2
 29 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 30 [-]: TEST      R3 1         ; if R3 then PC := 70
 31 [-]: JMP       70           ; PC := 70
 32 [-]: GETGLOBAL R3 K5        ; R3 := _T
 33 [-]: GETTABLE  R3 R3 K10    ; R3 := R3["suitTable"]
 34 [-]: GETGLOBAL R4 K12       ; R4 := ARCHWING_DEFAULT_ROTATION
 35 [-]: SETTABLE  R3 K11 R4    ; R3["desiredRot"] := R4
 36 [-]: GETGLOBAL R3 K5        ; R3 := _T
 37 [-]: GETTABLE  R3 R3 K10    ; R3 := R3["suitTable"]
 38 [-]: GETGLOBAL R4 K5        ; R4 := _T
 39 [-]: GETTABLE  R4 R4 K10    ; R4 := R4["suitTable"]
 40 [-]: GETTABLE  R4 R4 K11    ; R4 := R4["desiredRot"]
 41 [-]: SETTABLE  R3 K13 R4    ; R3["lerpRot"] := R4
 42 [-]: GETGLOBAL R3 K5        ; R3 := _T
 43 [-]: GETTABLE  R3 R3 K10    ; R3 := R3["suitTable"]
 44 [-]: GETGLOBAL R4 K15       ; R4 := 0x00046924
 45 [-]: CALL      R4 1 2       ; R4 := R4()
 46 [-]: SETTABLE  R3 K14 R4    ; R3["lerpHead"] := R4
 47 [-]: SELF      R3 R1 K16    ; R4 := R1; R3 := R1[0x388577d5]
 48 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 49 [-]: GETGLOBAL R4 K5        ; R4 := _T
 50 [-]: GETTABLE  R4 R4 K10    ; R4 := R4["suitTable"]
 51 [-]: GETTABLE  R4 R4 K17    ; R4 := R4["positions"]
 52 [-]: EQ        0 R4 K18     ; if R4 ~= nil then PC := 58
 53 [-]: JMP       58           ; PC := 58
 54 [-]: GETGLOBAL R4 K5        ; R4 := _T
 55 [-]: GETTABLE  R4 R4 K10    ; R4 := R4["suitTable"]
 56 [-]: NEWTABLE  R5 0 0       ; R5 := {}
 57 [-]: SETTABLE  R4 K17 R5    ; R4["positions"] := R5
 58 [-]: GETGLOBAL R4 K5        ; R4 := _T
 59 [-]: GETTABLE  R4 R4 K10    ; R4 := R4["suitTable"]
 60 [-]: GETTABLE  R4 R4 K17    ; R4 := R4["positions"]
 61 [-]: SELF      R5 R2 K19    ; R6 := R2; R5 := R2[0xd1586535]
 62 [-]: CALL      R5 2 2       ; R5 := R5(R6)
 63 [-]: SETTABLE  R4 R3 R5     ; R4[R3] := R5
 64 [-]: GETUPVAL  R4 U1        ; R4 := U1
 65 [-]: GETTABLE  R4 R4 K20    ; R4 := R4[0xd4c67576]
 66 [-]: GETGLOBAL R5 K21       ; R5 := 0xae91e43b
 67 [-]: MOVE      R6 R1        ; R6 := R1
 68 [-]: LOADKB    R7 0 0       ; R7 := false
 69 [-]: CALL      R4 4 1       ; R4(R5,R6,R7)
 70 [-]: RETURN    R0 1         ; return 


; Function #155:
;
; Name:            
; Defined at line: 5579
; #Upvalues:       5
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  6

  1 [-]: GETUPVAL  R0 U0        ; R0 := U0
  2 [-]: CALL      R0 1 1       ; R0()
  3 [-]: GETUPVAL  R0 U1        ; R0 := U1
  4 [-]: GETTABLE  R0 R0 K1     ; R0 := R0["info"]
  5 [-]: SELF      R0 R0 K2     ; R1 := R0; R0 := R0[0xfa86e69d]
  6 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  7 [-]: SETGLOBAL R0 K0        ; mArtifactSlots := R0
  8 [-]: GETUPVAL  R0 U2        ; R0 := U2
  9 [-]: CALL      R0 1 2       ; R0 := R0()
 10 [-]: TEST      R0 0         ; if not R0 then PC := 22
 11 [-]: JMP       22           ; PC := 22
 12 [-]: GETGLOBAL R0 K0        ; R0 := mArtifactSlots
 13 [-]: LEN       R0 R0        ; R0 := # R0
 14 [-]: GETGLOBAL R1 K3        ; R1 := MELEE_STANCE_SLOT
 15 [-]: LT        0 R0 R1      ; if R0 >= R1 then PC := 22
 16 [-]: JMP       22           ; PC := 22
 17 [-]: GETGLOBAL R0 K4        ; R0 := 0x33bdd652
 18 [-]: GETTABLE  R0 R0 K5     ; R0 := R0[0x23d5322f]
 19 [-]: GETGLOBAL R1 K0        ; R1 := mArtifactSlots
 20 [-]: CONST     R2 0         ; R2 := 0.000000
 21 [-]: CALL      R0 3 1       ; R0(R1,R2)
 22 [-]: GETUPVAL  R0 U1        ; R0 := U1
 23 [-]: GETTABLE  R0 R0 K1     ; R0 := R0["info"]
 24 [-]: GETTABLE  R0 R0 K7     ; R0 := R0["mPolarized"]
 25 [-]: SETGLOBAL R0 K6        ; mPolarizedCount := R0
 26 [-]: GETGLOBAL R0 K9        ; R0 := 0xa94df70b
 27 [-]: SELF      R0 R0 K10    ; R1 := R0; R0 := R0[0x84fb4327]
 28 [-]: GETUPVAL  R2 U1        ; R2 := U1
 29 [-]: GETTABLE  R2 R2 K1     ; R2 := R2["info"]
 30 [-]: GETTABLE  R2 R2 K11    ; R2 := R2["mItemType"]
 31 [-]: GETUPVAL  R3 U1        ; R3 := U1
 32 [-]: GETTABLE  R3 R3 K1     ; R3 := R3["info"]
 33 [-]: GETTABLE  R3 R3 K7     ; R3 := R3["mPolarized"]
 34 [-]: CALL      R0 4 2       ; R0 := R0(R1,R2,R3)
 35 [-]: SETGLOBAL R0 K8        ; mMaxItemLevel := R0
 36 [-]: GETGLOBAL R0 K13       ; R0 := 0x5bced4c4
 37 [-]: GETTABLE  R0 R0 K14    ; R0 := R0[0xac1b386a]
 38 [-]: GETGLOBAL R1 K8        ; R1 := mMaxItemLevel
 39 [-]: GETGLOBAL R2 K9        ; R2 := 0xa94df70b
 40 [-]: SELF      R2 R2 K15    ; R3 := R2; R2 := R2[0x8427bf69]
 41 [-]: GETUPVAL  R4 U1        ; R4 := U1
 42 [-]: GETTABLE  R4 R4 K1     ; R4 := R4["info"]
 43 [-]: GETTABLE  R4 R4 K16    ; R4 := R4["mXP"]
 44 [-]: GETUPVAL  R5 U1        ; R5 := U1
 45 [-]: GETTABLE  R5 R5 K1     ; R5 := R5["info"]
 46 [-]: GETTABLE  R5 R5 K11    ; R5 := R5["mItemType"]
 47 [-]: CALL      R2 4 0       ; R2,... := R2(R3,R4,R5)
 48 [-]: CALL      R0 0 2       ; R0 := R0(R1,...)
 49 [-]: SETGLOBAL R0 K12       ; mItemLevel := R0
 50 [-]: GETGLOBAL R0 K13       ; R0 := 0x5bced4c4
 51 [-]: GETTABLE  R0 R0 K18    ; R0 := R0[0xb62ecfe0]
 52 [-]: GETGLOBAL R1 K12       ; R1 := mItemLevel
 53 [-]: GETGLOBAL R2 K13       ; R2 := 0x5bced4c4
 54 [-]: GETTABLE  R2 R2 K14    ; R2 := R2[0xac1b386a]
 55 [-]: GETGLOBAL R3 K8        ; R3 := mMaxItemLevel
 56 [-]: GETGLOBAL R4 K19       ; R4 := mGameData
 57 [-]: SELF      R4 R4 K20    ; R5 := R4; R4 := R4[0xefee6c91]
 58 [-]: CALL      R4 2 0       ; R4,... := R4(R5)
 59 [-]: CALL      R2 0 0       ; R2,... := R2(R3,...)
 60 [-]: CALL      R0 0 2       ; R0 := R0(R1,...)
 61 [-]: SETGLOBAL R0 K17       ; mEnergyTotal := R0
 62 [-]: GETUPVAL  R0 U1        ; R0 := U1
 63 [-]: GETTABLE  R0 R0 K1     ; R0 := R0["info"]
 64 [-]: SELF      R0 R0 K21    ; R1 := R0; R0 := R0[0xdbfbf6c0]
 65 [-]: CONST     R2 0         ; R2 := 0.000000
 66 [-]: CALL      R0 3 2       ; R0 := R0(R1,R2)
 67 [-]: TEST      R0 0         ; if not R0 then PC := 72
 68 [-]: JMP       72           ; PC := 72
 69 [-]: GETGLOBAL R0 K17       ; R0 := mEnergyTotal
 70 [-]: MUL       R0 R0 K23    ; R0 := R0 * 2.000000
 71 [-]: SETGLOBAL R0 K17       ; mEnergyTotal := R0
 72 [-]: GETGLOBAL R0 K24       ; R0 := mInstalledGrid
 73 [-]: SELF      R0 R0 K25    ; R1 := R0; R0 := R0[0xea061e98]
 74 [-]: CLOSURE   R2 0         ; R2 := closure(Function #155.1)
 75 [-]: CALL      R0 3 1       ; R0(R1,R2)
 76 [-]: GETUPVAL  R0 U3        ; R0 := U3
 77 [-]: CALL      R0 1 1       ; R0()
 78 [-]: GETUPVAL  R0 U4        ; R0 := U4
 79 [-]: LOADKB    R1 1 0       ; R1 := true
 80 [-]: CALL      R0 2 1       ; R0(R1)
 81 [-]: RETURN    R0 1         ; return 


; Function #155.1:
;
; Name:            
; Defined at line: 5594
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: GETGLOBAL R1 K1        ; R1 := mArtifactSlots
  2 [-]: GETTABLE  R2 R0 K2     ; R2 := R0["Id"]
  3 [-]: GETTABLE  R1 R1 R2     ; R1 := R1[R2]
  4 [-]: SETTABLE  R0 K0 R1     ; R0["mPolarity"] := R1
  5 [-]: GETGLOBAL R1 K3        ; R1 := mInstalledGrid
  6 [-]: GETTABLE  R1 R1 K4     ; R1 := R1[0xb15e6aca]
  7 [-]: MOVE      R2 R0        ; R2 := R0
  8 [-]: CALL      R1 2 1       ; R1(R2)
  9 [-]: RETURN    R0 1         ; return 


; Function #156:
;
; Name:            
; Defined at line: 5603
; #Upvalues:       2
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  18

  1 [-]: GETGLOBAL R0 K0        ; R0 := mGameData
  2 [-]: SELF      R0 R0 K1     ; R1 := R0; R0 := R0[0x25a6e75e]
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: GETGLOBAL R1 K2        ; R1 := 0x7b998233
  5 [-]: MOVE      R2 R0        ; R2 := R0
  6 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  7 [-]: TEST      R1 0         ; if not R1 then PC := 10
  8 [-]: JMP       10           ; PC := 10
  9 [-]: RETURN    R0 1         ; return 
 10 [-]: SELF      R1 R0 K3     ; R2 := R0; R1 := R0[0xaaeb4d91]
 11 [-]: CALL      R1 2 2       ; R1 := R1(R2)
 12 [-]: SELF      R2 R0 K4     ; R3 := R0; R2 := R0[0x98b1bb53]
 13 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 14 [-]: NEWTABLE  R3 2 0       ; R3 := {}
 15 [-]: MOVE      R4 R1        ; R4 := R1
 16 [-]: MOVE      R5 R2        ; R5 := R2
 17 [-]: SETLIST   R3 2 1       ; R3[(1-1)*FPF+i] := R(3+i), 1 <= i <= 2
 18 [-]: CONST     R4 1         ; R4 := 1.000000
 19 [-]: LEN       R5 R3        ; R5 := # R3
 20 [-]: CONST     R6 1         ; R6 := 1.000000
 21 [-]: FORPREP   R4 50        ; R4 -= R6; PC := 50
 22 [-]: GETTABLE  R8 R3 R7     ; R8 := R3[R7]
 23 [-]: GETGLOBAL R9 K5        ; R9 := 0xcfc01047
 24 [-]: MOVE      R10 R8       ; R10 := R8
 25 [-]: CALL      R9 2 4       ; R9,R10,R11 := R9(R10)
 26 [-]: JMP       48           ; PC := 48
 27 [-]: GETTABLE  R14 R13 K6   ; R14 := R13["mItemType"]
 28 [-]: SELF      R14 R14 K7   ; R15 := R14; R14 := R14[0xf2deaf69]
 29 [-]: GETUPVAL  R16 U0       ; R16 := U0
 30 [-]: CALL      R14 3 2      ; R14 := R14(R15,R16)
 31 [-]: TEST      R14 0        ; if not R14 then PC := 48
 32 [-]: JMP       48           ; PC := 48
 33 [-]: GETGLOBAL R14 K2       ; R14 := 0x7b998233
 34 [-]: GETTABLE  R15 R13 K8   ; R15 := R13["mInstance"]
 35 [-]: CALL      R14 2 2      ; R14 := R14(R15)
 36 [-]: TEST      R14 1        ; if R14 then PC := 48
 37 [-]: JMP       48           ; PC := 48
 38 [-]: GETTABLE  R14 R13 K8   ; R14 := R13["mInstance"]
 39 [-]: SELF      R14 R14 K9   ; R15 := R14; R14 := R14[0x4aa1311b]
 40 [-]: GETTABLE  R16 R13 K10  ; R16 := R13["mUpgradeFingerprint"]
 41 [-]: GETUPVAL  R17 U1       ; R17 := U1
 42 [-]: GETTABLE  R17 R17 K11  ; R17 := R17["item"]
 43 [-]: CALL      R14 4 2      ; R14 := R14(R15,R16,R17)
 44 [-]: TEST      R14 0        ; if not R14 then PC := 48
 45 [-]: JMP       48           ; PC := 48
 46 [-]: LOADKB    R14 1 0      ; R14 := true
 47 [-]: RETURN    R14 2        ; return R14
 48 [-]: TFORLOOP  R9 2         ; R12,R13 :=  R9(R10,R11); if R12 ~= nil then begin PC = 27; R11 := R12 end
 49 [-]: JMP       27           ; PC := 27
 50 [-]: FORLOOP   R4 22        ; R4 += R6; if R4 <= R5 then begin PC := 22; R7 := R4 end
 51 [-]: LOADKB    R14 0 0      ; R14 := false
 52 [-]: RETURN    R14 2        ; return R14
 53 [-]: RETURN    R0 1         ; return 


; Function #157:
;
; Name:            
; Defined at line: 5624
; #Upvalues:       2
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  20

  1 [-]: GETGLOBAL R0 K0        ; R0 := 0x2d0fad09
  2 [-]: LOADK     R1 K1        ; R1 := "EE.Interface.Components.List"
  3 [-]: CALL      R0 2 2       ; R0 := R0(R1)
  4 [-]: GETTABLE  R1 R0 K3     ; R1 := R0[0x9383bc56]
  5 [-]: GETGLOBAL R2 K4        ; R2 := 0xae91e43b
  6 [-]: LOADK     R3 K5        ; R3 := "AvionicsList.Element"
  7 [-]: CALL      R1 3 2       ; R1 := R1(R2,R3)
  8 [-]: SETGLOBAL R1 K2        ; mAvionicCategories := R1
  9 [-]: GETGLOBAL R1 K2        ; R1 := mAvionicCategories
 10 [-]: SELF      R1 R1 K6     ; R2 := R1; R1 := R1[0x1e5b5cfe]
 11 [-]: LOADK     R3 K7        ; R3 := "AvionicCatSelected"
 12 [-]: LOADK     R4 K8        ; R4 := "AvionicCatFocused"
 13 [-]: LOADK     R5 K9        ; R5 := "AvionicCatUnfocused"
 14 [-]: LOADK     R6 K10       ; R6 := "AvionicCatPressed"
 15 [-]: CALL      R1 6 1       ; R1(R2,R3,R4,R5,R6)
 16 [-]: GETGLOBAL R1 K2        ; R1 := mAvionicCategories
 17 [-]: SETTABLE  R1 K11 K12   ; R1["mForcedHorizontalSeparation"] := 140.000000
 18 [-]: GETGLOBAL R1 K2        ; R1 := mAvionicCategories
 19 [-]: SETTABLE  R1 K13 K14   ; R1["mForcedVerticalSeparation"] := 0.000000
 20 [-]: GETGLOBAL R1 K2        ; R1 := mAvionicCategories
 21 [-]: SETTABLE  R1 K15 K16   ; R1["mPrevSelectedId"] := nil
 22 [-]: GETGLOBAL R1 K2        ; R1 := mAvionicCategories
 23 [-]: NEWTABLE  R2 0 3       ; R2 := {}
 24 [-]: SETTABLE  R2 K18 K14   ; R2["INTEGRATED"] := 0.000000
 25 [-]: SETTABLE  R2 K19 K20   ; R2["BATTLE"] := 1.000000
 26 [-]: SETTABLE  R2 K21 K22   ; R2["TACTICAL"] := 2.000000
 27 [-]: SETTABLE  R1 K17 R2    ; R1["Categories"] := R2
 28 [-]: GETGLOBAL R1 K2        ; R1 := mAvionicCategories
 29 [-]: CLOSURE   R2 0         ; R2 := closure(Function #157.1)
 30 [-]: GETUPVAL  R0 U0        ; R0 := U0
 31 [-]: SETTABLE  R1 K23 R2    ; R1["UpdateCounts"] := R2
 32 [-]: GETGLOBAL R1 K2        ; R1 := mAvionicCategories
 33 [-]: CLOSURE   R2 1         ; R2 := closure(Function #157.2)
 34 [-]: GETUPVAL  R0 U0        ; R0 := U0
 35 [-]: SETTABLE  R1 K24 R2    ; R1["UpdateColor"] := R2
 36 [-]: GETGLOBAL R1 K2        ; R1 := mAvionicCategories
 37 [-]: CLOSURE   R2 2         ; R2 := closure(Function #157.3)
 38 [-]: SETTABLE  R1 K25 R2    ; R1["mElementDrawCallback"] := R2
 39 [-]: GETGLOBAL R1 K2        ; R1 := mAvionicCategories
 40 [-]: CLOSURE   R2 3         ; R2 := closure(Function #157.4)
 41 [-]: SETTABLE  R1 K26 R2    ; R1["mOnFocusedCallback"] := R2
 42 [-]: GETGLOBAL R1 K2        ; R1 := mAvionicCategories
 43 [-]: CLOSURE   R2 4         ; R2 := closure(Function #157.5)
 44 [-]: SETTABLE  R1 K27 R2    ; R1["mOnUnfocusedCallback"] := R2
 45 [-]: GETGLOBAL R1 K2        ; R1 := mAvionicCategories
 46 [-]: CLOSURE   R2 5         ; R2 := closure(Function #157.6)
 47 [-]: SETTABLE  R1 K28 R2    ; R1["mOnSelectedCallback"] := R2
 48 [-]: NEWTABLE  R1 6 0       ; R1 := {}
 49 [-]: GETGLOBAL R2 K29       ; R2 := RAILJACK_SLOTS
 50 [-]: GETTABLE  R2 R2 K30    ; R2 := R2["BATTLE_DEF"]
 51 [-]: ADD       R2 K31 R2    ; R2 := 200.000000 + R2
 52 [-]: GETGLOBAL R3 K29       ; R3 := RAILJACK_SLOTS
 53 [-]: GETTABLE  R3 R3 K32    ; R3 := R3["BATTLE_OFF"]
 54 [-]: ADD       R3 K31 R3    ; R3 := 200.000000 + R3
 55 [-]: GETGLOBAL R4 K29       ; R4 := RAILJACK_SLOTS
 56 [-]: GETTABLE  R4 R4 K33    ; R4 := R4["BATTLE_SUPER"]
 57 [-]: ADD       R4 K31 R4    ; R4 := 200.000000 + R4
 58 [-]: GETGLOBAL R5 K29       ; R5 := RAILJACK_SLOTS
 59 [-]: GETTABLE  R5 R5 K34    ; R5 := R5["TAC_DEF"]
 60 [-]: ADD       R5 K31 R5    ; R5 := 200.000000 + R5
 61 [-]: GETGLOBAL R6 K29       ; R6 := RAILJACK_SLOTS
 62 [-]: GETTABLE  R6 R6 K35    ; R6 := R6["TAC_OFF"]
 63 [-]: ADD       R6 K31 R6    ; R6 := 200.000000 + R6
 64 [-]: GETGLOBAL R7 K29       ; R7 := RAILJACK_SLOTS
 65 [-]: GETTABLE  R7 R7 K36    ; R7 := R7["TAC_SUPER"]
 66 [-]: ADD       R7 K31 R7    ; R7 := 200.000000 + R7
 67 [-]: SETLIST   R1 6 1       ; R1[(1-1)*FPF+i] := R(1+i), 1 <= i <= 6
 68 [-]: GETGLOBAL R2 K2        ; R2 := mAvionicCategories
 69 [-]: SELF      R2 R2 K37    ; R3 := R2; R2 := R2[0xbad4316f]
 70 [-]: NEWTABLE  R4 0 5       ; R4 := {}
 71 [-]: SETTABLE  R4 K38 R1    ; R4["HiddenCats"] := R1
 72 [-]: NEWTABLE  R5 1 0       ; R5 := {}
 73 [-]: GETGLOBAL R6 K40       ; R6 := 0x7ed0a956
 74 [-]: LOADK     R7 K41       ; R7 := "/Lotus/Upgrades/Mods/Railjack/RailjackBaseSystemsMod"
 75 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 76 [-]: GETGLOBAL R7 K40       ; R7 := 0x7ed0a956
 77 [-]: LOADK     R8 K42       ; R8 := "/Lotus/Upgrades/Mods/Railjack/RailjackBaseAuraMod"
 78 [-]: CALL      R7 2 0       ; R7,... := R7(R8)
 79 [-]: SETLIST   R5 0 1       ; R5[(1-1)*FPF+i] := R(5+i), 1 <= i <= 0
 80 [-]: SETTABLE  R4 K39 R5    ; R4["ModTypes"] := R5
 81 [-]: GETGLOBAL R5 K2        ; R5 := mAvionicCategories
 82 [-]: GETTABLE  R5 R5 K17    ; R5 := R5["Categories"]
 83 [-]: GETTABLE  R5 R5 K18    ; R5 := R5["INTEGRATED"]
 84 [-]: SETTABLE  R4 K43 R5    ; R4["Category"] := R5
 85 [-]: SETTABLE  R4 K44 K45   ; R4["Label"] := "/Lotus/Language/Railjack/Avionics_Integrated"
 86 [-]: GETGLOBAL R5 K47       ; R5 := 0x7f17a019
 87 [-]: GETTABLE  R5 R5 K20    ; R5 := R5[1.000000]
 88 [-]: SETTABLE  R4 K46 R5    ; R4["Icon"] := R5
 89 [-]: LOADKB    R5 1 0       ; R5 := true
 90 [-]: CALL      R2 4 1       ; R2(R3,R4,R5)
 91 [-]: NEWTABLE  R2 9 0       ; R2 := {}
 92 [-]: LOADK     R3 K48       ; R3 := "ATTACK"
 93 [-]: LOADK     R4 K49       ; R4 := "DEFENSE"
 94 [-]: LOADK     R5 K50       ; R5 := "TACTIC"
 95 [-]: LOADK     R6 K51       ; R6 := "POWER"
 96 [-]: LOADK     R7 K52       ; R7 := "WARD"
 97 [-]: LOADK     R8 K53       ; R8 := "PRECEPT"
 98 [-]: LOADK     R9 K54       ; R9 := "FUSION"
 99 [-]: LOADK     R10 K55      ; R10 := "UMBRA"
100 [-]: LOADK     R11 K56      ; R11 := "ANY"
101 [-]: SETLIST   R2 9 1       ; R2[(1-1)*FPF+i] := R(2+i), 1 <= i <= 9
102 [-]: NEWTABLE  R3 1 0       ; R3 := {}
103 [-]: GETUPVAL  R4 U1        ; R4 := U1
104 [-]: GETTABLE  R4 R4 K57    ; R4 := R4["CategoryId_AURA"]
105 [-]: SETLIST   R3 1 1       ; R3[(1-1)*FPF+i] := R(3+i), 1 <= i <= 1
106 [-]: MOVE      R1 R3        ; R1 := R3
107 [-]: LOADNIL   R3 R3        ; R3 := nil
108 [-]: GETGLOBAL R4 K58       ; R4 := 0xc8802016
109 [-]: MOVE      R5 R2        ; R5 := R2
110 [-]: CALL      R4 2 4       ; R4,R5,R6 := R4(R5)
111 [-]: JMP       122          ; PC := 122
112 [-]: GETGLOBAL R9 K59       ; R9 := Lotus_Game
113 [-]: LOADK     R10 K60      ; R10 := "AP_"
114 [-]: MOVE      R11 R8       ; R11 := R8
115 [-]: CONCAT    R10 R10 R11  ; R10 := R10 .. R11
116 [-]: GETTABLE  R3 R9 R10    ; R3 := R9[R10]
117 [-]: GETGLOBAL R9 K61       ; R9 := 0x33bdd652
118 [-]: GETTABLE  R9 R9 K62    ; R9 := R9[0x23d5322f]
119 [-]: MOVE      R10 R1       ; R10 := R1
120 [-]: ADD       R11 K63 R3   ; R11 := 100.000000 + R3
121 [-]: CALL      R9 3 1       ; R9(R10,R11)
122 [-]: TFORLOOP  R4 2         ; R7,R8 :=  R4(R5,R6); if R7 ~= nil then begin PC = 112; R6 := R7 end
123 [-]: JMP       112          ; PC := 112
124 [-]: GETGLOBAL R9 K61       ; R9 := 0x33bdd652
125 [-]: GETTABLE  R9 R9 K62    ; R9 := R9[0x23d5322f]
126 [-]: MOVE      R10 R1       ; R10 := R1
127 [-]: GETGLOBAL R11 K29      ; R11 := RAILJACK_SLOTS
128 [-]: GETTABLE  R11 R11 K34  ; R11 := R11["TAC_DEF"]
129 [-]: ADD       R11 K31 R11  ; R11 := 200.000000 + R11
130 [-]: CALL      R9 3 1       ; R9(R10,R11)
131 [-]: GETGLOBAL R9 K61       ; R9 := 0x33bdd652
132 [-]: GETTABLE  R9 R9 K62    ; R9 := R9[0x23d5322f]
133 [-]: MOVE      R10 R1       ; R10 := R1
134 [-]: GETGLOBAL R11 K29      ; R11 := RAILJACK_SLOTS
135 [-]: GETTABLE  R11 R11 K35  ; R11 := R11["TAC_OFF"]
136 [-]: ADD       R11 K31 R11  ; R11 := 200.000000 + R11
137 [-]: CALL      R9 3 1       ; R9(R10,R11)
138 [-]: GETGLOBAL R9 K61       ; R9 := 0x33bdd652
139 [-]: GETTABLE  R9 R9 K62    ; R9 := R9[0x23d5322f]
140 [-]: MOVE      R10 R1       ; R10 := R1
141 [-]: GETGLOBAL R11 K29      ; R11 := RAILJACK_SLOTS
142 [-]: GETTABLE  R11 R11 K36  ; R11 := R11["TAC_SUPER"]
143 [-]: ADD       R11 K31 R11  ; R11 := 200.000000 + R11
144 [-]: CALL      R9 3 1       ; R9(R10,R11)
145 [-]: GETGLOBAL R9 K2        ; R9 := mAvionicCategories
146 [-]: SELF      R9 R9 K37    ; R10 := R9; R9 := R9[0xbad4316f]
147 [-]: NEWTABLE  R11 0 5      ; R11 := {}
148 [-]: SETTABLE  R11 K38 R1   ; R11["HiddenCats"] := R1
149 [-]: NEWTABLE  R12 0 0      ; R12 := {}
150 [-]: GETGLOBAL R13 K40      ; R13 := 0x7ed0a956
151 [-]: LOADK     R14 K64      ; R14 := "/Lotus/Upgrades/Mods/Railjack/RailjackBaseBattleMod"
152 [-]: CALL      R13 2 0      ; R13,... := R13(R14)
153 [-]: SETLIST   R12 0 1      ; R12[(1-1)*FPF+i] := R(12+i), 1 <= i <= 0
154 [-]: SETTABLE  R11 K39 R12  ; R11["ModTypes"] := R12
155 [-]: GETGLOBAL R12 K2       ; R12 := mAvionicCategories
156 [-]: GETTABLE  R12 R12 K17  ; R12 := R12["Categories"]
157 [-]: GETTABLE  R12 R12 K19  ; R12 := R12["BATTLE"]
158 [-]: SETTABLE  R11 K43 R12  ; R11["Category"] := R12
159 [-]: SETTABLE  R11 K44 K65  ; R11["Label"] := "/Lotus/Language/Railjack/Avionics_Powers"
160 [-]: GETGLOBAL R12 K47      ; R12 := 0x7f17a019
161 [-]: GETTABLE  R12 R12 K22  ; R12 := R12[2.000000]
162 [-]: SETTABLE  R11 K46 R12  ; R11["Icon"] := R12
163 [-]: LOADKB    R12 1 0      ; R12 := true
164 [-]: CALL      R9 4 1       ; R9(R10,R11,R12)
165 [-]: NEWTABLE  R9 1 0       ; R9 := {}
166 [-]: GETUPVAL  R10 U1       ; R10 := U1
167 [-]: GETTABLE  R10 R10 K57  ; R10 := R10["CategoryId_AURA"]
168 [-]: SETLIST   R9 1 1       ; R9[(1-1)*FPF+i] := R(9+i), 1 <= i <= 1
169 [-]: MOVE      R1 R9        ; R1 := R9
170 [-]: LOADNIL   R3 R3        ; R3 := nil
171 [-]: GETGLOBAL R9 K58       ; R9 := 0xc8802016
172 [-]: MOVE      R10 R2       ; R10 := R2
173 [-]: CALL      R9 2 4       ; R9,R10,R11 := R9(R10)
174 [-]: JMP       185          ; PC := 185
175 [-]: GETGLOBAL R14 K59      ; R14 := Lotus_Game
176 [-]: LOADK     R15 K60      ; R15 := "AP_"
177 [-]: MOVE      R16 R13      ; R16 := R13
178 [-]: CONCAT    R15 R15 R16  ; R15 := R15 .. R16
179 [-]: GETTABLE  R3 R14 R15   ; R3 := R14[R15]
180 [-]: GETGLOBAL R14 K61      ; R14 := 0x33bdd652
181 [-]: GETTABLE  R14 R14 K62  ; R14 := R14[0x23d5322f]
182 [-]: MOVE      R15 R1       ; R15 := R1
183 [-]: ADD       R16 K63 R3   ; R16 := 100.000000 + R3
184 [-]: CALL      R14 3 1      ; R14(R15,R16)
185 [-]: TFORLOOP  R9 2         ; R12,R13 :=  R9(R10,R11); if R12 ~= nil then begin PC = 175; R11 := R12 end
186 [-]: JMP       175          ; PC := 175
187 [-]: GETGLOBAL R14 K61      ; R14 := 0x33bdd652
188 [-]: GETTABLE  R14 R14 K62  ; R14 := R14[0x23d5322f]
189 [-]: MOVE      R15 R1       ; R15 := R1
190 [-]: GETGLOBAL R16 K29      ; R16 := RAILJACK_SLOTS
191 [-]: GETTABLE  R16 R16 K30  ; R16 := R16["BATTLE_DEF"]
192 [-]: ADD       R16 K31 R16  ; R16 := 200.000000 + R16
193 [-]: CALL      R14 3 1      ; R14(R15,R16)
194 [-]: GETGLOBAL R14 K61      ; R14 := 0x33bdd652
195 [-]: GETTABLE  R14 R14 K62  ; R14 := R14[0x23d5322f]
196 [-]: MOVE      R15 R1       ; R15 := R1
197 [-]: GETGLOBAL R16 K29      ; R16 := RAILJACK_SLOTS
198 [-]: GETTABLE  R16 R16 K32  ; R16 := R16["BATTLE_OFF"]
199 [-]: ADD       R16 K31 R16  ; R16 := 200.000000 + R16
200 [-]: CALL      R14 3 1      ; R14(R15,R16)
201 [-]: GETGLOBAL R14 K61      ; R14 := 0x33bdd652
202 [-]: GETTABLE  R14 R14 K62  ; R14 := R14[0x23d5322f]
203 [-]: MOVE      R15 R1       ; R15 := R1
204 [-]: GETGLOBAL R16 K29      ; R16 := RAILJACK_SLOTS
205 [-]: GETTABLE  R16 R16 K33  ; R16 := R16["BATTLE_SUPER"]
206 [-]: ADD       R16 K31 R16  ; R16 := 200.000000 + R16
207 [-]: CALL      R14 3 1      ; R14(R15,R16)
208 [-]: GETGLOBAL R14 K2       ; R14 := mAvionicCategories
209 [-]: SELF      R14 R14 K37  ; R15 := R14; R14 := R14[0xbad4316f]
210 [-]: NEWTABLE  R16 0 5      ; R16 := {}
211 [-]: SETTABLE  R16 K38 R1   ; R16["HiddenCats"] := R1
212 [-]: NEWTABLE  R17 0 0      ; R17 := {}
213 [-]: GETGLOBAL R18 K40      ; R18 := 0x7ed0a956
214 [-]: LOADK     R19 K66      ; R19 := "/Lotus/Upgrades/Mods/Railjack/RailjackBaseTacticalMod"
215 [-]: CALL      R18 2 0      ; R18,... := R18(R19)
216 [-]: SETLIST   R17 0 1      ; R17[(1-1)*FPF+i] := R(17+i), 1 <= i <= 0
217 [-]: SETTABLE  R16 K39 R17  ; R16["ModTypes"] := R17
218 [-]: GETGLOBAL R17 K2       ; R17 := mAvionicCategories
219 [-]: GETTABLE  R17 R17 K17  ; R17 := R17["Categories"]
220 [-]: GETTABLE  R17 R17 K21  ; R17 := R17["TACTICAL"]
221 [-]: SETTABLE  R16 K43 R17  ; R16["Category"] := R17
222 [-]: SETTABLE  R16 K44 K67  ; R16["Label"] := "/Lotus/Language/Railjack/Avionics_Tactical"
223 [-]: GETGLOBAL R17 K47      ; R17 := 0x7f17a019
224 [-]: GETTABLE  R17 R17 K68  ; R17 := R17[3.000000]
225 [-]: SETTABLE  R16 K46 R17  ; R16["Icon"] := R17
226 [-]: LOADKB    R17 1 0      ; R17 := true
227 [-]: CALL      R14 4 1      ; R14(R15,R16,R17)
228 [-]: GETGLOBAL R14 K2       ; R14 := mAvionicCategories
229 [-]: SELF      R14 R14 K69  ; R15 := R14; R14 := R14[0x71e9ac81]
230 [-]: CALL      R14 2 1      ; R14(R15)
231 [-]: RETURN    R0 1         ; return 


; Function #157.1:
;
; Name:            
; Defined at line: 5633
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  6

  1 [-]: NEWTABLE  R1 3 0       ; R1 := {}
  2 [-]: CONST     R2 0         ; R2 := 0.000000
  3 [-]: CONST     R3 0         ; R3 := 0.000000
  4 [-]: CONST     R4 0         ; R4 := 0.000000
  5 [-]: SETLIST   R1 3 1       ; R1[(1-1)*FPF+i] := R(1+i), 1 <= i <= 3
  6 [-]: NEWTABLE  R2 3 0       ; R2 := {}
  7 [-]: CONST     R3 9         ; R3 := 9.000000
  8 [-]: CONST     R4 3         ; R4 := 3.000000
  9 [-]: CONST     R5 3         ; R5 := 3.000000
 10 [-]: SETLIST   R2 3 1       ; R2[(1-1)*FPF+i] := R(2+i), 1 <= i <= 3
 11 [-]: GETGLOBAL R3 K0        ; R3 := mInstalledGrid
 12 [-]: SELF      R3 R3 K1     ; R4 := R3; R3 := R3[0xea061e98]
 13 [-]: CLOSURE   R5 0         ; R5 := closure(Function #157.1.1)
 14 [-]: MOVE      R0 R1        ; R0 := R1
 15 [-]: CALL      R3 3 1       ; R3(R4,R5)
 16 [-]: SELF      R3 R0 K1     ; R4 := R0; R3 := R0[0xea061e98]
 17 [-]: CLOSURE   R5 1         ; R5 := closure(Function #157.1.2)
 18 [-]: MOVE      R0 R1        ; R0 := R1
 19 [-]: GETUPVAL  R0 U0        ; R0 := U0
 20 [-]: MOVE      R0 R2        ; R0 := R2
 21 [-]: CALL      R3 3 1       ; R3(R4,R5)
 22 [-]: RETURN    R0 1         ; return 


; Function #157.1.1:
;
; Name:            
; Defined at line: 5637
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  3

  1 [-]: GETTABLE  R1 R0 K0     ; R1 := R0["mCardIndex"]
  2 [-]: EQ        1 R1 K1      ; if R1 == -1.000000 then PC := 27
  3 [-]: JMP       27           ; PC := 27
  4 [-]: GETTABLE  R1 R0 K2     ; R1 := R0["Id"]
  5 [-]: LE        0 R1 K3      ; if R1 > 3.000000 then PC := 13
  6 [-]: JMP       13           ; PC := 13
  7 [-]: GETUPVAL  R1 U0        ; R1 := U0
  8 [-]: GETUPVAL  R2 U0        ; R2 := U0
  9 [-]: GETTABLE  R2 R2 K4     ; R2 := R2[2.000000]
 10 [-]: ADD       R2 R2 K5     ; R2 := R2 + 1.000000
 11 [-]: SETTABLE  R1 K4 R2     ; R1[2.000000] := R2
 12 [-]: JMP       27           ; PC := 27
 13 [-]: GETTABLE  R1 R0 K2     ; R1 := R0["Id"]
 14 [-]: LE        0 R1 K6      ; if R1 > 6.000000 then PC := 22
 15 [-]: JMP       22           ; PC := 22
 16 [-]: GETUPVAL  R1 U0        ; R1 := U0
 17 [-]: GETUPVAL  R2 U0        ; R2 := U0
 18 [-]: GETTABLE  R2 R2 K3     ; R2 := R2[3.000000]
 19 [-]: ADD       R2 R2 K5     ; R2 := R2 + 1.000000
 20 [-]: SETTABLE  R1 K3 R2     ; R1[3.000000] := R2
 21 [-]: JMP       27           ; PC := 27
 22 [-]: GETUPVAL  R1 U0        ; R1 := U0
 23 [-]: GETUPVAL  R2 U0        ; R2 := U0
 24 [-]: GETTABLE  R2 R2 K5     ; R2 := R2[1.000000]
 25 [-]: ADD       R2 R2 K5     ; R2 := R2 + 1.000000
 26 [-]: SETTABLE  R1 K5 R2     ; R1[1.000000] := R2
 27 [-]: RETURN    R0 1         ; return 


; Function #157.1.2:
;
; Name:            
; Defined at line: 5650
; #Upvalues:       3
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  10

  1 [-]: GETUPVAL  R1 U0        ; R1 := U0
  2 [-]: GETTABLE  R2 R0 K0     ; R2 := R0["Category"]
  3 [-]: ADD       R2 R2 K1     ; R2 := R2 + 1.000000
  4 [-]: GETTABLE  R1 R1 R2     ; R1 := R1[R2]
  5 [-]: GETGLOBAL R2 K2        ; R2 := 0xae91e43b
  6 [-]: SELF      R2 R2 K3     ; R3 := R2; R2 := R2[0x42b04007]
  7 [-]: GETTABLE  R4 R0 K4     ; R4 := R0["Label"]
  8 [-]: LOADKB    R5 0 0       ; R5 := false
  9 [-]: CALL      R2 4 2       ; R2 := R2(R3,R4,R5)
 10 [-]: LOADK     R3 K5        ; R3 := " "
 11 [-]: GETUPVAL  R4 U1        ; R4 := U1
 12 [-]: GETTABLE  R4 R4 K6     ; R4 := R4[0x1142c7a8]
 13 [-]: MOVE      R5 R1        ; R5 := R1
 14 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 15 [-]: LOADK     R5 K7        ; R5 := "/"
 16 [-]: GETUPVAL  R6 U1        ; R6 := U1
 17 [-]: GETTABLE  R6 R6 K6     ; R6 := R6[0x1142c7a8]
 18 [-]: GETUPVAL  R7 U2        ; R7 := U2
 19 [-]: GETTABLE  R8 R0 K0     ; R8 := R0["Category"]
 20 [-]: ADD       R8 R8 K1     ; R8 := R8 + 1.000000
 21 [-]: GETTABLE  R7 R7 R8     ; R7 := R7[R8]
 22 [-]: CALL      R6 2 2       ; R6 := R6(R7)
 23 [-]: CONCAT    R2 R2 R6     ; R2 := R2 .. R3 .. R4 .. R5 .. R6
 24 [-]: GETGLOBAL R3 K2        ; R3 := 0xae91e43b
 25 [-]: SELF      R3 R3 K8     ; R4 := R3; R3 := R3[0xe261aa96]
 26 [-]: GETTABLE  R5 R0 K9     ; R5 := R0["mClipName"]
 27 [-]: LOADK     R6 K10       ; R6 := "Title"
 28 [-]: CONST     R7 29        ; R7 := 29.000000
 29 [-]: GETGLOBAL R8 K11       ; R8 := 0x5f0788c4
 30 [-]: MOVE      R9 R2        ; R9 := R2
 31 [-]: CALL      R8 2 0       ; R8,... := R8(R9)
 32 [-]: CALL      R3 0 1       ; R3(R4,...)
 33 [-]: RETURN    R0 1         ; return 


; Function #157.2:
;
; Name:            
; Defined at line: 5658
; #Upvalues:       1
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  9

  1 [-]: GETUPVAL  R2 U0        ; R2 := U0
  2 [-]: GETTABLE  R2 R2 K0     ; R2 := R2[0x06d055f9]
  3 [-]: MOVE      R3 R1        ; R3 := R1
  4 [-]: GETGLOBAL R4 K1        ; R4 := mColors
  5 [-]: GETTABLE  R4 R4 K2     ; R4 := R4["FloatingContentHighlight"]
  6 [-]: GETGLOBAL R5 K1        ; R5 := mColors
  7 [-]: GETTABLE  R5 R5 K3     ; R5 := R5["FloatingContent"]
  8 [-]: CALL      R2 4 2       ; R2 := R2(R3,R4,R5)
  9 [-]: GETGLOBAL R3 K4        ; R3 := 0xae91e43b
 10 [-]: SELF      R3 R3 K5     ; R4 := R3; R3 := R3[0xf64b7262]
 11 [-]: GETTABLE  R5 R0 K6     ; R5 := R0["mClipName"]
 12 [-]: LOADK     R6 K7        ; R6 := "Icon"
 13 [-]: CONST     R7 9         ; R7 := 9.000000
 14 [-]: MOVE      R8 R2        ; R8 := R2
 15 [-]: CALL      R3 6 1       ; R3(R4,R5,R6,R7,R8)
 16 [-]: GETGLOBAL R3 K4        ; R3 := 0xae91e43b
 17 [-]: SELF      R3 R3 K5     ; R4 := R3; R3 := R3[0xf64b7262]
 18 [-]: GETTABLE  R5 R0 K6     ; R5 := R0["mClipName"]
 19 [-]: LOADK     R6 K8        ; R6 := "Title"
 20 [-]: CONST     R7 36        ; R7 := 36.000000
 21 [-]: MOVE      R8 R2        ; R8 := R2
 22 [-]: CALL      R3 6 1       ; R3(R4,R5,R6,R7,R8)
 23 [-]: RETURN    R0 1         ; return 


; Function #157.3:
;
; Name:            
; Defined at line: 5664
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  12

  1 [-]: GETGLOBAL R1 K0        ; R1 := mAvionicCategories
  2 [-]: SELF      R1 R1 K1     ; R2 := R1; R1 := R1[0xed1ab921]
  3 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  4 [-]: GETGLOBAL R2 K2        ; R2 := 0x7b998233
  5 [-]: MOVE      R3 R1        ; R3 := R1
  6 [-]: CALL      R2 2 2       ; R2 := R2(R3)
  7 [-]: TEST      R2 1         ; if R2 then PC := 13
  8 [-]: JMP       13           ; PC := 13
  9 [-]: GETTABLE  R2 R1 K3     ; R2 := R1["Id"]
 10 [-]: GETTABLE  R3 R0 K3     ; R3 := R0["Id"]
 11 [-]: EQ        1 R2 R3      ; if R2 == R3 then PC := 14
 12 [-]: JMP       14           ; PC := 14
 13 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 14
 14 [-]: LOADKB    R2 1 0       ; R2 := true
 15 [-]: GETGLOBAL R3 K2        ; R3 := 0x7b998233
 16 [-]: GETGLOBAL R4 K0        ; R4 := mAvionicCategories
 17 [-]: GETTABLE  R4 R4 K4     ; R4 := R4["mSelectedElement"]
 18 [-]: CALL      R3 2 2       ; R3 := R3(R4)
 19 [-]: TEST      R3 1         ; if R3 then PC := 27
 20 [-]: JMP       27           ; PC := 27
 21 [-]: GETTABLE  R3 R0 K3     ; R3 := R0["Id"]
 22 [-]: GETGLOBAL R4 K0        ; R4 := mAvionicCategories
 23 [-]: GETTABLE  R4 R4 K4     ; R4 := R4["mSelectedElement"]
 24 [-]: GETTABLE  R4 R4 K3     ; R4 := R4["Id"]
 25 [-]: EQ        1 R3 R4      ; if R3 == R4 then PC := 28
 26 [-]: JMP       28           ; PC := 28
 27 [-]: LOADKB    R3 0 1       ; R3 := false; PC := 28
 28 [-]: LOADKB    R3 1 0       ; R3 := true
 29 [-]: GETGLOBAL R4 K5        ; R4 := 0xae91e43b
 30 [-]: SELF      R4 R4 K6     ; R5 := R4; R4 := R4[0x1cb415c1]
 31 [-]: GETTABLE  R6 R0 K7     ; R6 := R0["mClipName"]
 32 [-]: LOADK     R7 K8        ; R7 := ".Icon"
 33 [-]: CONCAT    R6 R6 R7     ; R6 := R6 .. R7
 34 [-]: GETTABLE  R7 R0 K9     ; R7 := R0["Icon"]
 35 [-]: CALL      R4 4 1       ; R4(R5,R6,R7)
 36 [-]: GETGLOBAL R4 K5        ; R4 := 0xae91e43b
 37 [-]: SELF      R4 R4 K10    ; R5 := R4; R4 := R4[0x42b04007]
 38 [-]: GETTABLE  R6 R0 K11    ; R6 := R0["Label"]
 39 [-]: LOADKB    R7 0 0       ; R7 := false
 40 [-]: CALL      R4 4 2       ; R4 := R4(R5,R6,R7)
 41 [-]: GETGLOBAL R5 K5        ; R5 := 0xae91e43b
 42 [-]: SELF      R5 R5 K12    ; R6 := R5; R5 := R5[0xe261aa96]
 43 [-]: GETTABLE  R7 R0 K7     ; R7 := R0["mClipName"]
 44 [-]: LOADK     R8 K13       ; R8 := "Title"
 45 [-]: CONST     R9 29        ; R9 := 29.000000
 46 [-]: GETGLOBAL R10 K14      ; R10 := 0x5f0788c4
 47 [-]: MOVE      R11 R4       ; R11 := R4
 48 [-]: CALL      R10 2 0      ; R10,... := R10(R11)
 49 [-]: CALL      R5 0 1       ; R5(R6,...)
 50 [-]: GETGLOBAL R5 K0        ; R5 := mAvionicCategories
 51 [-]: GETTABLE  R5 R5 K15    ; R5 := R5[0xa32f5156]
 52 [-]: MOVE      R6 R0        ; R6 := R0
 53 [-]: TESTSET   R7 R2 1      ; if R2 then PC := 56 else R7 := R2
 54 [-]: JMP       56           ; PC := 56
 55 [-]: MOVE      R7 R3        ; R7 := R3
 56 [-]: CALL      R5 3 1       ; R5(R6,R7)
 57 [-]: RETURN    R0 1         ; return 


; Function #157.4:
;
; Name:            
; Defined at line: 5676
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  9

  1 [-]: GETGLOBAL R1 K0        ; R1 := mAvionicCategories
  2 [-]: GETTABLE  R1 R1 K1     ; R1 := R1[0xa32f5156]
  3 [-]: MOVE      R2 R0        ; R2 := R0
  4 [-]: LOADKB    R3 1 0       ; R3 := true
  5 [-]: CALL      R1 3 1       ; R1(R2,R3)
  6 [-]: GETGLOBAL R1 K2        ; R1 := 0x25312c9b
  7 [-]: GETGLOBAL R2 K3        ; R2 := 0xae91e43b
  8 [-]: GETTABLE  R3 R0 K4     ; R3 := R0["mClipName"]
  9 [-]: LOADK     R4 K5        ; R4 := ".Icon"
 10 [-]: CONCAT    R3 R3 R4     ; R3 := R3 .. R4
 11 [-]: CONST     R4 0         ; R4 := 0.000000
 12 [-]: NEWTABLE  R5 2 0       ; R5 := {}
 13 [-]: CONST     R6 12        ; R6 := 12.000000
 14 [-]: CONST     R7 13        ; R7 := 13.000000
 15 [-]: SETLIST   R5 2 1       ; R5[(1-1)*FPF+i] := R(5+i), 1 <= i <= 2
 16 [-]: NEWTABLE  R6 2 0       ; R6 := {}
 17 [-]: CONST     R7 109       ; R7 := 109.000000
 18 [-]: CONST     R8 109       ; R8 := 109.000000
 19 [-]: SETLIST   R6 2 1       ; R6[(1-1)*FPF+i] := R(6+i), 1 <= i <= 2
 20 [-]: LOADK     R7 K7        ; R7 := 0.200000
 21 [-]: CALL      R1 7 1       ; R1(R2,R3,R4,R5,R6,R7)
 22 [-]: RETURN    R0 1         ; return 


; Function #157.5:
;
; Name:            
; Defined at line: 5681
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  10

  1 [-]: GETGLOBAL R1 K0        ; R1 := 0x7b998233
  2 [-]: GETGLOBAL R2 K1        ; R2 := mAvionicCategories
  3 [-]: GETTABLE  R2 R2 K2     ; R2 := R2["mSelectedElement"]
  4 [-]: CALL      R1 2 2       ; R1 := R1(R2)
  5 [-]: TEST      R1 1         ; if R1 then PC := 13
  6 [-]: JMP       13           ; PC := 13
  7 [-]: GETTABLE  R1 R0 K3     ; R1 := R0["Id"]
  8 [-]: GETGLOBAL R2 K1        ; R2 := mAvionicCategories
  9 [-]: GETTABLE  R2 R2 K2     ; R2 := R2["mSelectedElement"]
 10 [-]: GETTABLE  R2 R2 K3     ; R2 := R2["Id"]
 11 [-]: EQ        1 R1 R2      ; if R1 == R2 then PC := 14
 12 [-]: JMP       14           ; PC := 14
 13 [-]: LOADKB    R1 0 1       ; R1 := false; PC := 14
 14 [-]: LOADKB    R1 1 0       ; R1 := true
 15 [-]: GETGLOBAL R2 K1        ; R2 := mAvionicCategories
 16 [-]: GETTABLE  R2 R2 K4     ; R2 := R2[0xa32f5156]
 17 [-]: MOVE      R3 R0        ; R3 := R0
 18 [-]: MOVE      R4 R1        ; R4 := R1
 19 [-]: CALL      R2 3 1       ; R2(R3,R4)
 20 [-]: GETGLOBAL R2 K5        ; R2 := 0x25312c9b
 21 [-]: GETGLOBAL R3 K6        ; R3 := 0xae91e43b
 22 [-]: GETTABLE  R4 R0 K7     ; R4 := R0["mClipName"]
 23 [-]: LOADK     R5 K8        ; R5 := ".Icon"
 24 [-]: CONCAT    R4 R4 R5     ; R4 := R4 .. R5
 25 [-]: CONST     R5 0         ; R5 := 0.000000
 26 [-]: NEWTABLE  R6 2 0       ; R6 := {}
 27 [-]: CONST     R7 12        ; R7 := 12.000000
 28 [-]: CONST     R8 13        ; R8 := 13.000000
 29 [-]: SETLIST   R6 2 1       ; R6[(1-1)*FPF+i] := R(6+i), 1 <= i <= 2
 30 [-]: NEWTABLE  R7 2 0       ; R7 := {}
 31 [-]: CONST     R8 96        ; R8 := 96.000000
 32 [-]: CONST     R9 96        ; R9 := 96.000000
 33 [-]: SETLIST   R7 2 1       ; R7[(1-1)*FPF+i] := R(7+i), 1 <= i <= 2
 34 [-]: LOADK     R8 K10       ; R8 := 0.200000
 35 [-]: CALL      R2 7 1       ; R2(R3,R4,R5,R6,R7,R8)
 36 [-]: RETURN    R0 1         ; return 


; Function #157.6:
;
; Name:            
; Defined at line: 5687
; #Upvalues:       0
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  9

  1 [-]: GETGLOBAL R1 K0        ; R1 := mAvionicCategories
  2 [-]: GETTABLE  R1 R1 K1     ; R1 := R1[0xa32f5156]
  3 [-]: MOVE      R2 R0        ; R2 := R0
  4 [-]: LOADKB    R3 1 0       ; R3 := true
  5 [-]: CALL      R1 3 1       ; R1(R2,R3)
  6 [-]: GETGLOBAL R1 K0        ; R1 := mAvionicCategories
  7 [-]: GETTABLE  R1 R1 K2     ; R1 := R1["mPrevSelectedId"]
  8 [-]: EQ        1 R1 K3      ; if R1 == nil then PC := 25
  9 [-]: JMP       25           ; PC := 25
 10 [-]: GETGLOBAL R1 K0        ; R1 := mAvionicCategories
 11 [-]: SELF      R1 R1 K4     ; R2 := R1; R1 := R1[0xca30dfb6]
 12 [-]: GETGLOBAL R3 K0        ; R3 := mAvionicCategories
 13 [-]: GETTABLE  R3 R3 K2     ; R3 := R3["mPrevSelectedId"]
 14 [-]: CALL      R1 3 2       ; R1 := R1(R2,R3)
 15 [-]: GETGLOBAL R2 K5        ; R2 := 0x7b998233
 16 [-]: MOVE      R3 R1        ; R3 := R1
 17 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 18 [-]: TEST      R2 1         ; if R2 then PC := 25
 19 [-]: JMP       25           ; PC := 25
 20 [-]: GETGLOBAL R2 K0        ; R2 := mAvionicCategories
 21 [-]: GETTABLE  R2 R2 K1     ; R2 := R2[0xa32f5156]
 22 [-]: MOVE      R3 R1        ; R3 := R1
 23 [-]: LOADKB    R4 0 0       ; R4 := false
 24 [-]: CALL      R2 3 1       ; R2(R3,R4)
 25 [-]: GETGLOBAL R2 K5        ; R2 := 0x7b998233
 26 [-]: GETGLOBAL R3 K6        ; R3 := mCollectionGrid
 27 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 28 [-]: TEST      R2 1         ; if R2 then PC := 36
 29 [-]: JMP       36           ; PC := 36
 30 [-]: GETGLOBAL R2 K6        ; R2 := mCollectionGrid
 31 [-]: GETTABLE  R2 R2 K7     ; R2 := R2["mFilterBy"]
 32 [-]: EQ        1 K3 R2      ; if nil == R2 then PC := 35
 33 [-]: JMP       35           ; PC := 35
 34 [-]: LOADKB    R2 0 1       ; R2 := false; PC := 35
 35 [-]: LOADKB    R2 1 0       ; R2 := true
 36 [-]: GETGLOBAL R3 K0        ; R3 := mAvionicCategories
 37 [-]: GETTABLE  R4 R0 K8     ; R4 := R0["Id"]
 38 [-]: SETTABLE  R3 K2 R4     ; R3["mPrevSelectedId"] := R4
 39 [-]: GETGLOBAL R3 K9        ; R3 := mOriginalInstalledInitialX
 40 [-]: EQ        1 R3 K3      ; if R3 == nil then PC := 87
 41 [-]: JMP       87           ; PC := 87
 42 [-]: GETGLOBAL R3 K9        ; R3 := mOriginalInstalledInitialX
 43 [-]: EQ        1 R3 K3      ; if R3 == nil then PC := 87
 44 [-]: JMP       87           ; PC := 87
 45 [-]: GETGLOBAL R3 K10       ; R3 := mInstalledGrid
 46 [-]: GETTABLE  R3 R3 K11    ; R3 := R3["GRID_SEP_X"]
 47 [-]: GETTABLE  R4 R0 K12    ; R4 := R0["Category"]
 48 [-]: GETGLOBAL R5 K0        ; R5 := mAvionicCategories
 49 [-]: GETTABLE  R5 R5 K13    ; R5 := R5["Categories"]
 50 [-]: GETTABLE  R5 R5 K14    ; R5 := R5["INTEGRATED"]
 51 [-]: EQ        1 R4 R5      ; if R4 == R5 then PC := 54
 52 [-]: JMP       54           ; PC := 54
 53 [-]: MUL       R3 R3 K15    ; R3 := R3 * -1.000000
 54 [-]: GETGLOBAL R4 K10       ; R4 := mInstalledGrid
 55 [-]: SETTABLE  R4 K16 R3    ; R4["mColumnSeparation"] := R3
 56 [-]: GETTABLE  R4 R0 K12    ; R4 := R0["Category"]
 57 [-]: GETGLOBAL R5 K0        ; R5 := mAvionicCategories
 58 [-]: GETTABLE  R5 R5 K13    ; R5 := R5["Categories"]
 59 [-]: GETTABLE  R5 R5 K14    ; R5 := R5["INTEGRATED"]
 60 [-]: EQ        0 R4 R5      ; if R4 ~= R5 then PC := 75
 61 [-]: JMP       75           ; PC := 75
 62 [-]: GETGLOBAL R4 K10       ; R4 := mInstalledGrid
 63 [-]: GETGLOBAL R5 K9        ; R5 := mOriginalInstalledInitialX
 64 [-]: MUL       R6 R3 K18    ; R6 := R3 * -0.500000
 65 [-]: ADD       R5 R5 R6     ; R5 := R5 + R6
 66 [-]: SETTABLE  R4 K17 R5    ; R4["mInitialX"] := R5
 67 [-]: GETGLOBAL R4 K10       ; R4 := mInstalledGrid
 68 [-]: GETGLOBAL R5 K20       ; R5 := mOriginalInstalledInitialY
 69 [-]: GETGLOBAL R6 K10       ; R6 := mInstalledGrid
 70 [-]: GETTABLE  R6 R6 K21    ; R6 := R6["GRID_SEP_Y"]
 71 [-]: MUL       R6 R6 K22    ; R6 := R6 * 0.080000
 72 [-]: ADD       R5 R5 R6     ; R5 := R5 + R6
 73 [-]: SETTABLE  R4 K19 R5    ; R4["mInitialY"] := R5
 74 [-]: JMP       87           ; PC := 87
 75 [-]: GETGLOBAL R4 K10       ; R4 := mInstalledGrid
 76 [-]: GETGLOBAL R5 K9        ; R5 := mOriginalInstalledInitialX
 77 [-]: MUL       R6 R3 K23    ; R6 := R3 * -2.700000
 78 [-]: ADD       R5 R5 R6     ; R5 := R5 + R6
 79 [-]: SETTABLE  R4 K17 R5    ; R4["mInitialX"] := R5
 80 [-]: GETGLOBAL R4 K10       ; R4 := mInstalledGrid
 81 [-]: GETGLOBAL R5 K20       ; R5 := mOriginalInstalledInitialY
 82 [-]: GETGLOBAL R6 K10       ; R6 := mInstalledGrid
 83 [-]: GETTABLE  R6 R6 K21    ; R6 := R6["GRID_SEP_Y"]
 84 [-]: MUL       R6 R6 K24    ; R6 := R6 * 0.520000
 85 [-]: ADD       R5 R5 R6     ; R5 := R5 + R6
 86 [-]: SETTABLE  R4 K19 R5    ; R4["mInitialY"] := R5
 87 [-]: GETGLOBAL R4 K10       ; R4 := mInstalledGrid
 88 [-]: SELF      R4 R4 K25    ; R5 := R4; R4 := R4[0xbd47ed62]
 89 [-]: GETTABLE  R6 R0 K12    ; R6 := R0["Category"]
 90 [-]: CALL      R4 3 1       ; R4(R5,R6)
 91 [-]: GETGLOBAL R4 K5        ; R4 := 0x7b998233
 92 [-]: GETGLOBAL R5 K6        ; R5 := mCollectionGrid
 93 [-]: CALL      R4 2 2       ; R4 := R4(R5)
 94 [-]: TEST      R4 1         ; if R4 then PC := 111
 95 [-]: JMP       111          ; PC := 111
 96 [-]: GETGLOBAL R4 K6        ; R4 := mCollectionGrid
 97 [-]: GETTABLE  R5 R0 K27    ; R5 := R0["HiddenCats"]
 98 [-]: SETTABLE  R4 K26 R5    ; R4["mForceHiddenCategories"] := R5
 99 [-]: TEST      R2 1         ; if R2 then PC := 111
100 [-]: JMP       111          ; PC := 111
101 [-]: GETGLOBAL R4 K6        ; R4 := mCollectionGrid
102 [-]: SETTABLE  R4 K28 K29   ; R4["mMuteGridOpenSound"] := true
103 [-]: GETGLOBAL R4 K6        ; R4 := mCollectionGrid
104 [-]: SELF      R4 R4 K30    ; R5 := R4; R4 := R4[0x71e9ac81]
105 [-]: LOADNIL   R6 R6        ; R6 := nil
106 [-]: LOADKB    R7 1 0       ; R7 := true
107 [-]: LOADKB    R8 1 0       ; R8 := true
108 [-]: CALL      R4 5 1       ; R4(R5,R6,R7,R8)
109 [-]: GETGLOBAL R4 K6        ; R4 := mCollectionGrid
110 [-]: SETTABLE  R4 K28 K31   ; R4["mMuteGridOpenSound"] := false
111 [-]: RETURN    R0 1         ; return 


; Function #158:
;
; Name:            
; Defined at line: 5761
; #Upvalues:       1
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  9

  1 [-]: GETGLOBAL R2 K0        ; R2 := mIsDiegetic
  2 [-]: EQ        1 R2 K1      ; if R2 == nil then PC := 7
  3 [-]: JMP       7            ; PC := 7
  4 [-]: GETGLOBAL R2 K0        ; R2 := mIsDiegetic
  5 [-]: TEST      R2 0         ; if not R2 then PC := 8
  6 [-]: JMP       8            ; PC := 8
  7 [-]: RETURN    R0 1         ; return 
  8 [-]: GETGLOBAL R2 K2        ; R2 := 0x7b998233
  9 [-]: GETGLOBAL R3 K3        ; R3 := mAnchorMgr
 10 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 11 [-]: TEST      R2 1         ; if R2 then PC := 18
 12 [-]: JMP       18           ; PC := 18
 13 [-]: GETGLOBAL R2 K3        ; R2 := mAnchorMgr
 14 [-]: SELF      R2 R2 K4     ; R3 := R2; R2 := R2[0xfaa69527]
 15 [-]: MOVE      R4 R0        ; R4 := R0
 16 [-]: MOVE      R5 R1        ; R5 := R1
 17 [-]: CALL      R2 4 1       ; R2(R3,R4,R5)
 18 [-]: GETUPVAL  R2 U0        ; R2 := U0
 19 [-]: GETTABLE  R2 R2 K5     ; R2 := R2[0x44537adf]
 20 [-]: GETGLOBAL R3 K6        ; R3 := 0xae91e43b
 21 [-]: CALL      R2 2 3       ; R2,R3 := R2(R3)
 22 [-]: GETGLOBAL R4 K6        ; R4 := 0xae91e43b
 23 [-]: SELF      R4 R4 K7     ; R5 := R4; R4 := R4[0x67bc869f]
 24 [-]: LOADK     R6 K8        ; R6 := "Bg"
 25 [-]: CONST     R7 12        ; R7 := 12.000000
 26 [-]: MOVE      R8 R2        ; R8 := R2
 27 [-]: CALL      R4 5 1       ; R4(R5,R6,R7,R8)
 28 [-]: GETGLOBAL R4 K6        ; R4 := 0xae91e43b
 29 [-]: SELF      R4 R4 K7     ; R5 := R4; R4 := R4[0x67bc869f]
 30 [-]: LOADK     R6 K8        ; R6 := "Bg"
 31 [-]: CONST     R7 13        ; R7 := 13.000000
 32 [-]: MOVE      R8 R3        ; R8 := R3
 33 [-]: CALL      R4 5 1       ; R4(R5,R6,R7,R8)
 34 [-]: GETGLOBAL R4 K6        ; R4 := 0xae91e43b
 35 [-]: SELF      R4 R4 K7     ; R5 := R4; R4 := R4[0x67bc869f]
 36 [-]: LOADK     R6 K9        ; R6 := "Blurer"
 37 [-]: CONST     R7 12        ; R7 := 12.000000
 38 [-]: MOVE      R8 R2        ; R8 := R2
 39 [-]: CALL      R4 5 1       ; R4(R5,R6,R7,R8)
 40 [-]: GETGLOBAL R4 K6        ; R4 := 0xae91e43b
 41 [-]: SELF      R4 R4 K7     ; R5 := R4; R4 := R4[0x67bc869f]
 42 [-]: LOADK     R6 K9        ; R6 := "Blurer"
 43 [-]: CONST     R7 13        ; R7 := 13.000000
 44 [-]: MOVE      R8 R3        ; R8 := R3
 45 [-]: CALL      R4 5 1       ; R4(R5,R6,R7,R8)
 46 [-]: RETURN    R0 1         ; return 


; Function #159:
;
; Name:            
; Defined at line: 5777
; #Upvalues:       24
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  41

  1 [-]: GETGLOBAL R0 K1        ; R0 := _T
  2 [-]: GETTABLE  R0 R0 K2     ; R0 := R0["ArsenalState"]
  3 [-]: EQ        0 R0 K4      ; if R0 ~= 3.000000 then PC := 13
  4 [-]: JMP       13           ; PC := 13
  5 [-]: GETGLOBAL R0 K1        ; R0 := _T
  6 [-]: GETTABLE  R0 R0 K5     ; R0 := R0["upgradeItemSlot"]
  7 [-]: EQ        1 R0 K6      ; if R0 == nil then PC := 13
  8 [-]: JMP       13           ; PC := 13
  9 [-]: GETGLOBAL R0 K1        ; R0 := _T
 10 [-]: GETTABLE  R0 R0 K5     ; R0 := R0["upgradeItemSlot"]
 11 [-]: EQ        1 R0 K7      ; if R0 == 4.000000 then PC := 14
 12 [-]: JMP       14           ; PC := 14
 13 [-]: LOADKB    R0 0 1       ; R0 := false; PC := 14
 14 [-]: LOADKB    R0 1 0       ; R0 := true
 15 [-]: SETGLOBAL R0 K0        ; mIsHeavyWeapon := R0
 16 [-]: GETUPVAL  R0 U0        ; R0 := U0
 17 [-]: CALL      R0 1 2       ; R0 := R0()
 18 [-]: GETGLOBAL R1 K9        ; R1 := 0x0469f296
 19 [-]: GETUPVAL  R2 U1        ; R2 := U1
 20 [-]: GETTABLE  R2 R2 K10    ; R2 := R2[0x06d055f9]
 21 [-]: MOVE      R3 R0        ; R3 := R0
 22 [-]: LOADK     R4 K11       ; R4 := "ArsenalSpace"
 23 [-]: LOADK     R5 K12       ; R5 := "ArsenalDevice"
 24 [-]: CALL      R2 4 0       ; R2,... := R2(R3,R4,R5)
 25 [-]: CALL      R1 0 2       ; R1 := R1(R2,...)
 26 [-]: SETGLOBAL R1 K8        ; mArsenalDeviceTag := R1
 27 [-]: GETUPVAL  R1 U1        ; R1 := U1
 28 [-]: GETTABLE  R1 R1 K10    ; R1 := R1[0x06d055f9]
 29 [-]: GETGLOBAL R2 K14       ; R2 := 0xe7f2b02f
 30 [-]: SELF      R2 R2 K15    ; R3 := R2; R2 := R2[0xca33534d]
 31 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 32 [-]: LOADK     R3 K16       ; R3 := "ArsenalRelay"
 33 [-]: LOADK     R4 K17       ; R4 := "Arsenal"
 34 [-]: CALL      R1 4 2       ; R1 := R1(R2,R3,R4)
 35 [-]: SETGLOBAL R1 K13       ; mArsenalConsoleTag := R1
 36 [-]: GETUPVAL  R1 U2        ; R1 := U2
 37 [-]: GETTABLE  R1 R1 K18    ; R1 := R1[0xe5fc61b6]
 38 [-]: CALL      R1 1 1       ; R1()
 39 [-]: NEWTABLE  R1 0 8       ; R1 := {}
 40 [-]: GETUPVAL  R2 U3        ; R2 := U3
 41 [-]: GETTABLE  R2 R2 K21    ; R2 := R2[0x5d10207d]
 42 [-]: CONST     R3 9         ; R3 := 9.000000
 43 [-]: LOADKB    R4 1 0       ; R4 := true
 44 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 45 [-]: SETTABLE  R1 K20 R2    ; R1["FloatingContent"] := R2
 46 [-]: GETUPVAL  R2 U3        ; R2 := U3
 47 [-]: GETTABLE  R2 R2 K21    ; R2 := R2[0x5d10207d]
 48 [-]: CONST     R3 9         ; R3 := 9.000000
 49 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 50 [-]: SETTABLE  R1 K22 R2    ; R1[0x71e9ac81] := R2
 51 [-]: GETUPVAL  R2 U3        ; R2 := U3
 52 [-]: GETTABLE  R2 R2 K21    ; R2 := R2[0x5d10207d]
 53 [-]: CONST     R3 10        ; R3 := 10.000000
 54 [-]: LOADKB    R4 1 0       ; R4 := true
 55 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 56 [-]: SETTABLE  R1 K23 R2    ; R1[0x368ad758] := R2
 57 [-]: GETUPVAL  R2 U3        ; R2 := U3
 58 [-]: GETTABLE  R2 R2 K21    ; R2 := R2[0x5d10207d]
 59 [-]: CONST     R3 2         ; R3 := 2.000000
 60 [-]: LOADKB    R4 1 0       ; R4 := true
 61 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 62 [-]: SETTABLE  R1 K24 R2    ; R1["Background1"] := R2
 63 [-]: GETUPVAL  R2 U3        ; R2 := U3
 64 [-]: GETTABLE  R2 R2 K21    ; R2 := R2[0x5d10207d]
 65 [-]: CONST     R3 2         ; R3 := 2.000000
 66 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 67 [-]: SETTABLE  R1 K25 R2    ; R1["Background1Color"] := R2
 68 [-]: GETUPVAL  R2 U3        ; R2 := U3
 69 [-]: GETTABLE  R2 R2 K21    ; R2 := R2[0x5d10207d]
 70 [-]: CONST     R3 12        ; R3 := 12.000000
 71 [-]: LOADKB    R4 1 0       ; R4 := true
 72 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 73 [-]: SETTABLE  R1 K26 R2    ; R1["Negative"] := R2
 74 [-]: GETUPVAL  R2 U3        ; R2 := U3
 75 [-]: GETTABLE  R2 R2 K21    ; R2 := R2[0x5d10207d]
 76 [-]: CONST     R3 12        ; R3 := 12.000000
 77 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 78 [-]: SETTABLE  R1 K27 R2    ; R1[0x25312c9b] := R2
 79 [-]: GETUPVAL  R2 U3        ; R2 := U3
 80 [-]: GETTABLE  R2 R2 K21    ; R2 := R2[0x5d10207d]
 81 [-]: CONST     R3 6         ; R3 := 6.000000
 82 [-]: LOADKB    R4 1 0       ; R4 := true
 83 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
 84 [-]: SETTABLE  R1 K28 R2    ; R1[0xbd2e96ea] := R2
 85 [-]: SETGLOBAL R1 K19       ; mColors := R1
 86 [-]: GETGLOBAL R1 K19       ; R1 := mColors
 87 [-]: GETUPVAL  R2 U1        ; R2 := U1
 88 [-]: GETTABLE  R2 R2 K30    ; R2 := R2[0x8bcd12b6]
 89 [-]: GETGLOBAL R3 K19       ; R3 := mColors
 90 [-]: GETTABLE  R3 R3 K20    ; R3 := R3["FloatingContent"]
 91 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 92 [-]: SETTABLE  R1 K29 R2    ; R1["FloatingContentObject"] := R2
 93 [-]: GETGLOBAL R1 K19       ; R1 := mColors
 94 [-]: GETUPVAL  R2 U1        ; R2 := U1
 95 [-]: GETTABLE  R2 R2 K30    ; R2 := R2[0x8bcd12b6]
 96 [-]: GETGLOBAL R3 K19       ; R3 := mColors
 97 [-]: GETTABLE  R3 R3 K24    ; R3 := R3["Background1"]
 98 [-]: CALL      R2 2 2       ; R2 := R2(R3)
 99 [-]: SETTABLE  R1 K31 R2    ; R1["Background1Object"] := R2
100 [-]: LOADNIL   R1 R1        ; R1 := nil
101 [-]: GETGLOBAL R2 K32       ; R2 := 0x7b998233
102 [-]: GETGLOBAL R3 K1        ; R3 := _T
103 [-]: GETTABLE  R3 R3 K33    ; R3 := R3["MenuSuitAvatar"]
104 [-]: CALL      R2 2 2       ; R2 := R2(R3)
105 [-]: TEST      R2 1         ; if R2 then PC := 112
106 [-]: JMP       112          ; PC := 112
107 [-]: GETGLOBAL R2 K1        ; R2 := _T
108 [-]: GETTABLE  R2 R2 K33    ; R2 := R2["MenuSuitAvatar"]
109 [-]: SELF      R2 R2 K34    ; R3 := R2; R2 := R2[0xd1586535]
110 [-]: CALL      R2 2 2       ; R2 := R2(R3)
111 [-]: MOVE      R1 R2        ; R1 := R2
112 [-]: GETUPVAL  R2 U1        ; R2 := U1
113 [-]: GETTABLE  R2 R2 K35    ; R2 := R2[0x2a1108a9]
114 [-]: GETGLOBAL R3 K13       ; R3 := mArsenalConsoleTag
115 [-]: MOVE      R4 R1        ; R4 := R1
116 [-]: CALL      R2 3 2       ; R2 := R2(R3,R4)
117 [-]: GETGLOBAL R3 K32       ; R3 := 0x7b998233
118 [-]: MOVE      R4 R2        ; R4 := R2
119 [-]: CALL      R3 2 2       ; R3 := R3(R4)
120 [-]: TEST      R3 1         ; if R3 then PC := 134
121 [-]: JMP       134          ; PC := 134
122 [-]: SELF      R3 R2 K36    ; R4 := R2; R3 := R2[0xfe3be07a]
123 [-]: CALL      R3 2 2       ; R3 := R3(R4)
124 [-]: TEST      R3 0         ; if not R3 then PC := 134
125 [-]: JMP       134          ; PC := 134
126 [-]: GETGLOBAL R3 K32       ; R3 := 0x7b998233
127 [-]: GETGLOBAL R4 K37       ; R4 := 0x870a8528
128 [-]: CALL      R3 2 2       ; R3 := R3(R4)
129 [-]: TEST      R3 1         ; if R3 then PC := 134
130 [-]: JMP       134          ; PC := 134
131 [-]: SELF      R3 R2 K38    ; R4 := R2; R3 := R2[0x20358b28]
132 [-]: GETGLOBAL R5 K37       ; R5 := 0x870a8528
133 [-]: CALL      R3 3 1       ; R3(R4,R5)
134 [-]: GETGLOBAL R3 K1        ; R3 := _T
135 [-]: GETTABLE  R3 R3 K2     ; R3 := R3["ArsenalState"]
136 [-]: EQ        1 R3 K39     ; if R3 == 2.000000 then PC := 139
137 [-]: JMP       139          ; PC := 139
138 [-]: LOADKB    R3 0 1       ; R3 := false; PC := 139
139 [-]: LOADKB    R3 1 0       ; R3 := true
140 [-]: GETGLOBAL R4 K40       ; R4 := 0xbe190284
141 [-]: TEST      R4 0         ; if not R4 then PC := 147
142 [-]: JMP       147          ; PC := 147
143 [-]: GETGLOBAL R4 K40       ; R4 := 0xbe190284
144 [-]: SELF      R4 R4 K41    ; R5 := R4; R4 := R4[0x919b1925]
145 [-]: MOVE      R6 R3        ; R6 := R3
146 [-]: CALL      R4 3 1       ; R4(R5,R6)
147 [-]: GETGLOBAL R4 K43       ; R4 := 0x9ba7909f
148 [-]: SELF      R4 R4 K44    ; R5 := R4; R4 := R4[0xbcfb64ab]
149 [-]: GETGLOBAL R6 K45       ; R6 := 0xf6207c05
150 [-]: CALL      R4 3 2       ; R4 := R4(R5,R6)
151 [-]: SETGLOBAL R4 K42       ; mRailjackMovie := R4
152 [-]: GETGLOBAL R4 K47       ; R4 := 0x34291f5c
153 [-]: GETTABLE  R4 R4 K48    ; R4 := R4[0xa7a2e381]
154 [-]: CALL      R4 1 2       ; R4 := R4()
155 [-]: SETGLOBAL R4 K46       ; mWeGame := R4
156 [-]: GETGLOBAL R4 K50       ; R4 := 0xae91e43b
157 [-]: SELF      R4 R4 K51    ; R5 := R4; R4 := R4[0x91a24e4b]
158 [-]: LOADK     R6 K52       ; R6 := "MiddleMenu"
159 [-]: CONST     R7 1         ; R7 := 1.000000
160 [-]: CALL      R4 4 2       ; R4 := R4(R5,R6,R7)
161 [-]: SETGLOBAL R4 K49       ; mMiddleMenuY := R4
162 [-]: GETGLOBAL R4 K50       ; R4 := 0xae91e43b
163 [-]: SELF      R4 R4 K53    ; R5 := R4; R4 := R4[0xaade900e]
164 [-]: LOADK     R6 K54       ; R6 := "AbilityList"
165 [-]: CONST     R7 11        ; R7 := 11.000000
166 [-]: LOADKB    R8 0 0       ; R8 := false
167 [-]: CALL      R4 5 1       ; R4(R5,R6,R7,R8)
168 [-]: GETUPVAL  R4 U4        ; R4 := U4
169 [-]: CALL      R4 1 2       ; R4 := R4()
170 [-]: TEST      R4 0         ; if not R4 then PC := 176
171 [-]: JMP       176          ; PC := 176
172 [-]: GETGLOBAL R4 K32       ; R4 := 0x7b998233
173 [-]: GETGLOBAL R5 K1        ; R5 := _T
174 [-]: GETTABLE  R5 R5 K55    ; R5 := R5["RailjackAvatar"]
175 [-]: CALL      R4 2 2       ; R4 := R4(R5)
176 [-]: GETGLOBAL R5 K50       ; R5 := 0xae91e43b
177 [-]: SELF      R5 R5 K53    ; R6 := R5; R5 := R5[0xaade900e]
178 [-]: LOADK     R7 K56       ; R7 := "Hint"
179 [-]: CONST     R8 11        ; R8 := 11.000000
180 [-]: MOVE      R9 R4        ; R9 := R4
181 [-]: CALL      R5 5 1       ; R5(R6,R7,R8,R9)
182 [-]: TEST      R4 0         ; if not R4 then PC := 196
183 [-]: JMP       196          ; PC := 196
184 [-]: GETGLOBAL R5 K50       ; R5 := 0xae91e43b
185 [-]: SELF      R5 R5 K57    ; R6 := R5; R5 := R5[0x20b98db3]
186 [-]: LOADK     R7 K58       ; R7 := "Hint.text"
187 [-]: LOADK     R8 K59       ; R8 := "/Lotus/Language/Railjack/Loadout_NoStatsHint"
188 [-]: CALL      R5 4 1       ; R5(R6,R7,R8)
189 [-]: GETGLOBAL R5 K50       ; R5 := 0xae91e43b
190 [-]: SELF      R5 R5 K60    ; R6 := R5; R5 := R5[0x67bc869f]
191 [-]: LOADK     R7 K56       ; R7 := "Hint"
192 [-]: CONST     R8 36        ; R8 := 36.000000
193 [-]: GETGLOBAL R9 K19       ; R9 := mColors
194 [-]: GETTABLE  R9 R9 K20    ; R9 := R9["FloatingContent"]
195 [-]: CALL      R5 5 1       ; R5(R6,R7,R8,R9)
196 [-]: GETGLOBAL R5 K1        ; R5 := _T
197 [-]: GETTABLE  R5 R5 K62    ; R5 := R5["mSentinelMode"]
198 [-]: SETGLOBAL R5 K61       ; mCachedSentinelMode := R5
199 [-]: GETGLOBAL R5 K1        ; R5 := _T
200 [-]: GETTABLE  R5 R5 K64    ; R5 := R5["mSpecialSuitMode"]
201 [-]: SETGLOBAL R5 K63       ; mCachedSpecialSuitMode := R5
202 [-]: GETGLOBAL R5 K1        ; R5 := _T
203 [-]: GETGLOBAL R6 K63       ; R6 := mCachedSpecialSuitMode
204 [-]: SETTABLE  R5 K63 R6    ; R5["mCachedSpecialSuitMode"] := R6
205 [-]: GETGLOBAL R5 K1        ; R5 := _T
206 [-]: SETTABLE  R5 K62 K65   ; R5["mSentinelMode"] := false
207 [-]: GETGLOBAL R5 K1        ; R5 := _T
208 [-]: SETTABLE  R5 K64 K6    ; R5["mSpecialSuitMode"] := nil
209 [-]: GETGLOBAL R5 K63       ; R5 := mCachedSpecialSuitMode
210 [-]: TEST      R5 0         ; if not R5 then PC := 228
211 [-]: JMP       228          ; PC := 228
212 [-]: GETGLOBAL R5 K32       ; R5 := 0x7b998233
213 [-]: GETGLOBAL R6 K1        ; R6 := _T
214 [-]: GETTABLE  R6 R6 K66    ; R6 := R6["SpecialSuitAvatar"]
215 [-]: CALL      R5 2 2       ; R5 := R5(R6)
216 [-]: TEST      R5 1         ; if R5 then PC := 228
217 [-]: JMP       228          ; PC := 228
218 [-]: GETGLOBAL R5 K1        ; R5 := _T
219 [-]: GETTABLE  R5 R5 K33    ; R5 := R5["MenuSuitAvatar"]
220 [-]: SELF      R5 R5 K67    ; R6 := R5; R5 := R5[0x2abc8ecd]
221 [-]: LOADKB    R7 1 0       ; R7 := true
222 [-]: CALL      R5 3 1       ; R5(R6,R7)
223 [-]: GETGLOBAL R5 K1        ; R5 := _T
224 [-]: GETTABLE  R5 R5 K66    ; R5 := R5["SpecialSuitAvatar"]
225 [-]: SELF      R5 R5 K67    ; R6 := R5; R5 := R5[0x2abc8ecd]
226 [-]: LOADKB    R7 0 0       ; R7 := false
227 [-]: CALL      R5 3 1       ; R5(R6,R7)
228 [-]: GETUPVAL  R5 U4        ; R5 := U4
229 [-]: CALL      R5 1 2       ; R5 := R5()
230 [-]: TEST      R5 0         ; if not R5 then PC := 234
231 [-]: JMP       234          ; PC := 234
232 [-]: CONST     R5 15        ; R5 := 15.000000
233 [-]: SETGLOBAL R5 K68       ; AURA_SLOT_INDEX := R5
234 [-]: GETGLOBAL R5 K32       ; R5 := 0x7b998233
235 [-]: GETGLOBAL R6 K42       ; R6 := mRailjackMovie
236 [-]: CALL      R5 2 2       ; R5 := R5(R6)
237 [-]: TEST      R5 0         ; if not R5 then PC := 276
238 [-]: JMP       276          ; PC := 276
239 [-]: GETGLOBAL R5 K1        ; R5 := _T
240 [-]: GETTABLE  R5 R5 K2     ; R5 := R5["ArsenalState"]
241 [-]: EQ        1 R5 K4      ; if R5 == 3.000000 then PC := 276
242 [-]: JMP       276          ; PC := 276
243 [-]: GETGLOBAL R5 K1        ; R5 := _T
244 [-]: GETTABLE  R5 R5 K69    ; R5 := R5["OpenedFromModScreen"]
245 [-]: EQ        0 R5 K70     ; if R5 ~= true then PC := 276
246 [-]: JMP       276          ; PC := 276
247 [-]: GETUPVAL  R5 U5        ; R5 := U5
248 [-]: GETTABLE  R5 R5 K71    ; R5 := R5[0xb73d420f]
249 [-]: CALL      R5 1 2       ; R5 := R5()
250 [-]: GETUPVAL  R6 U5        ; R6 := U5
251 [-]: GETTABLE  R6 R6 K72    ; R6 := R6["UI_MODE_IN_SPACE_SHIP"]
252 [-]: EQ        0 R5 R6      ; if R5 ~= R6 then PC := 276
253 [-]: JMP       276          ; PC := 276
254 [-]: GETGLOBAL R5 K32       ; R5 := 0x7b998233
255 [-]: MOVE      R6 R2        ; R6 := R2
256 [-]: CALL      R5 2 2       ; R5 := R5(R6)
257 [-]: TEST      R5 1         ; if R5 then PC := 276
258 [-]: JMP       276          ; PC := 276
259 [-]: GETGLOBAL R5 K40       ; R5 := 0xbe190284
260 [-]: SELF      R5 R5 K73    ; R6 := R5; R5 := R5[0x23ddc82a]
261 [-]: CALL      R5 2 2       ; R5 := R5(R6)
262 [-]: TEST      R5 1         ; if R5 then PC := 276
263 [-]: JMP       276          ; PC := 276
264 [-]: SELF      R5 R2 K34    ; R6 := R2; R5 := R2[0xd1586535]
265 [-]: CALL      R5 2 2       ; R5 := R5(R6)
266 [-]: GETTABLE  R6 R5 K74    ; R6 := R5["y"]
267 [-]: SUB       R6 R6 K75    ; R6 := R6 - 0.670000
268 [-]: SETTABLE  R5 K74 R6    ; R5["y"] := R6
269 [-]: GETGLOBAL R6 K1        ; R6 := _T
270 [-]: GETTABLE  R6 R6 K33    ; R6 := R6["MenuSuitAvatar"]
271 [-]: SELF      R6 R6 K76    ; R7 := R6; R6 := R6[0x589ef1c1]
272 [-]: MOVE      R8 R5        ; R8 := R5
273 [-]: GETGLOBAL R9 K77       ; R9 := 0x00046924
274 [-]: CALL      R9 1 0       ; R9,... := R9()
275 [-]: CALL      R6 0 1       ; R6(R7,...)
276 [-]: GETUPVAL  R6 U1        ; R6 := U1
277 [-]: GETTABLE  R6 R6 K78    ; R6 := R6[0xa9882367]
278 [-]: LOADK     R7 K79       ; R7 := "RampMover"
279 [-]: CALL      R6 2 2       ; R6 := R6(R7)
280 [-]: GETGLOBAL R7 K32       ; R7 := 0x7b998233
281 [-]: MOVE      R8 R6        ; R8 := R6
282 [-]: CALL      R7 2 2       ; R7 := R7(R8)
283 [-]: TEST      R7 1         ; if R7 then PC := 296
284 [-]: JMP       296          ; PC := 296
285 [-]: SELF      R7 R6 K80    ; R8 := R6; R7 := R6[0xf2deaf69]
286 [-]: GETGLOBAL R9 K81       ; R9 := gMoverType
287 [-]: CALL      R7 3 2       ; R7 := R7(R8,R9)
288 [-]: TEST      R7 0         ; if not R7 then PC := 296
289 [-]: JMP       296          ; PC := 296
290 [-]: SELF      R7 R6 K82    ; R8 := R6; R7 := R6[0x8eb2112d]
291 [-]: LOADK     R9 K83       ; R9 := "StartBackward"
292 [-]: CALL      R7 3 1       ; R7(R8,R9)
293 [-]: SELF      R7 R6 K84    ; R8 := R6; R7 := R6[0xd3ac44e0]
294 [-]: LOADK     R9 K85       ; R9 := 0.100000
295 [-]: CALL      R7 3 1       ; R7(R8,R9)
296 [-]: GETUPVAL  R7 U6        ; R7 := U6
297 [-]: LOADKB    R8 0 0       ; R8 := false
298 [-]: CALL      R7 2 1       ; R7(R8)
299 [-]: GETGLOBAL R7 K32       ; R7 := 0x7b998233
300 [-]: GETGLOBAL R8 K1        ; R8 := _T
301 [-]: GETTABLE  R8 R8 K86    ; R8 := R8["KDriveAvatar"]
302 [-]: CALL      R7 2 2       ; R7 := R7(R8)
303 [-]: TEST      R7 1         ; if R7 then PC := 315
304 [-]: JMP       315          ; PC := 315
305 [-]: GETGLOBAL R7 K1        ; R7 := _T
306 [-]: GETTABLE  R7 R7 K86    ; R7 := R7["KDriveAvatar"]
307 [-]: SELF      R7 R7 K87    ; R8 := R7; R7 := R7[0x044b7be8]
308 [-]: GETGLOBAL R9 K1        ; R9 := _T
309 [-]: GETTABLE  R9 R9 K2     ; R9 := R9["ArsenalState"]
310 [-]: EQ        0 R9 K4      ; if R9 ~= 3.000000 then PC := 313
311 [-]: JMP       313          ; PC := 313
312 [-]: LOADKB    R9 0 1       ; R9 := false; PC := 313
313 [-]: LOADKB    R9 1 0       ; R9 := true
314 [-]: CALL      R7 3 1       ; R7(R8,R9)
315 [-]: GETGLOBAL R7 K32       ; R7 := 0x7b998233
316 [-]: GETGLOBAL R8 K1        ; R8 := _T
317 [-]: GETTABLE  R8 R8 K33    ; R8 := R8["MenuSuitAvatar"]
318 [-]: CALL      R7 2 2       ; R7 := R7(R8)
319 [-]: TEST      R7 1         ; if R7 then PC := 365
320 [-]: JMP       365          ; PC := 365
321 [-]: GETGLOBAL R7 K1        ; R7 := _T
322 [-]: GETTABLE  R7 R7 K33    ; R7 := R7["MenuSuitAvatar"]
323 [-]: SELF      R7 R7 K87    ; R8 := R7; R7 := R7[0x044b7be8]
324 [-]: GETGLOBAL R9 K32       ; R9 := 0x7b998233
325 [-]: GETGLOBAL R10 K42      ; R10 := mRailjackMovie
326 [-]: CALL      R9 2 2       ; R9 := R9(R10)
327 [-]: TEST      R9 0         ; if not R9 then PC := 335
328 [-]: JMP       335          ; PC := 335
329 [-]: GETGLOBAL R9 K1        ; R9 := _T
330 [-]: GETTABLE  R9 R9 K2     ; R9 := R9["ArsenalState"]
331 [-]: EQ        0 R9 K4      ; if R9 ~= 3.000000 then PC := 334
332 [-]: JMP       334          ; PC := 334
333 [-]: LOADKB    R9 0 1       ; R9 := false; PC := 334
334 [-]: LOADKB    R9 1 0       ; R9 := true
335 [-]: CALL      R7 3 1       ; R7(R8,R9)
336 [-]: GETGLOBAL R7 K32       ; R7 := 0x7b998233
337 [-]: GETGLOBAL R8 K88       ; R8 := 0x69c55307
338 [-]: CALL      R7 2 2       ; R7 := R7(R8)
339 [-]: TEST      R7 1         ; if R7 then PC := 358
340 [-]: JMP       358          ; PC := 358
341 [-]: GETGLOBAL R7 K1        ; R7 := _T
342 [-]: GETTABLE  R7 R7 K2     ; R7 := R7["ArsenalState"]
343 [-]: EQ        1 R7 K4      ; if R7 == 3.000000 then PC := 358
344 [-]: JMP       358          ; PC := 358
345 [-]: GETGLOBAL R7 K32       ; R7 := 0x7b998233
346 [-]: GETGLOBAL R8 K42       ; R8 := mRailjackMovie
347 [-]: CALL      R7 2 2       ; R7 := R7(R8)
348 [-]: TEST      R7 0         ; if not R7 then PC := 358
349 [-]: JMP       358          ; PC := 358
350 [-]: GETGLOBAL R7 K1        ; R7 := _T
351 [-]: GETTABLE  R7 R7 K33    ; R7 := R7["MenuSuitAvatar"]
352 [-]: SELF      R7 R7 K89    ; R8 := R7; R7 := R7[0x7027c544]
353 [-]: GETGLOBAL R9 K88       ; R9 := 0x69c55307
354 [-]: LOADKB    R10 0 0      ; R10 := false
355 [-]: CONST     R11 2        ; R11 := 2.000000
356 [-]: CONST     R12 2        ; R12 := 2.000000
357 [-]: CALL      R7 6 1       ; R7(R8,R9,R10,R11,R12)
358 [-]: GETGLOBAL R7 K1        ; R7 := _T
359 [-]: GETTABLE  R7 R7 K33    ; R7 := R7["MenuSuitAvatar"]
360 [-]: SELF      R7 R7 K90    ; R8 := R7; R7 := R7[0xde321e6f]
361 [-]: CALL      R7 2 2       ; R7 := R7(R8)
362 [-]: SELF      R7 R7 K91    ; R8 := R7; R7 := R7[0xcfd657f3]
363 [-]: MOVE      R9 R0        ; R9 := R0
364 [-]: CALL      R7 3 1       ; R7(R8,R9)
365 [-]: GETGLOBAL R7 K92       ; R7 := 0x2d0fad09
366 [-]: LOADK     R8 K93       ; R8 := "Lotus.Interface.Libs.TimerMgr"
367 [-]: CALL      R7 2 2       ; R7 := R7(R8)
368 [-]: GETTABLE  R8 R7 K95    ; R8 := R7[0xde474187]
369 [-]: CALL      R8 1 2       ; R8 := R8()
370 [-]: SETGLOBAL R8 K94       ; mTimerMgr := R8
371 [-]: LOADKB    R8 0 0       ; R8 := false
372 [-]: SETGLOBAL R8 K96       ; mIsDiegetic := R8
373 [-]: GETGLOBAL R8 K32       ; R8 := 0x7b998233
374 [-]: GETGLOBAL R9 K42       ; R9 := mRailjackMovie
375 [-]: CALL      R8 2 2       ; R8 := R8(R9)
376 [-]: TEST      R8 0         ; if not R8 then PC := 498
377 [-]: JMP       498          ; PC := 498
378 [-]: LOADNIL   R8 R8        ; R8 := nil
379 [-]: GETGLOBAL R9 K32       ; R9 := 0x7b998233
380 [-]: MOVE      R10 R1       ; R10 := R1
381 [-]: CALL      R9 2 2       ; R9 := R9(R10)
382 [-]: TEST      R9 1         ; if R9 then PC := 392
383 [-]: JMP       392          ; PC := 392
384 [-]: GETGLOBAL R9 K97       ; R9 := 0x89326c93
385 [-]: SELF      R9 R9 K98    ; R10 := R9; R9 := R9[0x462c251c]
386 [-]: GETGLOBAL R11 K8       ; R11 := mArsenalDeviceTag
387 [-]: MOVE      R12 R1       ; R12 := R1
388 [-]: CONST     R13 0        ; R13 := 0.000000
389 [-]: CONST     R14 200      ; R14 := 200.000000
390 [-]: CALL      R9 6 2       ; R9 := R9(R10,R11,R12,R13,R14)
391 [-]: MOVE      R8 R9        ; R8 := R9
392 [-]: GETGLOBAL R9 K32       ; R9 := 0x7b998233
393 [-]: MOVE      R10 R8       ; R10 := R8
394 [-]: CALL      R9 2 2       ; R9 := R9(R10)
395 [-]: TEST      R9 1         ; if R9 then PC := 439
396 [-]: JMP       439          ; PC := 439
397 [-]: GETUPVAL  R9 U1        ; R9 := U1
398 [-]: GETTABLE  R9 R9 K10    ; R9 := R9[0x06d055f9]
399 [-]: MOVE      R10 R0       ; R10 := R0
400 [-]: GETGLOBAL R11 K99      ; R11 := 0xa421af95
401 [-]: LOADK     R12 K100     ; R12 := -0.020000
402 [-]: LOADK     R13 K101     ; R13 := 5.070000
403 [-]: CONST     R14 0        ; R14 := -0.500000
404 [-]: CALL      R11 4 2      ; R11 := R11(R12,R13,R14)
405 [-]: GETGLOBAL R12 K99      ; R12 := 0xa421af95
406 [-]: LOADK     R13 K102     ; R13 := 1.600000
407 [-]: LOADK     R14 K103     ; R14 := 2.800000
408 [-]: CONST     R15 0        ; R15 := 0.500000
409 [-]: CALL      R12 4 0      ; R12,... := R12(R13,R14,R15)
410 [-]: CALL      R9 0 2       ; R9 := R9(R10,...)
411 [-]: GETUPVAL  R10 U1       ; R10 := U1
412 [-]: GETTABLE  R10 R10 K10  ; R10 := R10[0x06d055f9]
413 [-]: MOVE      R11 R0       ; R11 := R0
414 [-]: GETGLOBAL R12 K77      ; R12 := 0x00046924
415 [-]: CONST     R13 3        ; R13 := 3.000000
416 [-]: CONST     R14 0        ; R14 := 0.000000
417 [-]: CONST     R15 0        ; R15 := 0.000000
418 [-]: CALL      R12 4 2      ; R12 := R12(R13,R14,R15)
419 [-]: GETGLOBAL R13 K77      ; R13 := 0x00046924
420 [-]: CONST     R14 -20      ; R14 := -20.000000
421 [-]: CONST     R15 0        ; R15 := 0.000000
422 [-]: CONST     R16 0        ; R16 := 0.000000
423 [-]: CALL      R13 4 0      ; R13,... := R13(R14,R15,R16)
424 [-]: CALL      R10 0 2      ; R10 := R10(R11,...)
425 [-]: GETGLOBAL R11 K50      ; R11 := 0xae91e43b
426 [-]: SELF      R11 R11 K104 ; R12 := R11; R11 := R11[0xe395d771]
427 [-]: MOVE      R13 R8       ; R13 := R8
428 [-]: MOVE      R14 R9       ; R14 := R9
429 [-]: MOVE      R15 R10      ; R15 := R10
430 [-]: GETGLOBAL R16 K99      ; R16 := 0xa421af95
431 [-]: LOADK     R17 K105     ; R17 := 0.600000
432 [-]: LOADK     R18 K105     ; R18 := 0.600000
433 [-]: LOADK     R19 K105     ; R19 := 0.600000
434 [-]: CALL      R16 4 0      ; R16,... := R16(R17,R18,R19)
435 [-]: CALL      R11 0 1      ; R11(R12,...)
436 [-]: LOADKB    R11 1 0      ; R11 := true
437 [-]: SETGLOBAL R11 K96      ; mIsDiegetic := R11
438 [-]: JMP       498          ; PC := 498
439 [-]: GETGLOBAL R11 K1       ; R11 := _T
440 [-]: GETTABLE  R11 R11 K106 ; R11 := R11["upgradeItemLot"]
441 [-]: EQ        0 R11 K107   ; if R11 ~= 8.000000 then PC := 450
442 [-]: JMP       450          ; PC := 450
443 [-]: GETGLOBAL R11 K32      ; R11 := 0x7b998233
444 [-]: GETGLOBAL R12 K1       ; R12 := _T
445 [-]: GETTABLE  R12 R12 K108 ; R12 := R12["MechAvatar"]
446 [-]: CALL      R11 2 2      ; R11 := R11(R12)
447 [-]: TEST      R11 1        ; if R11 then PC := 450
448 [-]: JMP       450          ; PC := 450
449 [-]: JMP       498          ; PC := 498
450 [-]: GETGLOBAL R11 K32      ; R11 := 0x7b998233
451 [-]: GETGLOBAL R12 K1       ; R12 := _T
452 [-]: GETTABLE  R12 R12 K33  ; R12 := R12["MenuSuitAvatar"]
453 [-]: CALL      R11 2 2      ; R11 := R11(R12)
454 [-]: TEST      R11 1        ; if R11 then PC := 498
455 [-]: JMP       498          ; PC := 498
456 [-]: GETUPVAL  R11 U1       ; R11 := U1
457 [-]: GETTABLE  R11 R11 K10  ; R11 := R11[0x06d055f9]
458 [-]: MOVE      R12 R0       ; R12 := R0
459 [-]: GETGLOBAL R13 K99      ; R13 := 0xa421af95
460 [-]: LOADK     R14 K100     ; R14 := -0.020000
461 [-]: LOADK     R15 K109     ; R15 := 4.570000
462 [-]: CONST     R16 0        ; R16 := -0.500000
463 [-]: CALL      R13 4 2      ; R13 := R13(R14,R15,R16)
464 [-]: GETGLOBAL R14 K99      ; R14 := 0xa421af95
465 [-]: LOADK     R15 K110     ; R15 := 1.650000
466 [-]: LOADK     R16 K111     ; R16 := 2.400000
467 [-]: CONST     R17 0        ; R17 := 0.500000
468 [-]: CALL      R14 4 0      ; R14,... := R14(R15,R16,R17)
469 [-]: CALL      R11 0 2      ; R11 := R11(R12,...)
470 [-]: GETUPVAL  R12 U1       ; R12 := U1
471 [-]: GETTABLE  R12 R12 K10  ; R12 := R12[0x06d055f9]
472 [-]: MOVE      R13 R0       ; R13 := R0
473 [-]: GETGLOBAL R14 K77      ; R14 := 0x00046924
474 [-]: CONST     R15 3        ; R15 := 3.000000
475 [-]: CONST     R16 0        ; R16 := 0.000000
476 [-]: CONST     R17 0        ; R17 := 0.000000
477 [-]: CALL      R14 4 2      ; R14 := R14(R15,R16,R17)
478 [-]: GETGLOBAL R15 K77      ; R15 := 0x00046924
479 [-]: CONST     R16 -20      ; R16 := -20.000000
480 [-]: CONST     R17 0        ; R17 := 0.000000
481 [-]: CONST     R18 0        ; R18 := 0.000000
482 [-]: CALL      R15 4 0      ; R15,... := R15(R16,R17,R18)
483 [-]: CALL      R12 0 2      ; R12 := R12(R13,...)
484 [-]: GETGLOBAL R13 K50      ; R13 := 0xae91e43b
485 [-]: SELF      R13 R13 K104 ; R14 := R13; R13 := R13[0xe395d771]
486 [-]: GETGLOBAL R15 K1       ; R15 := _T
487 [-]: GETTABLE  R15 R15 K33  ; R15 := R15["MenuSuitAvatar"]
488 [-]: MOVE      R16 R11      ; R16 := R11
489 [-]: MOVE      R17 R12      ; R17 := R12
490 [-]: GETGLOBAL R18 K99      ; R18 := 0xa421af95
491 [-]: LOADK     R19 K105     ; R19 := 0.600000
492 [-]: LOADK     R20 K105     ; R20 := 0.600000
493 [-]: LOADK     R21 K105     ; R21 := 0.600000
494 [-]: CALL      R18 4 0      ; R18,... := R18(R19,R20,R21)
495 [-]: CALL      R13 0 1      ; R13(R14,...)
496 [-]: LOADKB    R13 1 0      ; R13 := true
497 [-]: SETGLOBAL R13 K96      ; mIsDiegetic := R13
498 [-]: GETGLOBAL R13 K50      ; R13 := 0xae91e43b
499 [-]: SELF      R13 R13 K112 ; R14 := R13; R13 := R13[0xaa503602]
500 [-]: GETGLOBAL R15 K96      ; R15 := mIsDiegetic
501 [-]: CALL      R13 3 1      ; R13(R14,R15)
502 [-]: GETGLOBAL R13 K50      ; R13 := 0xae91e43b
503 [-]: SELF      R13 R13 K113 ; R14 := R13; R13 := R13[0x41d3c627]
504 [-]: GETGLOBAL R15 K96      ; R15 := mIsDiegetic
505 [-]: CALL      R13 3 1      ; R13(R14,R15)
506 [-]: GETGLOBAL R13 K50      ; R13 := 0xae91e43b
507 [-]: SELF      R13 R13 K114 ; R14 := R13; R13 := R13[0xacedfbeb]
508 [-]: GETUPVAL  R15 U1       ; R15 := U1
509 [-]: GETTABLE  R15 R15 K10  ; R15 := R15[0x06d055f9]
510 [-]: GETGLOBAL R16 K96      ; R16 := mIsDiegetic
511 [-]: CONST     R17 0        ; R17 := 0.000000
512 [-]: CONST     R18 2        ; R18 := 2.000000
513 [-]: CALL      R15 4 0      ; R15,... := R15(R16,R17,R18)
514 [-]: CALL      R13 0 1      ; R13(R14,...)
515 [-]: GETGLOBAL R13 K96      ; R13 := mIsDiegetic
516 [-]: TEST      R13 1        ; if R13 then PC := 536
517 [-]: JMP       536          ; PC := 536
518 [-]: GETGLOBAL R13 K92      ; R13 := 0x2d0fad09
519 [-]: LOADK     R14 K116     ; R14 := "EE.Interface.AnchorMgr"
520 [-]: CALL      R13 2 2      ; R13 := R13(R14)
521 [-]: GETTABLE  R14 R13 K118 ; R14 := R13[0xae6791ba]
522 [-]: GETGLOBAL R15 K50      ; R15 := 0xae91e43b
523 [-]: CALL      R14 2 2      ; R14 := R14(R15)
524 [-]: SETGLOBAL R14 K117     ; mAnchorMgr := R14
525 [-]: GETGLOBAL R14 K117     ; R14 := mAnchorMgr
526 [-]: SELF      R14 R14 K119 ; R15 := R14; R14 := R14[0x20ff29f7]
527 [-]: GETGLOBAL R16 K50      ; R16 := 0xae91e43b
528 [-]: LOADK     R17 K120     ; R17 := "Lines"
529 [-]: NEWTABLE  R18 2 0      ; R18 := {}
530 [-]: GETGLOBAL R19 K117     ; R19 := mAnchorMgr
531 [-]: GETTABLE  R19 R19 K121 ; R19 := R19["ANCHOR_H_RIGHT"]
532 [-]: GETGLOBAL R20 K117     ; R20 := mAnchorMgr
533 [-]: GETTABLE  R20 R20 K122 ; R20 := R20["ANCHOR_V_CENTRE"]
534 [-]: SETLIST   R18 2 1      ; R18[(1-1)*FPF+i] := R(18+i), 1 <= i <= 2
535 [-]: CALL      R14 5 1      ; R14(R15,R16,R17,R18)
536 [-]: GETUPVAL  R14 U7       ; R14 := U7
537 [-]: GETGLOBAL R15 K50      ; R15 := 0xae91e43b
538 [-]: SELF      R15 R15 K123 ; R16 := R15; R15 := R15[0x6b837788]
539 [-]: CALL      R15 2 2      ; R15 := R15(R16)
540 [-]: GETGLOBAL R16 K50      ; R16 := 0xae91e43b
541 [-]: SELF      R16 R16 K124 ; R17 := R16; R16 := R16[0xaf9fda9f]
542 [-]: CALL      R16 2 0      ; R16,... := R16(R17)
543 [-]: CALL      R14 0 1      ; R14(R15,...)
544 [-]: GETUPVAL  R14 U1       ; R14 := U1
545 [-]: GETTABLE  R14 R14 K125 ; R14 := R14[0x659d451f]
546 [-]: GETGLOBAL R15 K126     ; R15 := 0x0032441c
547 [-]: GETTABLE  R15 R15 K127 ; R15 := R15["UISound_GridOpen"]
548 [-]: CALL      R14 2 1      ; R14(R15)
549 [-]: GETGLOBAL R14 K50      ; R14 := 0xae91e43b
550 [-]: SELF      R14 R14 K53  ; R15 := R14; R14 := R14[0xaade900e]
551 [-]: LOADK     R16 K128     ; R16 := "Card1"
552 [-]: CONST     R17 11       ; R17 := 11.000000
553 [-]: LOADKB    R18 0 0      ; R18 := false
554 [-]: CALL      R14 5 1      ; R14(R15,R16,R17,R18)
555 [-]: GETGLOBAL R14 K32      ; R14 := 0x7b998233
556 [-]: GETGLOBAL R15 K40      ; R15 := 0xbe190284
557 [-]: CALL      R14 2 2      ; R14 := R14(R15)
558 [-]: TEST      R14 1        ; if R14 then PC := 582
559 [-]: JMP       582          ; PC := 582
560 [-]: GETGLOBAL R14 K40      ; R14 := 0xbe190284
561 [-]: SELF      R14 R14 K129 ; R15 := R14; R14 := R14[0xf230485c]
562 [-]: CALL      R14 2 2      ; R14 := R14(R15)
563 [-]: TEST      R14 0        ; if not R14 then PC := 569
564 [-]: JMP       569          ; PC := 569
565 [-]: GETGLOBAL R14 K1       ; R14 := _T
566 [-]: GETTABLE  R14 R14 K130 ; R14 := R14["UpgradeScreenPauseDisabled"]
567 [-]: TEST      R14 0        ; if not R14 then PC := 582
568 [-]: JMP       582          ; PC := 582
569 [-]: LOADKB    R14 1 0      ; R14 := true
570 [-]: SETGLOBAL R14 K131     ; mSetPauseDisabled := R14
571 [-]: GETGLOBAL R14 K1       ; R14 := _T
572 [-]: GETTABLE  R14 R14 K130 ; R14 := R14["UpgradeScreenPauseDisabled"]
573 [-]: TEST      R14 0        ; if not R14 then PC := 578
574 [-]: JMP       578          ; PC := 578
575 [-]: GETGLOBAL R14 K1       ; R14 := _T
576 [-]: SETTABLE  R14 K130 K6  ; R14["UpgradeScreenPauseDisabled"] := nil
577 [-]: JMP       582          ; PC := 582
578 [-]: GETGLOBAL R14 K40      ; R14 := 0xbe190284
579 [-]: SELF      R14 R14 K132 ; R15 := R14; R14 := R14[0xc02f2cb8]
580 [-]: LOADKB    R16 1 0      ; R16 := true
581 [-]: CALL      R14 3 1      ; R14(R15,R16)
582 [-]: GETGLOBAL R14 K1       ; R14 := _T
583 [-]: SETTABLE  R14 K133 K6  ; R14["gToolTip"] := nil
584 [-]: GETGLOBAL R14 K135     ; R14 := 0x76ea806b
585 [-]: SELF      R14 R14 K136 ; R15 := R14; R14 := R14[0x3f3ae64c]
586 [-]: CONST     R16 0        ; R16 := 0.000000
587 [-]: CALL      R14 3 2      ; R14 := R14(R15,R16)
588 [-]: SETGLOBAL R14 K134     ; mPlayerProfile := R14
589 [-]: GETGLOBAL R14 K32      ; R14 := 0x7b998233
590 [-]: GETGLOBAL R15 K134     ; R15 := mPlayerProfile
591 [-]: CALL      R14 2 2      ; R14 := R14(R15)
592 [-]: TEST      R14 0        ; if not R14 then PC := 601
593 [-]: JMP       601          ; PC := 601
594 [-]: GETGLOBAL R14 K137     ; R14 := 0x3d106989
595 [-]: LOADK     R15 K138     ; R15 := "NULL PLAYER PROFILE WHAT TO DO"
596 [-]: CALL      R14 2 1      ; R14(R15)
597 [-]: GETGLOBAL R14 K1       ; R14 := _T
598 [-]: GETTABLE  R14 R14 K139 ; R14 := R14[0x4e4e6b0c]
599 [-]: CALL      R14 1 1      ; R14()
600 [-]: RETURN    R0 1         ; return 
601 [-]: GETGLOBAL R14 K134     ; R14 := mPlayerProfile
602 [-]: SELF      R14 R14 K141 ; R15 := R14; R14 := R14[0x80563238]
603 [-]: CALL      R14 2 2      ; R14 := R14(R15)
604 [-]: SETGLOBAL R14 K140     ; mGameData := R14
605 [-]: GETGLOBAL R14 K142     ; R14 := 0x60cce7b4
606 [-]: GETGLOBAL R15 K32      ; R15 := 0x7b998233
607 [-]: GETGLOBAL R16 K140     ; R16 := mGameData
608 [-]: CALL      R15 2 2      ; R15 := R15(R16)
609 [-]: NOT       R15 R15      ; R15 :=  R15
610 [-]: CALL      R14 2 1      ; R14(R15)
611 [-]: GETGLOBAL R14 K32      ; R14 := 0x7b998233
612 [-]: GETGLOBAL R15 K42      ; R15 := mRailjackMovie
613 [-]: CALL      R14 2 2      ; R14 := R14(R15)
614 [-]: TEST      R14 0        ; if not R14 then PC := 628
615 [-]: JMP       628          ; PC := 628
616 [-]: GETGLOBAL R14 K92      ; R14 := 0x2d0fad09
617 [-]: LOADK     R15 K143     ; R15 := "Lotus.Interface.Components.DiegeticHelper"
618 [-]: CALL      R14 2 2      ; R14 := R14(R15)
619 [-]: GETTABLE  R15 R14 K145 ; R15 := R14[0xc1b20fce]
620 [-]: GETGLOBAL R16 K50      ; R16 := 0xae91e43b
621 [-]: CALL      R15 2 2      ; R15 := R15(R16)
622 [-]: SETGLOBAL R15 K144     ; mDiegeticHelper := R15
623 [-]: GETGLOBAL R15 K144     ; R15 := mDiegeticHelper
624 [-]: SETTABLE  R15 K146 K147; R15["mMinShiftX"] := 0.000000
625 [-]: GETGLOBAL R15 K144     ; R15 := mDiegeticHelper
626 [-]: SETTABLE  R15 K148 K149; R15["mMaxShiftX"] := 120.000000
627 [-]: JMP       632          ; PC := 632
628 [-]: GETGLOBAL R15 K50      ; R15 := 0xae91e43b
629 [-]: SELF      R15 R15 K150 ; R16 := R15; R15 := R15[0x27abb3c0]
630 [-]: CONST     R17 1        ; R17 := 1.000000
631 [-]: CALL      R15 3 1      ; R15(R16,R17)
632 [-]: GETGLOBAL R15 K50      ; R15 := 0xae91e43b
633 [-]: SELF      R15 R15 K151 ; R16 := R15; R15 := R15[0x767c0947]
634 [-]: LOADKB    R17 1 0      ; R17 := true
635 [-]: CALL      R15 3 1      ; R15(R16,R17)
636 [-]: GETGLOBAL R15 K50      ; R15 := 0xae91e43b
637 [-]: SELF      R15 R15 K152 ; R16 := R15; R15 := R15[0x1e5b5cfe]
638 [-]: LOADK     R17 K153     ; R17 := "TopMenu.RenameIcon"
639 [-]: LOADK     R18 K154     ; R18 := "RenameIconFocused"
640 [-]: LOADK     R19 K155     ; R19 := "RenameIconUnfocused"
641 [-]: LOADK     R20 K156     ; R20 := "RenameIconPressed"
642 [-]: LOADK     R21 K157     ; R21 := ""
643 [-]: CALL      R15 7 1      ; R15(R16,R17,R18,R19,R20,R21)
644 [-]: GETGLOBAL R15 K50      ; R15 := 0xae91e43b
645 [-]: SELF      R15 R15 K152 ; R16 := R15; R15 := R15[0x1e5b5cfe]
646 [-]: LOADK     R17 K158     ; R17 := "TopMenu.LinkIcon"
647 [-]: LOADK     R18 K159     ; R18 := "LinkIconFocused"
648 [-]: LOADK     R19 K160     ; R19 := "LinkIconUnfocused"
649 [-]: LOADK     R20 K161     ; R20 := "LinkIconPressed"
650 [-]: LOADK     R21 K157     ; R21 := ""
651 [-]: CALL      R15 7 1      ; R15(R16,R17,R18,R19,R20,R21)
652 [-]: GETGLOBAL R15 K50      ; R15 := 0xae91e43b
653 [-]: SELF      R15 R15 K60  ; R16 := R15; R15 := R15[0x67bc869f]
654 [-]: LOADK     R17 K162     ; R17 := "AttemptInfo.Hint.Hint1"
655 [-]: CONST     R18 85       ; R18 := 85.000000
656 [-]: CONST     R19 1        ; R19 := 1.000000
657 [-]: CALL      R15 5 1      ; R15(R16,R17,R18,R19)
658 [-]: GETGLOBAL R15 K50      ; R15 := 0xae91e43b
659 [-]: SELF      R15 R15 K60  ; R16 := R15; R15 := R15[0x67bc869f]
660 [-]: LOADK     R17 K163     ; R17 := "AttemptInfo.Hint.Hint2"
661 [-]: CONST     R18 85       ; R18 := 85.000000
662 [-]: CONST     R19 2        ; R19 := 2.000000
663 [-]: CALL      R15 5 1      ; R15(R16,R17,R18,R19)
664 [-]: GETGLOBAL R15 K50      ; R15 := 0xae91e43b
665 [-]: SELF      R15 R15 K60  ; R16 := R15; R15 := R15[0x67bc869f]
666 [-]: LOADK     R17 K164     ; R17 := "AttemptInfo.Hint.Hint3"
667 [-]: CONST     R18 85       ; R18 := 85.000000
668 [-]: CONST     R19 3        ; R19 := 3.000000
669 [-]: CALL      R15 5 1      ; R15(R16,R17,R18,R19)
670 [-]: GETGLOBAL R15 K50      ; R15 := 0xae91e43b
671 [-]: SELF      R15 R15 K152 ; R16 := R15; R15 := R15[0x1e5b5cfe]
672 [-]: LOADK     R17 K162     ; R17 := "AttemptInfo.Hint.Hint1"
673 [-]: LOADK     R18 K165     ; R18 := "HintIconFocused"
674 [-]: LOADK     R19 K166     ; R19 := "HintIconUnfocused"
675 [-]: LOADK     R20 K157     ; R20 := ""
676 [-]: LOADK     R21 K157     ; R21 := ""
677 [-]: CALL      R15 7 1      ; R15(R16,R17,R18,R19,R20,R21)
678 [-]: GETGLOBAL R15 K50      ; R15 := 0xae91e43b
679 [-]: SELF      R15 R15 K152 ; R16 := R15; R15 := R15[0x1e5b5cfe]
680 [-]: LOADK     R17 K163     ; R17 := "AttemptInfo.Hint.Hint2"
681 [-]: LOADK     R18 K165     ; R18 := "HintIconFocused"
682 [-]: LOADK     R19 K166     ; R19 := "HintIconUnfocused"
683 [-]: LOADK     R20 K157     ; R20 := ""
684 [-]: LOADK     R21 K157     ; R21 := ""
685 [-]: CALL      R15 7 1      ; R15(R16,R17,R18,R19,R20,R21)
686 [-]: GETGLOBAL R15 K50      ; R15 := 0xae91e43b
687 [-]: SELF      R15 R15 K152 ; R16 := R15; R15 := R15[0x1e5b5cfe]
688 [-]: LOADK     R17 K164     ; R17 := "AttemptInfo.Hint.Hint3"
689 [-]: LOADK     R18 K165     ; R18 := "HintIconFocused"
690 [-]: LOADK     R19 K166     ; R19 := "HintIconUnfocused"
691 [-]: LOADK     R20 K157     ; R20 := ""
692 [-]: LOADK     R21 K157     ; R21 := ""
693 [-]: CALL      R15 7 1      ; R15(R16,R17,R18,R19,R20,R21)
694 [-]: CONST     R15 1        ; R15 := 1.000000
695 [-]: SETGLOBAL R15 K167     ; mEnergyTotal := R15
696 [-]: CONST     R15 0        ; R15 := 0.000000
697 [-]: SETGLOBAL R15 K168     ; mItemLevel := R15
698 [-]: CONST     R15 30       ; R15 := 30.000000
699 [-]: SETGLOBAL R15 K169     ; mMaxItemLevel := R15
700 [-]: CONST     R15 0        ; R15 := 0.000000
701 [-]: SETGLOBAL R15 K170     ; mPolarizedCount := R15
702 [-]: GETGLOBAL R15 K32      ; R15 := 0x7b998233
703 [-]: GETGLOBAL R16 K1       ; R16 := _T
704 [-]: GETTABLE  R16 R16 K171 ; R16 := R16["upgradeItem"]
705 [-]: CALL      R15 2 2      ; R15 := R15(R16)
706 [-]: TEST      R15 1        ; if R15 then PC := 939
707 [-]: JMP       939          ; PC := 939
708 [-]: GETGLOBAL R15 K1       ; R15 := _T
709 [-]: GETTABLE  R15 R15 K171 ; R15 := R15["upgradeItem"]
710 [-]: SETUPVAL  R15 U8       ; U82 := R8
711 [-]: GETUPVAL  R15 U8       ; R15 := U8
712 [-]: GETGLOBAL R16 K173     ; R16 := 0x3584dca2
713 [-]: CALL      R16 1 2      ; R16 := R16()
714 [-]: SETTABLE  R15 K172 R16 ; R15["uid"] := R16
715 [-]: GETUPVAL  R15 U8       ; R15 := U8
716 [-]: GETTABLE  R15 R15 K172 ; R15 := R15["uid"]
717 [-]: SELF      R15 R15 K174 ; R16 := R15; R15 := R15[0x46e9d221]
718 [-]: GETUPVAL  R17 U8       ; R17 := U8
719 [-]: GETTABLE  R17 R17 K175 ; R17 := R17["info"]
720 [-]: GETTABLE  R17 R17 K176 ; R17 := R17["mItemId"]
721 [-]: GETTABLE  R17 R17 K177 ; R17 := R17["mId"]
722 [-]: CALL      R15 3 1      ; R15(R16,R17)
723 [-]: GETUPVAL  R15 U8       ; R15 := U8
724 [-]: GETTABLE  R15 R15 K178 ; R15 := R15["configSlot"]
725 [-]: SETUPVAL  R15 U9       ; U82 := R9
726 [-]: GETUPVAL  R15 U8       ; R15 := U8
727 [-]: GETTABLE  R15 R15 K175 ; R15 := R15["info"]
728 [-]: SELF      R15 R15 K180 ; R16 := R15; R15 := R15[0xfa86e69d]
729 [-]: CALL      R15 2 2      ; R15 := R15(R16)
730 [-]: SETGLOBAL R15 K179     ; mArtifactSlots := R15
731 [-]: GETUPVAL  R15 U8       ; R15 := U8
732 [-]: GETTABLE  R15 R15 K175 ; R15 := R15["info"]
733 [-]: GETTABLE  R15 R15 K181 ; R15 := R15["mPolarized"]
734 [-]: SETGLOBAL R15 K170     ; mPolarizedCount := R15
735 [-]: GETGLOBAL R15 K182     ; R15 := 0xa94df70b
736 [-]: SELF      R15 R15 K183 ; R16 := R15; R15 := R15[0x84fb4327]
737 [-]: GETUPVAL  R17 U8       ; R17 := U8
738 [-]: GETTABLE  R17 R17 K175 ; R17 := R17["info"]
739 [-]: GETTABLE  R17 R17 K184 ; R17 := R17["mItemType"]
740 [-]: GETUPVAL  R18 U8       ; R18 := U8
741 [-]: GETTABLE  R18 R18 K175 ; R18 := R18["info"]
742 [-]: GETTABLE  R18 R18 K181 ; R18 := R18["mPolarized"]
743 [-]: CALL      R15 4 2      ; R15 := R15(R16,R17,R18)
744 [-]: SETGLOBAL R15 K169     ; mMaxItemLevel := R15
745 [-]: GETGLOBAL R15 K185     ; R15 := 0x5bced4c4
746 [-]: GETTABLE  R15 R15 K186 ; R15 := R15[0xac1b386a]
747 [-]: GETGLOBAL R16 K169     ; R16 := mMaxItemLevel
748 [-]: GETGLOBAL R17 K182     ; R17 := 0xa94df70b
749 [-]: SELF      R17 R17 K187 ; R18 := R17; R17 := R17[0x8427bf69]
750 [-]: GETUPVAL  R19 U8       ; R19 := U8
751 [-]: GETTABLE  R19 R19 K175 ; R19 := R19["info"]
752 [-]: GETTABLE  R19 R19 K188 ; R19 := R19["mXP"]
753 [-]: GETUPVAL  R20 U8       ; R20 := U8
754 [-]: GETTABLE  R20 R20 K175 ; R20 := R20["info"]
755 [-]: GETTABLE  R20 R20 K184 ; R20 := R20["mItemType"]
756 [-]: CALL      R17 4 0      ; R17,... := R17(R18,R19,R20)
757 [-]: CALL      R15 0 2      ; R15 := R15(R16,...)
758 [-]: SETGLOBAL R15 K168     ; mItemLevel := R15
759 [-]: GETUPVAL  R15 U8       ; R15 := U8
760 [-]: GETTABLE  R15 R15 K175 ; R15 := R15["info"]
761 [-]: SELF      R15 R15 K190 ; R16 := R15; R15 := R15[0xba568eef]
762 [-]: CALL      R15 2 2      ; R15 := R15(R16)
763 [-]: SETGLOBAL R15 K189     ; mItemExpires := R15
764 [-]: GETGLOBAL R15 K185     ; R15 := 0x5bced4c4
765 [-]: GETTABLE  R15 R15 K191 ; R15 := R15[0xb62ecfe0]
766 [-]: GETGLOBAL R16 K168     ; R16 := mItemLevel
767 [-]: GETGLOBAL R17 K185     ; R17 := 0x5bced4c4
768 [-]: GETTABLE  R17 R17 K186 ; R17 := R17[0xac1b386a]
769 [-]: GETGLOBAL R18 K169     ; R18 := mMaxItemLevel
770 [-]: GETGLOBAL R19 K140     ; R19 := mGameData
771 [-]: SELF      R19 R19 K192 ; R20 := R19; R19 := R19[0xefee6c91]
772 [-]: CALL      R19 2 0      ; R19,... := R19(R20)
773 [-]: CALL      R17 0 0      ; R17,... := R17(R18,...)
774 [-]: CALL      R15 0 2      ; R15 := R15(R16,...)
775 [-]: SETGLOBAL R15 K167     ; mEnergyTotal := R15
776 [-]: GETUPVAL  R15 U8       ; R15 := U8
777 [-]: GETTABLE  R15 R15 K175 ; R15 := R15["info"]
778 [-]: SELF      R15 R15 K193 ; R16 := R15; R15 := R15[0xdbfbf6c0]
779 [-]: CONST     R17 0        ; R17 := 0.000000
780 [-]: CALL      R15 3 2      ; R15 := R15(R16,R17)
781 [-]: TEST      R15 0        ; if not R15 then PC := 786
782 [-]: JMP       786          ; PC := 786
783 [-]: GETGLOBAL R15 K167     ; R15 := mEnergyTotal
784 [-]: MUL       R15 R15 K39  ; R15 := R15 * 2.000000
785 [-]: SETGLOBAL R15 K167     ; mEnergyTotal := R15
786 [-]: GETGLOBAL R15 K1       ; R15 := _T
787 [-]: GETTABLE  R15 R15 K106 ; R15 := R15["upgradeItemLot"]
788 [-]: GETGLOBAL R16 K1       ; R16 := _T
789 [-]: GETTABLE  R16 R16 K5   ; R16 := R16["upgradeItemSlot"]
790 [-]: CONST     R17 0        ; R17 := 0.000000
791 [-]: EQ        1 R15 K6     ; if R15 == nil then PC := 907
792 [-]: JMP       907          ; PC := 907
793 [-]: EQ        1 R16 K6     ; if R16 == nil then PC := 907
794 [-]: JMP       907          ; PC := 907
795 [-]: GETGLOBAL R18 K194     ; R18 := mArcaneInfo
796 [-]: GETUPVAL  R19 U10      ; R19 := U10
797 [-]: CALL      R19 1 2      ; R19 := R19()
798 [-]: SETTABLE  R18 K195 R19 ; R18["HasValidArcane"] := R19
799 [-]: EQ        1 R15 K147   ; if R15 == 0.000000 then PC := 803
800 [-]: JMP       803          ; PC := 803
801 [-]: EQ        0 R15 K4     ; if R15 ~= 3.000000 then PC := 907
802 [-]: JMP       907          ; PC := 907
803 [-]: EQ        1 R16 K39    ; if R16 == 2.000000 then PC := 807
804 [-]: JMP       807          ; PC := 807
805 [-]: EQ        0 R16 K196   ; if R16 ~= 1.000000 then PC := 810
806 [-]: JMP       810          ; PC := 810
807 [-]: GETGLOBAL R18 K198     ; R18 := NUM_NORMAL_SLOTS
808 [-]: ADD       R18 R18 K196 ; R18 := R18 + 1.000000
809 [-]: SETGLOBAL R18 K197     ; UTILITY_SLOT_INDEX := R18
810 [-]: EQ        1 R16 K147   ; if R16 == 0.000000 then PC := 816
811 [-]: JMP       816          ; PC := 816
812 [-]: GETUPVAL  R18 U11      ; R18 := U11
813 [-]: CALL      R18 1 2      ; R18 := R18()
814 [-]: TEST      R18 0        ; if not R18 then PC := 831
815 [-]: JMP       831          ; PC := 831
816 [-]: CONST     R17 2        ; R17 := 2.000000
817 [-]: TEST      R3 1         ; if R3 then PC := 907
818 [-]: JMP       907          ; PC := 907
819 [-]: GETGLOBAL R18 K194     ; R18 := mArcaneInfo
820 [-]: GETTABLE  R18 R18 K195 ; R18 := R18["HasValidArcane"]
821 [-]: TEST      R18 1        ; if R18 then PC := 828
822 [-]: JMP       828          ; PC := 828
823 [-]: GETGLOBAL R18 K140     ; R18 := mGameData
824 [-]: SELF      R18 R18 K192 ; R19 := R18; R18 := R18[0xefee6c91]
825 [-]: CALL      R18 2 2      ; R18 := R18(R19)
826 [-]: LE        0 K199 R18   ; if 5.000000 > R18 then PC := 907
827 [-]: JMP       907          ; PC := 907
828 [-]: GETGLOBAL R18 K194     ; R18 := mArcaneInfo
829 [-]: SETTABLE  R18 K200 K39 ; R18["Slots"] := 2.000000
830 [-]: JMP       907          ; PC := 907
831 [-]: GETGLOBAL R18 K32      ; R18 := 0x7b998233
832 [-]: GETUPVAL  R19 U8       ; R19 := U8
833 [-]: GETTABLE  R19 R19 K201 ; R19 := R19["item"]
834 [-]: CALL      R18 2 2      ; R18 := R18(R19)
835 [-]: TEST      R18 1        ; if R18 then PC := 907
836 [-]: JMP       907          ; PC := 907
837 [-]: GETGLOBAL R18 K194     ; R18 := mArcaneInfo
838 [-]: SETTABLE  R18 K202 K65 ; R18["HasApertureArcaneSlot"] := false
839 [-]: GETGLOBAL R18 K194     ; R18 := mArcaneInfo
840 [-]: SETTABLE  R18 K203 K65 ; R18["HasGildArcaneSlot"] := false
841 [-]: GETGLOBAL R18 K194     ; R18 := mArcaneInfo
842 [-]: SETTABLE  R18 K200 K147; R18["Slots"] := 0.000000
843 [-]: CONST     R17 0        ; R17 := 0.000000
844 [-]: GETGLOBAL R18 K32      ; R18 := 0x7b998233
845 [-]: GETUPVAL  R19 U8       ; R19 := U8
846 [-]: GETTABLE  R19 R19 K201 ; R19 := R19["item"]
847 [-]: SELF      R19 R19 K204 ; R20 := R19; R19 := R19[0xd17bf72c]
848 [-]: CALL      R19 2 0      ; R19,... := R19(R20)
849 [-]: CALL      R18 0 2      ; R18 := R18(R19,...)
850 [-]: TEST      R18 1        ; if R18 then PC := 859
851 [-]: JMP       859          ; PC := 859
852 [-]: TEST      R3 1         ; if R3 then PC := 858
853 [-]: JMP       858          ; PC := 858
854 [-]: GETGLOBAL R18 K194     ; R18 := mArcaneInfo
855 [-]: SETTABLE  R18 K200 K196; R18["Slots"] := 1.000000
856 [-]: GETGLOBAL R18 K194     ; R18 := mArcaneInfo
857 [-]: SETTABLE  R18 K202 K70 ; R18["HasApertureArcaneSlot"] := true
858 [-]: CONST     R17 1        ; R17 := 1.000000
859 [-]: GETUPVAL  R18 U8       ; R18 := U8
860 [-]: GETTABLE  R18 R18 K201 ; R18 := R18["item"]
861 [-]: SELF      R18 R18 K205 ; R19 := R18; R18 := R18[0x81f3a598]
862 [-]: CALL      R18 2 2      ; R18 := R18(R19)
863 [-]: TEST      R18 0        ; if not R18 then PC := 875
864 [-]: JMP       875          ; PC := 875
865 [-]: TEST      R3 1         ; if R3 then PC := 874
866 [-]: JMP       874          ; PC := 874
867 [-]: GETGLOBAL R18 K194     ; R18 := mArcaneInfo
868 [-]: GETGLOBAL R19 K194     ; R19 := mArcaneInfo
869 [-]: GETTABLE  R19 R19 K200 ; R19 := R19["Slots"]
870 [-]: ADD       R19 R19 K196 ; R19 := R19 + 1.000000
871 [-]: SETTABLE  R18 K200 R19 ; R18["Slots"] := R19
872 [-]: GETGLOBAL R18 K194     ; R18 := mArcaneInfo
873 [-]: SETTABLE  R18 K203 K70 ; R18["HasGildArcaneSlot"] := true
874 [-]: ADD       R17 R17 K196 ; R17 := R17 + 1.000000
875 [-]: GETGLOBAL R18 K194     ; R18 := mArcaneInfo
876 [-]: GETTABLE  R18 R18 K202 ; R18 := R18["HasApertureArcaneSlot"]
877 [-]: TEST      R18 0        ; if not R18 then PC := 893
878 [-]: JMP       893          ; PC := 893
879 [-]: GETUPVAL  R18 U5       ; R18 := U5
880 [-]: GETTABLE  R18 R18 K206 ; R18 := R18[0x1b0c4985]
881 [-]: CALL      R18 1 2      ; R18 := R18()
882 [-]: TEST      R18 1        ; if R18 then PC := 893
883 [-]: JMP       893          ; PC := 893
884 [-]: GETGLOBAL R18 K194     ; R18 := mArcaneInfo
885 [-]: GETTABLE  R18 R18 K203 ; R18 := R18["HasGildArcaneSlot"]
886 [-]: TEST      R18 0        ; if not R18 then PC := 891
887 [-]: JMP       891          ; PC := 891
888 [-]: GETGLOBAL R18 K194     ; R18 := mArcaneInfo
889 [-]: SETTABLE  R18 K207 K39 ; R18["HiddenSlot"] := 2.000000
890 [-]: JMP       893          ; PC := 893
891 [-]: GETGLOBAL R18 K194     ; R18 := mArcaneInfo
892 [-]: SETTABLE  R18 K207 K196; R18["HiddenSlot"] := 1.000000
893 [-]: GETUPVAL  R18 U12      ; R18 := U12
894 [-]: CALL      R18 1 2      ; R18 := R18()
895 [-]: TEST      R18 0        ; if not R18 then PC := 907
896 [-]: JMP       907          ; PC := 907
897 [-]: GETGLOBAL R18 K179     ; R18 := mArtifactSlots
898 [-]: LEN       R18 R18      ; R18 := # R18
899 [-]: GETGLOBAL R19 K208     ; R19 := MELEE_STANCE_SLOT
900 [-]: LT        0 R18 R19    ; if R18 >= R19 then PC := 907
901 [-]: JMP       907          ; PC := 907
902 [-]: GETGLOBAL R18 K209     ; R18 := 0x33bdd652
903 [-]: GETTABLE  R18 R18 K210 ; R18 := R18[0x23d5322f]
904 [-]: GETGLOBAL R19 K179     ; R19 := mArtifactSlots
905 [-]: CONST     R20 0        ; R20 := 0.000000
906 [-]: CALL      R18 3 1      ; R18(R19,R20)
907 [-]: GETGLOBAL R18 K179     ; R18 := mArtifactSlots
908 [-]: LEN       R18 R18      ; R18 := # R18
909 [-]: SUB       R18 R18 R17  ; R18 := R18 - R17
910 [-]: SETGLOBAL R18 K211     ; mCardSlots := R18
911 [-]: GETGLOBAL R18 K32      ; R18 := 0x7b998233
912 [-]: GETUPVAL  R19 U8       ; R19 := U8
913 [-]: GETTABLE  R19 R19 K175 ; R19 := R19["info"]
914 [-]: CALL      R18 2 2      ; R18 := R18(R19)
915 [-]: TEST      R18 1        ; if R18 then PC := 934
916 [-]: JMP       934          ; PC := 934
917 [-]: CONST     R18 0        ; R18 := 0.000000
918 [-]: CONST     R19 1        ; R19 := 1.000000
919 [-]: CONST     R20 1        ; R20 := 1.000000
920 [-]: FORPREP   R18 933      ; R18 -= R20; PC := 933
921 [-]: CONST     R22 0        ; R22 := 0.000000
922 [-]: CONST     R23 2        ; R23 := 2.000000
923 [-]: CONST     R24 1        ; R24 := 1.000000
924 [-]: FORPREP   R22 932      ; R22 -= R24; PC := 932
925 [-]: GETUPVAL  R26 U13      ; R26 := U13
926 [-]: MOVE      R27 R25      ; R27 := R25
927 [-]: EQ        1 R21 K196   ; if R21 == 1.000000 then PC := 930
928 [-]: JMP       930          ; PC := 930
929 [-]: LOADKB    R28 0 1      ; R28 := false; PC := 930
930 [-]: LOADKB    R28 1 0      ; R28 := true
931 [-]: CALL      R26 3 1      ; R26(R27,R28)
932 [-]: FORLOOP   R22 925      ; R22 += R24; if R22 <= R23 then begin PC := 925; R25 := R22 end
933 [-]: FORLOOP   R18 921      ; R18 += R20; if R18 <= R19 then begin PC := 921; R21 := R18 end
934 [-]: GETUPVAL  R26 U14      ; R26 := U14
935 [-]: CALL      R26 1 1      ; R26()
936 [-]: GETUPVAL  R26 U15      ; R26 := U15
937 [-]: CALL      R26 1 1      ; R26()
938 [-]: JMP       945          ; PC := 945
939 [-]: GETGLOBAL R26 K1       ; R26 := _T
940 [-]: GETTABLE  R26 R26 K139 ; R26 := R26[0x4e4e6b0c]
941 [-]: CALL      R26 1 1      ; R26()
942 [-]: LOADKB    R26 1 0      ; R26 := true
943 [-]: SETGLOBAL R26 K212     ; mShouldClose := R26
944 [-]: RETURN    R0 1         ; return 
945 [-]: GETUPVAL  R26 U16      ; R26 := U16
946 [-]: CALL      R26 1 1      ; R26()
947 [-]: GETUPVAL  R26 U17      ; R26 := U17
948 [-]: CALL      R26 1 1      ; R26()
949 [-]: GETGLOBAL R26 K50      ; R26 := 0xae91e43b
950 [-]: SELF      R26 R26 K53  ; R27 := R26; R26 := R26[0xaade900e]
951 [-]: LOADK     R28 K213     ; R28 := "AvionicsList"
952 [-]: CONST     R29 11       ; R29 := 11.000000
953 [-]: GETUPVAL  R30 U4       ; R30 := U4
954 [-]: CALL      R30 1 0      ; R30,... := R30()
955 [-]: CALL      R26 0 1      ; R26(R27,...)
956 [-]: GETUPVAL  R26 U18      ; R26 := U18
957 [-]: CALL      R26 1 1      ; R26()
958 [-]: GETGLOBAL R26 K50      ; R26 := 0xae91e43b
959 [-]: SELF      R26 R26 K60  ; R27 := R26; R26 := R26[0x67bc869f]
960 [-]: LOADK     R28 K153     ; R28 := "TopMenu.RenameIcon"
961 [-]: CONST     R29 9        ; R29 := 9.000000
962 [-]: GETGLOBAL R30 K19      ; R30 := mColors
963 [-]: GETTABLE  R30 R30 K20  ; R30 := R30["FloatingContent"]
964 [-]: CALL      R26 5 1      ; R26(R27,R28,R29,R30)
965 [-]: GETGLOBAL R26 K32      ; R26 := 0x7b998233
966 [-]: GETGLOBAL R27 K214     ; R27 := 0x24a0772e
967 [-]: CALL      R26 2 2      ; R26 := R26(R27)
968 [-]: TEST      R26 1        ; if R26 then PC := 975
969 [-]: JMP       975          ; PC := 975
970 [-]: GETGLOBAL R26 K50      ; R26 := 0xae91e43b
971 [-]: SELF      R26 R26 K215 ; R27 := R26; R26 := R26[0x1cb415c1]
972 [-]: LOADK     R28 K153     ; R28 := "TopMenu.RenameIcon"
973 [-]: GETGLOBAL R29 K214     ; R29 := 0x24a0772e
974 [-]: CALL      R26 4 1      ; R26(R27,R28,R29)
975 [-]: GETGLOBAL R26 K50      ; R26 := 0xae91e43b
976 [-]: SELF      R26 R26 K60  ; R27 := R26; R26 := R26[0x67bc869f]
977 [-]: LOADK     R28 K158     ; R28 := "TopMenu.LinkIcon"
978 [-]: CONST     R29 9        ; R29 := 9.000000
979 [-]: GETGLOBAL R30 K19      ; R30 := mColors
980 [-]: GETTABLE  R30 R30 K20  ; R30 := R30["FloatingContent"]
981 [-]: CALL      R26 5 1      ; R26(R27,R28,R29,R30)
982 [-]: GETGLOBAL R26 K32      ; R26 := 0x7b998233
983 [-]: GETGLOBAL R27 K216     ; R27 := 0xbf875131
984 [-]: CALL      R26 2 2      ; R26 := R26(R27)
985 [-]: TEST      R26 1        ; if R26 then PC := 992
986 [-]: JMP       992          ; PC := 992
987 [-]: GETGLOBAL R26 K50      ; R26 := 0xae91e43b
988 [-]: SELF      R26 R26 K215 ; R27 := R26; R26 := R26[0x1cb415c1]
989 [-]: LOADK     R28 K158     ; R28 := "TopMenu.LinkIcon"
990 [-]: GETGLOBAL R29 K216     ; R29 := 0xbf875131
991 [-]: CALL      R26 4 1      ; R26(R27,R28,R29)
992 [-]: GETGLOBAL R26 K50      ; R26 := 0xae91e43b
993 [-]: SELF      R26 R26 K53  ; R27 := R26; R26 := R26[0xaade900e]
994 [-]: LOADK     R28 K158     ; R28 := "TopMenu.LinkIcon"
995 [-]: CONST     R29 11       ; R29 := 11.000000
996 [-]: TEST      R3 1         ; if R3 then PC := 1002
997 [-]: JMP       1002         ; PC := 1002
998 [-]: GETUPVAL  R30 U4       ; R30 := U4
999 [-]: CALL      R30 1 2      ; R30 := R30()
1000 [-]: NOT       R30 R30      ; R30 :=  R30
1001 [-]: JMP       1004         ; PC := 1004
1002 [-]: LOADKB    R30 0 1      ; R30 := false; PC := 1003
1003 [-]: LOADKB    R30 1 0      ; R30 := true
1004 [-]: CALL      R26 5 1      ; R26(R27,R28,R29,R30)
1005 [-]: GETGLOBAL R26 K50      ; R26 := 0xae91e43b
1006 [-]: SELF      R26 R26 K53  ; R27 := R26; R26 := R26[0xaade900e]
1007 [-]: LOADK     R28 K217     ; R28 := "InstallMenu.FocusCallout"
1008 [-]: CONST     R29 11       ; R29 := 11.000000
1009 [-]: LOADKB    R30 0 0      ; R30 := false
1010 [-]: CALL      R26 5 1      ; R26(R27,R28,R29,R30)
1011 [-]: GETGLOBAL R26 K50      ; R26 := 0xae91e43b
1012 [-]: SELF      R26 R26 K57  ; R27 := R26; R26 := R26[0x20b98db3]
1013 [-]: LOADK     R28 K218     ; R28 := "InstallMenu.FocusCallout.Tf.text"
1014 [-]: LOADK     R29 K157     ; R29 := ""
1015 [-]: CALL      R26 4 1      ; R26(R27,R28,R29)
1016 [-]: GETGLOBAL R26 K50      ; R26 := 0xae91e43b
1017 [-]: SELF      R26 R26 K53  ; R27 := R26; R26 := R26[0xaade900e]
1018 [-]: LOADK     R28 K120     ; R28 := "Lines"
1019 [-]: CONST     R29 11       ; R29 := 11.000000
1020 [-]: GETGLOBAL R30 K32      ; R30 := 0x7b998233
1021 [-]: GETGLOBAL R31 K42      ; R31 := mRailjackMovie
1022 [-]: CALL      R30 2 2      ; R30 := R30(R31)
1023 [-]: NOT       R30 R30      ; R30 :=  R30
1024 [-]: CALL      R26 5 1      ; R26(R27,R28,R29,R30)
1025 [-]: GETGLOBAL R26 K50      ; R26 := 0xae91e43b
1026 [-]: SELF      R26 R26 K60  ; R27 := R26; R26 := R26[0x67bc869f]
1027 [-]: LOADK     R28 K120     ; R28 := "Lines"
1028 [-]: CONST     R29 9        ; R29 := 9.000000
1029 [-]: GETGLOBAL R30 K19      ; R30 := mColors
1030 [-]: GETTABLE  R30 R30 K20  ; R30 := R30["FloatingContent"]
1031 [-]: CALL      R26 5 1      ; R26(R27,R28,R29,R30)
1032 [-]: GETGLOBAL R26 K219     ; R26 := 0x25d99d89
1033 [-]: SELF      R26 R26 K220 ; R27 := R26; R26 := R26[0x600a0ad6]
1034 [-]: CALL      R26 2 2      ; R26 := R26(R27)
1035 [-]: GETGLOBAL R27 K50      ; R27 := 0xae91e43b
1036 [-]: SELF      R27 R27 K53  ; R28 := R27; R27 := R27[0xaade900e]
1037 [-]: LOADK     R29 K221     ; R29 := "DataGraphic"
1038 [-]: CONST     R30 11       ; R30 := 11.000000
1039 [-]: GETUPVAL  R31 U19      ; R31 := U19
1040 [-]: CALL      R31 1 2      ; R31 := R31()
1041 [-]: TEST      R31 0        ; if not R31 then PC := 1046
1042 [-]: JMP       1046         ; PC := 1046
1043 [-]: SELF      R31 R26 K222 ; R32 := R26; R31 := R26[0xd8140b94]
1044 [-]: CALL      R31 2 2      ; R31 := R31(R32)
1045 [-]: NOT       R31 R31      ; R31 :=  R31
1046 [-]: CALL      R27 5 1      ; R27(R28,R29,R30,R31)
1047 [-]: GETGLOBAL R27 K50      ; R27 := 0xae91e43b
1048 [-]: SELF      R27 R27 K53  ; R28 := R27; R27 := R27[0xaade900e]
1049 [-]: LOADK     R29 K223     ; R29 := "AttemptInfo"
1050 [-]: CONST     R30 11       ; R30 := 11.000000
1051 [-]: GETUPVAL  R31 U19      ; R31 := U19
1052 [-]: CALL      R31 1 2      ; R31 := R31()
1053 [-]: TEST      R31 0        ; if not R31 then PC := 1057
1054 [-]: JMP       1057         ; PC := 1057
1055 [-]: SELF      R31 R26 K222 ; R32 := R26; R31 := R26[0xd8140b94]
1056 [-]: CALL      R31 2 2      ; R31 := R31(R32)
1057 [-]: CALL      R27 5 1      ; R27(R28,R29,R30,R31)
1058 [-]: GETUPVAL  R27 U19      ; R27 := U19
1059 [-]: CALL      R27 1 2      ; R27 := R27()
1060 [-]: TEST      R27 0        ; if not R27 then PC := 1129
1061 [-]: JMP       1129         ; PC := 1129
1062 [-]: GETGLOBAL R27 K50      ; R27 := 0xae91e43b
1063 [-]: SELF      R27 R27 K60  ; R28 := R27; R27 := R27[0x67bc869f]
1064 [-]: LOADK     R29 K224     ; R29 := "TopMenu.Bg.CapacityBg"
1065 [-]: CONST     R30 13       ; R30 := 13.000000
1066 [-]: CONST     R31 775      ; R31 := 775.000000
1067 [-]: CALL      R27 5 1      ; R27(R28,R29,R30,R31)
1068 [-]: GETGLOBAL R27 K50      ; R27 := 0xae91e43b
1069 [-]: SELF      R27 R27 K53  ; R28 := R27; R27 := R27[0xaade900e]
1070 [-]: LOADK     R29 K225     ; R29 := "Capacity"
1071 [-]: CONST     R30 11       ; R30 := 11.000000
1072 [-]: LOADKB    R31 0 0      ; R31 := false
1073 [-]: CALL      R27 5 1      ; R27(R28,R29,R30,R31)
1074 [-]: GETGLOBAL R27 K50      ; R27 := 0xae91e43b
1075 [-]: SELF      R27 R27 K53  ; R28 := R27; R27 := R27[0xaade900e]
1076 [-]: LOADK     R29 K226     ; R29 := "CapacityLabel"
1077 [-]: CONST     R30 11       ; R30 := 11.000000
1078 [-]: LOADKB    R31 0 0      ; R31 := false
1079 [-]: CALL      R27 5 1      ; R27(R28,R29,R30,R31)
1080 [-]: GETGLOBAL R27 K50      ; R27 := 0xae91e43b
1081 [-]: SELF      R27 R27 K53  ; R28 := R27; R27 := R27[0xaade900e]
1082 [-]: LOADK     R29 K227     ; R29 := "CapacityNumber"
1083 [-]: CONST     R30 11       ; R30 := 11.000000
1084 [-]: LOADKB    R31 0 0      ; R31 := false
1085 [-]: CALL      R27 5 1      ; R27(R28,R29,R30,R31)
1086 [-]: SELF      R27 R26 K222 ; R28 := R26; R27 := R26[0xd8140b94]
1087 [-]: CALL      R27 2 2      ; R27 := R27(R28)
1088 [-]: TEST      R27 0        ; if not R27 then PC := 1207
1089 [-]: JMP       1207         ; PC := 1207
1090 [-]: GETGLOBAL R27 K92      ; R27 := 0x2d0fad09
1091 [-]: LOADK     R28 K228     ; R28 := "EE.Interface.Components.Grid"
1092 [-]: CALL      R27 2 2      ; R27 := R27(R28)
1093 [-]: GETUPVAL  R28 U2       ; R28 := U2
1094 [-]: GETTABLE  R28 R28 K229 ; R28 := R28[0xa4584919]
1095 [-]: GETGLOBAL R29 K50      ; R29 := 0xae91e43b
1096 [-]: LOADK     R30 K223     ; R30 := "AttemptInfo"
1097 [-]: GETGLOBAL R31 K230     ; R31 := 0xedb13f66
1098 [-]: GETGLOBAL R32 K231     ; R32 := 0x1d0cc0cd
1099 [-]: GETGLOBAL R33 K232     ; R33 := 0x47e6780f
1100 [-]: GETGLOBAL R34 K233     ; R34 := 0xb1cddfa7
1101 [-]: GETGLOBAL R35 K19      ; R35 := mColors
1102 [-]: MOVE      R36 R27      ; R36 := R27
1103 [-]: CONST     R37 5        ; R37 := 5.000000
1104 [-]: CALL      R28 10 2     ; R28 := R28(R29,R30,R31,R32,R33,R34,R35,R36,R37)
1105 [-]: SETUPVAL  R28 U20      ; U82 := R20
1106 [-]: GETUPVAL  R28 U20      ; R28 := U20
1107 [-]: SETTABLE  R28 K234 K235; R28["mActiveX"] := 470.000000
1108 [-]: GETUPVAL  R28 U20      ; R28 := U20
1109 [-]: SETTABLE  R28 K236 K237; R28["mActiveY"] := 650.000000
1110 [-]: GETUPVAL  R28 U20      ; R28 := U20
1111 [-]: GETGLOBAL R29 K239     ; R29 := 0x15d4314e
1112 [-]: SETTABLE  R28 K238 R29 ; R28["ImmortalMods"] := R29
1113 [-]: GETUPVAL  R28 U20      ; R28 := U20
1114 [-]: GETGLOBAL R29 K241     ; R29 := 0x50c1deb3
1115 [-]: SETTABLE  R28 K240 R29 ; R28["EmptyIcons"] := R29
1116 [-]: GETUPVAL  R28 U20      ; R28 := U20
1117 [-]: GETGLOBAL R29 K243     ; R29 := 0xb20fa149
1118 [-]: SETTABLE  R28 K242 R29 ; R28["StrikeThroughIcons"] := R29
1119 [-]: GETUPVAL  R28 U20      ; R28 := U20
1120 [-]: SELF      R28 R28 K244 ; R29 := R28; R28 := R28[0x676df9fd]
1121 [-]: MOVE      R30 R26      ; R30 := R26
1122 [-]: CALL      R28 3 1      ; R28(R29,R30)
1123 [-]: GETUPVAL  R28 U20      ; R28 := U20
1124 [-]: SELF      R28 R28 K245 ; R29 := R28; R28 := R28[0x0018b94a]
1125 [-]: MOVE      R30 R26      ; R30 := R26
1126 [-]: GETGLOBAL R31 K94      ; R31 := mTimerMgr
1127 [-]: CALL      R28 4 1      ; R28(R29,R30,R31)
1128 [-]: JMP       1207         ; PC := 1207
1129 [-]: GETUPVAL  R28 U1       ; R28 := U1
1130 [-]: GETTABLE  R28 R28 K10  ; R28 := R28[0x06d055f9]
1131 [-]: GETGLOBAL R29 K96      ; R29 := mIsDiegetic
1132 [-]: GETGLOBAL R30 K126     ; R30 := 0x0032441c
1133 [-]: GETTABLE  R30 R30 K246 ; R30 := R30["UIMaterial_Rectangle"]
1134 [-]: GETGLOBAL R31 K126     ; R31 := 0x0032441c
1135 [-]: GETTABLE  R31 R31 K247 ; R31 := R31["UIMaterial_RectangleNoDepth"]
1136 [-]: CALL      R28 4 2      ; R28 := R28(R29,R30,R31)
1137 [-]: GETGLOBAL R29 K50      ; R29 := 0xae91e43b
1138 [-]: SELF      R29 R29 K248 ; R30 := R29; R29 := R29[0xd5181643]
1139 [-]: LOADK     R31 K249     ; R31 := "Capacity.Bg"
1140 [-]: MOVE      R32 R28      ; R32 := R28
1141 [-]: CALL      R29 4 1      ; R29(R30,R31,R32)
1142 [-]: GETGLOBAL R29 K50      ; R29 := 0xae91e43b
1143 [-]: SELF      R29 R29 K248 ; R30 := R29; R29 := R29[0xd5181643]
1144 [-]: LOADK     R31 K250     ; R31 := "Capacity.Fill"
1145 [-]: MOVE      R32 R28      ; R32 := R28
1146 [-]: CALL      R29 4 1      ; R29(R30,R31,R32)
1147 [-]: GETGLOBAL R29 K50      ; R29 := 0xae91e43b
1148 [-]: SELF      R29 R29 K251 ; R30 := R29; R29 := R29[0x91e13703]
1149 [-]: LOADK     R31 K250     ; R31 := "Capacity.Fill"
1150 [-]: LOADK     R32 K252     ; R32 := "RectInnerColor"
1151 [-]: GETGLOBAL R33 K19      ; R33 := mColors
1152 [-]: GETTABLE  R33 R33 K29  ; R33 := R33["FloatingContentObject"]
1153 [-]: GETTABLE  R33 R33 K253 ; R33 := R33["r"]
1154 [-]: GETGLOBAL R34 K19      ; R34 := mColors
1155 [-]: GETTABLE  R34 R34 K29  ; R34 := R34["FloatingContentObject"]
1156 [-]: GETTABLE  R34 R34 K254 ; R34 := R34["g"]
1157 [-]: GETGLOBAL R35 K19      ; R35 := mColors
1158 [-]: GETTABLE  R35 R35 K29  ; R35 := R35["FloatingContentObject"]
1159 [-]: GETTABLE  R35 R35 K255 ; R35 := R35["b"]
1160 [-]: LOADK     R36 K256     ; R36 := 0.800000
1161 [-]: CALL      R29 8 1      ; R29(R30,R31,R32,R33,R34,R35,R36)
1162 [-]: GETGLOBAL R29 K50      ; R29 := 0xae91e43b
1163 [-]: SELF      R29 R29 K251 ; R30 := R29; R29 := R29[0x91e13703]
1164 [-]: LOADK     R31 K250     ; R31 := "Capacity.Fill"
1165 [-]: LOADK     R32 K257     ; R32 := "RectEdgeColor"
1166 [-]: GETGLOBAL R33 K19      ; R33 := mColors
1167 [-]: GETTABLE  R33 R33 K29  ; R33 := R33["FloatingContentObject"]
1168 [-]: GETTABLE  R33 R33 K253 ; R33 := R33["r"]
1169 [-]: GETGLOBAL R34 K19      ; R34 := mColors
1170 [-]: GETTABLE  R34 R34 K29  ; R34 := R34["FloatingContentObject"]
1171 [-]: GETTABLE  R34 R34 K254 ; R34 := R34["g"]
1172 [-]: GETGLOBAL R35 K19      ; R35 := mColors
1173 [-]: GETTABLE  R35 R35 K29  ; R35 := R35["FloatingContentObject"]
1174 [-]: GETTABLE  R35 R35 K255 ; R35 := R35["b"]
1175 [-]: LOADK     R36 K256     ; R36 := 0.800000
1176 [-]: CALL      R29 8 1      ; R29(R30,R31,R32,R33,R34,R35,R36)
1177 [-]: GETGLOBAL R29 K50      ; R29 := 0xae91e43b
1178 [-]: SELF      R29 R29 K251 ; R30 := R29; R29 := R29[0x91e13703]
1179 [-]: LOADK     R31 K249     ; R31 := "Capacity.Bg"
1180 [-]: LOADK     R32 K252     ; R32 := "RectInnerColor"
1181 [-]: GETGLOBAL R33 K19      ; R33 := mColors
1182 [-]: GETTABLE  R33 R33 K31  ; R33 := R33["Background1Object"]
1183 [-]: GETTABLE  R33 R33 K253 ; R33 := R33["r"]
1184 [-]: GETGLOBAL R34 K19      ; R34 := mColors
1185 [-]: GETTABLE  R34 R34 K31  ; R34 := R34["Background1Object"]
1186 [-]: GETTABLE  R34 R34 K254 ; R34 := R34["g"]
1187 [-]: GETGLOBAL R35 K19      ; R35 := mColors
1188 [-]: GETTABLE  R35 R35 K31  ; R35 := R35["Background1Object"]
1189 [-]: GETTABLE  R35 R35 K255 ; R35 := R35["b"]
1190 [-]: CONST     R36 1        ; R36 := 1.000000
1191 [-]: CALL      R29 8 1      ; R29(R30,R31,R32,R33,R34,R35,R36)
1192 [-]: GETGLOBAL R29 K50      ; R29 := 0xae91e43b
1193 [-]: SELF      R29 R29 K251 ; R30 := R29; R29 := R29[0x91e13703]
1194 [-]: LOADK     R31 K249     ; R31 := "Capacity.Bg"
1195 [-]: LOADK     R32 K257     ; R32 := "RectEdgeColor"
1196 [-]: GETGLOBAL R33 K19      ; R33 := mColors
1197 [-]: GETTABLE  R33 R33 K29  ; R33 := R33["FloatingContentObject"]
1198 [-]: GETTABLE  R33 R33 K253 ; R33 := R33["r"]
1199 [-]: GETGLOBAL R34 K19      ; R34 := mColors
1200 [-]: GETTABLE  R34 R34 K29  ; R34 := R34["FloatingContentObject"]
1201 [-]: GETTABLE  R34 R34 K254 ; R34 := R34["g"]
1202 [-]: GETGLOBAL R35 K19      ; R35 := mColors
1203 [-]: GETTABLE  R35 R35 K29  ; R35 := R35["FloatingContentObject"]
1204 [-]: GETTABLE  R35 R35 K255 ; R35 := R35["b"]
1205 [-]: LOADK     R36 K256     ; R36 := 0.800000
1206 [-]: CALL      R29 8 1      ; R29(R30,R31,R32,R33,R34,R35,R36)
1207 [-]: GETUPVAL  R29 U1       ; R29 := U1
1208 [-]: GETTABLE  R29 R29 K10  ; R29 := R29[0x06d055f9]
1209 [-]: GETGLOBAL R30 K32      ; R30 := 0x7b998233
1210 [-]: GETGLOBAL R31 K42      ; R31 := mRailjackMovie
1211 [-]: CALL      R30 2 2      ; R30 := R30(R31)
1212 [-]: NOT       R30 R30      ; R30 :=  R30
1213 [-]: CONST     R31 140      ; R31 := 140.000000
1214 [-]: CONST     R32 0        ; R32 := 0.000000
1215 [-]: CALL      R29 4 2      ; R29 := R29(R30,R31,R32)
1216 [-]: SETGLOBAL R29 K258     ; mTopMenuYOffset := R29
1217 [-]: GETGLOBAL R29 K50      ; R29 := 0xae91e43b
1218 [-]: SELF      R29 R29 K51  ; R30 := R29; R29 := R29[0x91a24e4b]
1219 [-]: LOADK     R31 K259     ; R31 := "TopMenu.Bg"
1220 [-]: CONST     R32 6        ; R32 := 6.000000
1221 [-]: CALL      R29 4 2      ; R29 := R29(R30,R31,R32)
1222 [-]: CONST     R30 100      ; R30 := 100.000000
1223 [-]: DIV       R29 R29 R30  ; R29 := R29 / R30
1224 [-]: GETGLOBAL R30 K50      ; R30 := 0xae91e43b
1225 [-]: SELF      R30 R30 K60  ; R31 := R30; R30 := R30[0x67bc869f]
1226 [-]: LOADK     R32 K260     ; R32 := "TopMenu"
1227 [-]: CONST     R33 1        ; R33 := 1.000000
1228 [-]: GETGLOBAL R34 K50      ; R34 := 0xae91e43b
1229 [-]: SELF      R34 R34 K51  ; R35 := R34; R34 := R34[0x91a24e4b]
1230 [-]: LOADK     R36 K260     ; R36 := "TopMenu"
1231 [-]: CONST     R37 1        ; R37 := 1.000000
1232 [-]: CALL      R34 4 2      ; R34 := R34(R35,R36,R37)
1233 [-]: GETGLOBAL R35 K258     ; R35 := mTopMenuYOffset
1234 [-]: ADD       R34 R34 R35  ; R34 := R34 + R35
1235 [-]: CALL      R30 5 1      ; R30(R31,R32,R33,R34)
1236 [-]: GETGLOBAL R30 K50      ; R30 := 0xae91e43b
1237 [-]: SELF      R30 R30 K60  ; R31 := R30; R30 := R30[0x67bc869f]
1238 [-]: LOADK     R32 K226     ; R32 := "CapacityLabel"
1239 [-]: CONST     R33 1        ; R33 := 1.000000
1240 [-]: GETGLOBAL R34 K50      ; R34 := 0xae91e43b
1241 [-]: SELF      R34 R34 K51  ; R35 := R34; R34 := R34[0x91a24e4b]
1242 [-]: LOADK     R36 K226     ; R36 := "CapacityLabel"
1243 [-]: CONST     R37 1        ; R37 := 1.000000
1244 [-]: CALL      R34 4 2      ; R34 := R34(R35,R36,R37)
1245 [-]: GETGLOBAL R35 K258     ; R35 := mTopMenuYOffset
1246 [-]: ADD       R34 R34 R35  ; R34 := R34 + R35
1247 [-]: CALL      R30 5 1      ; R30(R31,R32,R33,R34)
1248 [-]: GETGLOBAL R30 K50      ; R30 := 0xae91e43b
1249 [-]: SELF      R30 R30 K60  ; R31 := R30; R30 := R30[0x67bc869f]
1250 [-]: LOADK     R32 K227     ; R32 := "CapacityNumber"
1251 [-]: CONST     R33 1        ; R33 := 1.000000
1252 [-]: GETGLOBAL R34 K50      ; R34 := 0xae91e43b
1253 [-]: SELF      R34 R34 K51  ; R35 := R34; R34 := R34[0x91a24e4b]
1254 [-]: LOADK     R36 K227     ; R36 := "CapacityNumber"
1255 [-]: CONST     R37 1        ; R37 := 1.000000
1256 [-]: CALL      R34 4 2      ; R34 := R34(R35,R36,R37)
1257 [-]: GETGLOBAL R35 K258     ; R35 := mTopMenuYOffset
1258 [-]: ADD       R34 R34 R35  ; R34 := R34 + R35
1259 [-]: CALL      R30 5 1      ; R30(R31,R32,R33,R34)
1260 [-]: GETGLOBAL R30 K50      ; R30 := 0xae91e43b
1261 [-]: SELF      R30 R30 K60  ; R31 := R30; R30 := R30[0x67bc869f]
1262 [-]: LOADK     R32 K225     ; R32 := "Capacity"
1263 [-]: CONST     R33 1        ; R33 := 1.000000
1264 [-]: GETGLOBAL R34 K50      ; R34 := 0xae91e43b
1265 [-]: SELF      R34 R34 K51  ; R35 := R34; R34 := R34[0x91a24e4b]
1266 [-]: LOADK     R36 K225     ; R36 := "Capacity"
1267 [-]: CONST     R37 1        ; R37 := 1.000000
1268 [-]: CALL      R34 4 2      ; R34 := R34(R35,R36,R37)
1269 [-]: GETGLOBAL R35 K258     ; R35 := mTopMenuYOffset
1270 [-]: ADD       R34 R34 R35  ; R34 := R34 + R35
1271 [-]: CALL      R30 5 1      ; R30(R31,R32,R33,R34)
1272 [-]: GETGLOBAL R30 K50      ; R30 := 0xae91e43b
1273 [-]: SELF      R30 R30 K60  ; R31 := R30; R30 := R30[0x67bc869f]
1274 [-]: LOADK     R32 K261     ; R32 := "StatsScrollBar"
1275 [-]: CONST     R33 1        ; R33 := 1.000000
1276 [-]: GETGLOBAL R34 K50      ; R34 := 0xae91e43b
1277 [-]: SELF      R34 R34 K51  ; R35 := R34; R34 := R34[0x91a24e4b]
1278 [-]: LOADK     R36 K261     ; R36 := "StatsScrollBar"
1279 [-]: CONST     R37 1        ; R37 := 1.000000
1280 [-]: CALL      R34 4 2      ; R34 := R34(R35,R36,R37)
1281 [-]: GETGLOBAL R35 K258     ; R35 := mTopMenuYOffset
1282 [-]: ADD       R34 R34 R35  ; R34 := R34 + R35
1283 [-]: CALL      R30 5 1      ; R30(R31,R32,R33,R34)
1284 [-]: GETGLOBAL R30 K50      ; R30 := 0xae91e43b
1285 [-]: SELF      R30 R30 K60  ; R31 := R30; R30 := R30[0x67bc869f]
1286 [-]: LOADK     R32 K262     ; R32 := "TopMenu.Bg.AbilitiesBg"
1287 [-]: CONST     R33 1        ; R33 := 1.000000
1288 [-]: GETGLOBAL R34 K50      ; R34 := 0xae91e43b
1289 [-]: SELF      R34 R34 K51  ; R35 := R34; R34 := R34[0x91a24e4b]
1290 [-]: LOADK     R36 K262     ; R36 := "TopMenu.Bg.AbilitiesBg"
1291 [-]: CONST     R37 1        ; R37 := 1.000000
1292 [-]: CALL      R34 4 2      ; R34 := R34(R35,R36,R37)
1293 [-]: GETGLOBAL R35 K258     ; R35 := mTopMenuYOffset
1294 [-]: DIV       R35 R35 R29  ; R35 := R35 / R29
1295 [-]: SUB       R34 R34 R35  ; R34 := R34 - R35
1296 [-]: CALL      R30 5 1      ; R30(R31,R32,R33,R34)
1297 [-]: GETGLOBAL R30 K50      ; R30 := 0xae91e43b
1298 [-]: SELF      R30 R30 K53  ; R31 := R30; R30 := R30[0xaade900e]
1299 [-]: LOADK     R32 K263     ; R32 := "Blurer"
1300 [-]: CONST     R33 11       ; R33 := 11.000000
1301 [-]: GETGLOBAL R34 K96      ; R34 := mIsDiegetic
1302 [-]: NOT       R34 R34      ; R34 :=  R34
1303 [-]: CALL      R30 5 1      ; R30(R31,R32,R33,R34)
1304 [-]: GETGLOBAL R30 K96      ; R30 := mIsDiegetic
1305 [-]: TEST      R30 0        ; if not R30 then PC := 1312
1306 [-]: JMP       1312